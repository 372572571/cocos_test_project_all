(function() {
(function(t, e, i) {
function n(i, r) {
var s = e[i];
if (!s) {
var a = t[i];
if (!a) return;
var o = {};
s = e[i] = {
exports: o
};
a[0]((function(t) {
return n(a[1][t] || t);
}), s, o);
}
return s.exports;
}
for (var r = 0; r < i.length; r++) n(i[r]);
})({
1: [ (function(t, e, i) {
t("../core/platform/CCClass");
var n = t("../core/utils/misc");
cc.Action = cc.Class({
name: "cc.Action",
ctor: function() {
this.originalTarget = null;
this.target = null;
this.tag = cc.Action.TAG_INVALID;
},
clone: function() {
var t = new cc.Action();
t.originalTarget = null;
t.target = null;
t.tag = this.tag;
return t;
},
isDone: function() {
return !0;
},
startWithTarget: function(t) {
this.originalTarget = t;
this.target = t;
},
stop: function() {
this.target = null;
},
step: function(t) {
cc.logID(1006);
},
update: function(t) {
cc.logID(1007);
},
getTarget: function() {
return this.target;
},
setTarget: function(t) {
this.target = t;
},
getOriginalTarget: function() {
return this.originalTarget;
},
setOriginalTarget: function(t) {
this.originalTarget = t;
},
getTag: function() {
return this.tag;
},
setTag: function(t) {
this.tag = t;
},
retain: function() {},
release: function() {}
});
cc.Action.TAG_INVALID = -1;
cc.FiniteTimeAction = cc.Class({
name: "cc.FiniteTimeAction",
extends: cc.Action,
ctor: function() {
this._duration = 0;
},
getDuration: function() {
return this._duration * (this._timesForRepeat || 1);
},
setDuration: function(t) {
this._duration = t;
},
reverse: function() {
cc.logID(1008);
return null;
},
clone: function() {
return new cc.FiniteTimeAction();
}
});
cc.Speed = cc.Class({
name: "cc.Speed",
extends: cc.Action,
ctor: function(t, e) {
this._speed = 0;
this._innerAction = null;
t && this.initWithAction(t, e);
},
getSpeed: function() {
return this._speed;
},
setSpeed: function(t) {
this._speed = t;
},
initWithAction: function(t, e) {
if (!t) {
cc.errorID(1021);
return !1;
}
this._innerAction = t;
this._speed = e;
return !0;
},
clone: function() {
var t = new cc.Speed();
t.initWithAction(this._innerAction.clone(), this._speed);
return t;
},
startWithTarget: function(t) {
cc.Action.prototype.startWithTarget.call(this, t);
this._innerAction.startWithTarget(t);
},
stop: function() {
this._innerAction.stop();
cc.Action.prototype.stop.call(this);
},
step: function(t) {
this._innerAction.step(t * this._speed);
},
isDone: function() {
return this._innerAction.isDone();
},
reverse: function() {
return new cc.Speed(this._innerAction.reverse(), this._speed);
},
setInnerAction: function(t) {
this._innerAction !== t && (this._innerAction = t);
},
getInnerAction: function() {
return this._innerAction;
}
});
cc.speed = function(t, e) {
return new cc.Speed(t, e);
};
cc.Follow = cc.Class({
name: "cc.Follow",
extends: cc.Action,
ctor: function(t, e) {
this._followedNode = null;
this._boundarySet = !1;
this._boundaryFullyCovered = !1;
this._halfScreenSize = null;
this._fullScreenSize = null;
this.leftBoundary = 0;
this.rightBoundary = 0;
this.topBoundary = 0;
this.bottomBoundary = 0;
this._worldRect = cc.rect(0, 0, 0, 0);
t && (e ? this.initWithTarget(t, e) : this.initWithTarget(t));
},
clone: function() {
var t = new cc.Follow(), e = this._worldRect, i = new cc.Rect(e.x, e.y, e.width, e.height);
t.initWithTarget(this._followedNode, i);
return t;
},
isBoundarySet: function() {
return this._boundarySet;
},
setBoudarySet: function(t) {
this._boundarySet = t;
},
initWithTarget: function(t, e) {
if (!t) {
cc.errorID(1022);
return !1;
}
e = e || cc.rect(0, 0, 0, 0);
this._followedNode = t;
this._worldRect = e;
this._boundarySet = !(0 === e.width && 0 === e.height);
this._boundaryFullyCovered = !1;
var i = cc.winSize;
this._fullScreenSize = cc.v2(i.width, i.height);
this._halfScreenSize = this._fullScreenSize.mul(.5);
if (this._boundarySet) {
this.leftBoundary = -(e.x + e.width - this._fullScreenSize.x);
this.rightBoundary = -e.x;
this.topBoundary = -e.y;
this.bottomBoundary = -(e.y + e.height - this._fullScreenSize.y);
this.rightBoundary < this.leftBoundary && (this.rightBoundary = this.leftBoundary = (this.leftBoundary + this.rightBoundary) / 2);
this.topBoundary < this.bottomBoundary && (this.topBoundary = this.bottomBoundary = (this.topBoundary + this.bottomBoundary) / 2);
this.topBoundary === this.bottomBoundary && this.leftBoundary === this.rightBoundary && (this._boundaryFullyCovered = !0);
}
return !0;
},
step: function(t) {
var e = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO), i = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO), r = e.sub(i), s = this.target.parent.convertToNodeSpaceAR(r.add(this._halfScreenSize));
if (this._boundarySet) {
if (this._boundaryFullyCovered) return;
this.target.setPosition(n.clampf(s.x, this.leftBoundary, this.rightBoundary), n.clampf(s.y, this.bottomBoundary, this.topBoundary));
} else this.target.setPosition(s.x, s.y);
},
isDone: function() {
return !this._followedNode.activeInHierarchy;
},
stop: function() {
this.target = null;
cc.Action.prototype.stop.call(this);
}
});
cc.follow = function(t, e) {
return new cc.Follow(t, e);
};
}), {
"../core/platform/CCClass": 134,
"../core/utils/misc": 216
} ],
2: [ (function(t, e, i) {
function n(t, e, i, n, r, s) {
var a = s * s, o = a * s, c = (1 - r) / 2, h = c * (2 * a - o - s), l = c * (-o + a) + (2 * o - 3 * a + 1), u = c * (o - 2 * a + s) + (-2 * o + 3 * a), f = c * (o - a), _ = t.x * h + e.x * l + i.x * u + n.x * f, d = t.y * h + e.y * l + i.y * u + n.y * f;
return cc.v2(_, d);
}
function r(t, e) {
return t[Math.min(t.length - 1, Math.max(e, 0))];
}
function s(t) {
for (var e = [], i = t.length - 1; i >= 0; i--) e.push(cc.v2(t[i].x, t[i].y));
return e;
}
function a(t) {
for (var e = [], i = 0; i < t.length; i++) e.push(cc.v2(t[i].x, t[i].y));
return e;
}
cc.CardinalSplineTo = cc.Class({
name: "cc.CardinalSplineTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._points = [];
this._deltaT = 0;
this._tension = 0;
this._previousPosition = null;
this._accumulatedDiff = null;
void 0 !== i && cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
if (!e || 0 === e.length) {
cc.errorID(1024);
return !1;
}
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this.setPoints(e);
this._tension = i;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.CardinalSplineTo();
t.initWithDuration(this._duration, a(this._points), this._tension);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._deltaT = 1 / (this._points.length - 1);
this._previousPosition = cc.v2(this.target.x, this.target.y);
this._accumulatedDiff = cc.v2(0, 0);
},
update: function(t) {
t = this._computeEaseTime(t);
var e, i, s = this._points;
if (1 === t) {
e = s.length - 1;
i = 1;
} else {
var a = this._deltaT;
i = (t - a * (e = 0 | t / a)) / a;
}
var o = n(r(s, e - 1), r(s, e - 0), r(s, e + 1), r(s, e + 2), this._tension, i);
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var c, h;
c = this.target.x - this._previousPosition.x;
h = this.target.y - this._previousPosition.y;
if (0 !== c || 0 !== h) {
var l = this._accumulatedDiff;
c = l.x + c;
h = l.y + h;
l.x = c;
l.y = h;
o.x += c;
o.y += h;
}
}
this.updatePosition(o);
},
reverse: function() {
var t = s(this._points);
return cc.cardinalSplineTo(this._duration, t, this._tension);
},
updatePosition: function(t) {
this.target.setPosition(t);
this._previousPosition = t;
},
getPoints: function() {
return this._points;
},
setPoints: function(t) {
this._points = t;
}
});
cc.cardinalSplineTo = function(t, e, i) {
return new cc.CardinalSplineTo(t, e, i);
};
cc.CardinalSplineBy = cc.Class({
name: "cc.CardinalSplineBy",
extends: cc.CardinalSplineTo,
ctor: function(t, e, i) {
this._startPosition = cc.v2(0, 0);
void 0 !== i && this.initWithDuration(t, e, i);
},
startWithTarget: function(t) {
cc.CardinalSplineTo.prototype.startWithTarget.call(this, t);
this._startPosition.x = t.x;
this._startPosition.y = t.y;
},
reverse: function() {
for (var t, e = this._points.slice(), i = e[0], n = 1; n < e.length; ++n) {
t = e[n];
e[n] = t.sub(i);
i = t;
}
var r = s(e);
i = r[r.length - 1];
r.pop();
i.x = -i.x;
i.y = -i.y;
r.unshift(i);
for (n = 1; n < r.length; ++n) {
(t = r[n]).x = -t.x;
t.y = -t.y;
t.x += i.x;
t.y += i.y;
r[n] = t;
i = t;
}
return cc.cardinalSplineBy(this._duration, r, this._tension);
},
updatePosition: function(t) {
var e = this._startPosition, i = t.x + e.x, n = t.y + e.y;
this._previousPosition.x = i;
this._previousPosition.y = n;
this.target.setPosition(i, n);
},
clone: function() {
var t = new cc.CardinalSplineBy();
t.initWithDuration(this._duration, a(this._points), this._tension);
return t;
}
});
cc.cardinalSplineBy = function(t, e, i) {
return new cc.CardinalSplineBy(t, e, i);
};
cc.CatmullRomTo = cc.Class({
name: "cc.CatmullRomTo",
extends: cc.CardinalSplineTo,
ctor: function(t, e) {
e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
return cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, .5);
},
clone: function() {
var t = new cc.CatmullRomTo();
t.initWithDuration(this._duration, a(this._points));
return t;
}
});
cc.catmullRomTo = function(t, e) {
return new cc.CatmullRomTo(t, e);
};
cc.CatmullRomBy = cc.Class({
name: "cc.CatmullRomBy",
extends: cc.CardinalSplineBy,
ctor: function(t, e) {
e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
return cc.CardinalSplineTo.prototype.initWithDuration.call(this, t, e, .5);
},
clone: function() {
var t = new cc.CatmullRomBy();
t.initWithDuration(this._duration, a(this._points));
return t;
}
});
cc.catmullRomBy = function(t, e) {
return new cc.CatmullRomBy(t, e);
};
}), {} ],
3: [ (function(t, e, i) {
cc.easeIn = function(t) {
return {
_rate: t,
easing: function(t) {
return Math.pow(t, this._rate);
},
reverse: function() {
return cc.easeIn(1 / this._rate);
}
};
};
cc.easeOut = function(t) {
return {
_rate: t,
easing: function(t) {
return Math.pow(t, 1 / this._rate);
},
reverse: function() {
return cc.easeOut(1 / this._rate);
}
};
};
cc.easeInOut = function(t) {
return {
_rate: t,
easing: function(t) {
return (t *= 2) < 1 ? .5 * Math.pow(t, this._rate) : 1 - .5 * Math.pow(2 - t, this._rate);
},
reverse: function() {
return cc.easeInOut(this._rate);
}
};
};
var n = {
easing: function(t) {
return 0 === t ? 0 : Math.pow(2, 10 * (t - 1));
},
reverse: function() {
return r;
}
};
cc.easeExponentialIn = function() {
return n;
};
var r = {
easing: function(t) {
return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
},
reverse: function() {
return n;
}
};
cc.easeExponentialOut = function() {
return r;
};
var s = {
easing: function(t) {
return 1 !== t && 0 !== t ? (t *= 2) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * (t - 1))) : t;
},
reverse: function() {
return s;
}
};
cc.easeExponentialInOut = function() {
return s;
};
var a = {
easing: function(t) {
return 0 === t || 1 === t ? t : -1 * Math.cos(t * Math.PI / 2) + 1;
},
reverse: function() {
return o;
}
};
cc.easeSineIn = function() {
return a;
};
var o = {
easing: function(t) {
return 0 === t || 1 === t ? t : Math.sin(t * Math.PI / 2);
},
reverse: function() {
return a;
}
};
cc.easeSineOut = function() {
return o;
};
var c = {
easing: function(t) {
return 0 === t || 1 === t ? t : -.5 * (Math.cos(Math.PI * t) - 1);
},
reverse: function() {
return c;
}
};
cc.easeSineInOut = function() {
return c;
};
var h = {
easing: function(t) {
if (0 === t || 1 === t) return t;
t -= 1;
return -Math.pow(2, 10 * t) * Math.sin((t - .075) * Math.PI * 2 / .3);
},
reverse: function() {
return l;
}
};
cc.easeElasticIn = function(t) {
return t && .3 !== t ? {
_period: t,
easing: function(t) {
if (0 === t || 1 === t) return t;
t -= 1;
return -Math.pow(2, 10 * t) * Math.sin((t - this._period / 4) * Math.PI * 2 / this._period);
},
reverse: function() {
return cc.easeElasticOut(this._period);
}
} : h;
};
var l = {
easing: function(t) {
return 0 === t || 1 === t ? t : Math.pow(2, -10 * t) * Math.sin((t - .075) * Math.PI * 2 / .3) + 1;
},
reverse: function() {
return h;
}
};
cc.easeElasticOut = function(t) {
return t && .3 !== t ? {
_period: t,
easing: function(t) {
return 0 === t || 1 === t ? t : Math.pow(2, -10 * t) * Math.sin((t - this._period / 4) * Math.PI * 2 / this._period) + 1;
},
reverse: function() {
return cc.easeElasticIn(this._period);
}
} : l;
};
cc.easeElasticInOut = function(t) {
return {
_period: t = t || .3,
easing: function(t) {
var e = 0, i = this._period;
if (0 === t || 1 === t) e = t; else {
t *= 2;
i || (i = this._period = .3 * 1.5);
var n = i / 4;
e = (t -= 1) < 0 ? -.5 * Math.pow(2, 10 * t) * Math.sin((t - n) * Math.PI * 2 / i) : Math.pow(2, -10 * t) * Math.sin((t - n) * Math.PI * 2 / i) * .5 + 1;
}
return e;
},
reverse: function() {
return cc.easeElasticInOut(this._period);
}
};
};
function u(t) {
return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
}
var f = {
easing: function(t) {
return 1 - u(1 - t);
},
reverse: function() {
return _;
}
};
cc.easeBounceIn = function() {
return f;
};
var _ = {
easing: function(t) {
return u(t);
},
reverse: function() {
return f;
}
};
cc.easeBounceOut = function() {
return _;
};
var d = {
easing: function(t) {
return t < .5 ? .5 * (1 - u(1 - (t *= 2))) : .5 * u(2 * t - 1) + .5;
},
reverse: function() {
return d;
}
};
cc.easeBounceInOut = function() {
return d;
};
var p = {
easing: function(t) {
return 0 === t || 1 === t ? t : t * t * (2.70158 * t - 1.70158);
},
reverse: function() {
return m;
}
};
cc.easeBackIn = function() {
return p;
};
var m = {
easing: function(t) {
return (t -= 1) * t * (2.70158 * t + 1.70158) + 1;
},
reverse: function() {
return p;
}
};
cc.easeBackOut = function() {
return m;
};
var g = {
easing: function(t) {
return (t *= 2) < 1 ? t * t * (3.5949095 * t - 2.5949095) / 2 : (t -= 2) * t * (3.5949095 * t + 2.5949095) / 2 + 1;
},
reverse: function() {
return g;
}
};
cc.easeBackInOut = function() {
return g;
};
cc.easeBezierAction = function(t, e, i, n) {
return {
easing: function(r) {
return Math.pow(1 - r, 3) * t + 3 * r * Math.pow(1 - r, 2) * e + 3 * Math.pow(r, 2) * (1 - r) * i + Math.pow(r, 3) * n;
},
reverse: function() {
return cc.easeBezierAction(n, i, e, t);
}
};
};
var v = {
easing: function(t) {
return Math.pow(t, 2);
},
reverse: function() {
return v;
}
};
cc.easeQuadraticActionIn = function() {
return v;
};
var y = {
easing: function(t) {
return -t * (t - 2);
},
reverse: function() {
return y;
}
};
cc.easeQuadraticActionOut = function() {
return y;
};
var T = {
easing: function(t) {
return (t *= 2) < 1 ? t * t * .5 : -.5 * (--t * (t - 2) - 1);
},
reverse: function() {
return T;
}
};
cc.easeQuadraticActionInOut = function() {
return T;
};
var x = {
easing: function(t) {
return t * t * t * t;
},
reverse: function() {
return x;
}
};
cc.easeQuarticActionIn = function() {
return x;
};
var E = {
easing: function(t) {
return -((t -= 1) * t * t * t - 1);
},
reverse: function() {
return E;
}
};
cc.easeQuarticActionOut = function() {
return E;
};
var C = {
easing: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
},
reverse: function() {
return C;
}
};
cc.easeQuarticActionInOut = function() {
return C;
};
var A = {
easing: function(t) {
return t * t * t * t * t;
},
reverse: function() {
return A;
}
};
cc.easeQuinticActionIn = function() {
return A;
};
var b = {
easing: function(t) {
return (t -= 1) * t * t * t * t + 1;
},
reverse: function() {
return b;
}
};
cc.easeQuinticActionOut = function() {
return b;
};
var S = {
easing: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
},
reverse: function() {
return S;
}
};
cc.easeQuinticActionInOut = function() {
return S;
};
var w = {
easing: function(t) {
return -1 * (Math.sqrt(1 - t * t) - 1);
},
reverse: function() {
return w;
}
};
cc.easeCircleActionIn = function() {
return w;
};
var D = {
easing: function(t) {
t -= 1;
return Math.sqrt(1 - t * t);
},
reverse: function() {
return D;
}
};
cc.easeCircleActionOut = function() {
return D;
};
var I = {
easing: function(t) {
if ((t *= 2) < 1) return -.5 * (Math.sqrt(1 - t * t) - 1);
t -= 2;
return .5 * (Math.sqrt(1 - t * t) + 1);
},
reverse: function() {
return I;
}
};
cc.easeCircleActionInOut = function() {
return I;
};
var R = {
easing: function(t) {
return t * t * t;
},
reverse: function() {
return R;
}
};
cc.easeCubicActionIn = function() {
return R;
};
var M = {
easing: function(t) {
return (t -= 1) * t * t + 1;
},
reverse: function() {
return M;
}
};
cc.easeCubicActionOut = function() {
return M;
};
var L = {
easing: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
},
reverse: function() {
return L;
}
};
cc.easeCubicActionInOut = function() {
return L;
};
}), {} ],
4: [ (function(t, e, i) {
cc.ActionInstant = cc.Class({
name: "cc.ActionInstant",
extends: cc.FiniteTimeAction,
isDone: function() {
return !0;
},
step: function(t) {
this.update(1);
},
update: function(t) {},
reverse: function() {
return this.clone();
},
clone: function() {
return new cc.ActionInstant();
}
});
cc.Show = cc.Class({
name: "cc.Show",
extends: cc.ActionInstant,
update: function(t) {
for (var e = this.target.getComponentsInChildren(cc.RenderComponent), i = 0; i < e.length; ++i) {
e[i].enabled = !0;
}
},
reverse: function() {
return new cc.Hide();
},
clone: function() {
return new cc.Show();
}
});
cc.show = function() {
return new cc.Show();
};
cc.Hide = cc.Class({
name: "cc.Hide",
extends: cc.ActionInstant,
update: function(t) {
for (var e = this.target.getComponentsInChildren(cc.RenderComponent), i = 0; i < e.length; ++i) {
e[i].enabled = !1;
}
},
reverse: function() {
return new cc.Show();
},
clone: function() {
return new cc.Hide();
}
});
cc.hide = function() {
return new cc.Hide();
};
cc.ToggleVisibility = cc.Class({
name: "cc.ToggleVisibility",
extends: cc.ActionInstant,
update: function(t) {
for (var e = this.target.getComponentsInChildren(cc.RenderComponent), i = 0; i < e.length; ++i) {
var n = e[i];
n.enabled = !n.enabled;
}
},
reverse: function() {
return new cc.ToggleVisibility();
},
clone: function() {
return new cc.ToggleVisibility();
}
});
cc.toggleVisibility = function() {
return new cc.ToggleVisibility();
};
cc.RemoveSelf = cc.Class({
name: "cc.RemoveSelf",
extends: cc.ActionInstant,
ctor: function(t) {
this._isNeedCleanUp = !0;
void 0 !== t && this.init(t);
},
update: function(t) {
this.target.removeFromParent(this._isNeedCleanUp);
},
init: function(t) {
this._isNeedCleanUp = t;
return !0;
},
reverse: function() {
return new cc.RemoveSelf(this._isNeedCleanUp);
},
clone: function() {
return new cc.RemoveSelf(this._isNeedCleanUp);
}
});
cc.removeSelf = function(t) {
return new cc.RemoveSelf(t);
};
cc.FlipX = cc.Class({
name: "cc.FlipX",
extends: cc.ActionInstant,
ctor: function(t) {
this._flippedX = !1;
void 0 !== t && this.initWithFlipX(t);
},
initWithFlipX: function(t) {
this._flippedX = t;
return !0;
},
update: function(t) {
this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1);
},
reverse: function() {
return new cc.FlipX(!this._flippedX);
},
clone: function() {
var t = new cc.FlipX();
t.initWithFlipX(this._flippedX);
return t;
}
});
cc.flipX = function(t) {
return new cc.FlipX(t);
};
cc.FlipY = cc.Class({
name: "cc.FlipY",
extends: cc.ActionInstant,
ctor: function(t) {
this._flippedY = !1;
void 0 !== t && this.initWithFlipY(t);
},
initWithFlipY: function(t) {
this._flippedY = t;
return !0;
},
update: function(t) {
this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1);
},
reverse: function() {
return new cc.FlipY(!this._flippedY);
},
clone: function() {
var t = new cc.FlipY();
t.initWithFlipY(this._flippedY);
return t;
}
});
cc.flipY = function(t) {
return new cc.FlipY(t);
};
cc.Place = cc.Class({
name: "cc.Place",
extends: cc.ActionInstant,
ctor: function(t, e) {
this._x = 0;
this._y = 0;
if (void 0 !== t) {
if (void 0 !== t.x) {
e = t.y;
t = t.x;
}
this.initWithPosition(t, e);
}
},
initWithPosition: function(t, e) {
this._x = t;
this._y = e;
return !0;
},
update: function(t) {
this.target.setPosition(this._x, this._y);
},
clone: function() {
var t = new cc.Place();
t.initWithPosition(this._x, this._y);
return t;
}
});
cc.place = function(t, e) {
return new cc.Place(t, e);
};
cc.CallFunc = cc.Class({
name: "cc.CallFunc",
extends: cc.ActionInstant,
ctor: function(t, e, i) {
this._selectorTarget = null;
this._function = null;
this._data = null;
this.initWithFunction(t, e, i);
},
initWithFunction: function(t, e, i) {
t && (this._function = t);
e && (this._selectorTarget = e);
void 0 !== i && (this._data = i);
return !0;
},
execute: function() {
this._function && this._function.call(this._selectorTarget, this.target, this._data);
},
update: function(t) {
this.execute();
},
getTargetCallback: function() {
return this._selectorTarget;
},
setTargetCallback: function(t) {
if (t !== this._selectorTarget) {
this._selectorTarget && (this._selectorTarget = null);
this._selectorTarget = t;
}
},
clone: function() {
var t = new cc.CallFunc();
t.initWithFunction(this._function, this._selectorTarget, this._data);
return t;
}
});
cc.callFunc = function(t, e, i) {
return new cc.CallFunc(t, e, i);
};
}), {} ],
5: [ (function(t, e, i) {
cc.ActionInterval = cc.Class({
name: "cc.ActionInterval",
extends: cc.FiniteTimeAction,
ctor: function(t) {
this.MAX_VALUE = 2;
this._elapsed = 0;
this._firstTick = !1;
this._easeList = null;
this._speed = 1;
this._timesForRepeat = 1;
this._repeatForever = !1;
this._repeatMethod = !1;
this._speedMethod = !1;
void 0 !== t && cc.ActionInterval.prototype.initWithDuration.call(this, t);
},
getElapsed: function() {
return this._elapsed;
},
initWithDuration: function(t) {
this._duration = 0 === t ? cc.macro.FLT_EPSILON : t;
this._elapsed = 0;
this._firstTick = !0;
return !0;
},
isDone: function() {
return this._elapsed >= this._duration;
},
_cloneDecoration: function(t) {
t._repeatForever = this._repeatForever;
t._speed = this._speed;
t._timesForRepeat = this._timesForRepeat;
t._easeList = this._easeList;
t._speedMethod = this._speedMethod;
t._repeatMethod = this._repeatMethod;
},
_reverseEaseList: function(t) {
if (this._easeList) {
t._easeList = [];
for (var e = 0; e < this._easeList.length; e++) t._easeList.push(this._easeList[e].reverse());
}
},
clone: function() {
var t = new cc.ActionInterval(this._duration);
this._cloneDecoration(t);
return t;
},
easing: function(t) {
this._easeList ? this._easeList.length = 0 : this._easeList = [];
for (var e = 0; e < arguments.length; e++) this._easeList.push(arguments[e]);
return this;
},
_computeEaseTime: function(t) {
var e = this._easeList;
if (!e || 0 === e.length) return t;
for (var i = 0, n = e.length; i < n; i++) t = e[i].easing(t);
return t;
},
step: function(t) {
if (this._firstTick) {
this._firstTick = !1;
this._elapsed = 0;
} else this._elapsed += t;
var e = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
e = 1 > e ? e : 1;
this.update(e > 0 ? e : 0);
if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
this._repeatForever || this._timesForRepeat--;
this.startWithTarget(this.target);
this.step(this._elapsed - this._duration);
}
},
startWithTarget: function(t) {
cc.Action.prototype.startWithTarget.call(this, t);
this._elapsed = 0;
this._firstTick = !0;
},
reverse: function() {
cc.logID(1010);
return null;
},
setAmplitudeRate: function(t) {
cc.logID(1011);
},
getAmplitudeRate: function() {
cc.logID(1012);
return 0;
},
speed: function(t) {
if (t <= 0) {
cc.logID(1013);
return this;
}
this._speedMethod = !0;
this._speed *= t;
return this;
},
getSpeed: function() {
return this._speed;
},
setSpeed: function(t) {
this._speed = t;
return this;
},
repeat: function(t) {
t = Math.round(t);
if (isNaN(t) || t < 1) {
cc.logID(1014);
return this;
}
this._repeatMethod = !0;
this._timesForRepeat *= t;
return this;
},
repeatForever: function() {
this._repeatMethod = !0;
this._timesForRepeat = this.MAX_VALUE;
this._repeatForever = !0;
return this;
}
});
cc.actionInterval = function(t) {
return new cc.ActionInterval(t);
};
cc.Sequence = cc.Class({
name: "cc.Sequence",
extends: cc.ActionInterval,
ctor: function(t) {
this._actions = [];
this._split = null;
this._last = 0;
this._reversed = !1;
var e = t instanceof Array ? t : arguments;
if (1 !== e.length) {
var i = e.length - 1;
i >= 0 && null == e[i] && cc.logID(1015);
if (i >= 0) {
for (var n, r = e[0], s = 1; s < i; s++) if (e[s]) {
n = r;
r = cc.Sequence._actionOneTwo(n, e[s]);
}
this.initWithTwoActions(r, e[i]);
}
} else cc.errorID(1019);
},
initWithTwoActions: function(t, e) {
if (!t || !e) {
cc.errorID(1025);
return !1;
}
var i = t._duration, n = e._duration, r = (i *= t._repeatMethod ? t._timesForRepeat : 1) + (n *= e._repeatMethod ? e._timesForRepeat : 1);
this.initWithDuration(r);
this._actions[0] = t;
this._actions[1] = e;
return !0;
},
clone: function() {
var t = new cc.Sequence();
this._cloneDecoration(t);
t.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._split = this._actions[0]._duration / this._duration;
this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
this._last = -1;
},
stop: function() {
-1 !== this._last && this._actions[this._last].stop();
cc.Action.prototype.stop.call(this);
},
update: function(t) {
var e, i, n = 0, r = this._split, s = this._actions, a = this._last;
if ((t = this._computeEaseTime(t)) < r) {
e = 0 !== r ? t / r : 1;
if (0 === n && 1 === a && this._reversed) {
s[1].update(0);
s[1].stop();
}
} else {
n = 1;
e = 1 === r ? 1 : (t - r) / (1 - r);
if (-1 === a) {
s[0].startWithTarget(this.target);
s[0].update(1);
s[0].stop();
}
if (0 === a) {
s[0].update(1);
s[0].stop();
}
}
i = s[n];
if (a !== n || !i.isDone()) {
a !== n && i.startWithTarget(this.target);
e *= i._timesForRepeat;
i.update(e > 1 ? e % 1 : e);
this._last = n;
}
},
reverse: function() {
var t = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
this._cloneDecoration(t);
this._reverseEaseList(t);
t._reversed = !0;
return t;
}
});
cc.sequence = function(t) {
var e = t instanceof Array ? t : arguments;
if (1 === e.length) {
cc.errorID(1019);
return null;
}
var i = e.length - 1;
i >= 0 && null == e[i] && cc.logID(1015);
var n = null;
if (i >= 0) {
n = e[0];
for (var r = 1; r <= i; r++) e[r] && (n = cc.Sequence._actionOneTwo(n, e[r]));
}
return n;
};
cc.Sequence._actionOneTwo = function(t, e) {
var i = new cc.Sequence();
i.initWithTwoActions(t, e);
return i;
};
cc.Repeat = cc.Class({
name: "cc.Repeat",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._times = 0;
this._total = 0;
this._nextDt = 0;
this._actionInstant = !1;
this._innerAction = null;
void 0 !== e && this.initWithAction(t, e);
},
initWithAction: function(t, e) {
var i = t._duration * e;
if (this.initWithDuration(i)) {
this._times = e;
this._innerAction = t;
if (t instanceof cc.ActionInstant) {
this._actionInstant = !0;
this._times -= 1;
}
this._total = 0;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.Repeat();
this._cloneDecoration(t);
t.initWithAction(this._innerAction.clone(), this._times);
return t;
},
startWithTarget: function(t) {
this._total = 0;
this._nextDt = this._innerAction._duration / this._duration;
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._innerAction.startWithTarget(t);
},
stop: function() {
this._innerAction.stop();
cc.Action.prototype.stop.call(this);
},
update: function(t) {
t = this._computeEaseTime(t);
var e = this._innerAction, i = this._duration, n = this._times, r = this._nextDt;
if (t >= r) {
for (;t > r && this._total < n; ) {
e.update(1);
this._total++;
e.stop();
e.startWithTarget(this.target);
r += e._duration / i;
this._nextDt = r > 1 ? 1 : r;
}
if (t >= 1 && this._total < n) {
e.update(1);
this._total++;
}
this._actionInstant || (this._total === n ? e.stop() : e.update(t - (r - e._duration / i)));
} else e.update(t * n % 1);
},
isDone: function() {
return this._total === this._times;
},
reverse: function() {
var t = new cc.Repeat(this._innerAction.reverse(), this._times);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
setInnerAction: function(t) {
this._innerAction !== t && (this._innerAction = t);
},
getInnerAction: function() {
return this._innerAction;
}
});
cc.repeat = function(t, e) {
return new cc.Repeat(t, e);
};
cc.RepeatForever = cc.Class({
name: "cc.RepeatForever",
extends: cc.ActionInterval,
ctor: function(t) {
this._innerAction = null;
t && this.initWithAction(t);
},
initWithAction: function(t) {
if (!t) {
cc.errorID(1026);
return !1;
}
this._innerAction = t;
return !0;
},
clone: function() {
var t = new cc.RepeatForever();
this._cloneDecoration(t);
t.initWithAction(this._innerAction.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._innerAction.startWithTarget(t);
},
step: function(t) {
var e = this._innerAction;
e.step(t);
if (e.isDone()) {
e.startWithTarget(this.target);
e.step(e.getElapsed() - e._duration);
}
},
isDone: function() {
return !1;
},
reverse: function() {
var t = new cc.RepeatForever(this._innerAction.reverse());
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
setInnerAction: function(t) {
this._innerAction !== t && (this._innerAction = t);
},
getInnerAction: function() {
return this._innerAction;
}
});
cc.repeatForever = function(t) {
return new cc.RepeatForever(t);
};
cc.Spawn = cc.Class({
name: "cc.Spawn",
extends: cc.ActionInterval,
ctor: function(t) {
this._one = null;
this._two = null;
var e = t instanceof Array ? t : arguments;
if (1 !== e.length) {
var i = e.length - 1;
i >= 0 && null == e[i] && cc.logID(1015);
if (i >= 0) {
for (var n, r = e[0], s = 1; s < i; s++) if (e[s]) {
n = r;
r = cc.Spawn._actionOneTwo(n, e[s]);
}
this.initWithTwoActions(r, e[i]);
}
} else cc.errorID(1020);
},
initWithTwoActions: function(t, e) {
if (!t || !e) {
cc.errorID(1027);
return !1;
}
var i = !1, n = t._duration, r = e._duration;
if (this.initWithDuration(Math.max(n, r))) {
this._one = t;
this._two = e;
n > r ? this._two = cc.Sequence._actionOneTwo(e, cc.delayTime(n - r)) : n < r && (this._one = cc.Sequence._actionOneTwo(t, cc.delayTime(r - n)));
i = !0;
}
return i;
},
clone: function() {
var t = new cc.Spawn();
this._cloneDecoration(t);
t.initWithTwoActions(this._one.clone(), this._two.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._one.startWithTarget(t);
this._two.startWithTarget(t);
},
stop: function() {
this._one.stop();
this._two.stop();
cc.Action.prototype.stop.call(this);
},
update: function(t) {
t = this._computeEaseTime(t);
this._one && this._one.update(t);
this._two && this._two.update(t);
},
reverse: function() {
var t = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.spawn = function(t) {
var e = t instanceof Array ? t : arguments;
if (1 === e.length) {
cc.errorID(1020);
return null;
}
e.length > 0 && null == e[e.length - 1] && cc.logID(1015);
for (var i = e[0], n = 1; n < e.length; n++) null != e[n] && (i = cc.Spawn._actionOneTwo(i, e[n]));
return i;
};
cc.Spawn._actionOneTwo = function(t, e) {
var i = new cc.Spawn();
i.initWithTwoActions(t, e);
return i;
};
cc.RotateTo = cc.Class({
name: "cc.RotateTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._dstAngleX = 0;
this._startAngleX = 0;
this._diffAngleX = 0;
this._dstAngleY = 0;
this._startAngleY = 0;
this._diffAngleY = 0;
void 0 !== e && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._dstAngleX = e || 0;
this._dstAngleY = void 0 !== i ? i : this._dstAngleX;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.RotateTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._dstAngleX, this._dstAngleY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.rotationX % 360, i = this._dstAngleX - e;
i > 180 && (i -= 360);
i < -180 && (i += 360);
this._startAngleX = e;
this._diffAngleX = i;
this._startAngleY = t.rotationY % 360;
var n = this._dstAngleY - this._startAngleY;
n > 180 && (n -= 360);
n < -180 && (n += 360);
this._diffAngleY = n;
},
reverse: function() {
cc.logID(1016);
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
this.target.rotationX = this._startAngleX + this._diffAngleX * t;
this.target.rotationY = this._startAngleY + this._diffAngleY * t;
}
}
});
cc.rotateTo = function(t, e, i) {
return new cc.RotateTo(t, e, i);
};
cc.RotateBy = cc.Class({
name: "cc.RotateBy",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._angleX = 0;
this._startAngleX = 0;
this._angleY = 0;
this._startAngleY = 0;
void 0 !== e && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._angleX = e || 0;
this._angleY = void 0 !== i ? i : this._angleX;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.RotateBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._angleX, this._angleY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._startAngleX = t.rotationX;
this._startAngleY = t.rotationY;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
this.target.rotationX = this._startAngleX + this._angleX * t;
this.target.rotationY = this._startAngleY + this._angleY * t;
}
},
reverse: function() {
var t = new cc.RotateBy(this._duration, -this._angleX, -this._angleY);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.rotateBy = function(t, e, i) {
return new cc.RotateBy(t, e, i);
};
cc.MoveBy = cc.Class({
name: "cc.MoveBy",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._positionDelta = cc.v2(0, 0);
this._startPosition = cc.v2(0, 0);
this._previousPosition = cc.v2(0, 0);
void 0 !== e && cc.MoveBy.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
if (void 0 !== e.x) {
i = e.y;
e = e.x;
}
this._positionDelta.x = e;
this._positionDelta.y = i;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.MoveBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._positionDelta);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.x, i = t.y;
this._previousPosition.x = e;
this._previousPosition.y = i;
this._startPosition.x = e;
this._startPosition.y = i;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
var e = this._positionDelta.x * t, i = this._positionDelta.y * t, n = this._startPosition;
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var r = this.target.x, s = this.target.y, a = this._previousPosition;
n.x = n.x + r - a.x;
n.y = n.y + s - a.y;
e += n.x;
i += n.y;
a.x = e;
a.y = i;
this.target.setPosition(e, i);
} else this.target.setPosition(n.x + e, n.y + i);
}
},
reverse: function() {
var t = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.moveBy = function(t, e, i) {
return new cc.MoveBy(t, e, i);
};
cc.MoveTo = cc.Class({
name: "cc.MoveTo",
extends: cc.MoveBy,
ctor: function(t, e, i) {
this._endPosition = cc.v2(0, 0);
void 0 !== e && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.MoveBy.prototype.initWithDuration.call(this, t, e, i)) {
if (void 0 !== e.x) {
i = e.y;
e = e.x;
}
this._endPosition.x = e;
this._endPosition.y = i;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.MoveTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endPosition);
return t;
},
startWithTarget: function(t) {
cc.MoveBy.prototype.startWithTarget.call(this, t);
this._positionDelta.x = this._endPosition.x - t.x;
this._positionDelta.y = this._endPosition.y - t.y;
}
});
cc.moveTo = function(t, e, i) {
return new cc.MoveTo(t, e, i);
};
cc.SkewTo = cc.Class({
name: "cc.SkewTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._skewX = 0;
this._skewY = 0;
this._startSkewX = 0;
this._startSkewY = 0;
this._endSkewX = 0;
this._endSkewY = 0;
this._deltaX = 0;
this._deltaY = 0;
void 0 !== i && cc.SkewTo.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
var n = !1;
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._endSkewX = e;
this._endSkewY = i;
n = !0;
}
return n;
},
clone: function() {
var t = new cc.SkewTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._startSkewX = t.skewX % 180;
this._deltaX = this._endSkewX - this._startSkewX;
this._deltaX > 180 && (this._deltaX -= 360);
this._deltaX < -180 && (this._deltaX += 360);
this._startSkewY = t.skewY % 360;
this._deltaY = this._endSkewY - this._startSkewY;
this._deltaY > 180 && (this._deltaY -= 360);
this._deltaY < -180 && (this._deltaY += 360);
},
update: function(t) {
t = this._computeEaseTime(t);
this.target.skewX = this._startSkewX + this._deltaX * t;
this.target.skewY = this._startSkewY + this._deltaY * t;
}
});
cc.skewTo = function(t, e, i) {
return new cc.SkewTo(t, e, i);
};
cc.SkewBy = cc.Class({
name: "cc.SkewBy",
extends: cc.SkewTo,
ctor: function(t, e, i) {
void 0 !== i && this.initWithDuration(t, e, i);
},
initWithDuration: function(t, e, i) {
var n = !1;
if (cc.SkewTo.prototype.initWithDuration.call(this, t, e, i)) {
this._skewX = e;
this._skewY = i;
n = !0;
}
return n;
},
clone: function() {
var t = new cc.SkewBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._skewX, this._skewY);
return t;
},
startWithTarget: function(t) {
cc.SkewTo.prototype.startWithTarget.call(this, t);
this._deltaX = this._skewX;
this._deltaY = this._skewY;
this._endSkewX = this._startSkewX + this._deltaX;
this._endSkewY = this._startSkewY + this._deltaY;
},
reverse: function() {
var t = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.skewBy = function(t, e, i) {
return new cc.SkewBy(t, e, i);
};
cc.JumpBy = cc.Class({
name: "cc.JumpBy",
extends: cc.ActionInterval,
ctor: function(t, e, i, n, r) {
this._startPosition = cc.v2(0, 0);
this._previousPosition = cc.v2(0, 0);
this._delta = cc.v2(0, 0);
this._height = 0;
this._jumps = 0;
void 0 !== n && cc.JumpBy.prototype.initWithDuration.call(this, t, e, i, n, r);
},
initWithDuration: function(t, e, i, n, r) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
if (void 0 === r) {
r = n;
n = i;
i = e.y;
e = e.x;
}
this._delta.x = e;
this._delta.y = i;
this._height = n;
this._jumps = r;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.JumpBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._delta, this._height, this._jumps);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.x, i = t.y;
this._previousPosition.x = e;
this._previousPosition.y = i;
this._startPosition.x = e;
this._startPosition.y = i;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
var e = t * this._jumps % 1, i = 4 * this._height * e * (1 - e);
i += this._delta.y * t;
var n = this._delta.x * t, r = this._startPosition;
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var s = this.target.x, a = this.target.y, o = this._previousPosition;
r.x = r.x + s - o.x;
r.y = r.y + a - o.y;
n += r.x;
i += r.y;
o.x = n;
o.y = i;
this.target.setPosition(n, i);
} else this.target.setPosition(r.x + n, r.y + i);
}
},
reverse: function() {
var t = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.jumpBy = function(t, e, i, n, r) {
return new cc.JumpBy(t, e, i, n, r);
};
cc.JumpTo = cc.Class({
name: "cc.JumpTo",
extends: cc.JumpBy,
ctor: function(t, e, i, n, r) {
this._endPosition = cc.v2(0, 0);
void 0 !== n && this.initWithDuration(t, e, i, n, r);
},
initWithDuration: function(t, e, i, n, r) {
if (cc.JumpBy.prototype.initWithDuration.call(this, t, e, i, n, r)) {
if (void 0 === r) {
i = e.y;
e = e.x;
}
this._endPosition.x = e;
this._endPosition.y = i;
return !0;
}
return !1;
},
startWithTarget: function(t) {
cc.JumpBy.prototype.startWithTarget.call(this, t);
this._delta.x = this._endPosition.x - this._startPosition.x;
this._delta.y = this._endPosition.y - this._startPosition.y;
},
clone: function() {
var t = new cc.JumpTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
return t;
}
});
cc.jumpTo = function(t, e, i, n, r) {
return new cc.JumpTo(t, e, i, n, r);
};
function n(t, e, i, n, r) {
return Math.pow(1 - r, 3) * t + 3 * r * Math.pow(1 - r, 2) * e + 3 * Math.pow(r, 2) * (1 - r) * i + Math.pow(r, 3) * n;
}
cc.BezierBy = cc.Class({
name: "cc.BezierBy",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._config = [];
this._startPosition = cc.v2(0, 0);
this._previousPosition = cc.v2(0, 0);
e && cc.BezierBy.prototype.initWithDuration.call(this, t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._config = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.BezierBy();
this._cloneDecoration(t);
for (var e = [], i = 0; i < this._config.length; i++) {
var n = this._config[i];
e.push(cc.v2(n.x, n.y));
}
t.initWithDuration(this._duration, e);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.x, i = t.y;
this._previousPosition.x = e;
this._previousPosition.y = i;
this._startPosition.x = e;
this._startPosition.y = i;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
var e = this._config, i = e[0].x, r = e[1].x, s = e[2].x, a = e[0].y, o = e[1].y, c = e[2].y, h = n(0, i, r, s, t), l = n(0, a, o, c, t), u = this._startPosition;
if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
var f = this.target.x, _ = this.target.y, d = this._previousPosition;
u.x = u.x + f - d.x;
u.y = u.y + _ - d.y;
h += u.x;
l += u.y;
d.x = h;
d.y = l;
this.target.setPosition(h, l);
} else this.target.setPosition(u.x + h, u.y + l);
}
},
reverse: function() {
var t = this._config, e = t[0].x, i = t[0].y, n = t[1].x, r = t[1].y, s = t[2].x, a = t[2].y, o = [ cc.v2(n - s, r - a), cc.v2(e - s, i - a), cc.v2(-s, -a) ], c = new cc.BezierBy(this._duration, o);
this._cloneDecoration(c);
this._reverseEaseList(c);
return c;
}
});
cc.bezierBy = function(t, e) {
return new cc.BezierBy(t, e);
};
cc.BezierTo = cc.Class({
name: "cc.BezierTo",
extends: cc.BezierBy,
ctor: function(t, e) {
this._toConfig = [];
e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._toConfig = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.BezierTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toConfig);
return t;
},
startWithTarget: function(t) {
cc.BezierBy.prototype.startWithTarget.call(this, t);
var e = this._startPosition, i = this._toConfig, n = this._config;
n[0] = i[0].sub(e);
n[1] = i[1].sub(e);
n[2] = i[2].sub(e);
}
});
cc.bezierTo = function(t, e) {
return new cc.BezierTo(t, e);
};
cc.ScaleTo = cc.Class({
name: "cc.ScaleTo",
extends: cc.ActionInterval,
ctor: function(t, e, i) {
this._scaleX = 1;
this._scaleY = 1;
this._startScaleX = 1;
this._startScaleY = 1;
this._endScaleX = 0;
this._endScaleY = 0;
this._deltaX = 0;
this._deltaY = 0;
void 0 !== e && cc.ScaleTo.prototype.initWithDuration.call(this, t, e, i);
},
initWithDuration: function(t, e, i) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._endScaleX = e;
this._endScaleY = null != i ? i : e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.ScaleTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._startScaleX = t.scaleX;
this._startScaleY = t.scaleY;
this._deltaX = this._endScaleX - this._startScaleX;
this._deltaY = this._endScaleY - this._startScaleY;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target) {
this.target.scaleX = this._startScaleX + this._deltaX * t;
this.target.scaleY = this._startScaleY + this._deltaY * t;
}
}
});
cc.scaleTo = function(t, e, i) {
return new cc.ScaleTo(t, e, i);
};
cc.ScaleBy = cc.Class({
name: "cc.ScaleBy",
extends: cc.ScaleTo,
startWithTarget: function(t) {
cc.ScaleTo.prototype.startWithTarget.call(this, t);
this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
},
reverse: function() {
var t = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.ScaleBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
return t;
}
});
cc.scaleBy = function(t, e, i) {
return new cc.ScaleBy(t, e, i);
};
cc.Blink = cc.Class({
name: "cc.Blink",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._times = 0;
this._originalState = !1;
void 0 !== e && this.initWithDuration(t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._times = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.Blink();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._times);
return t;
},
update: function(t) {
t = this._computeEaseTime(t);
if (this.target && !this.isDone()) {
var e = 1 / this._times, i = t % e;
this.target.opacity = i > e / 2 ? 255 : 0;
}
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._originalState = t.opacity;
},
stop: function() {
this.target.opacity = this._originalState;
cc.ActionInterval.prototype.stop.call(this);
},
reverse: function() {
var t = new cc.Blink(this._duration, this._times);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.blink = function(t, e) {
return new cc.Blink(t, e);
};
cc.FadeTo = cc.Class({
name: "cc.FadeTo",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._toOpacity = 0;
this._fromOpacity = 0;
void 0 !== e && cc.FadeTo.prototype.initWithDuration.call(this, t, e);
},
initWithDuration: function(t, e) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._toOpacity = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.FadeTo();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toOpacity);
return t;
},
update: function(t) {
t = this._computeEaseTime(t);
var e = void 0 !== this._fromOpacity ? this._fromOpacity : 255;
this.target.opacity = e + (this._toOpacity - e) * t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._fromOpacity = t.opacity;
}
});
cc.fadeTo = function(t, e) {
return new cc.FadeTo(t, e);
};
cc.FadeIn = cc.Class({
name: "cc.FadeIn",
extends: cc.FadeTo,
ctor: function(t) {
null == t && (t = 0);
this._reverseAction = null;
this.initWithDuration(t, 255);
},
reverse: function() {
var t = new cc.FadeOut();
t.initWithDuration(this._duration, 0);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.FadeIn();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toOpacity);
return t;
},
startWithTarget: function(t) {
this._reverseAction && (this._toOpacity = this._reverseAction._fromOpacity);
cc.FadeTo.prototype.startWithTarget.call(this, t);
}
});
cc.fadeIn = function(t) {
return new cc.FadeIn(t);
};
cc.FadeOut = cc.Class({
name: "cc.FadeOut",
extends: cc.FadeTo,
ctor: function(t) {
null == t && (t = 0);
this._reverseAction = null;
this.initWithDuration(t, 0);
},
reverse: function() {
var t = new cc.FadeIn();
t._reverseAction = this;
t.initWithDuration(this._duration, 255);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.FadeOut();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._toOpacity);
return t;
}
});
cc.fadeOut = function(t) {
return new cc.FadeOut(t);
};
cc.TintTo = cc.Class({
name: "cc.TintTo",
extends: cc.ActionInterval,
ctor: function(t, e, i, n) {
this._to = cc.color(0, 0, 0);
this._from = cc.color(0, 0, 0);
if (e instanceof cc.Color) {
n = e.b;
i = e.g;
e = e.r;
}
void 0 !== n && this.initWithDuration(t, e, i, n);
},
initWithDuration: function(t, e, i, n) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._to = cc.color(e, i, n);
return !0;
}
return !1;
},
clone: function() {
var t = new cc.TintTo();
this._cloneDecoration(t);
var e = this._to;
t.initWithDuration(this._duration, e.r, e.g, e.b);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._from = this.target.color;
},
update: function(t) {
t = this._computeEaseTime(t);
var e = this._from, i = this._to;
e && (this.target.color = cc.color(e.r + (i.r - e.r) * t, e.g + (i.g - e.g) * t, e.b + (i.b - e.b) * t));
}
});
cc.tintTo = function(t, e, i, n) {
return new cc.TintTo(t, e, i, n);
};
cc.TintBy = cc.Class({
name: "cc.TintBy",
extends: cc.ActionInterval,
ctor: function(t, e, i, n) {
this._deltaR = 0;
this._deltaG = 0;
this._deltaB = 0;
this._fromR = 0;
this._fromG = 0;
this._fromB = 0;
void 0 !== n && this.initWithDuration(t, e, i, n);
},
initWithDuration: function(t, e, i, n) {
if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
this._deltaR = e;
this._deltaG = i;
this._deltaB = n;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.TintBy();
this._cloneDecoration(t);
t.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
var e = t.color;
this._fromR = e.r;
this._fromG = e.g;
this._fromB = e.b;
},
update: function(t) {
t = this._computeEaseTime(t);
this.target.color = cc.color(this._fromR + this._deltaR * t, this._fromG + this._deltaG * t, this._fromB + this._deltaB * t);
},
reverse: function() {
var t = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
}
});
cc.tintBy = function(t, e, i, n) {
return new cc.TintBy(t, e, i, n);
};
cc.DelayTime = cc.Class({
name: "cc.DelayTime",
extends: cc.ActionInterval,
update: function(t) {},
reverse: function() {
var t = new cc.DelayTime(this._duration);
this._cloneDecoration(t);
this._reverseEaseList(t);
return t;
},
clone: function() {
var t = new cc.DelayTime();
this._cloneDecoration(t);
t.initWithDuration(this._duration);
return t;
}
});
cc.delayTime = function(t) {
return new cc.DelayTime(t);
};
cc.ReverseTime = cc.Class({
name: "cc.ReverseTime",
extends: cc.ActionInterval,
ctor: function(t) {
this._other = null;
t && this.initWithAction(t);
},
initWithAction: function(t) {
if (!t) {
cc.errorID(1028);
return !1;
}
if (t === this._other) {
cc.errorID(1029);
return !1;
}
if (cc.ActionInterval.prototype.initWithDuration.call(this, t._duration)) {
this._other = t;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.ReverseTime();
this._cloneDecoration(t);
t.initWithAction(this._other.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._other.startWithTarget(t);
},
update: function(t) {
t = this._computeEaseTime(t);
this._other && this._other.update(1 - t);
},
reverse: function() {
return this._other.clone();
},
stop: function() {
this._other.stop();
cc.Action.prototype.stop.call(this);
}
});
cc.reverseTime = function(t) {
return new cc.ReverseTime(t);
};
cc.TargetedAction = cc.Class({
name: "cc.TargetedAction",
extends: cc.ActionInterval,
ctor: function(t, e) {
this._action = null;
this._forcedTarget = null;
e && this.initWithTarget(t, e);
},
initWithTarget: function(t, e) {
if (this.initWithDuration(e._duration)) {
this._forcedTarget = t;
this._action = e;
return !0;
}
return !1;
},
clone: function() {
var t = new cc.TargetedAction();
this._cloneDecoration(t);
t.initWithTarget(this._forcedTarget, this._action.clone());
return t;
},
startWithTarget: function(t) {
cc.ActionInterval.prototype.startWithTarget.call(this, t);
this._action.startWithTarget(this._forcedTarget);
},
stop: function() {
this._action.stop();
},
update: function(t) {
t = this._computeEaseTime(t);
this._action.update(t);
},
getForcedTarget: function() {
return this._forcedTarget;
},
setForcedTarget: function(t) {
this._forcedTarget !== t && (this._forcedTarget = t);
}
});
cc.targetedAction = function(t, e) {
return new cc.TargetedAction(t, e);
};
}), {} ],
6: [ (function(t, e, i) {
t("../core/platform/CCClass");
var n = t("../core/platform/js"), r = function() {
this.actions = [];
this.target = null;
this.actionIndex = 0;
this.currentAction = null;
this.paused = !1;
this.lock = !1;
};
cc.ActionManager = function() {
this._hashTargets = n.createMap(!0);
this._arrayTargets = [];
this._currentTarget = null;
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
};
cc.ActionManager.prototype = {
constructor: cc.ActionManager,
_elementPool: [],
_searchElementByTarget: function(t, e) {
for (var i = 0; i < t.length; i++) if (e === t[i].target) return t[i];
return null;
},
_getElement: function(t, e) {
var i = this._elementPool.pop();
i || (i = new r());
i.target = t;
i.paused = !!e;
return i;
},
_putElement: function(t) {
t.actions.length = 0;
t.actionIndex = 0;
t.currentAction = null;
t.paused = !1;
t.target = null;
t.lock = !1;
this._elementPool.push(t);
},
addAction: function(t, e, i) {
if (t && e) {
var n = this._hashTargets[e._id];
if (n) n.actions || (n.actions = []); else {
n = this._getElement(e, i);
this._hashTargets[e._id] = n;
this._arrayTargets.push(n);
}
n.actions.push(t);
t.startWithTarget(e);
} else cc.errorID(1e3);
},
removeAllActions: function() {
for (var t = this._arrayTargets, e = 0; e < t.length; e++) {
var i = t[e];
i && this._putElement(i);
}
this._arrayTargets.length = 0;
this._hashTargets = n.createMap(!0);
},
removeAllActionsFromTarget: function(t, e) {
if (null != t) {
var i = this._hashTargets[t._id];
if (i) {
i.actions.length = 0;
this._deleteHashElement(i);
}
}
},
removeAction: function(t) {
if (null != t) {
var e = t.getOriginalTarget(), i = this._hashTargets[e._id];
if (i) {
for (var n = 0; n < i.actions.length; n++) if (i.actions[n] === t) {
i.actions.splice(n, 1);
i.actionIndex >= n && i.actionIndex--;
break;
}
} else cc.logID(1001);
}
},
removeActionByTag: function(t, e) {
t === cc.Action.TAG_INVALID && cc.logID(1002);
cc.assertID(e, 1003);
var i = this._hashTargets[e._id];
if (i) for (var n = i.actions.length, r = 0; r < n; ++r) {
var s = i.actions[r];
if (s && s.getTag() === t && s.getOriginalTarget() === e) {
this._removeActionAtIndex(r, i);
break;
}
}
},
getActionByTag: function(t, e) {
t === cc.Action.TAG_INVALID && cc.logID(1004);
var i = this._hashTargets[e._id];
if (i) {
if (null != i.actions) for (var n = 0; n < i.actions.length; ++n) {
var r = i.actions[n];
if (r && r.getTag() === t) return r;
}
cc.logID(1005, t);
}
return null;
},
getNumberOfRunningActionsInTarget: function(t) {
var e = this._hashTargets[t._id];
return e && e.actions ? e.actions.length : 0;
},
pauseTarget: function(t) {
var e = this._hashTargets[t._id];
e && (e.paused = !0);
},
resumeTarget: function(t) {
var e = this._hashTargets[t._id];
e && (e.paused = !1);
},
pauseAllRunningActions: function() {
for (var t = [], e = this._arrayTargets, i = 0; i < e.length; i++) {
var n = e[i];
if (n && !n.paused) {
n.paused = !0;
t.push(n.target);
}
}
return t;
},
resumeTargets: function(t) {
if (t) for (var e = 0; e < t.length; e++) t[e] && this.resumeTarget(t[e]);
},
pauseTargets: function(t) {
if (t) for (var e = 0; e < t.length; e++) t[e] && this.pauseTarget(t[e]);
},
purgeSharedManager: function() {
cc.director.getScheduler().unscheduleUpdate(this);
},
_removeActionAtIndex: function(t, e) {
e.actions[t];
e.actions.splice(t, 1);
e.actionIndex >= t && e.actionIndex--;
0 === e.actions.length && this._deleteHashElement(e);
},
_deleteHashElement: function(t) {
var e = !1;
if (t && !t.lock && this._hashTargets[t.target._id]) {
delete this._hashTargets[t.target._id];
for (var i = this._arrayTargets, n = 0, r = i.length; n < r; n++) if (i[n] === t) {
i.splice(n, 1);
break;
}
this._putElement(t);
e = !0;
}
return e;
},
update: function(t) {
for (var e, i = this._arrayTargets, n = 0; n < i.length; n++) {
this._currentTarget = i[n];
if (!(e = this._currentTarget).paused && e.actions) {
e.lock = !0;
for (e.actionIndex = 0; e.actionIndex < e.actions.length; e.actionIndex++) {
e.currentAction = e.actions[e.actionIndex];
if (e.currentAction) {
e.currentAction.step(t * (e.currentAction._speedMethod ? e.currentAction._speed : 1));
if (e.currentAction && e.currentAction.isDone()) {
e.currentAction.stop();
var r = e.currentAction;
e.currentAction = null;
this.removeAction(r);
}
e.currentAction = null;
}
}
e.lock = !1;
}
0 === e.actions.length && this._deleteHashElement(e) && n--;
}
}
};
0;
}), {
"../core/platform/CCClass": 134,
"../core/platform/js": 154
} ],
7: [ (function(t, e, i) {
t("./CCActionManager");
t("./CCAction");
t("./CCActionInterval");
t("./CCActionInstant");
t("./CCActionEase");
t("./CCActionCatmullRom");
t("./tween");
}), {
"./CCAction": 1,
"./CCActionCatmullRom": 2,
"./CCActionEase": 3,
"./CCActionInstant": 4,
"./CCActionInterval": 5,
"./CCActionManager": 6,
"./tween": 8
} ],
8: [ (function(i, n, r) {
var s = cc.Class({
name: "cc.TweenAction",
extends: cc.ActionInterval,
ctor: function(i, n, r) {
this._opts = r = r || Object.create(null);
this._props = Object.create(null);
r.progress = r.progress || this.progress;
if (r.easing && "string" === ("object" === (e = typeof r.easing) ? t(r.easing) : e)) {
var s = r.easing;
r.easing = cc.easing[s];
!r.easing && cc.warnID(1031, s);
}
var a = this._opts.relative;
for (var o in n) {
var c = n[o], h = void 0, l = void 0;
if (c.value && (c.easing || c.progress)) {
"string" === ("object" === (e = typeof c.easing) ? t(c.easing) : e) ? !(h = cc.easing[c.easing]) && cc.warnID(1031, c.easing) : h = c.easing;
l = c.progress;
c = c.value;
}
if ("number" === ("object" === (e = typeof c) ? t(c) : e) || c.lerp && (!a || c.add || c.mul) && c.clone) {
var u = Object.create(null);
u.value = c;
u.easing = h;
u.progress = l;
this._props[o] = u;
} else cc.warn("Can not animate " + o + " property, because it do not have [lerp, (add|mul), clone] function.");
}
this._originProps = n;
this.initWithDuration(i);
},
clone: function() {
var t = new s(this._duration, this._originProps, this._opts);
this._cloneDecoration(t);
return t;
},
startWithTarget: function(i) {
cc.ActionInterval.prototype.startWithTarget.call(this, i);
var n = !!this._opts.relative, r = this._props;
for (var s in r) {
var a = i[s], o = r[s];
if ("number" === ("object" === (e = typeof a) ? t(a) : e)) {
o.start = a;
o.current = a;
o.end = n ? a + o.value : o.value;
} else {
o.start = a.clone();
o.current = a.clone();
o.end = n ? (a.add || a.mul).call(a, o.value) : o.value;
}
}
},
update: function(t) {
var e = this._opts, i = t;
e.easing && (i = e.easing(t));
var n = this.target;
if (n) {
var r = this._props, s = this._opts.progress;
for (var a in r) {
var o = r[a], c = o.easing ? o.easing(t) : i, h = o.current = (o.progress || s)(o.start, o.end, o.current, c);
n[a] = h;
}
}
},
progress: function(i, n, r, s) {
"number" === ("object" === (e = typeof i) ? t(i) : e) ? r = i + (n - i) * s : i.lerp(n, s, r);
return r;
}
}), a = cc.Class({
name: "cc.SetAction",
extends: cc.ActionInstant,
ctor: function(t) {
this._props = {};
void 0 !== t && this.init(t);
},
init: function(t) {
for (var e in t) this._props[e] = t[e];
return !0;
},
update: function() {
var t = this._props, e = this.target;
for (var i in t) e[i] = t[i];
},
clone: function() {
var t = new a();
t.init(this._props);
return t;
}
});
function o(t) {
this._actions = [];
this._finalAction = null;
this._target = t;
}
o.prototype.then = function(t) {
t instanceof cc.Action ? this._actions.push(t.clone()) : this._actions.push(t._union());
return this;
};
o.prototype.target = function(t) {
this._target = t;
return this;
};
o.prototype.start = function() {
if (!this._target) {
cc.warn("Please set target to tween first");
return this;
}
this._finalAction && cc.director.getActionManager().removeAction(this._finalAction);
this._finalAction = this._union();
cc.director.getActionManager().addAction(this._finalAction, this._target, !1);
return this;
};
o.prototype.stop = function() {
this._finalAction && cc.director.getActionManager().removeAction(this._finalAction);
return this;
};
o.prototype.clone = function(t) {
var e = this._union();
return cc.tween(t).then(e.clone());
};
o.prototype.union = function() {
var t = this._union();
this._actions.length = 0;
this._actions.push(t);
return this;
};
o.prototype._union = function() {
var t = this._actions;
return t = 1 === t.length ? t[0] : cc.sequence(t);
};
var c = [];
function h(t) {
return function() {
c.length = 0;
for (var e = arguments.length, i = 0; i < e; i++) {
var n = c[i] = arguments[i];
n instanceof o && (c[i] = n._union());
}
return t.apply(this, c);
};
}
for (var l = {
to: function(t, e, i) {
(i = i || Object.create(null)).relative = !1;
return new s(t, e, i);
},
by: function(t, e, i) {
(i = i || Object.create(null)).relative = !0;
return new s(t, e, i);
},
set: function(t) {
return new a(t);
},
delay: cc.delayTime,
call: cc.callFunc,
hide: cc.hide,
show: cc.show,
removeSelf: cc.removeSelf,
sequence: h(cc.sequence),
parallel: h(cc.spawn)
}, u = {
repeat: cc.repeat,
repeatForever: cc.repeatForever,
reverseTime: cc.reverseTime
}, f = Object.keys(l), _ = function(t) {
var e = f[t];
o.prototype[e] = function() {
var t = l[e].apply(l, arguments);
this._actions.push(t);
return this;
};
}, d = 0; d < f.length; d++) _(d);
f = Object.keys(u);
var p = function(t) {
var e = f[t];
o.prototype[e] = function() {
var t = this._actions, i = arguments[arguments.length - 1], n = arguments.length - 1;
if (i instanceof cc.Tween) i = i._union(); else if (!(i instanceof cc.Action)) {
i = t[t.length - 1];
t.length -= 1;
n += 1;
}
for (var r = [ i ], s = 0; s < n; s++) r.push(arguments[s]);
i = u[e].apply(this, r);
t.push(i);
return this;
};
};
for (d = 0; d < f.length; d++) p(d);
cc.tween = function(t) {
return new o(t);
};
cc.Tween = o;
}), {} ],
9: [ (function(i, n, r) {
var s = cc.js, a = i("./playable"), o = i("./animation-curves").DynamicAnimCurve, c = i("./animation-curves").quickFindIndex, h = i("./motion-path-helper").sampleMotionPaths, l = i("./animation-curves").EventAnimCurve, u = i("./animation-curves").EventInfo, f = i("./types").WrapModeMask, _ = i("../core/utils/binary-search").binarySearchEpsilon;
function d(t, e) {
a.call(this);
this.target = t;
this.animation = e;
this._anims = new s.array.MutableForwardIterator([]);
}
s.extend(d, a);
var p = d.prototype;
p.playState = function(i, n) {
if (i.clip) {
i.curveLoaded || g(this.target, i);
i.animator = this;
i.play();
"number" === ("object" === (e = typeof n) ? t(n) : e) && i.setTime(n);
this.play();
}
};
p.stopStatesExcept = function(t) {
var e = this._anims, i = e.array;
for (e.i = 0; e.i < i.length; ++e.i) {
var n = i[e.i];
n !== t && this.stopState(n);
}
};
p.addAnimation = function(t) {
-1 === this._anims.array.indexOf(t) && this._anims.push(t);
t._setEventTarget(this.animation);
};
p.removeAnimation = function(t) {
var e = this._anims.array.indexOf(t);
if (e >= 0) {
this._anims.fastRemoveAt(e);
0 === this._anims.array.length && this.stop();
} else cc.errorID(3908);
t.animator = null;
};
p.sample = function() {
var t = this._anims, e = t.array;
for (t.i = 0; t.i < e.length; ++t.i) {
e[t.i].sample();
}
};
p.stopState = function(t) {
t && t.stop();
};
p.pauseState = function(t) {
t && t.pause();
};
p.resumeState = function(t) {
t && t.resume();
this.isPaused && this.resume();
};
p.setStateTime = function(t, e) {
if (void 0 !== e) {
if (t) {
t.setTime(e);
t.sample();
}
} else {
e = t;
for (var i = this._anims.array, n = 0; n < i.length; ++n) {
var r = i[n];
r.setTime(e);
r.sample();
}
}
};
p.onStop = function() {
var t = this._anims, e = t.array;
for (t.i = 0; t.i < e.length; ++t.i) {
e[t.i].stop();
}
};
p.onPause = function() {
for (var t = this._anims.array, e = 0; e < t.length; ++e) {
var i = t[e];
i.pause();
i.animator = null;
}
};
p.onResume = function() {
for (var t = this._anims.array, e = 0; e < t.length; ++e) {
var i = t[e];
i.animator = this;
i.resume();
}
};
p._reloadClip = function(t) {
g(this.target, t);
};
0;
function m(t) {
var e = t.split(".");
e.shift();
return e.length > 0 ? e : null;
}
function g(i, n) {
var r = n.clip, s = n.curves;
s.length = 0;
n.duration = r.duration;
n.speed = r.speed;
n.wrapMode = r.wrapMode;
n.frameRate = r.sample;
(n.wrapMode & f.Loop) === f.Loop ? n.repeatCount = Infinity : n.repeatCount = 1;
function a(t) {
if (!Array.isArray(t)) return !1;
for (var e = 0, i = t.length; e < i; e++) {
var n = t[e];
if (!Array.isArray(n) || 6 !== n.length) return !1;
}
return !0;
}
function d(i, s, l) {
var u, f = i instanceof cc.Node && "position" === s && l[0] && Array.isArray(l[0].value), d = [], p = new o();
p.target = i;
var g = s.indexOf(".");
-1 !== g ? i[u = s.slice(0, g)] : u = s;
p.prop = u;
p.subProps = m(s);
for (var v = 0, y = l.length; v < y; v++) {
var T = l[v], x = T.frame / n.duration;
p.ratios.push(x);
if (f) {
var E = T.motionPath;
if (E && !a(E)) {
cc.errorID(3904, i.name, s, v);
E = null;
}
d.push(E);
}
var C = T.value;
p.values.push(C);
var A = T.curve;
if (A) {
if ("string" === ("object" === (e = typeof A) ? t(A) : e)) {
p.types.push(A);
continue;
}
if (Array.isArray(A)) {
A[0] === A[1] && A[2] === A[3] ? p.types.push(o.Linear) : p.types.push(o.Bezier(A));
continue;
}
}
p.types.push(o.Linear);
}
f && h(d, p, r.duration, r.sample);
for (var b, S, w = p.ratios, D = !0, I = 1, R = w.length; I < R; I++) {
b = w[I] - w[I - 1];
if (1 === I) S = b; else if (Math.abs(b - S) > 1e-6) {
D = !1;
break;
}
}
p._findFrameIndex = D ? c : _;
return p;
}
function p(t, e) {
var i = e.props, n = e.comps;
if (i) for (var r in i) {
var a = d(t, r, i[r]);
s.push(a);
}
if (n) for (var o in n) {
var c = t.getComponent(o);
if (c) {
var h = n[o];
for (var r in h) {
a = d(c, r, h[r]);
s.push(a);
}
}
}
}
var g = r.curveData, v = g.paths;
p(i, g);
for (var y in v) {
var T = cc.find(y, i);
if (T) {
p(T, v[y]);
}
}
var x = r.events;
if (x) for (var E, C = 0, A = x.length; C < A; C++) {
if (!E) {
(E = new l()).target = i;
s.push(E);
}
var b, S = x[C], w = S.frame / n.duration, D = _(E.ratios, w);
if (D >= 0) b = E.events[D]; else {
b = new u();
E.ratios.push(w);
E.events.push(b);
}
b.add(S.func, S.params);
}
}
0;
n.exports = d;
}), {
"../core/utils/binary-search": 210,
"./animation-curves": 11,
"./motion-path-helper": 17,
"./playable": 18,
"./types": 19
} ],
10: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.AnimationClip",
extends: cc.Asset,
properties: {
_duration: {
default: 0,
type: "Float"
},
duration: {
get: function() {
return this._duration;
}
},
sample: {
default: 60
},
speed: {
default: 1
},
wrapMode: {
default: cc.WrapMode.Normal
},
curveData: {
default: {},
visible: !1
},
events: {
default: [],
visible: !1
}
},
statics: {
createWithSpriteFrames: function(t, e) {
if (!Array.isArray(t)) {
cc.errorID(3905);
return null;
}
var i = new n();
i.sample = e || i.sample;
i._duration = t.length / i.sample;
for (var r = [], s = 1 / i.sample, a = 0, o = t.length; a < o; a++) r[a] = {
frame: a * s,
value: t[a]
};
i.curveData = {
comps: {
"cc.Sprite": {
spriteFrame: r
}
}
};
return i;
}
}
});
cc.AnimationClip = e.exports = n;
}), {} ],
11: [ (function(i, n, r) {
var s = i("./bezier").bezierByTime, a = i("../core/utils/binary-search").binarySearchEpsilon, o = i("./types").WrapModeMask, c = i("./types").WrappedInfo;
function h(i, n) {
if ("string" === ("object" === (e = typeof n) ? t(n) : e)) {
var r = cc.easing[n];
r ? i = r(i) : cc.errorID(3906, n);
} else Array.isArray(n) && (i = s(n, i));
return i;
}
var l = cc.Class({
name: "cc.AnimCurve",
sample: function(t, e, i) {},
onTimeChangedManually: void 0
});
function u(t, e) {
var i = t.length - 1;
if (0 === i) return 0;
var n = t[0];
if (e < n) return 0;
var r = t[i];
if (e > r) return i;
var s = (e = (e - n) / (r - n)) / (1 / i), a = 0 | s;
return s - a < 1e-6 ? a : a + 1 - s < 1e-6 ? a + 1 : ~(a + 1);
}
var f = cc.Class({
name: "cc.DynamicAnimCurve",
extends: l,
properties: {
target: null,
prop: "",
values: [],
ratios: [],
types: [],
subProps: null
},
_findFrameIndex: a,
sample: function(i, n, r) {
var s = this.values, a = this.ratios, o = a.length;
if (0 !== o) {
var c, l = this._findFrameIndex(a, n);
if (l < 0) if ((l = ~l) <= 0) c = s[0]; else if (l >= o) c = s[o - 1]; else {
var u = s[l - 1], f = "number" === ("object" === (e = typeof u) ? t(u) : e), _ = u && u.lerp;
if (f || _) {
var d = a[l - 1], p = a[l], m = this.types[l - 1], g = (n - d) / (p - d);
m && (g = h(g, m));
var v = s[l];
f ? c = u + (v - u) * g : _ && (c = u.lerp(v, g));
} else c = u;
} else c = s[l];
var y = this.subProps;
if (y) {
for (var T = this.target[this.prop], x = T, E = 0; E < y.length - 1; E++) {
var C = y[E];
if (!x) return;
x = x[C];
}
var A = y[y.length - 1];
if (!x) return;
x[A] = c;
c = T;
}
this.target[this.prop] = c;
}
}
});
f.Linear = null;
f.Bezier = function(t) {
return t;
};
var _ = function() {
this.events = [];
};
_.prototype.add = function(t, e) {
this.events.push({
func: t || "",
params: e || []
});
};
var d = cc.Class({
name: "cc.EventAnimCurve",
extends: l,
properties: {
target: null,
ratios: [],
events: [],
_wrappedInfo: {
default: function() {
return new c();
}
},
_lastWrappedInfo: null,
_ignoreIndex: NaN
},
_wrapIterations: function(t) {
t - (0 | t) == 0 && (t -= 1);
return 0 | t;
},
sample: function(t, e, i) {
var n = this.ratios.length, r = i.getWrappedInfo(i.time, this._wrappedInfo), s = r.direction, h = a(this.ratios, r.ratio);
if (h < 0) {
h = ~h - 1;
s < 0 && (h += 1);
}
this._ignoreIndex !== h && (this._ignoreIndex = NaN);
r.frameIndex = h;
if (this._lastWrappedInfo) {
var l = i.wrapMode, u = this._wrapIterations(r.iterations), f = this._lastWrappedInfo, _ = this._wrapIterations(f.iterations), d = f.frameIndex, p = f.direction, m = -1 !== _ && u !== _;
if (d === h && m && 1 === n) this._fireEvent(0); else if (d !== h || m) {
s = p;
do {
if (d !== h) {
if (-1 === s && 0 === d && h > 0) {
(l & o.PingPong) === o.PingPong ? s *= -1 : d = n;
_++;
} else if (1 === s && d === n - 1 && h < n - 1) {
(l & o.PingPong) === o.PingPong ? s *= -1 : d = -1;
_++;
}
if (d === h) break;
if (_ > u) break;
}
d += s;
cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [ d ]);
} while (d !== h && d > -1 && d < n);
}
this._lastWrappedInfo.set(r);
} else {
this._fireEvent(h);
this._lastWrappedInfo = new c(r);
}
},
_fireEvent: function(t) {
if (!(t < 0 || t >= this.events.length || this._ignoreIndex === t)) {
var e = this.events[t].events;
if (this.target.isValid) for (var i = this.target._components, n = 0; n < e.length; n++) for (var r = e[n], s = r.func, a = 0; a < i.length; a++) {
var o = i[a], c = o[s];
c && c.apply(o, r.params);
}
}
},
onTimeChangedManually: function(t, e) {
this._lastWrappedInfo = null;
this._ignoreIndex = NaN;
var i = e.getWrappedInfo(t, this._wrappedInfo), n = i.direction, r = a(this.ratios, i.ratio);
if (r < 0) {
r = ~r - 1;
n < 0 && (r += 1);
this._ignoreIndex = r;
}
}
});
0;
n.exports = {
AnimCurve: l,
DynamicAnimCurve: f,
EventAnimCurve: d,
EventInfo: _,
computeRatioByType: h,
quickFindIndex: u
};
}), {
"../core/utils/binary-search": 210,
"./bezier": 14,
"./types": 19
} ],
12: [ (function(t, e, i) {
var n = cc.js, r = cc.Class({
ctor: function() {
this._anims = new n.array.MutableForwardIterator([]);
this._delayEvents = [];
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
},
update: function(t) {
var e = this._anims, i = e.array;
for (e.i = 0; e.i < i.length; ++e.i) {
var n = i[e.i];
n._isPlaying && !n._isPaused && n.update(t);
}
for (var r = this._delayEvents, s = 0, a = r.length; s < a; s++) {
var o = r[s];
o.target[o.func].apply(o.target, o.args);
}
r.length = 0;
},
destruct: function() {},
addAnimation: function(t) {
-1 === this._anims.array.indexOf(t) && this._anims.push(t);
},
removeAnimation: function(t) {
var e = this._anims.array.indexOf(t);
e >= 0 ? this._anims.fastRemoveAt(e) : cc.errorID(3907);
},
pushDelayEvent: function(t, e, i) {
this._delayEvents.push({
target: t,
func: e,
args: i
});
}
});
cc.AnimationManager = e.exports = r;
}), {} ],
13: [ (function(i, n, r) {
var s = cc.js, a = i("./playable"), o = i("./types"), c = o.WrappedInfo, h = o.WrapMode, l = o.WrapModeMask;
function u(t, e) {
a.call(this);
this._currentFramePlayed = !1;
this._delay = 0;
this._delayTime = 0;
this._wrappedInfo = new c();
this._lastWrappedInfo = null;
this._process = _;
this._clip = t;
this._name = e || t && t.name;
this.animator = null;
this.curves = [];
this.delay = 0;
this.repeatCount = 1;
this.duration = 1;
this.speed = 1;
this.wrapMode = h.Normal;
this.time = 0;
this._target = null;
this._lastframeEventOn = !1;
this.emit = function() {
for (var t = new Array(arguments.length), e = 0, i = t.length; e < i; e++) t[e] = arguments[e];
cc.director.getAnimationManager().pushDelayEvent(this, "_emit", t);
};
}
s.extend(u, a);
var f = u.prototype;
f._emit = function(t, e) {
this._target && this._target.isValid && this._target.emit(t, t, e);
};
f.on = function(t, e, i) {
if (this._target && this._target.isValid) {
"lastframe" === t && (this._lastframeEventOn = !0);
return this._target.on(t, e, i);
}
return null;
};
f.once = function(i, n, r) {
var s = this;
if (!this._target || !this._target.isValid) return null;
var a = (function() {
"lastframe" === i && (s._lastframeEventOn = !0);
var t = s;
return {
v: s._target.once(i, (function(e) {
n.call(r, e);
t._lastframeEventOn = !1;
}))
};
})();
return "object" === ("object" === (e = typeof a) ? t(a) : e) ? a.v : void 0;
};
f.off = function(t, e, i) {
if (this._target && this._target.isValid) {
"lastframe" === t && (this._target.hasEventListener(t) || (this._lastframeEventOn = !1));
this._target.off(t, e, i);
}
};
f._setEventTarget = function(t) {
this._target = t;
};
f.onPlay = function() {
this.setTime(0);
this._delayTime = this._delay;
cc.director.getAnimationManager().addAnimation(this);
this.animator && this.animator.addAnimation(this);
this.emit("play", this);
};
f.onStop = function() {
this.isPaused || cc.director.getAnimationManager().removeAnimation(this);
this.animator && this.animator.removeAnimation(this);
this.emit("stop", this);
};
f.onResume = function() {
cc.director.getAnimationManager().addAnimation(this);
this.emit("resume", this);
};
f.onPause = function() {
cc.director.getAnimationManager().removeAnimation(this);
this.emit("pause", this);
};
f.setTime = function(t) {
this._currentFramePlayed = !1;
this.time = t || 0;
for (var e = this.curves, i = 0, n = e.length; i < n; i++) {
var r = e[i];
r.onTimeChangedManually && r.onTimeChangedManually(t, this);
}
};
function _() {
var t = this.sample();
if (this._lastframeEventOn) {
var e;
e = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new c(t);
this.repeatCount > 1 && (0 | t.iterations) > (0 | e.iterations) && this.emit("lastframe", this);
e.set(t);
}
if (t.stopped) {
this.stop();
this.emit("finished", this);
}
}
function d() {
var t = this.time, e = this.duration;
t > e ? 0 === (t %= e) && (t = e) : t < 0 && 0 !== (t %= e) && (t += e);
for (var i = t / e, n = this.curves, r = 0, s = n.length; r < s; r++) {
n[r].sample(t, i, this);
}
if (this._lastframeEventOn) {
void 0 === this._lastIterations && (this._lastIterations = i);
(this.time > 0 && this._lastIterations > i || this.time < 0 && this._lastIterations < i) && this.emit("lastframe", this);
this._lastIterations = i;
}
}
f.update = function(t) {
if (this._delayTime > 0) {
this._delayTime -= t;
if (this._delayTime > 0) return;
}
this._currentFramePlayed ? this.time += t * this.speed : this._currentFramePlayed = !0;
this._process();
};
f._needRevers = function(t) {
var e = this.wrapMode, i = !1;
if ((e & l.PingPong) === l.PingPong) {
t - (0 | t) == 0 && t > 0 && (t -= 1);
1 & t && (i = !i);
}
(e & l.Reverse) === l.Reverse && (i = !i);
return i;
};
f.getWrappedInfo = function(t, e) {
e = e || new c();
var i = !1, n = this.duration, r = this.repeatCount, s = t > 0 ? t / n : -t / n;
if (s >= r) {
s = r;
i = !0;
var a = r - (0 | r);
0 === a && (a = 1);
t = a * n * (t > 0 ? 1 : -1);
}
if (t > n) {
var o = t % n;
t = 0 === o ? n : o;
} else t < 0 && 0 !== (t %= n) && (t += n);
var h = !1, u = this._wrapMode & l.ShouldWrap;
u && (h = this._needRevers(s));
var f = h ? -1 : 1;
this.speed < 0 && (f *= -1);
u && h && (t = n - t);
e.ratio = t / n;
e.time = t;
e.direction = f;
e.stopped = i;
e.iterations = s;
return e;
};
f.sample = function() {
for (var t = this.getWrappedInfo(this.time, this._wrappedInfo), e = this.curves, i = 0, n = e.length; i < n; i++) {
e[i].sample(t.time, t.ratio, this);
}
return t;
};
s.get(f, "clip", (function() {
return this._clip;
}));
s.get(f, "name", (function() {
return this._name;
}));
s.obsolete(f, "AnimationState.length", "duration");
s.getset(f, "curveLoaded", (function() {
return this.curves.length > 0;
}), (function() {
this.curves.length = 0;
}));
s.getset(f, "wrapMode", (function() {
return this._wrapMode;
}), (function(t) {
this._wrapMode = t;
0;
this.time = 0;
t & l.Loop ? this.repeatCount = Infinity : this.repeatCount = 1;
}));
s.getset(f, "repeatCount", (function() {
return this._repeatCount;
}), (function(t) {
this._repeatCount = t;
var e = this._wrapMode & l.ShouldWrap, i = (this.wrapMode & l.Reverse) === l.Reverse;
this._process = Infinity !== t || e || i ? _ : d;
}));
s.getset(f, "delay", (function() {
return this._delay;
}), (function(t) {
this._delayTime = this._delay = t;
}));
cc.AnimationState = n.exports = u;
}), {
"./playable": 18,
"./types": 19
} ],
14: [ (function(t, e, i) {
function n(t, e, i, n, r) {
var s = 1 - r;
return t * s * s * s + 3 * e * s * s * r + 3 * i * s * r * r + n * r * r * r;
}
var r = Math.cos, s = Math.acos, a = Math.max, o = 2 * Math.PI, c = Math.sqrt;
function h(t) {
return t < 0 ? -Math.pow(-t, 1 / 3) : Math.pow(t, 1 / 3);
}
function l(t, e) {
var i, n, l, u, f = e - 0, _ = e - t[0], d = 3 * f, p = 3 * _, m = 3 * (e - t[2]), g = 1 / (-f + p - m + (e - 1)), v = (d - 6 * _ + m) * g, y = v * (1 / 3), T = (-d + p) * g, x = 1 / 3 * (3 * T - v * v), E = x * (1 / 3), C = (2 * v * v * v - 9 * v * T + 27 * (f * g)) / 27, A = C / 2, b = A * A + E * E * E;
if (b < 0) {
var S = 1 / 3 * -x, w = c(S * S * S), D = -C / (2 * w), I = s(D < -1 ? -1 : D > 1 ? 1 : D), R = 2 * h(w);
n = R * r(I * (1 / 3)) - y;
l = R * r((I + o) * (1 / 3)) - y;
u = R * r((I + 2 * o) * (1 / 3)) - y;
return 0 <= n && n <= 1 ? 0 <= l && l <= 1 ? 0 <= u && u <= 1 ? a(n, l, u) : a(n, l) : 0 <= u && u <= 1 ? a(n, u) : n : 0 <= l && l <= 1 ? 0 <= u && u <= 1 ? a(l, u) : l : u;
}
if (0 === b) {
l = -(i = A < 0 ? h(-A) : -h(A)) - y;
return 0 <= (n = 2 * i - y) && n <= 1 ? 0 <= l && l <= 1 ? a(n, l) : n : l;
}
var M = c(b);
return n = (i = h(-A + M)) - h(A + M) - y;
}
function u(t, e) {
var i = l(t, e), n = 1 - i;
return 0 * n * n * n + 3 * t[1] * i * n * n + 3 * t[3] * i * i * n + 1 * i * i * i;
}
0;
e.exports = {
bezier: n,
bezierByTime: u
};
}), {} ],
15: [ (function(t, e, i) {
var n = {
constant: function() {
return 0;
},
linear: function(t) {
return t;
},
quadIn: function(t) {
return t * t;
},
quadOut: function(t) {
return t * (2 - t);
},
quadInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
},
cubicIn: function(t) {
return t * t * t;
},
cubicOut: function(t) {
return --t * t * t + 1;
},
cubicInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
},
quartIn: function(t) {
return t * t * t * t;
},
quartOut: function(t) {
return 1 - --t * t * t * t;
},
quartInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
},
quintIn: function(t) {
return t * t * t * t * t;
},
quintOut: function(t) {
return --t * t * t * t * t + 1;
},
quintInOut: function(t) {
return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
},
sineIn: function(t) {
return 1 - Math.cos(t * Math.PI / 2);
},
sineOut: function(t) {
return Math.sin(t * Math.PI / 2);
},
sineInOut: function(t) {
return .5 * (1 - Math.cos(Math.PI * t));
},
expoIn: function(t) {
return 0 === t ? 0 : Math.pow(1024, t - 1);
},
expoOut: function(t) {
return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
},
expoInOut: function(t) {
return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)));
},
circIn: function(t) {
return 1 - Math.sqrt(1 - t * t);
},
circOut: function(t) {
return Math.sqrt(1 - --t * t);
},
circInOut: function(t) {
return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
},
elasticIn: function(t) {
var e, i = .1;
if (0 === t) return 0;
if (1 === t) return 1;
if (!i || i < 1) {
i = 1;
e = .1;
} else e = .4 * Math.asin(1 / i) / (2 * Math.PI);
return -i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4);
},
elasticOut: function(t) {
var e, i = .1;
if (0 === t) return 0;
if (1 === t) return 1;
if (!i || i < 1) {
i = 1;
e = .1;
} else e = .4 * Math.asin(1 / i) / (2 * Math.PI);
return i * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / .4) + 1;
},
elasticInOut: function(t) {
var e, i = .1;
if (0 === t) return 0;
if (1 === t) return 1;
if (!i || i < 1) {
i = 1;
e = .1;
} else e = .4 * Math.asin(1 / i) / (2 * Math.PI);
return (t *= 2) < 1 ? i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * -.5 : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * .5 + 1;
},
backIn: function(t) {
var e = 1.70158;
return t * t * ((e + 1) * t - e);
},
backOut: function(t) {
var e = 1.70158;
return --t * t * ((e + 1) * t + e) + 1;
},
backInOut: function(t) {
var e = 2.5949095;
return (t *= 2) < 1 ? t * t * ((e + 1) * t - e) * .5 : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2);
},
bounceIn: function(t) {
return 1 - n.bounceOut(1 - t);
},
bounceOut: function(t) {
return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
},
bounceInOut: function(t) {
return t < .5 ? .5 * n.bounceIn(2 * t) : .5 * n.bounceOut(2 * t - 1) + .5;
},
smooth: function(t) {
return t <= 0 ? 0 : t >= 1 ? 1 : t * t * (3 - 2 * t);
},
fade: function(t) {
return t <= 0 ? 0 : t >= 1 ? 1 : t * t * t * (t * (6 * t - 15) + 10);
}
};
function r(t, e) {
return function(i) {
return i < .5 ? e(2 * i) / 2 : t(2 * i - 1) / 2 + .5;
};
}
n.quadOutIn = r(n.quadIn, n.quadOut);
n.cubicOutIn = r(n.cubicIn, n.cubicOut);
n.quartOutIn = r(n.quartIn, n.quartOut);
n.quintOutIn = r(n.quintIn, n.quintOut);
n.sineOutIn = r(n.sineIn, n.sineOut);
n.expoOutIn = r(n.expoIn, n.expoOut);
n.circOutIn = r(n.circIn, n.circOut);
n.backOutIn = r(n.backIn, n.backOut);
n.backOutIn = r(n.backIn, n.backOut);
n.bounceOutIn = r(n.bounceIn, n.bounceOut);
cc.easing = e.exports = n;
}), {} ],
16: [ (function(t, e, i) {
t("./bezier");
t("./easing");
t("./types");
t("./motion-path-helper");
t("./animation-curves");
t("./animation-clip");
t("./animation-manager");
t("./animation-state");
t("./animation-animator");
}), {
"./animation-animator": 9,
"./animation-clip": 10,
"./animation-curves": 11,
"./animation-manager": 12,
"./animation-state": 13,
"./bezier": 14,
"./easing": 15,
"./motion-path-helper": 17,
"./types": 19
} ],
17: [ (function(t, e, i) {
var n = t("./animation-curves").DynamicAnimCurve, r = t("./animation-curves").computeRatioByType, s = t("./bezier").bezier, a = t("../core/utils/binary-search").binarySearchEpsilon, o = cc.v2;
function c(t) {
this.points = t || [];
this.beziers = [];
this.ratios = [];
this.progresses = [];
this.length = 0;
this.computeBeziers();
}
c.prototype.computeBeziers = function() {
this.beziers.length = 0;
this.ratios.length = 0;
this.progresses.length = 0;
this.length = 0;
for (var t, e = 1; e < this.points.length; e++) {
var i = this.points[e - 1], n = this.points[e];
(t = new h()).start = i.pos;
t.startCtrlPoint = i.out;
t.end = n.pos;
t.endCtrlPoint = n.in;
this.beziers.push(t);
this.length += t.getLength();
}
var r = 0;
for (e = 0; e < this.beziers.length; e++) {
t = this.beziers[e];
this.ratios[e] = t.getLength() / this.length;
this.progresses[e] = r += this.ratios[e];
}
return this.beziers;
};
function h() {
this.start = o();
this.end = o();
this.startCtrlPoint = o();
this.endCtrlPoint = o();
}
h.prototype.getPointAt = function(t) {
var e = this.getUtoTmapping(t);
return this.getPoint(e);
};
h.prototype.getPoint = function(t) {
var e = s(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, t), i = s(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, t);
return new o(e, i);
};
h.prototype.getLength = function() {
var t = this.getLengths();
return t[t.length - 1];
};
h.prototype.getLengths = function(t) {
t || (t = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1) return this.cacheArcLengths;
var e, i, n = [], r = this.getPoint(0), s = o(), a = 0;
n.push(0);
for (i = 1; i <= t; i++) {
e = this.getPoint(i / t);
s.x = r.x - e.x;
s.y = r.y - e.y;
a += s.mag();
n.push(a);
r = e;
}
this.cacheArcLengths = n;
return n;
};
h.prototype.getUtoTmapping = function(t, e) {
var i, n = this.getLengths(), r = 0, s = n.length;
i = e || t * n[s - 1];
for (var a, o = 0, c = s - 1; o <= c; ) if ((a = n[r = Math.floor(o + (c - o) / 2)] - i) < 0) o = r + 1; else {
if (!(a > 0)) {
c = r;
break;
}
c = r - 1;
}
if (n[r = c] === i) {
return r / (s - 1);
}
var h = n[r];
return (r + (i - h) / (n[r + 1] - h)) / (s - 1);
};
function l(t, e, i, s) {
function h(t) {
return t instanceof cc.Vec2 ? {
in: t,
pos: t,
out: t
} : Array.isArray(t) && 6 === t.length ? {
in: o(t[2], t[3]),
pos: o(t[0], t[1]),
out: o(t[4], t[5])
} : {
in: cc.Vec2.ZERO,
pos: cc.Vec2.ZERO,
out: cc.Vec2.ZERO
};
}
var l = e.values;
if (0 !== t.length && 0 !== l.length) if (1 !== (l = l.map((function(t) {
return o(t[0], t[1]);
}))).length) {
for (var u = e.types, f = e.ratios, _ = e.values = [], d = e.types = [], p = e.ratios = [], m = 0, g = n.Linear, v = 0, y = t.length; v < y - 1; v++) {
var T, x = t[v], E = f[v], C = f[v + 1] - E, A = l[v], b = l[v + 1], S = u[v], w = [], D = m / C, I = 1 / (C * i * s);
if (x && x.length > 0) {
var R = [];
R.push(h(A));
for (var M = 0, L = x.length; M < L; M++) {
var O = h(x[M]);
R.push(O);
}
R.push(h(b));
var P = new c(R);
P.computeBeziers();
for (var F = P.progresses; 1 - D > 1e-6; ) {
var N, B, k, z;
if ((T = r(T = D, S)) < 0) {
z = (0 - T) * (B = P.beziers[0]).getLength();
k = B.start.sub(B.endCtrlPoint).normalize();
N = B.start.add(k.mul(z));
} else if (T > 1) {
z = (T - 1) * (B = P.beziers[P.beziers.length - 1]).getLength();
k = B.end.sub(B.startCtrlPoint).normalize();
N = B.end.add(k.mul(z));
} else {
var U = a(F, T);
U < 0 && (U = ~U);
T -= U > 0 ? F[U - 1] : 0;
T /= P.ratios[U];
N = P.beziers[U].getPointAt(T);
}
w.push(N);
D += I;
}
} else for (;1 - D > 1e-6; ) {
T = r(T = D, S);
w.push(A.lerp(b, T));
D += I;
}
g = "constant" === S ? S : n.Linear;
for (M = 0, L = w.length; M < L; M++) {
var H = E + m + I * M * C;
V(w[M], g, H);
}
m = Math.abs(D - 1) > 1e-6 ? (D - 1) * C : 0;
}
f[f.length - 1] !== p[p.length - 1] && V(l[l.length - 1], g, f[f.length - 1]);
} else e.values = l;
function V(t, e, i) {
_.push(t);
d.push(e);
p.push(i);
}
}
0;
e.exports = {
sampleMotionPaths: l,
Curve: c,
Bezier: h
};
}), {
"../core/utils/binary-search": 210,
"./animation-curves": 11,
"./bezier": 14
} ],
18: [ (function(t, e, i) {
var n = cc.js, r = t("../core/CCDebug");
function s() {
this._isPlaying = !1;
this._isPaused = !1;
this._stepOnce = !1;
}
var a = s.prototype;
n.get(a, "isPlaying", (function() {
return this._isPlaying;
}), !0);
n.get(a, "isPaused", (function() {
return this._isPaused;
}), !0);
var o = function() {};
a.onPlay = o;
a.onPause = o;
a.onResume = o;
a.onStop = o;
a.onError = o;
a.play = function() {
if (this._isPlaying) if (this._isPaused) {
this._isPaused = !1;
this.onResume();
} else this.onError(r.getError(3912)); else {
this._isPlaying = !0;
this.onPlay();
}
};
a.stop = function() {
if (this._isPlaying) {
this._isPlaying = !1;
this.onStop();
this._isPaused = !1;
}
};
a.pause = function() {
if (this._isPlaying && !this._isPaused) {
this._isPaused = !0;
this.onPause();
}
};
a.resume = function() {
if (this._isPlaying && this._isPaused) {
this._isPaused = !1;
this.onResume();
}
};
a.step = function() {
this.pause();
this._stepOnce = !0;
this._isPlaying || this.play();
};
e.exports = s;
}), {
"../core/CCDebug": 26
} ],
19: [ (function(t, e, i) {
var n = {
Loop: 2,
ShouldWrap: 4,
PingPong: 22,
Reverse: 36
}, r = cc.Enum({
Default: 0,
Normal: 1,
Reverse: n.Reverse,
Loop: n.Loop,
LoopReverse: n.Loop | n.Reverse,
PingPong: n.PingPong,
PingPongReverse: n.PingPong | n.Reverse
});
cc.WrapMode = r;
function s(t) {
if (t) this.set(t); else {
this.ratio = 0;
this.time = 0;
this.direction = 1;
this.stopped = !0;
this.iterations = 0;
this.frameIndex = void 0;
}
}
s.prototype.set = function(t) {
this.ratio = t.ratio;
this.time = t.time;
this.direction = t.direction;
this.stopped = t.stopped;
this.iterations = t.iterations;
this.frameIndex = t.frameIndex;
};
e.exports = {
WrapModeMask: n,
WrapMode: r,
WrappedInfo: s
};
}), {} ],
20: [ (function(t, e, i) {
var n = t("../core/event/event-target"), r = t("../core/platform/CCSys"), s = t("../core/assets/CCAudioClip").LoadMode, a = !1, o = [], c = function(t) {
n.call(this);
this._src = t;
this._element = null;
this.id = 0;
this._volume = 1;
this._loop = !1;
this._nextTime = 0;
this._state = c.State.INITIALZING;
this._onended = function() {
this._state = c.State.STOPPED;
this.emit("ended");
}.bind(this);
};
cc.js.extend(c, n);
c.State = {
ERROR: -1,
INITIALZING: 0,
PLAYING: 1,
PAUSED: 2,
STOPPED: 3
};
(function(t) {
t._bindEnded = function(t) {
t = t || this._onended;
var e = this._element;
this._src && e instanceof HTMLAudioElement ? e.addEventListener("ended", t) : e.onended = t;
};
t._unbindEnded = function() {
var t = this._element;
t instanceof HTMLAudioElement ? t.removeEventListener("ended", this._onended) : t && (t.onended = null);
};
t._onLoaded = function() {
var t = this._src._nativeAsset;
if (t instanceof HTMLAudioElement) {
this._element || (this._element = document.createElement("audio"));
this._element.src = t.src;
} else this._element = new h(t, this);
this.setVolume(this._volume);
this.setLoop(this._loop);
0 !== this._nextTime && this.setCurrentTime(this._nextTime);
this._state === c.State.PLAYING ? this.play() : this._state = c.State.INITIALZING;
};
t.play = function() {
this._state = c.State.PLAYING;
if (this._element) {
this._bindEnded();
this._element.play();
this._src && this._src.loadMode === s.DOM_AUDIO && this._element.paused && o.push({
instance: this,
offset: 0,
audio: this._element
});
if (!a) {
a = !0;
cc.game.canvas.addEventListener("touchstart", (function() {
for (var t = void 0; t = o.pop(); ) t.audio.play(t.offset);
}));
}
}
};
t.destroy = function() {
0;
this._element = null;
};
t.pause = function() {
if (this._element && this._state === c.State.PLAYING) {
this._unbindEnded();
this._element.pause();
this._state = c.State.PAUSED;
}
};
t.resume = function() {
if (this._element && this._state === c.State.PAUSED) {
this._bindEnded();
this._element.play();
this._state = c.State.PLAYING;
}
};
t.stop = function() {
if (this._element) {
this._element.pause();
try {
this._element.currentTime = 0;
} catch (t) {}
for (var t = 0; t < o.length; t++) if (o[t].instance === this) {
o.splice(t, 1);
break;
}
this._unbindEnded();
this.emit("stop");
this._state = c.State.STOPPED;
}
};
t.setLoop = function(t) {
this._loop = t;
this._element && (this._element.loop = t);
};
t.getLoop = function() {
return this._loop;
};
t.setVolume = function(t) {
this._volume = t;
this._element && (this._element.volume = t);
};
t.getVolume = function() {
return this._volume;
};
t.setCurrentTime = function(t) {
var e = this;
if (this._element) {
this._nextTime = 0;
this._unbindEnded();
this._bindEnded(function() {
this._bindEnded();
}.bind(this));
try {
this._element.currentTime = t;
} catch (i) {
(function() {
var i = e._element;
i.addEventListener && (function() {
var e = function() {
i.removeEventListener("loadedmetadata", e);
i.currentTime = t;
};
i.addEventListener("loadedmetadata", e);
})();
})();
}
} else this._nextTime = t;
};
t.getCurrentTime = function() {
return this._element ? this._element.currentTime : 0;
};
t.getDuration = function() {
return this._element ? this._element.duration : 0;
};
t.getState = function() {
var t = this._element;
t && (c.State.PLAYING === this._state && t.paused ? this._state = c.State.STOPPED : c.State.STOPPED !== this._state || t.paused || (this._state = c.State.PLAYING));
return this._state;
};
Object.defineProperty(t, "src", {
get: function() {
return this._src;
},
set: function(t) {
var e = this;
this._unbindEnded();
if (t) {
this._src = t;
t.loaded ? this._onLoaded() : (function() {
var i = e;
t.once("load", (function() {
t === i._src && i._onLoaded();
}));
cc.loader.load({
url: t.nativeUrl,
skips: [ "Loader" ]
}, (function(e, i) {
e ? cc.error(e) : t.loaded || (t._nativeAsset = i);
}));
})();
} else {
this._src = null;
this._element instanceof HTMLAudioElement ? this._element.src = "" : this._element = null;
this._state = c.State.INITIALZING;
}
return t;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(t, "paused", {
get: function() {
return !this._element || this._element.paused;
},
enumerable: !0,
configurable: !0
});
})(c.prototype);
var h = function(t, e) {
this._audio = e;
this._context = r.__audioSupport.context;
this._buffer = t;
this._gainObj = this._context.createGain();
this._volume = 1;
this._gainObj.gain.setTargetAtTime ? this._gainObj.gain.setTargetAtTime(this._volume, this._context.currentTime, .01) : this._gainObj.gain.value = 1;
this._gainObj.connect(this._context.destination);
this._loop = !1;
this._startTime = -1;
this._currentSource = null;
this.playedLength = 0;
this._currentTimer = null;
this._endCallback = function() {
this.onended && this.onended(this);
}.bind(this);
};
(function(t) {
t.play = function(t) {
var e = this;
if (this._currentSource && !this.paused) {
this._currentSource.onended = null;
this._currentSource.stop(0);
this.playedLength = 0;
}
var i = this._context.createBufferSource();
i.buffer = this._buffer;
i.connect(this._gainObj);
i.loop = this._loop;
this._startTime = this._context.currentTime;
(t = t || this.playedLength) && (this._startTime -= t);
var n = this._buffer.duration, r = t, s = void 0;
if (this._loop) i.start ? i.start(0, r) : i.notoGrainOn ? i.noteGrainOn(0, r) : i.noteOn(0, r); else {
s = n - t;
i.start ? i.start(0, r, s) : i.noteGrainOn ? i.noteGrainOn(0, r, s) : i.noteOn(0, r, s);
}
this._currentSource = i;
i.onended = this._endCallback;
i.context.state && "suspended" !== i.context.state || 0 !== this._context.currentTime || (function() {
var i = e;
clearTimeout(e._currentTimer);
e._currentTimer = setTimeout((function() {
0 === i._context.currentTime && o.push({
instance: i._audio,
offset: t,
audio: i
});
}), 10);
})();
};
t.pause = function() {
clearTimeout(this._currentTimer);
if (!this.paused) {
this.playedLength = this._context.currentTime - this._startTime;
this.playedLength %= this._buffer.duration;
var t = this._currentSource;
this._currentSource = null;
this._startTime = -1;
t && t.stop(0);
}
};
Object.defineProperty(t, "paused", {
get: function() {
return (!this._currentSource || !this._currentSource.loop) && (-1 === this._startTime || this._context.currentTime - this._startTime > this._buffer.duration);
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(t, "loop", {
get: function() {
return this._loop;
},
set: function(t) {
this._currentSource && (this._currentSource.loop = t);
return this._loop = t;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(t, "volume", {
get: function() {
return this._volume;
},
set: function(t) {
this._volume = t;
this._gainObj.gain.setTargetAtTime ? this._gainObj.gain.setTargetAtTime(this._volume, this._context.currentTime, .01) : this._volume.gain.value = t;
if (r.os === r.OS_IOS && !this.paused && this._currentSource) {
this._currentSource.onended = null;
this.pause();
this.play();
}
return t;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(t, "currentTime", {
get: function() {
if (this.paused) return this.playedLength;
this.playedLength = this._context.currentTime - this._startTime;
this.playedLength %= this._buffer.duration;
return this.playedLength;
},
set: function(t) {
if (this.paused) this.playedLength = t; else {
this.pause();
this.playedLength = t;
this.play();
}
return t;
},
enumerable: !0,
configurable: !0
});
Object.defineProperty(t, "duration", {
get: function() {
return this._buffer.duration;
},
enumerable: !0,
configurable: !0
});
})(h.prototype);
e.exports = cc.Audio = c;
}), {
"../core/assets/CCAudioClip": 34,
"../core/event/event-target": 102,
"../core/platform/CCSys": 143
} ],
21: [ (function(i, n, r) {
var s = i("./CCAudio"), a = i("../core/assets/CCAudioClip"), o = cc.js, c = 0, h = o.createMap(!0), l = {}, u = [], f = function(t) {
t._finishCallback = null;
if (u.length < 32) {
t.off("ended");
t.off("stop");
t.src = null;
u.push(t);
} else t.destroy();
}, _ = function(t) {
var e = c++, i = l[t];
i || (i = l[t] = []);
if (m._maxAudioInstance <= i.length) {
var n = i.shift();
d(n).stop();
}
var r = u.pop() || new s(), a = function() {
if (d(this.id)) {
delete h[this.id];
var t = i.indexOf(this.id);
cc.js.array.fastRemoveAt(i, t);
}
f(this);
};
r.on("ended", (function() {
this._finishCallback && this._finishCallback();
a.call(this);
}), r);
r.on("stop", a, r);
r.id = e;
h[e] = r;
i.push(e);
return r;
}, d = function(t) {
return h[t];
}, p = function(i) {
void 0 === i ? i = 1 : "string" === ("object" === (e = typeof i) ? t(i) : e) && (i = Number.parseFloat(i));
return i;
}, m = {
AudioState: s.State,
_maxWebAudioSize: 2097152,
_maxAudioInstance: 24,
_id2audio: h,
play: function(i, n, r) {
var s, o = i;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
s = _(o = i);
a._loadByUrl(o, (function(t, e) {
e && (s.src = e);
}));
} else {
if (!i) return;
o = i.nativeUrl;
(s = _(o)).src = i;
}
s.setLoop(n || !1);
r = p(r);
s.setVolume(r);
s.play();
return s.id;
},
setLoop: function(t, e) {
var i = d(t);
i && i.setLoop && i.setLoop(e);
},
isLoop: function(t) {
var e = d(t);
return !(!e || !e.getLoop) && e.getLoop();
},
setVolume: function(t, e) {
var i = d(t);
i && i.setVolume(e);
},
getVolume: function(t) {
var e = d(t);
return e ? e.getVolume() : 1;
},
setCurrentTime: function(t, e) {
var i = d(t);
if (i) {
i.setCurrentTime(e);
return !0;
}
return !1;
},
getCurrentTime: function(t) {
var e = d(t);
return e ? e.getCurrentTime() : 0;
},
getDuration: function(t) {
var e = d(t);
return e ? e.getDuration() : 0;
},
getState: function(t) {
var e = d(t);
return e ? e.getState() : this.AudioState.ERROR;
},
setFinishCallback: function(t, e) {
var i = d(t);
i && (i._finishCallback = e);
},
pause: function(t) {
var e = d(t);
if (e) {
e.pause();
return !0;
}
return !1;
},
_pauseIDCache: [],
pauseAll: function() {
for (var t in h) {
var e = h[t];
if (e.getState() === s.State.PLAYING) {
this._pauseIDCache.push(t);
e.pause();
}
}
},
resume: function(t) {
var e = d(t);
e && e.resume();
},
resumeAll: function() {
for (var t = 0; t < this._pauseIDCache.length; ++t) {
var e = this._pauseIDCache[t], i = d(e);
i && i.resume();
}
this._pauseIDCache.length = 0;
},
stop: function(t) {
var e = d(t);
if (e) {
e.stop();
return !0;
}
return !1;
},
stopAll: function() {
for (var t in h) {
var e = h[t];
e && e.stop();
}
},
setMaxAudioInstance: function(t) {
this._maxAudioInstance = t;
},
getMaxAudioInstance: function() {
return this._maxAudioInstance;
},
uncache: function(i) {
var n = i;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
cc.warnID(8401, "cc.audioEngine", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
n = i;
} else {
if (!i) return;
n = i.nativeUrl;
}
var r = l[n];
if (r) for (;r.length > 0; ) {
var s = r.pop(), a = h[s];
if (a) {
a.stop();
delete h[s];
}
}
},
uncacheAll: function() {
this.stopAll();
var t = void 0;
for (var e in h) (t = h[e]) && t.destroy();
for (;t = u.pop(); ) t.destroy();
h = o.createMap(!0);
l = {};
},
getProfile: function(t) {},
preload: function(t, e) {
0;
cc.loader.load(t, e && function(t) {
t || e();
});
},
setMaxWebAudioSize: function(t) {
this._maxWebAudioSize = 1024 * t;
},
_breakCache: null,
_break: function() {
this._breakCache = [];
for (var t in h) {
var e = h[t];
if (e.getState() === s.State.PLAYING) {
this._breakCache.push(t);
e.pause();
}
}
},
_restore: function() {
if (this._breakCache) {
for (;this._breakCache.length > 0; ) {
var t = this._breakCache.pop(), e = d(t);
e && e.resume && e.resume();
}
this._breakCache = null;
}
},
_music: {
id: -1,
loop: !1,
volume: 1
},
_effect: {
volume: 1,
pauseCache: []
},
playMusic: function(t, e) {
var i = this._music;
this.stop(i.id);
i.id = this.play(t, e, i.volume);
i.loop = e;
return i.id;
},
stopMusic: function() {
this.stop(this._music.id);
},
pauseMusic: function() {
this.pause(this._music.id);
return this._music.id;
},
resumeMusic: function() {
this.resume(this._music.id);
return this._music.id;
},
getMusicVolume: function() {
return this._music.volume;
},
setMusicVolume: function(t) {
t = p(t);
var e = this._music;
e.volume = t;
this.setVolume(e.id, e.volume);
return e.volume;
},
isMusicPlaying: function() {
return this.getState(this._music.id) === this.AudioState.PLAYING;
},
playEffect: function(t, e) {
return this.play(t, e || !1, this._effect.volume);
},
setEffectsVolume: function(t) {
t = p(t);
var e = this._music.id;
this._effect.volume = t;
for (var i in h) {
var n = h[i];
n && n.id !== e && m.setVolume(i, t);
}
},
getEffectsVolume: function() {
return this._effect.volume;
},
pauseEffect: function(t) {
return this.pause(t);
},
pauseAllEffects: function() {
var t = this._music.id, e = this._effect;
e.pauseCache.length = 0;
for (var i in h) {
var n = h[i];
if (n && n.id !== t) {
if (n.getState() === this.AudioState.PLAYING) {
e.pauseCache.push(i);
n.pause();
}
}
}
},
resumeEffect: function(t) {
this.resume(t);
},
resumeAllEffects: function() {
for (var t = this._effect.pauseCache, e = 0; e < t.length; ++e) {
var i = t[e], n = h[i];
n && n.resume();
}
},
stopEffect: function(t) {
return this.stop(t);
},
stopAllEffects: function() {
var t = this._music.id;
for (var e in h) {
var i = h[e];
if (i && i.id !== t) {
i.getState() === m.AudioState.PLAYING && i.stop();
}
}
}
};
n.exports = cc.audioEngine = m;
}), {
"../core/assets/CCAudioClip": 34,
"./CCAudio": 20
} ],
22: [ (function(t, e, i) {
var n = {
name: "Jacob__Codec"
};
n.Base64 = t("./base64");
n.GZip = t("./gzip");
n.unzip = function() {
return n.GZip.gunzip.apply(n.GZip, arguments);
};
n.unzipBase64 = function() {
var t = n.Base64.decode.apply(n.Base64, arguments);
try {
return n.GZip.gunzip.call(n.GZip, t);
} catch (e) {
return t.slice(7);
}
};
n.unzipBase64AsArray = function(t, e) {
e = e || 1;
var i, n, r, s = this.unzipBase64(t), a = [];
for (i = 0, r = s.length / e; i < r; i++) {
a[i] = 0;
for (n = e - 1; n >= 0; --n) a[i] += s.charCodeAt(i * e + n) << 8 * n;
}
return a;
};
n.unzipAsArray = function(t, e) {
e = e || 1;
var i, n, r, s = this.unzip(t), a = [];
for (i = 0, r = s.length / e; i < r; i++) {
a[i] = 0;
for (n = e - 1; n >= 0; --n) a[i] += s.charCodeAt(i * e + n) << 8 * n;
}
return a;
};
cc.codec = e.exports = n;
}), {
"./base64": 23,
"./gzip": 24
} ],
23: [ (function(t, e, i) {
var n = t("../core/utils/misc").BASE64_VALUES, r = {
name: "Jacob__Codec__Base64",
decode: function(t) {
var e, i, r, s, a, o, c, h = [], l = 0;
t = t.replace(/[^A-Za-z0-9\+\/\=]/g, "");
for (;l < t.length; ) {
s = n[t.charCodeAt(l++)];
a = n[t.charCodeAt(l++)];
o = n[t.charCodeAt(l++)];
c = n[t.charCodeAt(l++)];
e = s << 2 | a >> 4;
i = (15 & a) << 4 | o >> 2;
r = (3 & o) << 6 | c;
h.push(String.fromCharCode(e));
64 !== o && h.push(String.fromCharCode(i));
64 !== c && h.push(String.fromCharCode(r));
}
return h = h.join("");
},
decodeAsArray: function(t, e) {
var i, n, r, s = this.decode(t), a = [];
for (i = 0, r = s.length / e; i < r; i++) {
a[i] = 0;
for (n = e - 1; n >= 0; --n) a[i] += s.charCodeAt(i * e + n) << 8 * n;
}
return a;
}
};
e.exports = r;
}), {
"../core/utils/misc": 216
} ],
24: [ (function(t, e, i) {
var n = function(t) {
this.data = t;
this.debug = !1;
this.gpflags = void 0;
this.files = 0;
this.unzipped = [];
this.buf32k = new Array(32768);
this.bIdx = 0;
this.modeZIP = !1;
this.bytepos = 0;
this.bb = 1;
this.bits = 0;
this.nameBuf = [];
this.fileout = void 0;
this.literalTree = new Array(n.LITERALS);
this.distanceTree = new Array(32);
this.treepos = 0;
this.Places = null;
this.len = 0;
this.fpos = new Array(17);
this.fpos[0] = 0;
this.flens = void 0;
this.fmax = void 0;
};
n.gunzip = function(t) {
t.constructor === Array || (t.constructor, String);
return new n(t).gunzip()[0][0];
};
n.HufNode = function() {
this.b0 = 0;
this.b1 = 0;
this.jump = null;
this.jumppos = -1;
};
n.LITERALS = 288;
n.NAMEMAX = 256;
n.bitReverse = [ 0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255 ];
n.cplens = [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];
n.cplext = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99 ];
n.cpdist = [ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];
n.cpdext = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];
n.border = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
n.prototype.gunzip = function() {
this.outputArr = [];
this.nextFile();
return this.unzipped;
};
n.prototype.readByte = function() {
this.bits += 8;
return this.bytepos < this.data.length ? this.data.charCodeAt(this.bytepos++) : -1;
};
n.prototype.byteAlign = function() {
this.bb = 1;
};
n.prototype.readBit = function() {
var t;
this.bits++;
t = 1 & this.bb;
this.bb >>= 1;
if (0 === this.bb) {
this.bb = this.readByte();
t = 1 & this.bb;
this.bb = this.bb >> 1 | 128;
}
return t;
};
n.prototype.readBits = function(t) {
for (var e = 0, i = t; i--; ) e = e << 1 | this.readBit();
t && (e = n.bitReverse[e] >> 8 - t);
return e;
};
n.prototype.flushBuffer = function() {
this.bIdx = 0;
};
n.prototype.addBuffer = function(t) {
this.buf32k[this.bIdx++] = t;
this.outputArr.push(String.fromCharCode(t));
32768 === this.bIdx && (this.bIdx = 0);
};
n.prototype.IsPat = function() {
for (;;) {
if (this.fpos[this.len] >= this.fmax) return -1;
if (this.flens[this.fpos[this.len]] === this.len) return this.fpos[this.len]++;
this.fpos[this.len]++;
}
};
n.prototype.Rec = function() {
var t, e = this.Places[this.treepos];
if (17 === this.len) return -1;
this.treepos++;
this.len++;
if ((t = this.IsPat()) >= 0) e.b0 = t; else {
e.b0 = 32768;
if (this.Rec()) return -1;
}
if ((t = this.IsPat()) >= 0) {
e.b1 = t;
e.jump = null;
} else {
e.b1 = 32768;
e.jump = this.Places[this.treepos];
e.jumppos = this.treepos;
if (this.Rec()) return -1;
}
this.len--;
return 0;
};
n.prototype.CreateTree = function(t, e, i, n) {
var r;
this.Places = t;
this.treepos = 0;
this.flens = i;
this.fmax = e;
for (r = 0; r < 17; r++) this.fpos[r] = 0;
this.len = 0;
return this.Rec() ? -1 : 0;
};
n.prototype.DecodeValue = function(t) {
for (var e, i, n = 0, r = t[n]; ;) if (this.readBit()) {
if (!(32768 & r.b1)) return r.b1;
r = r.jump;
e = t.length;
for (i = 0; i < e; i++) if (t[i] === r) {
n = i;
break;
}
} else {
if (!(32768 & r.b0)) return r.b0;
r = t[++n];
}
return -1;
};
n.prototype.DeflateLoop = function() {
var t, e, i;
do {
t = this.readBit();
if (0 === (e = this.readBits(2))) {
var r, s;
this.byteAlign();
r = this.readByte();
r |= this.readByte() << 8;
s = this.readByte();
65535 & (r ^ ~(s |= this.readByte() << 8)) && document.write("BlockLen checksum mismatch\n");
for (;r--; ) {
a = this.readByte();
this.addBuffer(a);
}
} else if (1 === e) for (;;) {
(o = n.bitReverse[this.readBits(7)] >> 1) > 23 ? (o = o << 1 | this.readBit()) > 199 ? o = (o -= 128) << 1 | this.readBit() : (o -= 48) > 143 && (o += 136) : o += 256;
if (o < 256) this.addBuffer(o); else {
if (256 === o) break;
o -= 257;
p = this.readBits(n.cplext[o]) + n.cplens[o];
o = n.bitReverse[this.readBits(5)] >> 3;
if (n.cpdext[o] > 8) {
m = this.readBits(8);
m |= this.readBits(n.cpdext[o] - 8) << 8;
} else m = this.readBits(n.cpdext[o]);
m += n.cpdist[o];
for (o = 0; o < p; o++) {
var a = this.buf32k[this.bIdx - m & 32767];
this.addBuffer(a);
}
}
} else if (2 === e) {
var o, c, h, l, u, f = new Array(320);
h = 257 + this.readBits(5);
l = 1 + this.readBits(5);
u = 4 + this.readBits(4);
for (o = 0; o < 19; o++) f[o] = 0;
for (o = 0; o < u; o++) f[n.border[o]] = this.readBits(3);
p = this.distanceTree.length;
for (i = 0; i < p; i++) this.distanceTree[i] = new n.HufNode();
if (this.CreateTree(this.distanceTree, 19, f, 0)) {
this.flushBuffer();
return 1;
}
c = h + l;
i = 0;
for (;i < c; ) {
0;
if ((o = this.DecodeValue(this.distanceTree)) < 16) f[i++] = o; else if (16 === o) {
var _;
if (i + (o = 3 + this.readBits(2)) > c) {
this.flushBuffer();
return 1;
}
_ = i ? f[i - 1] : 0;
for (;o--; ) f[i++] = _;
} else {
if (i + (o = 17 === o ? 3 + this.readBits(3) : 11 + this.readBits(7)) > c) {
this.flushBuffer();
return 1;
}
for (;o--; ) f[i++] = 0;
}
}
p = this.literalTree.length;
for (i = 0; i < p; i++) this.literalTree[i] = new n.HufNode();
if (this.CreateTree(this.literalTree, h, f, 0)) {
this.flushBuffer();
return 1;
}
p = this.literalTree.length;
for (i = 0; i < p; i++) this.distanceTree[i] = new n.HufNode();
var d = new Array();
for (i = h; i < f.length; i++) d[i - h] = f[i];
if (this.CreateTree(this.distanceTree, l, d, 0)) {
this.flushBuffer();
return 1;
}
for (;;) if ((o = this.DecodeValue(this.literalTree)) >= 256) {
var p, m;
if (0 === (o -= 256)) break;
o--;
p = this.readBits(n.cplext[o]) + n.cplens[o];
o = this.DecodeValue(this.distanceTree);
if (n.cpdext[o] > 8) {
m = this.readBits(8);
m |= this.readBits(n.cpdext[o] - 8) << 8;
} else m = this.readBits(n.cpdext[o]);
m += n.cpdist[o];
for (;p--; ) {
a = this.buf32k[this.bIdx - m & 32767];
this.addBuffer(a);
}
} else this.addBuffer(o);
}
} while (!t);
this.flushBuffer();
this.byteAlign();
return 0;
};
n.prototype.unzipFile = function(t) {
var e;
this.gunzip();
for (e = 0; e < this.unzipped.length; e++) if (this.unzipped[e][1] === t) return this.unzipped[e][0];
};
n.prototype.nextFile = function() {
this.outputArr = [];
this.modeZIP = !1;
var t = [];
t[0] = this.readByte();
t[1] = this.readByte();
if (120 === t[0] && 218 === t[1]) {
this.DeflateLoop();
this.unzipped[this.files] = [ this.outputArr.join(""), "geonext.gxt" ];
this.files++;
}
if (31 === t[0] && 139 === t[1]) {
this.skipdir();
this.unzipped[this.files] = [ this.outputArr.join(""), "file" ];
this.files++;
}
if (80 === t[0] && 75 === t[1]) {
this.modeZIP = !0;
t[2] = this.readByte();
t[3] = this.readByte();
if (3 === t[2] && 4 === t[3]) {
t[0] = this.readByte();
t[1] = this.readByte();
this.gpflags = this.readByte();
this.gpflags |= this.readByte() << 8;
var e = this.readByte();
e |= this.readByte() << 8;
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
var i = this.readByte();
i |= this.readByte() << 8;
var r = this.readByte();
r |= this.readByte() << 8;
a = 0;
this.nameBuf = [];
for (;i--; ) {
var s = this.readByte();
"/" === s | ":" === s ? a = 0 : a < n.NAMEMAX - 1 && (this.nameBuf[a++] = String.fromCharCode(s));
}
this.fileout || (this.fileout = this.nameBuf);
for (var a = 0; a < r; ) {
s = this.readByte();
a++;
}
if (8 === e) {
this.DeflateLoop();
this.unzipped[this.files] = [ this.outputArr.join(""), this.nameBuf.join("") ];
this.files++;
}
this.skipdir();
}
}
};
n.prototype.skipdir = function() {
var t, e, i = [];
if (8 & this.gpflags) {
i[0] = this.readByte();
i[1] = this.readByte();
i[2] = this.readByte();
i[3] = this.readByte();
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
}
this.modeZIP && this.nextFile();
i[0] = this.readByte();
if (8 !== i[0]) return 0;
this.gpflags = this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
this.readByte();
if (4 & this.gpflags) {
i[0] = this.readByte();
i[2] = this.readByte();
this.len = i[0] + 256 * i[1];
for (t = 0; t < this.len; t++) this.readByte();
}
if (8 & this.gpflags) {
t = 0;
this.nameBuf = [];
for (;e = this.readByte(); ) {
"7" !== e && ":" !== e || (t = 0);
t < n.NAMEMAX - 1 && (this.nameBuf[t++] = e);
}
}
if (16 & this.gpflags) for (;e = this.readByte(); ) ;
if (2 & this.gpflags) {
this.readByte();
this.readByte();
}
this.DeflateLoop();
this.readByte();
this.readByte() << 8;
this.readByte() << 16;
this.readByte() << 24;
this.modeZIP && this.nextFile();
};
e.exports = n;
}), {} ],
25: [ (function(i, n, r) {
(function() {
"use strict";
function i(t) {
throw t;
}
var n = void 0, r = !0, s = this;
function a(t, e) {
var i, r = t.split("."), a = s;
!(r[0] in a) && a.execScript && a.execScript("var " + r[0]);
for (;r.length && (i = r.shift()); ) r.length || e === n ? a = a[i] ? a[i] : a[i] = {} : a[i] = e;
}
var o = "undefined" !== ("object" === (e = typeof Uint8Array) ? t(Uint8Array) : e) && "undefined" !== ("object" === (e = typeof Uint16Array) ? t(Uint16Array) : e) && "undefined" !== ("object" === (e = typeof Uint32Array) ? t(Uint32Array) : e);
function c(i) {
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
var n, r, s = i.split("");
n = 0;
for (r = s.length; n < r; n++) s[n] = (255 & s[n].charCodeAt(0)) >>> 0;
i = s;
}
for (var a, o = 1, c = 0, h = i.length, l = 0; 0 < h; ) {
h -= a = 1024 < h ? 1024 : h;
do {
c += o += i[l++];
} while (--a);
o %= 65521;
c %= 65521;
}
return (c << 16 | o) >>> 0;
}
function h(n, r) {
this.index = "number" === ("object" === (e = typeof r) ? t(r) : e) ? r : 0;
this.i = 0;
this.buffer = n instanceof (o ? Uint8Array : Array) ? n : new (o ? Uint8Array : Array)(32768);
2 * this.buffer.length <= this.index && i(Error("invalid index"));
this.buffer.length <= this.index && this.f();
}
h.prototype.f = function() {
var t, e = this.buffer, i = e.length, n = new (o ? Uint8Array : Array)(i << 1);
if (o) n.set(e); else for (t = 0; t < i; ++t) n[t] = e[t];
return this.buffer = n;
};
h.prototype.d = function(t, e, i) {
var n, r = this.buffer, s = this.index, a = this.i, o = r[s];
i && 1 < e && (t = 8 < e ? (p[255 & t] << 24 | p[t >>> 8 & 255] << 16 | p[t >>> 16 & 255] << 8 | p[t >>> 24 & 255]) >> 32 - e : p[t] >> 8 - e);
if (8 > e + a) o = o << e | t, a += e; else for (n = 0; n < e; ++n) o = o << 1 | t >> e - n - 1 & 1, 
8 == ++a && (a = 0, r[s++] = p[o], o = 0, s === r.length && (r = this.f()));
r[s] = o;
this.buffer = r;
this.i = a;
this.index = s;
};
h.prototype.finish = function() {
var t, e = this.buffer, i = this.index;
0 < this.i && (e[i] <<= 8 - this.i, e[i] = p[e[i]], i++);
o ? t = e.subarray(0, i) : (e.length = i, t = e);
return t;
};
var l, u = new (o ? Uint8Array : Array)(256);
for (l = 0; 256 > l; ++l) {
for (var f = d = l, _ = 7, d = d >>> 1; d; d >>>= 1) f <<= 1, f |= 1 & d, --_;
u[l] = (f << _ & 255) >>> 0;
}
var p = u;
o && new Uint32Array([ 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117 ]);
function m(t) {
this.buffer = new (o ? Uint16Array : Array)(2 * t);
this.length = 0;
}
m.prototype.getParent = function(t) {
return 2 * ((t - 2) / 4 | 0);
};
m.prototype.push = function(t, e) {
var i, n, r, s = this.buffer;
i = this.length;
s[this.length++] = e;
for (s[this.length++] = t; 0 < i && (n = this.getParent(i), s[i] > s[n]); ) r = s[i], 
s[i] = s[n], s[n] = r, r = s[i + 1], s[i + 1] = s[n + 1], s[n + 1] = r, i = n;
return this.length;
};
m.prototype.pop = function() {
var t, e, i, n, r, s = this.buffer;
e = s[0];
t = s[1];
this.length -= 2;
s[0] = s[this.length];
s[1] = s[this.length + 1];
for (r = 0; !((n = 2 * r + 2) >= this.length); ) {
n + 2 < this.length && s[n + 2] > s[n] && (n += 2);
if (!(s[n] > s[r])) break;
i = s[r], s[r] = s[n], s[n] = i, i = s[r + 1], s[r + 1] = s[n + 1], s[n + 1] = i;
r = n;
}
return {
index: t,
value: e,
length: this.length
};
};
function g(t) {
var e, i, n, r, s, a, c, h, l, u = t.length, f = 0, _ = Number.POSITIVE_INFINITY;
for (h = 0; h < u; ++h) t[h] > f && (f = t[h]), t[h] < _ && (_ = t[h]);
e = 1 << f;
i = new (o ? Uint32Array : Array)(e);
n = 1;
r = 0;
for (s = 2; n <= f; ) {
for (h = 0; h < u; ++h) if (t[h] === n) {
a = 0;
c = r;
for (l = 0; l < n; ++l) a = a << 1 | 1 & c, c >>= 1;
for (l = a; l < e; l += s) i[l] = n << 16 | h;
++r;
}
++n;
r <<= 1;
s <<= 1;
}
return [ i, f, _ ];
}
function v(i, n) {
this.h = T;
this.w = 0;
this.input = i;
this.b = 0;
n && (n.lazy && (this.w = n.lazy), "number" === ("object" === (e = typeof n.compressionType) ? t(n.compressionType) : e) && (this.h = n.compressionType), 
n.outputBuffer && (this.a = o && n.outputBuffer instanceof Array ? new Uint8Array(n.outputBuffer) : n.outputBuffer), 
"number" === ("object" === (e = typeof n.outputIndex) ? t(n.outputIndex) : e) && (this.b = n.outputIndex));
this.a || (this.a = new (o ? Uint8Array : Array)(32768));
}
var y, T = 2, x = {
NONE: 0,
r: 1,
j: T,
N: 3
}, E = [];
for (y = 0; 288 > y; y++) switch (r) {
case 143 >= y:
E.push([ y + 48, 8 ]);
break;

case 255 >= y:
E.push([ y - 144 + 400, 9 ]);
break;

case 279 >= y:
E.push([ y - 256 + 0, 7 ]);
break;

case 287 >= y:
E.push([ y - 280 + 192, 8 ]);
break;

default:
i("invalid literal: " + y);
}
v.prototype.n = function() {
var t, e, s, a, c = this.input;
switch (this.h) {
case 0:
s = 0;
for (a = c.length; s < a; ) {
var l, u, f, _ = e = o ? c.subarray(s, s + 65535) : c.slice(s, s + 65535), d = (s += e.length) === a, p = n, m = n, g = this.a, v = this.b;
if (o) {
for (g = new Uint8Array(this.a.buffer); g.length <= v + _.length + 5; ) g = new Uint8Array(g.length << 1);
g.set(this.a);
}
l = d ? 1 : 0;
g[v++] = 0 | l;
f = 65536 + ~(u = _.length) & 65535;
g[v++] = 255 & u;
g[v++] = u >>> 8 & 255;
g[v++] = 255 & f;
g[v++] = f >>> 8 & 255;
if (o) g.set(_, v), v += _.length, g = g.subarray(0, v); else {
p = 0;
for (m = _.length; p < m; ++p) g[v++] = _[p];
g.length = v;
}
this.b = v;
this.a = g;
}
break;

case 1:
var y = new h(new Uint8Array(this.a.buffer), this.b);
y.d(1, 1, r);
y.d(1, 2, r);
var x, C, A, b = I(this, c);
x = 0;
for (C = b.length; x < C; x++) if (A = b[x], h.prototype.d.apply(y, E[A]), 256 < A) y.d(b[++x], b[++x], r), 
y.d(b[++x], 5), y.d(b[++x], b[++x], r); else if (256 === A) break;
this.a = y.finish();
this.b = this.a.length;
break;

case T:
var S, w, D, L, O, P, F, N, B, k, z, U, H, V, W, G = new h(new Uint8Array(this.a), this.b), j = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ], X = Array(19);
S = T;
G.d(1, 1, r);
G.d(S, 2, r);
w = I(this, c);
F = M(P = R(this.L, 15));
B = M(N = R(this.K, 7));
for (D = 286; 257 < D && 0 === P[D - 1]; D--) ;
for (L = 30; 1 < L && 0 === N[L - 1]; L--) ;
var Y, q, Z, K, J, Q, $ = D, tt = L, et = new (o ? Uint32Array : Array)($ + tt), it = new (o ? Uint32Array : Array)(316), nt = new (o ? Uint8Array : Array)(19);
for (Y = q = 0; Y < $; Y++) et[q++] = P[Y];
for (Y = 0; Y < tt; Y++) et[q++] = N[Y];
if (!o) {
Y = 0;
for (K = nt.length; Y < K; ++Y) nt[Y] = 0;
}
Y = J = 0;
for (K = et.length; Y < K; Y += q) {
for (q = 1; Y + q < K && et[Y + q] === et[Y]; ++q) ;
Z = q;
if (0 === et[Y]) if (3 > Z) for (;0 < Z--; ) it[J++] = 0, nt[0]++; else for (;0 < Z; ) (Q = 138 > Z ? Z : 138) > Z - 3 && Q < Z && (Q = Z - 3), 
10 >= Q ? (it[J++] = 17, it[J++] = Q - 3, nt[17]++) : (it[J++] = 18, it[J++] = Q - 11, 
nt[18]++), Z -= Q; else if (it[J++] = et[Y], nt[et[Y]]++, 3 > --Z) for (;0 < Z--; ) it[J++] = et[Y], 
nt[et[Y]]++; else for (;0 < Z; ) (Q = 6 > Z ? Z : 6) > Z - 3 && Q < Z && (Q = Z - 3), 
it[J++] = 16, it[J++] = Q - 3, nt[16]++, Z -= Q;
}
t = o ? it.subarray(0, J) : it.slice(0, J);
k = R(nt, 7);
for (V = 0; 19 > V; V++) X[V] = k[j[V]];
for (O = 19; 4 < O && 0 === X[O - 1]; O--) ;
z = M(k);
G.d(D - 257, 5, r);
G.d(L - 1, 5, r);
G.d(O - 4, 4, r);
for (V = 0; V < O; V++) G.d(X[V], 3, r);
V = 0;
for (W = t.length; V < W; V++) if (U = t[V], G.d(z[U], k[U], r), 16 <= U) {
V++;
switch (U) {
case 16:
H = 2;
break;

case 17:
H = 3;
break;

case 18:
H = 7;
break;

default:
i("invalid code: " + U);
}
G.d(t[V], H, r);
}
var rt, st, at, ot, ct, ht, lt, ut, ft = [ F, P ], _t = [ B, N ];
ct = ft[0];
ht = ft[1];
lt = _t[0];
ut = _t[1];
rt = 0;
for (st = w.length; rt < st; ++rt) if (at = w[rt], G.d(ct[at], ht[at], r), 256 < at) G.d(w[++rt], w[++rt], r), 
ot = w[++rt], G.d(lt[ot], ut[ot], r), G.d(w[++rt], w[++rt], r); else if (256 === at) break;
this.a = G.finish();
this.b = this.a.length;
break;

default:
i("invalid compression type");
}
return this.a;
};
function C(t, e) {
this.length = t;
this.G = e;
}
function A() {
var t = b;
switch (r) {
case 3 === t:
return [ 257, t - 3, 0 ];

case 4 === t:
return [ 258, t - 4, 0 ];

case 5 === t:
return [ 259, t - 5, 0 ];

case 6 === t:
return [ 260, t - 6, 0 ];

case 7 === t:
return [ 261, t - 7, 0 ];

case 8 === t:
return [ 262, t - 8, 0 ];

case 9 === t:
return [ 263, t - 9, 0 ];

case 10 === t:
return [ 264, t - 10, 0 ];

case 12 >= t:
return [ 265, t - 11, 1 ];

case 14 >= t:
return [ 266, t - 13, 1 ];

case 16 >= t:
return [ 267, t - 15, 1 ];

case 18 >= t:
return [ 268, t - 17, 1 ];

case 22 >= t:
return [ 269, t - 19, 2 ];

case 26 >= t:
return [ 270, t - 23, 2 ];

case 30 >= t:
return [ 271, t - 27, 2 ];

case 34 >= t:
return [ 272, t - 31, 2 ];

case 42 >= t:
return [ 273, t - 35, 3 ];

case 50 >= t:
return [ 274, t - 43, 3 ];

case 58 >= t:
return [ 275, t - 51, 3 ];

case 66 >= t:
return [ 276, t - 59, 3 ];

case 82 >= t:
return [ 277, t - 67, 4 ];

case 98 >= t:
return [ 278, t - 83, 4 ];

case 114 >= t:
return [ 279, t - 99, 4 ];

case 130 >= t:
return [ 280, t - 115, 4 ];

case 162 >= t:
return [ 281, t - 131, 5 ];

case 194 >= t:
return [ 282, t - 163, 5 ];

case 226 >= t:
return [ 283, t - 195, 5 ];

case 257 >= t:
return [ 284, t - 227, 5 ];

case 258 === t:
return [ 285, t - 258, 0 ];

default:
i("invalid length: " + t);
}
}
var b, S, w = [];
for (b = 3; 258 >= b; b++) S = A(), w[b] = S[2] << 24 | S[1] << 16 | S[0];
var D = o ? new Uint32Array(w) : w;
function I(t, e) {
function s(t, e) {
var n, s, a, o, c = t.G, h = [], l = 0;
n = D[t.length];
h[l++] = 65535 & n;
h[l++] = n >> 16 & 255;
h[l++] = n >> 24;
switch (r) {
case 1 === c:
s = [ 0, c - 1, 0 ];
break;

case 2 === c:
s = [ 1, c - 2, 0 ];
break;

case 3 === c:
s = [ 2, c - 3, 0 ];
break;

case 4 === c:
s = [ 3, c - 4, 0 ];
break;

case 6 >= c:
s = [ 4, c - 5, 1 ];
break;

case 8 >= c:
s = [ 5, c - 7, 1 ];
break;

case 12 >= c:
s = [ 6, c - 9, 2 ];
break;

case 16 >= c:
s = [ 7, c - 13, 2 ];
break;

case 24 >= c:
s = [ 8, c - 17, 3 ];
break;

case 32 >= c:
s = [ 9, c - 25, 3 ];
break;

case 48 >= c:
s = [ 10, c - 33, 4 ];
break;

case 64 >= c:
s = [ 11, c - 49, 4 ];
break;

case 96 >= c:
s = [ 12, c - 65, 5 ];
break;

case 128 >= c:
s = [ 13, c - 97, 5 ];
break;

case 192 >= c:
s = [ 14, c - 129, 6 ];
break;

case 256 >= c:
s = [ 15, c - 193, 6 ];
break;

case 384 >= c:
s = [ 16, c - 257, 7 ];
break;

case 512 >= c:
s = [ 17, c - 385, 7 ];
break;

case 768 >= c:
s = [ 18, c - 513, 8 ];
break;

case 1024 >= c:
s = [ 19, c - 769, 8 ];
break;

case 1536 >= c:
s = [ 20, c - 1025, 9 ];
break;

case 2048 >= c:
s = [ 21, c - 1537, 9 ];
break;

case 3072 >= c:
s = [ 22, c - 2049, 10 ];
break;

case 4096 >= c:
s = [ 23, c - 3073, 10 ];
break;

case 6144 >= c:
s = [ 24, c - 4097, 11 ];
break;

case 8192 >= c:
s = [ 25, c - 6145, 11 ];
break;

case 12288 >= c:
s = [ 26, c - 8193, 12 ];
break;

case 16384 >= c:
s = [ 27, c - 12289, 12 ];
break;

case 24576 >= c:
s = [ 28, c - 16385, 13 ];
break;

case 32768 >= c:
s = [ 29, c - 24577, 13 ];
break;

default:
i("invalid distance");
}
n = s;
h[l++] = n[0];
h[l++] = n[1];
h[l++] = n[2];
a = 0;
for (o = h.length; a < o; ++a) g[v++] = h[a];
T[h[0]]++;
x[h[3]]++;
y = t.length + e - 1;
d = null;
}
var a, c, h, l, u, f, _, d, p, m = {}, g = o ? new Uint16Array(2 * e.length) : [], v = 0, y = 0, T = new (o ? Uint32Array : Array)(286), x = new (o ? Uint32Array : Array)(30), E = t.w;
if (!o) {
for (h = 0; 285 >= h; ) T[h++] = 0;
for (h = 0; 29 >= h; ) x[h++] = 0;
}
T[256] = 1;
a = 0;
for (c = e.length; a < c; ++a) {
h = u = 0;
for (l = 3; h < l && a + h !== c; ++h) u = u << 8 | e[a + h];
m[u] === n && (m[u] = []);
f = m[u];
if (!(0 < y--)) {
for (;0 < f.length && 32768 < a - f[0]; ) f.shift();
if (a + 3 >= c) {
d && s(d, -1);
h = 0;
for (l = c - a; h < l; ++h) p = e[a + h], g[v++] = p, ++T[p];
break;
}
if (0 < f.length) {
var A = n, b = n, S = 0, w = n, I = n, R = n, M = e.length, L = (I = 0, f.length);
t: for (;I < L; I++) {
A = f[L - I - 1];
w = 3;
if (3 < S) {
for (R = S; 3 < R; R--) if (e[A + R - 1] !== e[a + R - 1]) continue t;
w = S;
}
for (;258 > w && a + w < M && e[A + w] === e[a + w]; ) ++w;
w > S && (b = A, S = w);
if (258 === w) break;
}
_ = new C(S, a - b);
d ? d.length < _.length ? (p = e[a - 1], g[v++] = p, ++T[p], s(_, 0)) : s(d, -1) : _.length < E ? d = _ : s(_, 0);
} else d ? s(d, -1) : (p = e[a], g[v++] = p, ++T[p]);
}
f.push(a);
}
g[v++] = 256;
T[256]++;
t.L = T;
t.K = x;
return o ? g.subarray(0, v) : g;
}
function R(t, e) {
function i(t) {
var e = C[t][A[t]];
e === v ? (i(t + 1), i(t + 1)) : --x[e];
++A[t];
}
var n, r, s, a, c, h = t.length, l = new m(572), u = new (o ? Uint8Array : Array)(h);
if (!o) for (a = 0; a < h; a++) u[a] = 0;
for (a = 0; a < h; ++a) 0 < t[a] && l.push(a, t[a]);
n = Array(l.length / 2);
r = new (o ? Uint32Array : Array)(l.length / 2);
if (1 === n.length) return u[l.pop().index] = 1, u;
a = 0;
for (c = l.length / 2; a < c; ++a) n[a] = l.pop(), r[a] = n[a].value;
var f, _, d, p, g, v = r.length, y = new (o ? Uint16Array : Array)(e), T = new (o ? Uint8Array : Array)(e), x = new (o ? Uint8Array : Array)(v), E = Array(e), C = Array(e), A = Array(e), b = (1 << e) - v, S = 1 << e - 1;
y[e - 1] = v;
for (_ = 0; _ < e; ++_) b < S ? T[_] = 0 : (T[_] = 1, b -= S), b <<= 1, y[e - 2 - _] = (y[e - 1 - _] / 2 | 0) + v;
y[0] = T[0];
E[0] = Array(y[0]);
C[0] = Array(y[0]);
for (_ = 1; _ < e; ++_) y[_] > 2 * y[_ - 1] + T[_] && (y[_] = 2 * y[_ - 1] + T[_]), 
E[_] = Array(y[_]), C[_] = Array(y[_]);
for (f = 0; f < v; ++f) x[f] = e;
for (d = 0; d < y[e - 1]; ++d) E[e - 1][d] = r[d], C[e - 1][d] = d;
for (f = 0; f < e; ++f) A[f] = 0;
1 === T[e - 1] && (--x[0], ++A[e - 1]);
for (_ = e - 2; 0 <= _; --_) {
p = f = 0;
g = A[_ + 1];
for (d = 0; d < y[_]; d++) (p = E[_ + 1][g] + E[_ + 1][g + 1]) > r[f] ? (E[_][d] = p, 
C[_][d] = v, g += 2) : (E[_][d] = r[f], C[_][d] = f, ++f);
A[_] = 0;
1 === T[_] && i(_);
}
s = x;
a = 0;
for (c = n.length; a < c; ++a) u[n[a].index] = s[a];
return u;
}
function M(t) {
var e, n, r, s, a = new (o ? Uint16Array : Array)(t.length), c = [], h = [], l = 0;
e = 0;
for (n = t.length; e < n; e++) c[t[e]] = 1 + (0 | c[t[e]]);
e = 1;
for (n = 16; e <= n; e++) h[e] = l, (l += 0 | c[e]) > 1 << e && i("overcommitted"), 
l <<= 1;
65536 > l && i("undercommitted");
e = 0;
for (n = t.length; e < n; e++) {
l = h[t[e]];
h[t[e]] += 1;
r = a[e] = 0;
for (s = t[e]; r < s; r++) a[e] = a[e] << 1 | 1 & l, l >>>= 1;
}
return a;
}
function L(i, n) {
this.input = i;
this.a = new (o ? Uint8Array : Array)(32768);
this.h = O.j;
var r, s = {};
!n && (n = {}) || "number" !== ("object" === (e = typeof n.compressionType) ? t(n.compressionType) : e) || (this.h = n.compressionType);
for (r in n) s[r] = n[r];
s.outputBuffer = this.a;
this.z = new v(this.input, s);
}
var O = x;
L.prototype.n = function() {
var t, e, n, r, s, a, h, l = 0;
h = this.a;
switch (t = ft) {
case ft:
e = Math.LOG2E * Math.log(32768) - 8;
break;

default:
i(Error("invalid compression method"));
}
n = e << 4 | t;
h[l++] = n;
switch (t) {
case ft:
switch (this.h) {
case O.NONE:
s = 0;
break;

case O.r:
s = 1;
break;

case O.j:
s = 2;
break;

default:
i(Error("unsupported compression type"));
}
break;

default:
i(Error("invalid compression method"));
}
r = s << 6 | 0;
h[l++] = r | 31 - (256 * n + r) % 31;
a = c(this.input);
this.z.b = l;
l = (h = this.z.n()).length;
o && ((h = new Uint8Array(h.buffer)).length <= l + 4 && (this.a = new Uint8Array(h.length + 4), 
this.a.set(h), h = this.a), h = h.subarray(0, l + 4));
h[l++] = a >> 24 & 255;
h[l++] = a >> 16 & 255;
h[l++] = a >> 8 & 255;
h[l++] = 255 & a;
return h;
};
a("Zlib.Deflate", L);
a("Zlib.Deflate.compress", (function(t, e) {
return new L(t, e).n();
}));
a("Zlib.Deflate.CompressionType", O);
a("Zlib.Deflate.CompressionType.NONE", O.NONE);
a("Zlib.Deflate.CompressionType.FIXED", O.r);
a("Zlib.Deflate.CompressionType.DYNAMIC", O.j);
function P(t, e) {
this.k = [];
this.l = 32768;
this.e = this.g = this.c = this.q = 0;
this.input = o ? new Uint8Array(t) : t;
this.s = !1;
this.m = N;
this.B = !1;
!e && (e = {}) || (e.index && (this.c = e.index), e.bufferSize && (this.l = e.bufferSize), 
e.bufferType && (this.m = e.bufferType), e.resize && (this.B = e.resize));
switch (this.m) {
case F:
this.b = 32768;
this.a = new (o ? Uint8Array : Array)(32768 + this.l + 258);
break;

case N:
this.b = 0;
this.a = new (o ? Uint8Array : Array)(this.l);
this.f = this.J;
this.t = this.H;
this.o = this.I;
break;

default:
i(Error("invalid inflate mode"));
}
}
var F = 0, N = 1, B = {
D: F,
C: N
};
P.prototype.p = function() {
for (;!this.s; ) {
var t = it(this, 3);
1 & t && (this.s = r);
switch (t >>>= 1) {
case 0:
var e = this.input, s = this.c, a = this.a, c = this.b, h = n, l = n, u = n, f = a.length, _ = n;
this.e = this.g = 0;
(h = e[s++]) === n && i(Error("invalid uncompressed block header: LEN (first byte)"));
l = h;
(h = e[s++]) === n && i(Error("invalid uncompressed block header: LEN (second byte)"));
l |= h << 8;
(h = e[s++]) === n && i(Error("invalid uncompressed block header: NLEN (first byte)"));
u = h;
(h = e[s++]) === n && i(Error("invalid uncompressed block header: NLEN (second byte)"));
l === ~(u |= h << 8) && i(Error("invalid uncompressed block header: length verify"));
s + l > e.length && i(Error("input buffer is broken"));
switch (this.m) {
case F:
for (;c + l > a.length; ) {
l -= _ = f - c;
if (o) a.set(e.subarray(s, s + _), c), c += _, s += _; else for (;_--; ) a[c++] = e[s++];
this.b = c;
a = this.f();
c = this.b;
}
break;

case N:
for (;c + l > a.length; ) a = this.f({
v: 2
});
break;

default:
i(Error("invalid inflate mode"));
}
if (o) a.set(e.subarray(s, s + l), c), c += l, s += l; else for (;l--; ) a[c++] = e[s++];
this.c = s;
this.b = c;
this.a = a;
break;

case 1:
this.o($, et);
break;

case 2:
rt(this);
break;

default:
i(Error("unknown BTYPE: " + t));
}
}
return this.t();
};
var k, z, U = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ], H = o ? new Uint16Array(U) : U, V = [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258 ], W = o ? new Uint16Array(V) : V, G = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0 ], j = o ? new Uint8Array(G) : G, X = [ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ], Y = o ? new Uint16Array(X) : X, q = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ], Z = o ? new Uint8Array(q) : q, K = new (o ? Uint8Array : Array)(288);
k = 0;
for (z = K.length; k < z; ++k) K[k] = 143 >= k ? 8 : 255 >= k ? 9 : 279 >= k ? 7 : 8;
var J, Q, $ = g(K), tt = new (o ? Uint8Array : Array)(30);
J = 0;
for (Q = tt.length; J < Q; ++J) tt[J] = 5;
var et = g(tt);
function it(t, e) {
for (var r, s = t.g, a = t.e, o = t.input, c = t.c; a < e; ) (r = o[c++]) === n && i(Error("input buffer is broken")), 
s |= r << a, a += 8;
r = s & (1 << e) - 1;
t.g = s >>> e;
t.e = a - e;
t.c = c;
return r;
}
function nt(t, e) {
for (var r, s, a, o = t.g, c = t.e, h = t.input, l = t.c, u = e[0], f = e[1]; c < f; ) (r = h[l++]) === n && i(Error("input buffer is broken")), 
o |= r << c, c += 8;
a = (s = u[o & (1 << f) - 1]) >>> 16;
t.g = o >> a;
t.e = c - a;
t.c = l;
return 65535 & s;
}
function rt(t) {
function e(t, e, i) {
var n, r, s, a;
for (a = 0; a < t; ) switch (n = nt(this, e)) {
case 16:
for (s = 3 + it(this, 2); s--; ) i[a++] = r;
break;

case 17:
for (s = 3 + it(this, 3); s--; ) i[a++] = 0;
r = 0;
break;

case 18:
for (s = 11 + it(this, 7); s--; ) i[a++] = 0;
r = 0;
break;

default:
r = i[a++] = n;
}
return i;
}
var i, n, r, s, a = it(t, 5) + 257, c = it(t, 5) + 1, h = it(t, 4) + 4, l = new (o ? Uint8Array : Array)(H.length);
for (s = 0; s < h; ++s) l[H[s]] = it(t, 3);
i = g(l);
n = new (o ? Uint8Array : Array)(a);
r = new (o ? Uint8Array : Array)(c);
t.o(g(e.call(t, a, i, n)), g(e.call(t, c, i, r)));
}
P.prototype.o = function(t, e) {
var i = this.a, n = this.b;
this.u = t;
for (var r, s, a, o, c = i.length - 258; 256 !== (r = nt(this, t)); ) if (256 > r) n >= c && (this.b = n, 
i = this.f(), n = this.b), i[n++] = r; else {
o = W[s = r - 257];
0 < j[s] && (o += it(this, j[s]));
r = nt(this, e);
a = Y[r];
0 < Z[r] && (a += it(this, Z[r]));
n >= c && (this.b = n, i = this.f(), n = this.b);
for (;o--; ) i[n] = i[n++ - a];
}
for (;8 <= this.e; ) this.e -= 8, this.c--;
this.b = n;
};
P.prototype.I = function(t, e) {
var i = this.a, n = this.b;
this.u = t;
for (var r, s, a, o, c = i.length; 256 !== (r = nt(this, t)); ) if (256 > r) n >= c && (c = (i = this.f()).length), 
i[n++] = r; else {
o = W[s = r - 257];
0 < j[s] && (o += it(this, j[s]));
r = nt(this, e);
a = Y[r];
0 < Z[r] && (a += it(this, Z[r]));
n + o > c && (c = (i = this.f()).length);
for (;o--; ) i[n] = i[n++ - a];
}
for (;8 <= this.e; ) this.e -= 8, this.c--;
this.b = n;
};
P.prototype.f = function() {
var t, e, i = new (o ? Uint8Array : Array)(this.b - 32768), n = this.b - 32768, r = this.a;
if (o) i.set(r.subarray(32768, i.length)); else {
t = 0;
for (e = i.length; t < e; ++t) i[t] = r[t + 32768];
}
this.k.push(i);
this.q += i.length;
if (o) r.set(r.subarray(n, n + 32768)); else for (t = 0; 32768 > t; ++t) r[t] = r[n + t];
this.b = 32768;
return r;
};
P.prototype.J = function(i) {
var n, r, s, a = this.input.length / this.c + 1 | 0, c = this.input, h = this.a;
i && ("number" === ("object" === (e = typeof i.v) ? t(i.v) : e) && (a = i.v), "number" === ("object" === (e = typeof i.F) ? t(i.F) : e) && (a += i.F));
2 > a ? r = (s = (c.length - this.c) / this.u[2] / 2 * 258 | 0) < h.length ? h.length + s : h.length << 1 : r = h.length * a;
o ? (n = new Uint8Array(r)).set(h) : n = h;
return this.a = n;
};
P.prototype.t = function() {
var t, e, i, n, r, s = 0, a = this.a, c = this.k, h = new (o ? Uint8Array : Array)(this.q + (this.b - 32768));
if (0 === c.length) return o ? this.a.subarray(32768, this.b) : this.a.slice(32768, this.b);
e = 0;
for (i = c.length; e < i; ++e) {
t = c[e];
n = 0;
for (r = t.length; n < r; ++n) h[s++] = t[n];
}
e = 32768;
for (i = this.b; e < i; ++e) h[s++] = a[e];
this.k = [];
return this.buffer = h;
};
P.prototype.H = function() {
var t, e = this.b;
o ? this.B ? (t = new Uint8Array(e)).set(this.a.subarray(0, e)) : t = this.a.subarray(0, e) : (this.a.length > e && (this.a.length = e), 
t = this.a);
return this.buffer = t;
};
function st(t, e) {
var n, r;
this.input = t;
this.c = 0;
!e && (e = {}) || (e.index && (this.c = e.index), e.verify && (this.M = e.verify));
n = t[this.c++];
r = t[this.c++];
switch (15 & n) {
case ft:
this.method = ft;
break;

default:
i(Error("unsupported compression method"));
}
0 != ((n << 8) + r) % 31 && i(Error("invalid fcheck flag:" + ((n << 8) + r) % 31));
32 & r && i(Error("fdict flag is not supported"));
this.A = new P(t, {
index: this.c,
bufferSize: e.bufferSize,
bufferType: e.bufferType,
resize: e.resize
});
}
st.prototype.p = function() {
var t, e = this.input;
t = this.A.p();
this.c = this.A.c;
this.M && ((e[this.c++] << 24 | e[this.c++] << 16 | e[this.c++] << 8 | e[this.c++]) >>> 0 !== c(t) && i(Error("invalid adler-32 checksum")));
return t;
};
a("Zlib.Inflate", st);
a("Zlib.Inflate.BufferType", B);
B.ADAPTIVE = B.C;
B.BLOCK = B.D;
a("Zlib.Inflate.prototype.decompress", st.prototype.p);
o && new Uint16Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);
o && new Uint16Array([ 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 258, 258 ]);
o && new Uint8Array([ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0 ]);
o && new Uint16Array([ 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ]);
o && new Uint8Array([ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ]);
var at, ot, ct = new (o ? Uint8Array : Array)(288);
at = 0;
for (ot = ct.length; at < ot; ++at) ct[at] = 143 >= at ? 8 : 255 >= at ? 9 : 279 >= at ? 7 : 8;
g(ct);
var ht, lt, ut = new (o ? Uint8Array : Array)(30);
ht = 0;
for (lt = ut.length; ht < lt; ++ht) ut[ht] = 5;
g(ut);
var ft = 8;
}).call(window);
var s = window.Zlib;
s.Deflate = s.Deflate;
s.Deflate.compress = s.Deflate.compress;
s.Inflate = s.Inflate;
s.Inflate.BufferType = s.Inflate.BufferType;
s.Inflate.prototype.decompress = s.Inflate.prototype.decompress;
n.exports = s;
}), {} ],
26: [ (function(t, e, i) {
t("../../DebugInfos");
var n = "https://github.com/cocos-creator/engine/blob/master/EngineErrorMap.md", r = void 0;
cc.log = cc.warn = cc.error = cc.assert = console.log.bind ? console.log.bind(console) : console.log;
cc._throw = function(t) {
var e = t.stack;
e ? cc.error(t + "\n" + e) : cc.error(t);
};
function s(t) {
return function() {
var e = arguments[0], i = t + " " + e + ", please go to " + n + "#" + e + " to see details.";
if (1 === arguments.length) return i;
if (2 === arguments.length) return i + " Arguments: " + arguments[1];
var r = cc.js.shiftArguments.apply(null, arguments);
return i + " Arguments: " + r.join(", ");
};
}
var a = s("Log");
cc.logID = function() {
cc.log(a.apply(null, arguments));
};
var o = s("Warning");
cc.warnID = function() {
cc.warn(o.apply(null, arguments));
};
var c = s("Error");
cc.errorID = function() {
cc.error(c.apply(null, arguments));
};
var h = s("Assert");
cc.assertID = function(t) {
"use strict";
t || cc.assert(!1, h.apply(null, cc.js.shiftArguments.apply(null, arguments)));
};
var l = cc.Enum({
NONE: 0,
INFO: 1,
WARN: 2,
ERROR: 3,
INFO_FOR_WEB_PAGE: 4,
WARN_FOR_WEB_PAGE: 5,
ERROR_FOR_WEB_PAGE: 6
});
e.exports = cc.debug = {
DebugMode: l,
_resetDebugSetting: function(t) {
cc.log = cc.warn = cc.error = cc.assert = function() {};
if (t !== l.NONE) {
if (t > l.ERROR) (function() {
function e(t) {
if (cc.game.canvas) {
if (!r) {
var e = document.createElement("Div");
e.setAttribute("id", "logInfoDiv");
e.setAttribute("width", "200");
e.setAttribute("height", cc.game.canvas.height);
var i = e.style;
i.zIndex = "99999";
i.position = "absolute";
i.top = i.left = "0";
(r = document.createElement("textarea")).setAttribute("rows", "20");
r.setAttribute("cols", "30");
r.setAttribute("disabled", "true");
var n = r.style;
n.backgroundColor = "transparent";
n.borderBottom = "1px solid #cccccc";
n.borderTopWidth = n.borderLeftWidth = n.borderRightWidth = "0px";
n.borderTopStyle = n.borderLeftStyle = n.borderRightStyle = "none";
n.padding = "0px";
n.margin = 0;
e.appendChild(r);
cc.game.canvas.parentNode.appendChild(e);
}
r.value = r.value + t + "\r\n";
r.scrollTop = r.scrollHeight;
}
}
cc.error = function() {
e("ERROR :  " + cc.js.formatStr.apply(null, arguments));
};
cc.assert = function(t, i) {
"use strict";
!t && i && e("ASSERT: " + (i = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments))));
};
t !== l.ERROR_FOR_WEB_PAGE && (cc.warn = function() {
e("WARN :  " + cc.js.formatStr.apply(null, arguments));
});
t === l.INFO_FOR_WEB_PAGE && (cc.log = function() {
e(cc.js.formatStr.apply(null, arguments));
});
})(); else if (console && console.log.apply) {
console.error || (console.error = console.log);
console.warn || (console.warn = console.log);
console.error.bind ? cc.error = console.error.bind(console) : cc.error = console.error;
cc.assert = function(t, e) {
if (!t) {
e && (e = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments)));
throw new Error(e);
}
};
}
t !== l.ERROR && (console.warn.bind ? cc.warn = console.warn.bind(console) : cc.warn = console.warn);
t === l.INFO && ("JavaScriptCore" === scriptEngineType ? cc.log = function() {
return console.log.apply(console, arguments);
} : cc.log = console.log);
}
},
getError: s("ERROR"),
isDisplayStats: function() {
return !!cc.profiler && cc.profiler.isShowingStats();
},
setDisplayStats: function(t) {
if (cc.profiler) {
t ? cc.profiler.showStats() : cc.profiler.hideStats();
cc.game.config.showFPS = !!t;
}
}
};
}), {
"../../DebugInfos": void 0
} ],
27: [ (function(i, n, r) {
var s = i("./event/event-target"), a = i("./load-pipeline/auto-release-utils"), o = i("./component-scheduler"), c = i("./node-activator"), h = i("./platform/CCObject"), l = i("./CCGame"), u = i("./renderer"), f = i("./event-manager"), _ = i("./CCScheduler");
cc.Director = function() {
s.call(this);
this.invalid = !1;
this._paused = !1;
this._purgeDirectorInNextLoop = !1;
this._winSizeInPoints = null;
this._loadingScene = "";
this._scene = null;
this._totalFrames = 0;
this._lastUpdate = 0;
this._deltaTime = 0;
this._scheduler = null;
this._compScheduler = null;
this._nodeActivator = null;
this._actionManager = null;
var t = this;
l.on(l.EVENT_SHOW, (function() {
t._lastUpdate = performance.now();
}));
l.once(l.EVENT_ENGINE_INITED, this.init, this);
};
cc.Director.prototype = {
constructor: cc.Director,
init: function() {
this._totalFrames = 0;
this._lastUpdate = performance.now();
this._paused = !1;
this._purgeDirectorInNextLoop = !1;
this._winSizeInPoints = cc.size(0, 0);
this._scheduler = new _();
if (cc.ActionManager) {
this._actionManager = new cc.ActionManager();
this._scheduler.scheduleUpdate(this._actionManager, _.PRIORITY_SYSTEM, !1);
} else this._actionManager = null;
this.sharedInit();
return !0;
},
sharedInit: function() {
this._compScheduler = new o();
this._nodeActivator = new c();
f && f.setEnabled(!0);
if (cc.AnimationManager) {
this._animationManager = new cc.AnimationManager();
this._scheduler.scheduleUpdate(this._animationManager, _.PRIORITY_SYSTEM, !1);
} else this._animationManager = null;
if (cc.CollisionManager) {
this._collisionManager = new cc.CollisionManager();
this._scheduler.scheduleUpdate(this._collisionManager, _.PRIORITY_SYSTEM, !1);
} else this._collisionManager = null;
if (cc.PhysicsManager) {
this._physicsManager = new cc.PhysicsManager();
this._scheduler.scheduleUpdate(this._physicsManager, _.PRIORITY_SYSTEM, !1);
} else this._physicsManager = null;
cc._widgetManager && cc._widgetManager.init(this);
cc.loader.init(this);
},
calculateDeltaTime: function() {
var t = performance.now();
this._deltaTime = (t - this._lastUpdate) / 1e3;
0;
this._lastUpdate = t;
},
convertToGL: function(t) {
var e = l.container, i = cc.view, n = e.getBoundingClientRect(), r = n.left + window.pageXOffset - e.clientLeft, s = n.top + window.pageYOffset - e.clientTop, a = i._devicePixelRatio * (t.x - r), o = i._devicePixelRatio * (s + n.height - t.y);
return i._isRotated ? cc.v2(i._viewportRect.width - o, a) : cc.v2(a, o);
},
convertToUI: function(t) {
var e = l.container, i = cc.view, n = e.getBoundingClientRect(), r = n.left + window.pageXOffset - e.clientLeft, s = n.top + window.pageYOffset - e.clientTop, a = cc.v2(0, 0);
if (i._isRotated) {
a.x = r + t.y / i._devicePixelRatio;
a.y = s + n.height - (i._viewportRect.width - t.x) / i._devicePixelRatio;
} else {
a.x = r + t.x * i._devicePixelRatio;
a.y = s + n.height - t.y * i._devicePixelRatio;
}
return a;
},
end: function() {
this._purgeDirectorInNextLoop = !0;
},
getWinSize: function() {
return cc.size(cc.winSize);
},
getWinSizeInPixels: function() {
return cc.size(cc.winSize);
},
pause: function() {
this._paused || (this._paused = !0);
},
purgeCachedData: function() {
cc.loader.releaseAll();
},
purgeDirector: function() {
this._scheduler.unscheduleAll();
this._compScheduler.unscheduleAll();
this._nodeActivator.reset();
f && f.setEnabled(!1);
cc.renderer.clear();
cc.isValid(this._scene) && this._scene.destroy();
this._scene = null;
this.stopAnimation();
cc.loader.releaseAll();
},
reset: function() {
this.purgeDirector();
f && f.setEnabled(!0);
this._actionManager && this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this._animationManager && this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this._collisionManager && this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this._physicsManager && this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
this.startAnimation();
},
runSceneImmediate: function(t, e, i) {
cc.assertID(t instanceof cc.Scene, 1216);
t._load();
for (var n = Object.keys(l._persistRootNodes).map((function(t) {
return l._persistRootNodes[t];
})), r = 0; r < n.length; r++) {
var s = n[r], o = t.getChildByUuid(s.uuid);
if (o) {
var c = o.getSiblingIndex();
o._destroyImmediate();
t.insertChild(s, c);
} else s.parent = t;
}
var u = this._scene, f = u && u.autoReleaseAssets && u.dependAssets;
a.autoRelease(f, t.dependAssets, n);
cc.isValid(u) && u.destroy();
this._scene = null;
h._deferredDestroy();
e && e();
this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, t);
this._scene = t;
t._activate();
this.startAnimation();
i && i(null, t);
this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, t);
},
runScene: function(t, e, i) {
cc.assertID(t, 1205);
cc.assertID(t instanceof cc.Scene, 1216);
t._load();
this.once(cc.Director.EVENT_AFTER_UPDATE, (function() {
this.runSceneImmediate(t, e, i);
}), this);
},
_getSceneUuid: function(i) {
var n = l._sceneInfos;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
i.endsWith(".fire") || (i += ".fire");
"/" === i[0] || i.startsWith("db://") || (i = "/" + i);
for (var r = 0; r < n.length; r++) {
var s = n[r];
if (s.url.endsWith(i)) return s;
}
} else if ("number" === ("object" === (e = typeof i) ? t(i) : e)) {
if (0 <= i && i < n.length) return n[i];
cc.errorID(1206, i);
} else cc.errorID(1207, i);
return null;
},
loadScene: function(t, e, i) {
if (this._loadingScene) {
cc.errorID(1208, t, this._loadingScene);
return !1;
}
var n = this._getSceneUuid(t);
if (n) {
var r = n.uuid;
this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, t);
this._loadingScene = t;
this._loadSceneByUuid(r, e, i);
return !0;
}
cc.errorID(1209, t);
return !1;
},
preloadScene: function(t, e, i) {
if (void 0 === i) {
i = e;
e = null;
}
var n = this._getSceneUuid(t);
if (n) {
this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, t);
cc.loader.load({
uuid: n.uuid,
type: "uuid"
}, e, (function(e, n) {
e && cc.errorID(1210, t, e.message);
i && i(e, n);
}));
} else {
var r = 'Can not preload the scene "' + t + '" because it is not in the build settings.';
i(new Error(r));
cc.error("preloadScene: " + r);
}
},
_loadSceneByUuid: function(t, e, i, n) {
0;
console.time("LoadScene " + t);
cc.AssetLibrary.loadAsset(t, (function(n, r) {
console.timeEnd("LoadScene " + t);
var s = cc.director;
s._loadingScene = "";
if (n) {
n = "Failed to load scene: " + n;
cc.error(n);
} else {
if (r instanceof cc.SceneAsset) {
var a = r.scene;
a._id = r._uuid;
a._name = r._name;
s.runSceneImmediate(a, i, e);
return;
}
n = "The asset " + t + " is not a scene";
cc.error(n);
}
e && e(n);
}));
},
resume: function() {
if (this._paused) {
this._lastUpdate = performance.now();
this._lastUpdate || cc.logID(1200);
this._paused = !1;
this._deltaTime = 0;
}
},
setDepthTest: function(t) {
cc.Camera.main && (cc.Camera.main.depth = !!t);
},
setClearColor: function(t) {
cc.Camera.main && (cc.Camera.main.backgroundColor = t);
},
getRunningScene: function() {
return this._scene;
},
getScene: function() {
return this._scene;
},
getAnimationInterval: function() {
return 1e3 / l.getFrameRate();
},
setAnimationInterval: function(t) {
l.setFrameRate(Math.round(1e3 / t));
},
getDeltaTime: function() {
return this._deltaTime;
},
getTotalFrames: function() {
return this._totalFrames;
},
isPaused: function() {
return this._paused;
},
getScheduler: function() {
return this._scheduler;
},
setScheduler: function(t) {
this._scheduler !== t && (this._scheduler = t);
},
getActionManager: function() {
return this._actionManager;
},
setActionManager: function(t) {
if (this._actionManager !== t) {
this._actionManager && this._scheduler.unscheduleUpdate(this._actionManager);
this._actionManager = t;
this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, !1);
}
},
getAnimationManager: function() {
return this._animationManager;
},
getCollisionManager: function() {
return this._collisionManager;
},
getPhysicsManager: function() {
return this._physicsManager;
},
startAnimation: function() {
this.invalid = !1;
this._lastUpdate = performance.now();
},
stopAnimation: function() {
this.invalid = !0;
},
mainLoop: function() {
if (this._purgeDirectorInNextLoop) {
this._purgeDirectorInNextLoop = !1;
this.purgeDirector();
} else if (!this.invalid) {
this.calculateDeltaTime();
if (!this._paused) {
this.emit(cc.Director.EVENT_BEFORE_UPDATE);
this._compScheduler.startPhase();
this._compScheduler.updatePhase(this._deltaTime);
this._scheduler.update(this._deltaTime);
this._compScheduler.lateUpdatePhase(this._deltaTime);
this.emit(cc.Director.EVENT_AFTER_UPDATE);
h._deferredDestroy();
}
this.emit(cc.Director.EVENT_BEFORE_DRAW);
u.render(this._scene);
this.emit(cc.Director.EVENT_AFTER_DRAW);
f.frameUpdateListeners();
this._totalFrames++;
}
},
__fastOn: function(t, e, i) {
this.add(t, e, i);
},
__fastOff: function(t, e, i) {
this.remove(t, e, i);
}
};
cc.js.addon(cc.Director.prototype, s.prototype);
cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
cc.Director.PROJECTION_2D = 0;
cc.Director.PROJECTION_3D = 1;
cc.Director.PROJECTION_CUSTOM = 3;
cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
cc.director = new cc.Director();
n.exports = cc.director;
}), {
"./CCGame": 28,
"./CCScheduler": 32,
"./component-scheduler": 61,
"./event-manager": 100,
"./event/event-target": 102,
"./load-pipeline/auto-release-utils": 115,
"./node-activator": 131,
"./platform/CCObject": 140,
"./renderer": 175
} ],
28: [ (function(i, n, r) {
var s = i("./event/event-target");
i("../audio/CCAudioEngine");
var a = i("./CCDebug"), o = i("./renderer/index.js"), c = i("./platform/CCInputManager"), h = i("../core/renderer/utils/dynamic-atlas/manager"), l = {
EVENT_HIDE: "game_on_hide",
EVENT_SHOW: "game_on_show",
EVENT_RESTART: "game_on_restart",
EVENT_GAME_INITED: "game_inited",
EVENT_ENGINE_INITED: "engine_inited",
EVENT_RENDERER_INITED: "engine_inited",
RENDER_TYPE_CANVAS: 0,
RENDER_TYPE_WEBGL: 1,
RENDER_TYPE_OPENGL: 2,
_persistRootNodes: {},
_paused: !0,
_configLoaded: !1,
_isCloning: !1,
_prepared: !1,
_rendererInitialized: !1,
_renderContext: null,
_intervalId: null,
_lastTime: null,
_frameTime: null,
_sceneInfos: [],
frame: null,
container: null,
canvas: null,
renderType: -1,
config: null,
onStart: null,
setFrameRate: function(t) {
this.config.frameRate = t;
this._intervalId && window.cancelAnimFrame(this._intervalId);
this._intervalId = 0;
this._paused = !0;
this._setAnimFrame();
this._runMainLoop();
},
getFrameRate: function() {
return this.config.frameRate;
},
step: function() {
cc.director.mainLoop();
},
pause: function() {
if (!this._paused) {
this._paused = !0;
cc.audioEngine && cc.audioEngine._break();
cc.director.stopAnimation();
this._intervalId && window.cancelAnimFrame(this._intervalId);
this._intervalId = 0;
}
},
resume: function() {
if (this._paused) {
this._paused = !1;
cc.audioEngine && cc.audioEngine._restore();
cc.director.startAnimation();
this._runMainLoop();
}
},
isPaused: function() {
return this._paused;
},
restart: function() {
cc.director.once(cc.Director.EVENT_AFTER_DRAW, (function() {
for (var t in l._persistRootNodes) l.removePersistRootNode(l._persistRootNodes[t]);
cc.director.getScene().destroy();
cc.Object._deferredDestroy();
cc.director.purgeDirector();
cc.audioEngine && cc.audioEngine.uncacheAll();
cc.director.reset();
l.onStart();
l.emit(l.EVENT_RESTART);
}));
},
end: function() {
close();
},
_initEngine: function() {
if (!this._rendererInitialized) {
this._initRenderer();
this._initEvents();
this.emit(this.EVENT_ENGINE_INITED);
}
},
_prepareFinished: function(t) {
0;
this._prepared = !0;
this._initEngine();
console.log("Cocos Creator v" + cc.ENGINE_VERSION);
this._setAnimFrame();
this._runMainLoop();
this.emit(this.EVENT_GAME_INITED);
t && t();
},
eventTargetOn: s.prototype.on,
eventTargetOnce: s.prototype.once,
on: function(t, e, i) {
this._prepared && t === this.EVENT_ENGINE_INITED || !this._paused && t === this.EVENT_GAME_INITED ? e.call(i) : this.eventTargetOn(t, e, i);
},
once: function(t, e, i) {
this._prepared && t === this.EVENT_ENGINE_INITED || !this._paused && t === this.EVENT_GAME_INITED ? e.call(i) : this.eventTargetOnce(t, e, i);
},
prepare: function(t) {
if (this._prepared) t && t(); else {
var e = this.config.jsList;
if (e && e.length > 0) {
var i = this;
cc.loader.load(e, (function(e) {
if (e) throw new Error(JSON.stringify(e));
i._prepareFinished(t);
}));
} else this._prepareFinished(t);
}
},
run: function(t, e) {
this._initConfig(t);
this.onStart = e;
this.prepare(l.onStart && l.onStart.bind(l));
},
addPersistRootNode: function(t) {
if (cc.Node.isNode(t) && t.uuid) {
var e = t.uuid;
if (!this._persistRootNodes[e]) {
var i = cc.director._scene;
if (cc.isValid(i)) if (t.parent) {
if (!(t.parent instanceof cc.Scene)) {
cc.warnID(3801);
return;
}
if (t.parent !== i) {
cc.warnID(3802);
return;
}
} else t.parent = i;
this._persistRootNodes[e] = t;
t._persistNode = !0;
}
} else cc.warnID(3800);
},
removePersistRootNode: function(t) {
var e = t.uuid || "";
if (t === this._persistRootNodes[e]) {
delete this._persistRootNodes[e];
t._persistNode = !1;
}
},
isPersistRootNode: function(t) {
return t._persistNode;
},
_setAnimFrame: function() {
this._lastTime = performance.now();
var t = l.config.frameRate;
this._frameTime = 1e3 / t;
jsb.setPreferredFramesPerSecond(t);
window.requestAnimFrame = window.requestAnimationFrame;
window.cancelAnimFrame = window.cancelAnimationFrame;
},
_stTime: function(t) {
var e = performance.now(), i = Math.max(0, l._frameTime - (e - l._lastTime)), n = window.setTimeout((function() {
t();
}), i);
l._lastTime = e + i;
return n;
},
_ctTime: function(t) {
window.clearTimeout(t);
},
_runMainLoop: function() {
var t, e = this, i = e.config, n = cc.director;
i.frameRate;
a.setDisplayStats(i.showFPS);
t = function() {
if (!e._paused) {
e._intervalId = window.requestAnimFrame(t);
0;
n.mainLoop();
}
};
e._intervalId = window.requestAnimFrame(t);
e._paused = !1;
},
_initConfig: function(i) {
"number" !== ("object" === (e = typeof i.debugMode) ? t(i.debugMode) : e) && (i.debugMode = 0);
i.exposeClassName = !!i.exposeClassName;
"number" !== ("object" === (e = typeof i.frameRate) ? t(i.frameRate) : e) && (i.frameRate = 60);
var n = i.renderMode;
("number" !== ("object" === (e = typeof n) ? t(n) : e) || n > 2 || n < 0) && (i.renderMode = 0);
"boolean" !== ("object" === (e = typeof i.registerSystemEvent) ? t(i.registerSystemEvent) : e) && (i.registerSystemEvent = !0);
i.showFPS = !!i.showFPS;
this._sceneInfos = i.scenes || [];
this.collisionMatrix = i.collisionMatrix || [];
this.groupList = i.groupList || [];
a._resetDebugSetting(i.debugMode);
this.config = i;
this._configLoaded = !0;
},
_determineRenderType: function() {
var t = this.config, e = parseInt(t.renderMode) || 0;
this.renderType = this.RENDER_TYPE_CANVAS;
var i = !1;
if (0 === e) {
if (cc.sys.capabilities.opengl) {
this.renderType = this.RENDER_TYPE_WEBGL;
i = !0;
} else if (cc.sys.capabilities.canvas) {
this.renderType = this.RENDER_TYPE_CANVAS;
i = !0;
}
} else if (1 === e && cc.sys.capabilities.canvas) {
this.renderType = this.RENDER_TYPE_CANVAS;
i = !0;
} else if (2 === e && cc.sys.capabilities.opengl) {
this.renderType = this.RENDER_TYPE_WEBGL;
i = !0;
}
if (!i) throw new Error(a.getError(3820, e));
},
_initRenderer: function() {
if (!this._rendererInitialized) {
this.config.id;
var t = void 0, e = void 0;
this.container = e = document.createElement("DIV");
this.frame = e.parentNode === document.body ? document.documentElement : e.parentNode;
if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) t = window.sharedCanvas || wx.getSharedCanvas(); else {
t = window.__canvas;
}
this.canvas = t;
this._determineRenderType();
if (this.renderType === this.RENDER_TYPE_WEBGL) {
var i = {
stencil: !0,
antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
};
0;
o.initWebGL(t, i);
this._renderContext = o.device._gl;
!cc.macro.CLEANUP_IMAGE_CACHE && h && (h.enabled = !0);
}
if (!this._renderContext) {
this.renderType = this.RENDER_TYPE_CANVAS;
o.initCanvas(t);
this._renderContext = o.device._ctx;
}
this.canvas.oncontextmenu = function() {
if (!cc._isContextMenuEnable) return !1;
};
this._rendererInitialized = !0;
}
},
_initEvents: function() {
var i, n = window;
this.config.registerSystemEvent && c.registerSystemEvent(this.canvas);
"undefined" !== ("object" === (e = typeof document.hidden) ? t(document.hidden) : e) ? i = "hidden" : "undefined" !== ("object" === (e = typeof document.mozHidden) ? t(document.mozHidden) : e) ? i = "mozHidden" : "undefined" !== ("object" === (e = typeof document.msHidden) ? t(document.msHidden) : e) ? i = "msHidden" : "undefined" !== ("object" === (e = typeof document.webkitHidden) ? t(document.webkitHidden) : e) && (i = "webkitHidden");
var r = !1;
function s() {
if (!r) {
r = !0;
l.emit(l.EVENT_HIDE);
}
}
function a(t, e, i, n, s) {
if (r) {
r = !1;
l.emit(l.EVENT_SHOW, t, e, i, n, s);
}
}
if (i) for (var o = [ "visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange" ], h = 0; h < o.length; h++) document.addEventListener(o[h], (function(t) {
var e = document[i];
(e = e || t.hidden) ? s() : a();
})); else {
n.addEventListener("blur", s);
n.addEventListener("focus", a);
}
navigator.userAgent.indexOf("MicroMessenger") > -1 && (n.onfocus = a);
0;
if ("onpageshow" in window && "onpagehide" in window) {
n.addEventListener("pagehide", s);
n.addEventListener("pageshow", a);
document.addEventListener("pagehide", s);
document.addEventListener("pageshow", a);
}
this.on(l.EVENT_HIDE, (function() {
l.pause();
}));
this.on(l.EVENT_SHOW, (function() {
l.resume();
}));
}
};
s.call(l);
cc.js.addon(l, s.prototype);
cc.game = n.exports = l;
}), {
"../audio/CCAudioEngine": 21,
"../core/renderer/utils/dynamic-atlas/manager": 179,
"./CCDebug": 26,
"./event/event-target": 102,
"./platform/BKInputManager": 132,
"./platform/CCInputManager": 138,
"./renderer/index.js": 175
} ],
29: [ (function(i, n, r) {
"use strict";
var s = i("./utils/base-node"), a = i("./utils/prefab-helper"), o = i("./utils/math-pools"), c = i("./renderer/render-engine").math, h = i("./utils/affine-transform"), l = i("./event-manager"), u = i("./platform/CCMacro"), f = i("./utils/misc"), _ = i("./platform/js"), d = (i("./event/event"), 
i("./event/event-target")), p = i("./renderer/render-flow"), m = cc.Object.Flags.Destroying, g = Math.PI / 180, v = !!cc.ActionManager, y = function() {}, T = cc.v2(), x = cc.v2(), E = c.mat4.create(), C = c.vec3.create(), A = c.quat.create(), b = new Array(16);
b.length = 0;
var S = cc.Enum({
DEBUG: 31
}), w = cc.Enum({
POSITION: 1,
SCALE: 2,
ROTATION: 4,
SKEW: 8,
RT: 7,
ALL: 65535
}), D = cc.Enum({
TOUCH_START: "touchstart",
TOUCH_MOVE: "touchmove",
TOUCH_END: "touchend",
TOUCH_CANCEL: "touchcancel",
MOUSE_DOWN: "mousedown",
MOUSE_MOVE: "mousemove",
MOUSE_ENTER: "mouseenter",
MOUSE_LEAVE: "mouseleave",
MOUSE_UP: "mouseup",
MOUSE_WHEEL: "mousewheel",
POSITION_CHANGED: "position-changed",
ROTATION_CHANGED: "rotation-changed",
SCALE_CHANGED: "scale-changed",
SIZE_CHANGED: "size-changed",
ANCHOR_CHANGED: "anchor-changed",
COLOR_CHANGED: "color-changed",
CHILD_ADDED: "child-added",
CHILD_REMOVED: "child-removed",
CHILD_REORDER: "child-reorder",
GROUP_CHANGED: "group-changed"
}), I = [ D.TOUCH_START, D.TOUCH_MOVE, D.TOUCH_END, D.TOUCH_CANCEL ], R = [ D.MOUSE_DOWN, D.MOUSE_ENTER, D.MOUSE_MOVE, D.MOUSE_LEAVE, D.MOUSE_UP, D.MOUSE_WHEEL ], M = null, L = function(t, e) {
var i = t.getLocation(), n = this.owner;
if (n._hitTest(i, this)) {
e.type = D.TOUCH_START;
e.touch = t;
e.bubbles = !0;
n.dispatchEvent(e);
return !0;
}
return !1;
}, O = function(t, e) {
var i = this.owner;
e.type = D.TOUCH_MOVE;
e.touch = t;
e.bubbles = !0;
i.dispatchEvent(e);
}, P = function(t, e) {
var i = t.getLocation(), n = this.owner;
n._hitTest(i, this) ? e.type = D.TOUCH_END : e.type = D.TOUCH_CANCEL;
e.touch = t;
e.bubbles = !0;
n.dispatchEvent(e);
}, F = function(t, e) {
t.getLocation();
var i = this.owner;
e.type = D.TOUCH_CANCEL;
e.touch = t;
e.bubbles = !0;
i.dispatchEvent(e);
}, N = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
t.type = D.MOUSE_DOWN;
t.bubbles = !0;
i.dispatchEvent(t);
}
}, B = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
if (!this._previousIn) {
if (M && M._mouseListener) {
t.type = D.MOUSE_LEAVE;
M.dispatchEvent(t);
M._mouseListener._previousIn = !1;
}
M = this.owner;
t.type = D.MOUSE_ENTER;
i.dispatchEvent(t);
this._previousIn = !0;
}
t.type = D.MOUSE_MOVE;
t.bubbles = !0;
i.dispatchEvent(t);
} else {
if (!this._previousIn) return;
t.type = D.MOUSE_LEAVE;
i.dispatchEvent(t);
this._previousIn = !1;
M = null;
}
t.stopPropagation();
}, k = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
t.type = D.MOUSE_UP;
t.bubbles = !0;
i.dispatchEvent(t);
t.stopPropagation();
}
}, z = function(t) {
var e = t.getLocation(), i = this.owner;
if (i._hitTest(e, this)) {
t.type = D.MOUSE_WHEEL;
t.bubbles = !0;
i.dispatchEvent(t);
t.stopPropagation();
}
};
function U(t) {
var e = cc.Mask;
if (e) for (var i = 0, n = t; n && cc.Node.isNode(n); n = n._parent, ++i) if (n.getComponent(e)) return {
index: i,
node: n
};
return null;
}
function H(t, e) {
if (!(t._objFlags & m)) {
var i = 0;
if (t._bubblingListeners) for (;i < e.length; ++i) if (t._bubblingListeners.hasEventListener(e[i])) return !0;
if (t._capturingListeners) for (;i < e.length; ++i) if (t._capturingListeners.hasEventListener(e[i])) return !0;
return !1;
}
return !0;
}
function V(t, e) {
var i, n;
e.target = t;
b.length = 0;
t._getCapturingTargets(e.type, b);
e.eventPhase = 1;
for (n = b.length - 1; n >= 0; --n) if ((i = b[n])._capturingListeners) {
e.currentTarget = i;
i._capturingListeners.emit(e.type, e, b);
if (e._propagationStopped) {
b.length = 0;
return;
}
}
b.length = 0;
e.eventPhase = 2;
e.currentTarget = t;
t._capturingListeners && t._capturingListeners.emit(e.type, e);
!e._propagationImmediateStopped && t._bubblingListeners && t._bubblingListeners.emit(e.type, e);
if (!e._propagationStopped && e.bubbles) {
t._getBubblingTargets(e.type, b);
e.eventPhase = 3;
for (n = 0; n < b.length; ++n) if ((i = b[n])._bubblingListeners) {
e.currentTarget = i;
i._bubblingListeners.emit(e.type, e);
if (e._propagationStopped) {
b.length = 0;
return;
}
}
}
b.length = 0;
}
function W(t) {
var e = t.groupIndex;
0 === e && t.parent && (e = W(t.parent));
return e;
}
function G(t) {
var e = W(t);
t._cullingMask = 1 << e;
for (var i = 0; i < t._children.length; i++) G(t._children[i]);
}
var j = cc.Class({
name: "cc.Node",
extends: s,
properties: {
_opacity: 255,
_color: cc.Color.WHITE,
_contentSize: cc.Size,
_anchorPoint: cc.v2(.5, .5),
_position: cc.Vec3,
_scaleX: {
default: void 0,
type: cc.Float
},
_scaleY: {
default: void 0,
type: cc.Float
},
_scale: cc.v3(1, 1, 1),
_rotationX: 0,
_rotationY: 0,
_quat: cc.Quat,
_skewX: 0,
_skewY: 0,
_zIndex: {
default: void 0,
type: cc.Integer
},
_localZOrder: {
default: 0,
serializable: !1
},
groupIndex: {
default: 0,
type: cc.Integer
},
group: {
get: function() {
return cc.game.groupList[this.groupIndex] || "";
},
set: function(t) {
this.groupIndex = cc.game.groupList.indexOf(t);
G(this);
this.emit(D.GROUP_CHANGED, this);
}
},
x: {
get: function() {
return this._position.x;
},
set: function(t) {
var e = this._position;
if (t !== e.x) {
e.x = t;
this.setLocalDirty(w.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
}
},
y: {
get: function() {
return this._position.y;
},
set: function(t) {
var e = this._position;
if (t !== e.y) {
e.y = t;
this.setLocalDirty(w.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
}
},
z: {
get: function() {
return this._position.z;
},
set: function(t) {
var e = this._position;
if (t !== e.z) {
e.z = t;
this.setLocalDirty(w.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
}
},
rotation: {
get: function() {
return this._rotationX;
},
set: function(t) {
if (this._rotationX !== t || this._rotationY !== t) {
this._rotationX = this._rotationY = t;
c.quat.fromEuler(this._quat, 0, 0, -t);
this.setLocalDirty(w.ROTATION);
this._renderFlag |= p.FLAG_TRANSFORM;
4 & this._eventMask && this.emit(D.ROTATION_CHANGED);
}
}
},
rotationX: {
get: function() {
return this._rotationX;
},
set: function(t) {
if (this._rotationX !== t) {
this._rotationX = t;
this._rotationX === this._rotationY ? c.quat.fromEuler(this._quat, 0, 0, -t) : c.quat.fromEuler(this._quat, t, this._rotationY, 0);
this.setLocalDirty(w.ROTATION);
this._renderFlag |= p.FLAG_TRANSFORM;
4 & this._eventMask && this.emit(D.ROTATION_CHANGED);
}
}
},
rotationY: {
get: function() {
return this._rotationY;
},
set: function(t) {
if (this._rotationY !== t) {
this._rotationY = t;
this._rotationX === this._rotationY ? c.quat.fromEuler(this._quat, 0, 0, -t) : c.quat.fromEuler(this._quat, this._rotationX, t, 0);
this.setLocalDirty(w.ROTATION);
this._renderFlag |= p.FLAG_TRANSFORM;
4 & this._eventMask && this.emit(D.ROTATION_CHANGED);
}
}
},
scaleX: {
get: function() {
return this._scale.x;
},
set: function(t) {
if (this._scale.x !== t) {
this._scale.x = t;
this.setLocalDirty(w.SCALE);
this._renderFlag |= p.FLAG_TRANSFORM;
2 & this._eventMask && this.emit(D.SCALE_CHANGED);
}
}
},
scaleY: {
get: function() {
return this._scale.y;
},
set: function(t) {
if (this._scale.y !== t) {
this._scale.y = t;
this.setLocalDirty(w.SCALE);
this._renderFlag |= p.FLAG_TRANSFORM;
2 & this._eventMask && this.emit(D.SCALE_CHANGED);
}
}
},
skewX: {
get: function() {
return this._skewX;
},
set: function(t) {
this._skewX = t;
this.setLocalDirty(w.SKEW);
this._renderFlag |= p.FLAG_TRANSFORM;
}
},
skewY: {
get: function() {
return this._skewY;
},
set: function(t) {
this._skewY = t;
this.setLocalDirty(w.SKEW);
this._renderFlag |= p.FLAG_TRANSFORM;
}
},
opacity: {
get: function() {
return this._opacity;
},
set: function(t) {
t = cc.misc.clampf(t, 0, 255);
if (this._opacity !== t) {
this._opacity = t;
this._renderFlag |= p.FLAG_OPACITY;
}
},
range: [ 0, 255 ]
},
color: {
get: function() {
return this._color.clone();
},
set: function(t) {
if (!this._color.equals(t)) {
this._color.set(t);
0;
this._renderComponent && (this._renderFlag |= p.FLAG_COLOR);
32 & this._eventMask && this.emit(D.COLOR_CHANGED, t);
}
}
},
anchorX: {
get: function() {
return this._anchorPoint.x;
},
set: function(t) {
var e = this._anchorPoint;
if (e.x !== t) {
e.x = t;
16 & this._eventMask && this.emit(D.ANCHOR_CHANGED);
}
}
},
anchorY: {
get: function() {
return this._anchorPoint.y;
},
set: function(t) {
var e = this._anchorPoint;
if (e.y !== t) {
e.y = t;
16 & this._eventMask && this.emit(D.ANCHOR_CHANGED);
}
}
},
width: {
get: function() {
return this._contentSize.width;
},
set: function(t) {
if (t !== this._contentSize.width) {
this._contentSize.width = t;
8 & this._eventMask && this.emit(D.SIZE_CHANGED);
}
}
},
height: {
get: function() {
return this._contentSize.height;
},
set: function(t) {
if (t !== this._contentSize.height) {
this._contentSize.height = t;
8 & this._eventMask && this.emit(D.SIZE_CHANGED);
}
}
},
zIndex: {
get: function() {
return this._localZOrder >> 16;
},
set: function(t) {
if (t > u.MAX_ZINDEX) {
cc.warnID(1636);
t = u.MAX_ZINDEX;
} else if (t < u.MIN_ZINDEX) {
cc.warnID(1637);
t = u.MIN_ZINDEX;
}
if (this.zIndex !== t) {
this._localZOrder = 65535 & this._localZOrder | t << 16;
this._parent && this._onSiblingIndexChanged();
}
}
}
},
ctor: function() {
this._reorderChildDirty = !1;
this._widget = null;
this._renderComponent = null;
this._capturingListeners = null;
this._bubblingListeners = null;
this._touchListener = null;
this._mouseListener = null;
this._matrix = o.mat4.get();
this._worldMatrix = o.mat4.get();
this._localMatDirty = w.ALL;
this._worldMatDirty = !0;
this._eventMask = 0;
this._cullingMask = 1;
this._childArrivalOrder = 1;
},
statics: {
EventType: D,
_LocalDirtyFlag: w,
isNode: function(t) {
return t instanceof j && (t.constructor === j || !(t instanceof cc.Scene));
},
BuiltinGroupIndex: S
},
_onSiblingIndexChanged: function() {
for (var t = this._parent, e = t._children, i = 0, n = e.length; i < n; i++) e[i]._updateOrderOfArrival();
t._delaySort();
},
_onPreDestroy: function() {
this._onPreDestroyBase();
v && cc.director.getActionManager().removeAllActionsFromTarget(this);
M === this && (M = null);
if (this._touchListener || this._mouseListener) {
l.removeListeners(this);
if (this._touchListener) {
this._touchListener.owner = null;
this._touchListener.mask = null;
this._touchListener = null;
}
if (this._mouseListener) {
this._mouseListener.owner = null;
this._mouseListener.mask = null;
this._mouseListener = null;
}
}
o.mat4.put(this._matrix);
o.mat4.put(this._worldMatrix);
this._matrix = this._worldMatrix = null;
this._reorderChildDirty && cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
},
_onPostActivated: function(t) {
var e = v ? cc.director.getActionManager() : null;
if (t) {
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
e && e.resumeTarget(this);
l.resumeTarget(this);
if (this._touchListener) {
var i = this._touchListener.mask = U(this);
this._mouseListener && (this._mouseListener.mask = i);
} else this._mouseListener && (this._mouseListener.mask = U(this));
} else {
e && e.pauseTarget(this);
l.pauseTarget(this);
}
},
_onHierarchyChanged: function(t) {
this._updateOrderOfArrival();
G(this);
this._parent && this._parent._delaySort();
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
this._onHierarchyChangedBase(t);
cc._widgetManager && (cc._widgetManager._nodesOrderDirty = !0);
},
_upgrade_1x_to_2x: function() {
if (void 0 !== this._scaleX) {
this._scale.x = this._scaleX;
this._scaleX = void 0;
}
if (void 0 !== this._scaleY) {
this._scale.y = this._scaleY;
this._scaleY = void 0;
}
if (void 0 !== this._zIndex) {
this._localZOrder = this._zIndex << 16;
this._zIndex = void 0;
}
if (0 !== this._rotationX || 0 !== this._rotationY) this._rotationX === this._rotationY ? c.quat.fromEuler(this._quat, 0, 0, -this._rotationX) : c.quat.fromEuler(this._quat, this._rotationX, this._rotationY, 0); else {
var t = this._quat.getRoll(), e = this._quat.getPitch();
if (0 === t && 0 === e) this._rotationX = this._rotationY = -this._quat.getYaw(); else {
this._rotationX = t;
this._rotationY = e;
}
}
if (this._color.a < 255 && 255 === this._opacity) {
this._opacity = this._color.a;
this._color.a = 255;
}
},
_onBatchCreated: function() {
this._upgrade_1x_to_2x();
this._updateOrderOfArrival();
this._cullingMask = 1 << W(this);
var t = this._prefab;
if (t && t.sync && t.root === this) {
0;
a.syncWithPrefab(this);
}
if (!this._activeInHierarchy) {
v && cc.director.getActionManager().pauseTarget(this);
l.pauseTarget(this);
}
for (var e = this._children, i = 0, n = e.length; i < n; i++) e[i]._onBatchCreated();
e.length > 0 && (this._renderFlag |= p.FLAG_CHILDREN);
},
_onBatchRestored: function() {
this._upgrade_1x_to_2x();
this._cullingMask = 1 << W(this);
if (!this._activeInHierarchy) {
v && cc.director.getActionManager().pauseTarget(this);
l.pauseTarget(this);
}
for (var t = this._children, e = 0, i = t.length; e < i; e++) t[e]._onBatchRestored();
t.length > 0 && (this._renderFlag |= p.FLAG_CHILDREN);
},
_checknSetupSysEvent: function(t) {
var e = !1, i = !1;
if (-1 !== I.indexOf(t)) {
if (!this._touchListener) {
this._touchListener = cc.EventListener.create({
event: cc.EventListener.TOUCH_ONE_BY_ONE,
swallowTouches: !0,
owner: this,
mask: U(this),
onTouchBegan: L,
onTouchMoved: O,
onTouchEnded: P,
onTouchCancelled: F
});
l.addListener(this._touchListener, this);
e = !0;
}
i = !0;
} else if (-1 !== R.indexOf(t)) {
if (!this._mouseListener) {
this._mouseListener = cc.EventListener.create({
event: cc.EventListener.MOUSE,
_previousIn: !1,
owner: this,
mask: U(this),
onMouseDown: N,
onMouseMove: B,
onMouseUp: k,
onMouseScroll: z
});
l.addListener(this._mouseListener, this);
e = !0;
}
i = !0;
}
e && !this._activeInHierarchy && cc.director.getScheduler().schedule((function() {
this._activeInHierarchy || l.pauseTarget(this);
}), this, 0, 0, 0, !1);
return i;
},
on: function(t, e, i, n) {
if (this._checknSetupSysEvent(t)) return this._onDispatch(t, e, i, n);
switch (t) {
case D.POSITION_CHANGED:
this._eventMask |= 1;
break;

case D.SCALE_CHANGED:
this._eventMask |= 2;
break;

case D.ROTATION_CHANGED:
this._eventMask |= 4;
break;

case D.SIZE_CHANGED:
this._eventMask |= 8;
break;

case D.ANCHOR_CHANGED:
this._eventMask |= 16;
break;

case D.COLOR_CHANGED:
this._eventMask |= 32;
}
this._bubblingListeners || (this._bubblingListeners = new d());
return this._bubblingListeners.on(t, e, i);
},
once: function(t, e, i, n) {
var r = this, s = this._checknSetupSysEvent(t), a = "__ONCE_FLAG:" + t, o = null;
(o = s && n ? this._capturingListeners = this._capturingListeners || new d() : this._bubblingListeners = this._bubblingListeners || new d()).hasEventListener(a, e, i) || (function() {
var n = r, s = function(r, c, h, l, u) {
n.off(t, s, i);
o.remove(a, e, i);
e.call(this, r, c, h, l, u);
};
r.on(t, s, i);
o.add(a, e, i);
})();
},
_onDispatch: function(i, n, r, s) {
if ("boolean" === ("object" === (e = typeof r) ? t(r) : e)) {
s = r;
r = void 0;
} else s = !!s;
if (n) {
var a = null;
if (!(a = s ? this._capturingListeners = this._capturingListeners || new d() : this._bubblingListeners = this._bubblingListeners || new d()).hasEventListener(i, n, r)) {
a.add(i, n, r);
r && r.__eventTargets && r.__eventTargets.push(this);
}
return n;
}
cc.errorID(6800);
},
off: function(t, e, i, n) {
var r = -1 !== I.indexOf(t), s = !r && -1 !== R.indexOf(t);
if (r || s) {
this._offDispatch(t, e, i, n);
if (r) {
if (this._touchListener && !H(this, I)) {
l.removeListener(this._touchListener);
this._touchListener = null;
}
} else if (s && this._mouseListener && !H(this, R)) {
l.removeListener(this._mouseListener);
this._mouseListener = null;
}
} else if (this._bubblingListeners) {
this._bubblingListeners.off(t, e, i);
if (!this._bubblingListeners.hasEventListener(t)) switch (t) {
case D.POSITION_CHANGED:
this._eventMask &= -2;
break;

case D.SCALE_CHANGED:
this._eventMask &= -3;
break;

case D.ROTATION_CHANGED:
this._eventMask &= -5;
break;

case D.SIZE_CHANGED:
this._eventMask &= -9;
break;

case D.ANCHOR_CHANGED:
this._eventMask &= -17;
break;

case D.COLOR_CHANGED:
this._eventMask &= -33;
}
}
},
_offDispatch: function(i, n, r, s) {
if ("boolean" === ("object" === (e = typeof r) ? t(r) : e)) {
s = r;
r = void 0;
} else s = !!s;
if (n) {
var a = s ? this._capturingListeners : this._bubblingListeners;
if (a) {
a.remove(i, n, r);
r && r.__eventTargets && _.array.fastRemove(r.__eventTargets, this);
}
} else {
this._capturingListeners && this._capturingListeners.removeAll(i);
this._bubblingListeners && this._bubblingListeners.removeAll(i);
}
},
targetOff: function(t) {
var e = this._bubblingListeners;
if (e) {
e.targetOff(t);
1 & this._eventMask && !e.hasEventListener(D.POSITION_CHANGED) && (this._eventMask &= -2);
2 & this._eventMask && !e.hasEventListener(D.SCALE_CHANGED) && (this._eventMask &= -3);
4 & this._eventMask && !e.hasEventListener(D.ROTATION_CHANGED) && (this._eventMask &= -5);
8 & this._eventMask && !e.hasEventListener(D.SIZE_CHANGED) && (this._eventMask &= -9);
16 & this._eventMask && !e.hasEventListener(D.ANCHOR_CHANGED) && (this._eventMask &= -17);
32 & this._eventMask && !e.hasEventListener(D.COLOR_CHANGED) && (this._eventMask &= -33);
}
this._capturingListeners && this._capturingListeners.targetOff(t);
if (this._touchListener && !H(this, I)) {
l.removeListener(this._touchListener);
this._touchListener = null;
}
if (this._mouseListener && !H(this, R)) {
l.removeListener(this._mouseListener);
this._mouseListener = null;
}
},
hasEventListener: function(t) {
var e = !1;
this._bubblingListeners && (e = this._bubblingListeners.hasEventListener(t));
!e && this._capturingListeners && (e = this._capturingListeners.hasEventListener(t));
return e;
},
emit: function(t, e, i, n, r, s) {
this._bubblingListeners && this._bubblingListeners.emit(t, e, i, n, r, s);
},
dispatchEvent: function(t) {
V(this, t);
b.length = 0;
},
pauseSystemEvents: function(t) {
l.pauseTarget(this, t);
},
resumeSystemEvents: function(t) {
l.resumeTarget(this, t);
},
_hitTest: function(t, e) {
var i = this._contentSize.width, n = this._contentSize.height, r = T, s = x, a = cc.Camera.findCamera(this);
a ? a.getCameraToWorldPoint(t, r) : r.set(t);
this._updateWorldMatrix();
if (!c.mat4.invert(E, this._worldMatrix)) return !1;
c.vec2.transformMat4(s, r, E);
s.x += this._anchorPoint.x * i;
s.y += this._anchorPoint.y * n;
if (s.x >= 0 && s.y >= 0 && s.x <= i && s.y <= n) {
if (e && e.mask) {
for (var o = e.mask, h = this, l = 0; h && l < o.index; ++l, h = h.parent) ;
if (h === o.node) {
var u = h.getComponent(cc.Mask);
return !u || !u.enabledInHierarchy || u._hitTest(r);
}
e.mask = null;
return !0;
}
return !0;
}
return !1;
},
_getCapturingTargets: function(t, e) {
for (var i = this.parent; i; ) {
i._capturingListeners && i._capturingListeners.hasEventListener(t) && e.push(i);
i = i.parent;
}
},
_getBubblingTargets: function(t, e) {
for (var i = this.parent; i; ) {
i._bubblingListeners && i._bubblingListeners.hasEventListener(t) && e.push(i);
i = i.parent;
}
},
runAction: v ? function(t) {
if (this.active) {
cc.assertID(t, 1618);
cc.director.getActionManager().addAction(t, this, !1);
return t;
}
} : y,
pauseAllActions: v ? function() {
cc.director.getActionManager().pauseTarget(this);
} : y,
resumeAllActions: v ? function() {
cc.director.getActionManager().resumeTarget(this);
} : y,
stopAllActions: v ? function() {
cc.director.getActionManager().removeAllActionsFromTarget(this);
} : y,
stopAction: v ? function(t) {
cc.director.getActionManager().removeAction(t);
} : y,
stopActionByTag: v ? function(t) {
t !== cc.Action.TAG_INVALID ? cc.director.getActionManager().removeActionByTag(t, this) : cc.logID(1612);
} : y,
getActionByTag: v ? function(t) {
if (t === cc.Action.TAG_INVALID) {
cc.logID(1613);
return null;
}
return cc.director.getActionManager().getActionByTag(t, this);
} : function() {
return null;
},
getNumberOfRunningActions: v ? function() {
return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
} : function() {
return 0;
},
getPosition: function() {
return new cc.Vec2(this._position);
},
setPosition: function(t, e) {
var i;
if (void 0 === e) {
i = t.x;
e = t.y;
} else i = t;
var n = this._position;
if (n.x !== i || n.y !== e) {
n.x = i;
n.y = e;
this.setLocalDirty(w.POSITION);
this._renderFlag |= p.FLAG_WORLD_TRANSFORM;
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
}
},
getScale: function() {
this._scale.x !== this._scale.y && cc.logID(1603);
return this._scale.x;
},
setScale: function(i, n) {
if (i && "number" !== ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
i = i.x;
} else void 0 === n && (n = i);
if (this._scale.x !== i || this._scale.y !== n) {
this._scale.x = i;
this._scale.y = n;
this.setLocalDirty(w.SCALE);
this._renderFlag |= p.FLAG_TRANSFORM;
2 & this._eventMask && this.emit(D.SCALE_CHANGED);
}
},
getContentSize: function() {
return cc.size(this._contentSize.width, this._contentSize.height);
},
setContentSize: function(t, e) {
var i = this._contentSize;
if (void 0 === e) {
if (t.width === i.width && t.height === i.height) return;
0;
i.width = t.width;
i.height = t.height;
} else {
if (t === i.width && e === i.height) return;
0;
i.width = t;
i.height = e;
}
8 & this._eventMask && this.emit(D.SIZE_CHANGED);
},
getAnchorPoint: function() {
return cc.v2(this._anchorPoint);
},
setAnchorPoint: function(t, e) {
var i = this._anchorPoint;
if (void 0 === e) {
if (t.x === i.x && t.y === i.y) return;
i.x = t.x;
i.y = t.y;
} else {
if (t === i.x && e === i.y) return;
i.x = t;
i.y = e;
}
this.setLocalDirty(w.POSITION);
16 & this._eventMask && this.emit(D.ANCHOR_CHANGED);
},
_invTransformPoint: function(t, e) {
this._parent ? this._parent._invTransformPoint(t, e) : c.vec3.copy(t, e);
c.vec3.sub(t, t, this._position);
c.quat.conjugate(A, this._quat);
c.vec3.transformQuat(t, t, A);
c.vec3.inverseSafe(C, this._scale);
c.vec3.mul(t, t, C);
return t;
},
getWorldPos: function(t) {
c.vec3.copy(t, this._position);
for (var e = this._parent; e; ) {
c.vec3.mul(t, t, e._scale);
c.vec3.transformQuat(t, t, e._quat);
c.vec3.add(t, t, e._position);
e = e._parent;
}
return t;
},
setWorldPos: function(t) {
this._parent ? this._parent._invTransformPoint(this._position, t) : c.vec3.copy(this._position, t);
this.setLocalDirty(w.POSITION);
1 & this._eventMask && this.emit(D.POSITION_CHANGED);
},
getWorldRot: function(t) {
c.quat.copy(t, this._quat);
for (var e = this._parent; e; ) {
c.quat.mul(t, e._quat, t);
e = e._parent;
}
return t;
},
setWorldRot: function(t) {
if (this._parent) {
this._parent.getWorldRot(this._quat);
c.quat.conjugate(this._quat, this._quat);
c.quat.mul(this._quat, this._quat, t);
} else c.quat.copy(this._quat, t);
this.setLocalDirty(w.ROTATION);
},
getWorldRT: function(t) {
var e = C, i = A;
c.vec3.copy(e, this._position);
c.quat.copy(i, this._quat);
for (var n = this._parent; n; ) {
c.vec3.mul(e, e, n._scale);
c.vec3.transformQuat(e, e, n._quat);
c.vec3.add(e, e, n._position);
c.quat.mul(i, n._quat, i);
n = n._parent;
}
c.mat4.fromRT(t, i, e);
return t;
},
lookAt: function(t, e) {
this.getWorldPos(C);
c.vec3.sub(C, C, t);
c.vec3.normalize(C, C);
c.quat.fromViewUp(A, C, e);
this.setWorldRot(A);
},
_updateLocalMatrix: function() {
var t = this._localMatDirty;
if (t) {
var e = this._matrix;
if (t & (w.RT | w.SKEW)) {
var i = this._rotationX || this._rotationY, n = this._skewX || this._skewY, r = this._scale.x, s = this._scale.y;
if (i || n) {
var a = 1, o = 0, c = 0, h = 1;
if (i) {
var l = this._rotationX * g;
c = Math.sin(l);
h = Math.cos(l);
if (this._rotationY === this._rotationX) {
a = h;
o = -c;
} else {
var u = this._rotationY * g;
a = Math.cos(u);
o = -Math.sin(u);
}
}
e.m00 = a *= r;
e.m01 = o *= r;
e.m04 = c *= s;
e.m05 = h *= s;
if (n) {
var f = e.m00, _ = e.m01, d = e.m04, p = e.m05, m = Math.tan(this._skewX * g), v = Math.tan(this._skewY * g);
Infinity === m && (m = 99999999);
Infinity === v && (v = 99999999);
e.m00 = f + d * v;
e.m01 = _ + p * v;
e.m04 = d + f * m;
e.m05 = p + _ * m;
}
} else {
e.m00 = r;
e.m01 = 0;
e.m04 = 0;
e.m05 = s;
}
}
e.m12 = this._position.x;
e.m13 = this._position.y;
this._localMatDirty = 0;
this._worldMatDirty = !0;
}
},
_calculWorldMatrix: function() {
this._localMatDirty && this._updateLocalMatrix();
var t = this._parent;
if (t) {
var e = t._worldMatrix, i = this._matrix, n = this._worldMatrix, r = i.m00, s = i.m01, a = i.m04, o = i.m05, h = i.m12, l = i.m13, u = e.m00, f = e.m01, _ = e.m04, d = e.m05, p = e.m12, m = e.m13;
if (0 !== f || 0 !== _) {
n.m00 = r * u + s * _;
n.m01 = r * f + s * d;
n.m04 = a * u + o * _;
n.m05 = a * f + o * d;
n.m12 = u * h + _ * l + p;
n.m13 = f * h + d * l + m;
} else {
n.m00 = r * u;
n.m01 = s * d;
n.m04 = a * u;
n.m05 = o * d;
n.m12 = u * h + p;
n.m13 = d * l + m;
}
} else c.mat4.copy(this._worldMatrix, this._matrix);
this._worldMatDirty = !1;
},
_updateWorldMatrix: function() {
this._parent && this._parent._updateWorldMatrix();
if (this._worldMatDirty) {
this._calculWorldMatrix();
for (var t = this._children, e = 0, i = t.length; e < i; e++) t[e]._worldMatDirty = !0;
}
},
setLocalDirty: function(t) {
this._localMatDirty = this._localMatDirty | t;
this._worldMatDirty = !0;
},
setWorldDirty: function() {
this._worldMatDirty = !0;
},
getLocalMatrix: function(t) {
this._updateLocalMatrix();
return c.mat4.copy(t, this._matrix);
},
getWorldMatrix: function(t) {
this._updateWorldMatrix();
return c.mat4.copy(t, this._worldMatrix);
},
convertToNodeSpace: function(t) {
this._updateWorldMatrix();
c.mat4.invert(E, this._worldMatrix);
var e = new cc.Vec2();
c.vec2.transformMat4(e, t, E);
e.x += this._anchorPoint.x * this._contentSize.width;
e.y += this._anchorPoint.y * this._contentSize.height;
return e;
},
convertToWorldSpace: function(t) {
this._updateWorldMatrix();
var e = new cc.Vec2(t.x - this._anchorPoint.x * this._contentSize.width, t.y - this._anchorPoint.y * this._contentSize.height);
return c.vec2.transformMat4(e, e, this._worldMatrix);
},
convertToNodeSpaceAR: function(t) {
this._updateWorldMatrix();
c.mat4.invert(E, this._worldMatrix);
var e = new cc.Vec2();
return c.vec2.transformMat4(e, t, E);
},
convertToWorldSpaceAR: function(t) {
this._updateWorldMatrix();
var e = new cc.Vec2();
return c.vec2.transformMat4(e, t, this._worldMatrix);
},
getNodeToParentTransform: function(t) {
t || (t = h.identity());
this._updateLocalMatrix();
var e = this._contentSize;
C.x = -this._anchorPoint.x * e.width;
C.y = -this._anchorPoint.y * e.height;
c.mat4.copy(E, this._matrix);
c.mat4.translate(E, E, C);
return h.fromMat4(t, E);
},
getNodeToParentTransformAR: function(t) {
t || (t = h.identity());
this._updateLocalMatrix();
return h.fromMat4(t, this._matrix);
},
getNodeToWorldTransform: function(t) {
t || (t = h.identity());
this._updateWorldMatrix();
var e = this._contentSize;
C.x = -this._anchorPoint.x * e.width;
C.y = -this._anchorPoint.y * e.height;
c.mat4.copy(E, this._worldMatrix);
c.mat4.translate(E, E, C);
return h.fromMat4(t, E);
},
getNodeToWorldTransformAR: function(t) {
t || (t = h.identity());
this._updateWorldMatrix();
return h.fromMat4(t, this._worldMatrix);
},
getParentToNodeTransform: function(t) {
t || (t = h.identity());
this._updateLocalMatrix();
c.mat4.invert(E, this._matrix);
return h.fromMat4(t, E);
},
getWorldToNodeTransform: function(t) {
t || (t = h.identity());
this._updateWorldMatrix();
c.mat4.invert(E, this._worldMatrix);
return h.fromMat4(t, E);
},
convertTouchToNodeSpace: function(t) {
return this.convertToNodeSpace(t.getLocation());
},
convertTouchToNodeSpaceAR: function(t) {
return this.convertToNodeSpaceAR(t.getLocation());
},
getBoundingBox: function() {
this._updateLocalMatrix();
var t = this._contentSize.width, e = this._contentSize.height, i = cc.rect(-this._anchorPoint.x * t, -this._anchorPoint.y * e, t, e);
return i.transformMat4(i, this._matrix);
},
getBoundingBoxToWorld: function() {
if (this._parent) {
this._parent._updateWorldMatrix();
return this._getBoundingBoxTo(this._parent._worldMatrix);
}
return this.getBoundingBox();
},
_getBoundingBoxTo: function(t) {
this._updateLocalMatrix();
var e = this._contentSize.width, i = this._contentSize.height, n = cc.rect(-this._anchorPoint.x * e, -this._anchorPoint.y * i, e, i);
t = c.mat4.mul(this._worldMatrix, t, this._matrix);
n.transformMat4(n, t);
if (!this._children) return n;
for (var r = this._children, s = 0; s < r.length; s++) {
var a = r[s];
if (a && a.active) {
var o = a._getBoundingBoxTo(t);
o && n.union(n, o);
}
}
return n;
},
_updateOrderOfArrival: function() {
var t = this._parent ? ++this._parent._childArrivalOrder : 0;
this._localZOrder = 4294901760 & this._localZOrder | t;
if (65535 === t) {
var e = this._parent._children;
e.forEach((function(t, e) {
t._localZOrder = 4294901760 & t._localZOrder | e + 1;
}));
this._parent._childArrivalOrder = e.length;
}
},
addChild: function(t, e, i) {
0;
cc.assertID(t, 1606);
cc.assertID(null === t._parent, 1605);
t.parent = this;
void 0 !== e && (t.zIndex = e);
void 0 !== i && (t.name = i);
},
cleanup: function() {
v && cc.director.getActionManager().removeAllActionsFromTarget(this);
l.removeListeners(this);
var t, e, i = this._children.length;
for (t = 0; t < i; ++t) (e = this._children[t]) && e.cleanup();
},
sortAllChildren: function() {
if (this._reorderChildDirty) {
l._setDirtyForNode(this);
this._reorderChildDirty = !1;
var t = this._children;
if (t.length > 1) {
var e, i, n, r = t.length;
for (e = 1; e < r; e++) {
n = t[e];
i = e - 1;
for (;i >= 0 && n._localZOrder < t[i]._localZOrder; ) {
t[i + 1] = t[i];
i--;
}
t[i + 1] = n;
}
this.emit(D.CHILD_REORDER, this);
}
cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
}
},
_delaySort: function() {
if (!this._reorderChildDirty) {
this._reorderChildDirty = !0;
cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
}
},
_restoreProperties: !1,
onRestore: !1
});
f.propertyDefine(j, [ "position", "scale", "rotation" ]);
cc.Node = n.exports = j;
}), {
"./event-manager": 100,
"./event/event": 103,
"./event/event-target": 102,
"./platform/CCMacro": 139,
"./platform/js": 154,
"./renderer/render-engine": 176,
"./renderer/render-flow": 177,
"./utils/affine-transform": 208,
"./utils/base-node": 209,
"./utils/math-pools": 215,
"./utils/misc": 216,
"./utils/prefab-helper": 219
} ],
30: [ (function(t, e, i) {
"use strict";
var n = t("./CCNode"), r = t("./renderer/render-flow"), s = t("./renderer/render-engine").math, a = n._LocalDirtyFlag, o = (s.vec3.create(), 
cc.Class({
name: "cc.PrivateNode",
extends: n,
properties: {
x: {
get: function() {
return this._originPos.x;
},
set: function(t) {
var e = this._originPos;
if (t !== e.x) {
e.x = t;
this._posDirty(!0);
}
},
override: !0
},
y: {
get: function() {
return this._originPos.y;
},
set: function(t) {
var e = this._originPos;
if (t !== e.y) {
e.y = t;
this._posDirty(!0);
}
},
override: !0
},
zIndex: {
get: function() {
return cc.macro.MIN_ZINDEX;
},
set: function() {
cc.warnID(1638);
},
override: !0
}
},
ctor: function(t) {
this._localZOrder = cc.macro.MIN_ZINDEX << 16;
this._originPos = cc.v2();
},
_posDirty: function(t) {
this.setLocalDirty(a.POSITION);
this._renderFlag |= r.FLAG_TRANSFORM;
!0 === t && 1 & this._eventMask && this.emit(n.EventType.POSITION_CHANGED);
},
_updateLocalMatrix: function() {
if (this._localMatDirty) {
var t = this.parent;
if (t) {
this._position.x = this._originPos.x - (t._anchorPoint.x - .5) * t._contentSize.width;
this._position.y = this._originPos.y - (t._anchorPoint.y - .5) * t._contentSize.height;
}
this._super();
}
},
getPosition: function() {
return new cc.Vec2(this._originPos);
},
setPosition: function(t, e) {
void 0 === e && (e = (t = t.x).y);
var i = this._originPos;
if (i.x !== t || i.y !== e) {
i.x = t;
i.y = e;
this._posDirty(!0);
}
},
setParent: function(t) {
var e = this._parent;
this._super(t);
if (e !== t) {
e && e.off(n.EventType.ANCHOR_CHANGED, this._posDirty, this);
t && t.on(n.EventType.ANCHOR_CHANGED, this._posDirty, this);
}
},
_updateOrderOfArrival: function() {}
}));
cc.js.getset(o.prototype, "parent", o.prototype.getParent, o.prototype.setParent);
cc.js.getset(o.prototype, "position", o.prototype.getPosition, o.prototype.setPosition);
cc.PrivateNode = e.exports = o;
}), {
"./CCNode": 29,
"./renderer/render-engine": 176,
"./renderer/render-flow": 177
} ],
31: [ (function(t, e, i) {
cc.Scene = cc.Class({
name: "cc.Scene",
extends: t("./CCNode"),
properties: {
autoReleaseAssets: {
default: void 0,
type: cc.Boolean
}
},
ctor: function() {
this._anchorPoint.x = 0;
this._anchorPoint.y = 0;
this._activeInHierarchy = !1;
this._inited = !cc.game._isCloning;
0;
this.dependAssets = null;
},
destroy: function() {
if (cc.Object.prototype.destroy.call(this)) for (var t = this._children, e = 0; e < t.length; ++e) t[e].active = !1;
this._active = !1;
this._activeInHierarchy = !1;
},
_onHierarchyChanged: function() {},
_instantiate: null,
_load: function() {
if (!this._inited) {
0;
this._onBatchCreated();
this._inited = !0;
}
},
_activate: function(t) {
t = !1 !== t;
0;
cc.director._nodeActivator.activateNode(this, t);
}
});
e.exports = cc.Scene;
}), {
"./CCNode": 29
} ],
32: [ (function(i, n, r) {
var s = i("./platform/js"), a = new (i("./platform/id-generater"))("Scheduler"), o = function(t, e, i, n) {
this.target = t;
this.priority = e;
this.paused = i;
this.markedForDeletion = n;
}, c = [];
o.get = function(t, e, i, n) {
var r = c.pop();
if (r) {
r.target = t;
r.priority = e;
r.paused = i;
r.markedForDeletion = n;
} else r = new o(t, e, i, n);
return r;
};
o.put = function(t) {
if (c.length < 20) {
t.target = null;
c.push(t);
}
};
var h = function(t, e, i, n) {
this.list = t;
this.entry = e;
this.target = i;
this.callback = n;
}, l = [];
h.get = function(t, e, i, n) {
var r = l.pop();
if (r) {
r.list = t;
r.entry = e;
r.target = i;
r.callback = n;
} else r = new h(t, e, i, n);
return r;
};
h.put = function(t) {
if (l.length < 20) {
t.list = t.entry = t.target = t.callback = null;
l.push(t);
}
};
var u = function(t, e, i, n, r, s) {
var a = this;
a.timers = t;
a.target = e;
a.timerIndex = i;
a.currentTimer = n;
a.currentTimerSalvaged = r;
a.paused = s;
}, f = [];
u.get = function(t, e, i, n, r, s) {
var a = f.pop();
if (a) {
a.timers = t;
a.target = e;
a.timerIndex = i;
a.currentTimer = n;
a.currentTimerSalvaged = r;
a.paused = s;
} else a = new u(t, e, i, n, r, s);
return a;
};
u.put = function(t) {
if (f.length < 20) {
t.timers = t.target = t.currentTimer = null;
f.push(t);
}
};
function _() {
this._lock = !1;
this._scheduler = null;
this._elapsed = -1;
this._runForever = !1;
this._useDelay = !1;
this._timesExecuted = 0;
this._repeat = 0;
this._delay = 0;
this._interval = 0;
this._target = null;
this._callback = null;
}
var d = _.prototype;
d.initWithCallback = function(t, e, i, n, r, s) {
this._lock = !1;
this._scheduler = t;
this._target = i;
this._callback = e;
this._elapsed = -1;
this._interval = n;
this._delay = s;
this._useDelay = this._delay > 0;
this._repeat = r;
this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
return !0;
};
d.getInterval = function() {
return this._interval;
};
d.setInterval = function(t) {
this._interval = t;
};
d.update = function(t) {
if (-1 === this._elapsed) {
this._elapsed = 0;
this._timesExecuted = 0;
} else {
this._elapsed += t;
if (this._runForever && !this._useDelay) {
if (this._elapsed >= this._interval) {
this.trigger();
this._elapsed = 0;
}
} else {
if (this._useDelay) {
if (this._elapsed >= this._delay) {
this.trigger();
this._elapsed -= this._delay;
this._timesExecuted += 1;
this._useDelay = !1;
}
} else if (this._elapsed >= this._interval) {
this.trigger();
this._elapsed = 0;
this._timesExecuted += 1;
}
this._callback && !this._runForever && this._timesExecuted > this._repeat && this.cancel();
}
}
};
d.getCallback = function() {
return this._callback;
};
d.trigger = function() {
if (this._target && this._callback) {
this._lock = !0;
this._callback.call(this._target, this._elapsed);
this._lock = !1;
}
};
d.cancel = function() {
this._scheduler.unschedule(this._callback, this._target);
};
var p = [];
_.get = function() {
return p.pop() || new _();
};
_.put = function(t) {
if (p.length < 20 && !t._lock) {
t._scheduler = t._target = t._callback = null;
p.push(t);
}
};
cc.Scheduler = function() {
this._timeScale = 1;
this._updatesNegList = [];
this._updates0List = [];
this._updatesPosList = [];
this._hashForUpdates = s.createMap(!0);
this._hashForTimers = s.createMap(!0);
this._currentTarget = null;
this._currentTargetSalvaged = !1;
this._updateHashLocked = !1;
this._arrayForTimers = [];
};
cc.Scheduler.prototype = {
constructor: cc.Scheduler,
_removeHashElement: function(t) {
delete this._hashForTimers[t.target._id];
for (var e = this._arrayForTimers, i = 0, n = e.length; i < n; i++) if (e[i] === t) {
e.splice(i, 1);
break;
}
u.put(t);
},
_removeUpdateFromHash: function(t) {
var e = t.target._id, i = this._hashForUpdates[e];
if (i) {
for (var n = i.list, r = i.entry, s = 0, a = n.length; s < a; s++) if (n[s] === r) {
n.splice(s, 1);
break;
}
delete this._hashForUpdates[e];
o.put(r);
h.put(i);
}
},
_priorityIn: function(t, e, i) {
for (var n = 0; n < t.length; n++) if (i < t[n].priority) {
t.splice(n, 0, e);
return;
}
t.push(e);
},
_appendIn: function(t, e) {
t.push(e);
},
enableForTarget: function(t) {
t._id || (t.__instanceId ? cc.warnID(1513) : t._id = a.getNewId());
},
setTimeScale: function(t) {
this._timeScale = t;
},
getTimeScale: function() {
return this._timeScale;
},
update: function(t) {
this._updateHashLocked = !0;
1 !== this._timeScale && (t *= this._timeScale);
var e, i, n, r;
for (e = 0, n = (i = this._updatesNegList).length; e < n; e++) (r = i[e]).paused || r.markedForDeletion || r.target.update(t);
for (e = 0, n = (i = this._updates0List).length; e < n; e++) (r = i[e]).paused || r.markedForDeletion || r.target.update(t);
for (e = 0, n = (i = this._updatesPosList).length; e < n; e++) (r = i[e]).paused || r.markedForDeletion || r.target.update(t);
var s, a = this._arrayForTimers;
for (e = 0; e < a.length; e++) {
s = a[e];
this._currentTarget = s;
this._currentTargetSalvaged = !1;
if (!s.paused) for (s.timerIndex = 0; s.timerIndex < s.timers.length; ++s.timerIndex) {
s.currentTimer = s.timers[s.timerIndex];
s.currentTimerSalvaged = !1;
s.currentTimer.update(t);
s.currentTimer = null;
}
if (this._currentTargetSalvaged && 0 === this._currentTarget.timers.length) {
this._removeHashElement(this._currentTarget);
--e;
}
}
for (e = 0, i = this._updatesNegList; e < i.length; ) (r = i[e]).markedForDeletion ? this._removeUpdateFromHash(r) : e++;
for (e = 0, i = this._updates0List; e < i.length; ) (r = i[e]).markedForDeletion ? this._removeUpdateFromHash(r) : e++;
for (e = 0, i = this._updatesPosList; e < i.length; ) (r = i[e]).markedForDeletion ? this._removeUpdateFromHash(r) : e++;
this._updateHashLocked = !1;
this._currentTarget = null;
},
schedule: function(i, n, r, s, a, o) {
"use strict";
if ("function" !== ("object" === (e = typeof i) ? t(i) : e)) {
var c = i;
i = n;
n = c;
}
if (4 === arguments.length || 5 === arguments.length) {
o = !!s;
s = cc.macro.REPEAT_FOREVER;
a = 0;
}
cc.assertID(n, 1502);
var h = n._id;
if (!h) if (n.__instanceId) {
cc.warnID(1513);
h = n._id = n.__instanceId;
} else cc.errorID(1510);
var l, f, d = this._hashForTimers[h];
if (d) d.paused !== o && cc.warnID(1511); else {
d = u.get(null, n, 0, null, null, o);
this._arrayForTimers.push(d);
this._hashForTimers[h] = d;
}
if (null == d.timers) d.timers = []; else for (f = 0; f < d.timers.length; ++f) if ((l = d.timers[f]) && i === l._callback) {
cc.logID(1507, l.getInterval(), r);
l._interval = r;
return;
}
(l = _.get()).initWithCallback(this, i, n, r, s, a);
d.timers.push(l);
this._currentTarget === d && this._currentTargetSalvaged && (this._currentTargetSalvaged = !1);
},
scheduleUpdate: function(t, e, i) {
var n = t._id;
if (!n) if (t.__instanceId) {
cc.warnID(1513);
n = t._id = t.__instanceId;
} else cc.errorID(1510);
var r = this._hashForUpdates[n];
if (r && r.entry) {
if (r.entry.priority === e) {
r.entry.markedForDeletion = !1;
r.entry.paused = i;
return;
}
if (this._updateHashLocked) {
cc.logID(1506);
r.entry.markedForDeletion = !1;
r.entry.paused = i;
return;
}
this.unscheduleUpdate(t);
}
var s, a = o.get(t, e, i, !1);
if (0 === e) {
s = this._updates0List;
this._appendIn(s, a);
} else {
s = e < 0 ? this._updatesNegList : this._updatesPosList;
this._priorityIn(s, a, e);
}
this._hashForUpdates[n] = h.get(s, a, t, null);
},
unschedule: function(t, e) {
if (e && t) {
var i = e._id;
if (!i) if (e.__instanceId) {
cc.warnID(1513);
i = e._id = e.__instanceId;
} else cc.errorID(1510);
var n = this._hashForTimers[i];
if (n) for (var r = n.timers, s = 0, a = r.length; s < a; s++) {
var o = r[s];
if (t === o._callback) {
o !== n.currentTimer || n.currentTimerSalvaged || (n.currentTimerSalvaged = !0);
r.splice(s, 1);
_.put(o);
n.timerIndex >= s && n.timerIndex--;
0 === r.length && (this._currentTarget === n ? this._currentTargetSalvaged = !0 : this._removeHashElement(n));
return;
}
}
}
},
unscheduleUpdate: function(t) {
if (t) {
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForUpdates[e];
i && (this._updateHashLocked ? i.entry.markedForDeletion = !0 : this._removeUpdateFromHash(i.entry));
}
},
unscheduleAllForTarget: function(t) {
if (t) {
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
if (i) {
var n = i.timers;
n.indexOf(i.currentTimer) > -1 && !i.currentTimerSalvaged && (i.currentTimerSalvaged = !0);
for (var r = 0, s = n.length; r < s; r++) _.put(n[r]);
n.length = 0;
this._currentTarget === i ? this._currentTargetSalvaged = !0 : this._removeHashElement(i);
}
this.unscheduleUpdate(t);
}
},
unscheduleAll: function() {
this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
},
unscheduleAllWithMinPriority: function(t) {
var e, i, n, r = this._arrayForTimers;
for (e = r.length - 1; e >= 0; e--) {
i = r[e];
this.unscheduleAllForTarget(i.target);
}
var s = 0;
if (t < 0) for (e = 0; e < this._updatesNegList.length; ) {
s = this._updatesNegList.length;
(n = this._updatesNegList[e]) && n.priority >= t && this.unscheduleUpdate(n.target);
s == this._updatesNegList.length && e++;
}
if (t <= 0) for (e = 0; e < this._updates0List.length; ) {
s = this._updates0List.length;
(n = this._updates0List[e]) && this.unscheduleUpdate(n.target);
s == this._updates0List.length && e++;
}
for (e = 0; e < this._updatesPosList.length; ) {
s = this._updatesPosList.length;
(n = this._updatesPosList[e]) && n.priority >= t && this.unscheduleUpdate(n.target);
s == this._updatesPosList.length && e++;
}
},
isScheduled: function(t, e) {
cc.assertID(t, 1508);
cc.assertID(e, 1509);
var i = e._id;
if (!i) if (e.__instanceId) {
cc.warnID(1513);
i = e._id = e.__instanceId;
} else cc.errorID(1510);
var n = this._hashForTimers[i];
if (!n) return !1;
if (null == n.timers) return !1;
for (var r = n.timers, s = 0; s < r.length; ++s) {
if (t === r[s]._callback) return !0;
}
return !1;
},
pauseAllTargets: function() {
return this.pauseAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
},
pauseAllTargetsWithMinPriority: function(t) {
var e, i, n, r, s = [], a = this._arrayForTimers;
for (i = 0, n = a.length; i < n; i++) if (e = a[i]) {
e.paused = !0;
s.push(e.target);
}
if (t < 0) for (i = 0; i < this._updatesNegList.length; i++) if ((r = this._updatesNegList[i]) && r.priority >= t) {
r.paused = !0;
s.push(r.target);
}
if (t <= 0) for (i = 0; i < this._updates0List.length; i++) if (r = this._updates0List[i]) {
r.paused = !0;
s.push(r.target);
}
for (i = 0; i < this._updatesPosList.length; i++) if ((r = this._updatesPosList[i]) && r.priority >= t) {
r.paused = !0;
s.push(r.target);
}
return s;
},
resumeTargets: function(t) {
if (t) for (var e = 0; e < t.length; e++) this.resumeTarget(t[e]);
},
pauseTarget: function(t) {
cc.assertID(t, 1503);
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
i && (i.paused = !0);
var n = this._hashForUpdates[e];
n && (n.entry.paused = !0);
},
resumeTarget: function(t) {
cc.assertID(t, 1504);
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
i && (i.paused = !1);
var n = this._hashForUpdates[e];
n && (n.entry.paused = !1);
},
isTargetPaused: function(t) {
cc.assertID(t, 1505);
var e = t._id;
if (!e) if (t.__instanceId) {
cc.warnID(1513);
e = t._id = t.__instanceId;
} else cc.errorID(1510);
var i = this._hashForTimers[e];
if (i) return i.paused;
var n = this._hashForUpdates[e];
return !!n && n.entry.paused;
}
};
cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
n.exports = cc.Scheduler;
}), {
"./platform/id-generater": 150,
"./platform/js": 154
} ],
33: [ (function(t, e, i) {
var n = t("./CCRawAsset");
cc.Asset = cc.Class({
name: "cc.Asset",
extends: n,
ctor: function() {
this.loaded = !0;
},
properties: {
nativeUrl: {
get: function() {
if (this._native) {
var t = this._native;
if (47 === t.charCodeAt(0)) return t.slice(1);
if (cc.AssetLibrary) {
var e = cc.AssetLibrary.getLibUrlNoExt(this._uuid, !0);
return 46 === t.charCodeAt(0) ? e + t : e + "/" + t;
}
cc.errorID(6400);
}
return "";
},
visible: !1
},
_native: "",
_nativeAsset: {
get: function() {
return this._$nativeAsset;
},
set: function(t) {
this._$nativeAsset = t;
}
}
},
statics: {
deserialize: !1,
preventDeferredLoadDependents: !1,
preventPreloadNativeObject: !1
},
toString: function() {
return this.nativeUrl;
},
serialize: !1,
createNode: null,
_setRawAsset: function(t, e) {
this._native = !1 !== e ? t || void 0 : "/" + t;
}
});
e.exports = cc.Asset;
}), {
"./CCRawAsset": 41
} ],
34: [ (function(t, e, i) {
var n = t("./CCAsset"), r = t("../event/event-target"), s = cc.Enum({
WEB_AUDIO: 0,
DOM_AUDIO: 1
}), a = cc.Class({
name: "cc.AudioClip",
extends: n,
mixins: [ r ],
ctor: function() {
this.loaded = !1;
this._audio = null;
},
properties: {
loadMode: {
default: s.WEB_AUDIO,
type: s
},
_nativeAsset: {
get: function() {
return this._audio;
},
set: function(t) {
t instanceof cc.AudioClip ? this._audio = t._nativeAsset : this._audio = t;
if (this._audio) {
this.loaded = !0;
this.emit("load");
}
},
override: !0
}
},
statics: {
LoadMode: s,
_loadByUrl: function(t, e) {
var i = cc.loader.getItem(t) || cc.loader.getItem(t + "?useDom=1");
i && i.complete ? i._owner instanceof a ? e(null, i._owner) : e(null, i.content) : cc.loader.load(t, (function(n, r) {
if (n) return e(n);
i = cc.loader.getItem(t) || cc.loader.getItem(t + "?useDom=1");
e(null, i.content);
}));
}
},
destroy: function() {
cc.audioEngine.uncache(this);
this._super();
}
});
cc.AudioClip = a;
e.exports = a;
}), {
"../event/event-target": 102,
"./CCAsset": 33
} ],
35: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.BitmapFont",
extends: cc.Font,
properties: {
fntDataStr: {
default: ""
},
spriteFrame: {
default: null,
type: cc.SpriteFrame
},
fontSize: {
default: -1
},
_fntConfig: null
}
});
cc.BitmapFont = n;
e.exports = n;
}), {} ],
36: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.BufferAsset",
extends: cc.Asset,
ctor: function() {
this._buffer = null;
},
properties: {
_nativeAsset: {
get: function() {
return this._buffer;
},
set: function(t) {
this._buffer = t.buffer || t;
},
override: !0
}
}
});
cc.BufferAsset = e.exports = n;
}), {} ],
37: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Font",
extends: cc.Asset
});
cc.Font = e.exports = n;
}), {} ],
38: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.JsonAsset",
extends: cc.Asset,
properties: {
json: null
}
});
e.exports = cc.JsonAsset = n;
}), {} ],
39: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.LabelAtlas",
extends: cc.BitmapFont
});
cc.LabelAtlas = n;
e.exports = n;
}), {} ],
40: [ (function(t, e, i) {
var n = cc.Enum({
AUTO: 0,
SINGLE_INSTANCE: 1,
MULTI_INSTANCE: 2
}), r = cc.Class({
name: "cc.Prefab",
extends: cc.Asset,
ctor: function() {
this._createFunction = null;
this._instantiatedTimes = 0;
},
properties: {
data: null,
optimizationPolicy: n.AUTO,
asyncLoadAssets: !1
},
statics: {
OptimizationPolicy: n,
OptimizationPolicyThreshold: 3
},
createNode: !1,
compileCreateFunction: function() {
var e = t("../platform/instantiate-jit");
this._createFunction = e.compile(this.data);
},
_doInstantiate: function(t) {
this.data._prefab ? this.data._prefab._synced = !0 : cc.warnID(3700);
this._createFunction || this.compileCreateFunction();
return this._createFunction(t);
},
_instantiate: function() {
var t;
if (this.optimizationPolicy !== n.SINGLE_INSTANCE && (this.optimizationPolicy === n.MULTI_INSTANCE || this._instantiatedTimes + 1 >= r.OptimizationPolicyThreshold)) {
t = this._doInstantiate();
this.data._instantiate(t);
} else {
this.data._prefab._synced = !0;
t = this.data._instantiate();
}
++this._instantiatedTimes;
return t;
}
});
cc.Prefab = e.exports = r;
cc.js.obsolete(cc, "cc._Prefab", "Prefab");
}), {
"../platform/instantiate-jit": 152
} ],
41: [ (function(t, e, i) {
var n = t("../platform/CCObject"), r = t("../platform/js");
cc.RawAsset = cc.Class({
name: "cc.RawAsset",
extends: n,
ctor: function() {
Object.defineProperty(this, "_uuid", {
value: "",
writable: !0
});
}
});
r.value(cc.RawAsset, "isRawAssetType", (function(t) {
return r.isChildClassOf(t, cc.RawAsset) && !r.isChildClassOf(t, cc.Asset);
}));
r.value(cc.RawAsset, "wasRawAssetType", (function(t) {
return t === cc.Texture2D || t === cc.AudioClip || t === cc.ParticleAsset || t === cc.Asset;
}));
e.exports = cc.RawAsset;
}), {
"../platform/CCObject": 140,
"../platform/js": 154
} ],
42: [ (function(t, e, i) {
var n = t("../renderer"), r = t("../renderer/render-engine"), s = r.gfx, a = t("./CCTexture2D"), o = cc.Class({
name: "cc.RenderTexture",
extends: a,
ctor: function() {
this._framebuffer = null;
},
initWithSize: function(t, e, i) {
this.width = Math.floor(t || cc.visibleRect.width);
this.height = Math.floor(e || cc.visibleRect.height);
var o = {};
o.format = this._format;
o.width = t;
o.height = e;
o.images = void 0;
o.wrapS = this._wrapS;
o.wrapT = this._wrapT;
o.premultiplyAlpha = this._premultiplyAlpha;
o.minFilter = a._FilterIndex[this._minFilter];
o.magFilter = a._FilterIndex[this._magFilter];
this._texture ? this._texture.update(o) : this._texture = new n.Texture2D(n.device, o);
o = {
colors: [ this._texture ]
};
if (i) {
var c = new s.RenderBuffer(n.device, i, t, e);
i === s.RB_FMT_D24S8 ? o.depth = o.stencil = c : i === s.RB_FMT_S8 ? o.stencil = c : i === gl.RB_FMT_D16 && (o.depth = c);
}
this._framebuffer && this._framebuffer.destroy();
this._framebuffer = new r.gfx.FrameBuffer(n.device, t, e, o);
this.loaded = !0;
this.emit("load");
},
drawTextureAt: function(t, e, i) {
t._image && this._texture.updateSubImage({
x: e,
y: i,
image: t._image,
width: t.width,
height: t.height,
level: 0,
flipY: !1,
premultiplyAlpha: t._premultiplyAlpha
});
},
readPixels: function(t, e, i, r, s) {
if (!this._framebuffer || !this._texture) return t;
e = e || 0;
i = i || 0;
var a = r || this.width, o = s || this.height;
t = t || new Uint8Array(a * o * 4);
var c = n._forward._device._gl, h = c.getParameter(c.FRAMEBUFFER_BINDING);
c.bindFramebuffer(c.FRAMEBUFFER, this._framebuffer._glID);
c.framebufferTexture2D(c.FRAMEBUFFER, c.COLOR_ATTACHMENT0, c.TEXTURE_2D, this._texture._glID, 0);
c.readPixels(e, i, a, o, c.RGBA, c.UNSIGNED_BYTE, t);
c.bindFramebuffer(c.FRAMEBUFFER, h);
return t;
},
destroy: function() {
this._super();
this._framebuffer && this._framebuffer.destroy();
}
});
cc.RenderTexture = e.exports = o;
}), {
"../renderer": 175,
"../renderer/render-engine": 176,
"./CCTexture2D": 49
} ],
43: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.SceneAsset",
extends: cc.Asset,
properties: {
scene: null,
asyncLoadAssets: void 0
}
});
cc.SceneAsset = n;
e.exports = n;
}), {} ],
44: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Script",
extends: cc.Asset
});
cc._Script = n;
var r = cc.Class({
name: "cc.JavaScript",
extends: n
});
cc._JavaScript = r;
var s = cc.Class({
name: "cc.CoffeeScript",
extends: n
});
cc._CoffeeScript = s;
var a = cc.Class({
name: "cc.TypeScript",
extends: n
});
cc._TypeScript = a;
}), {} ],
45: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.SpriteAtlas",
extends: cc.Asset,
properties: {
_spriteFrames: {
default: {}
}
},
getTexture: function() {
var t = Object.keys(this._spriteFrames);
if (t.length > 0) {
var e = this._spriteFrames[t[0]];
return e ? e.getTexture() : null;
}
return null;
},
getSpriteFrame: function(t) {
var e = this._spriteFrames[t];
if (!e) return null;
e.name || (e.name = t);
return e;
},
getSpriteFrames: function() {
var t = [], e = this._spriteFrames;
for (var i in e) t.push(this.getSpriteFrame(i));
return t;
}
});
cc.SpriteAtlas = n;
e.exports = n;
}), {} ],
46: [ (function(i, n, r) {
var s = i("../event/event-target"), a = i("../utils/texture-util"), o = [ {
u: 0,
v: 0
}, {
u: 0,
v: 0
}, {
u: 0,
v: 0
}, {
u: 0,
v: 0
} ], c = cc.Class({
name: "cc.SpriteFrame",
extends: i("../assets/CCAsset"),
mixins: [ s ],
properties: {
_textureSetter: {
set: function(t) {
if (t) {
0;
this._texture !== t && this._refreshTexture(t);
this._textureFilename = t.url;
}
}
},
insetTop: {
get: function() {
return this._capInsets[1];
},
set: function(t) {
this._capInsets[1] = t;
this._texture && this._calculateSlicedUV();
}
},
insetBottom: {
get: function() {
return this._capInsets[3];
},
set: function(t) {
this._capInsets[3] = t;
this._texture && this._calculateSlicedUV();
}
},
insetLeft: {
get: function() {
return this._capInsets[0];
},
set: function(t) {
this._capInsets[0] = t;
this._texture && this._calculateSlicedUV();
}
},
insetRight: {
get: function() {
return this._capInsets[2];
},
set: function(t) {
this._capInsets[2] = t;
this._texture && this._calculateSlicedUV();
}
}
},
ctor: function() {
s.call(this);
var t = arguments[0], e = arguments[1], i = arguments[2], n = arguments[3], r = arguments[4];
this._rect = null;
this.uv = [];
this._texture = null;
this._original = null;
this._offset = null;
this._originalSize = null;
this._rotated = !1;
this.vertices = null;
this._capInsets = [ 0, 0, 0, 0 ];
this.uvSliced = [];
this._textureFilename = "";
0;
void 0 !== t && this.setTexture(t, e, i, n, r);
},
textureLoaded: function() {
return this._texture && this._texture.loaded;
},
isRotated: function() {
return this._rotated;
},
setRotated: function(t) {
this._rotated = t;
this._texture && this._calculateUV();
},
getRect: function() {
return cc.rect(this._rect);
},
setRect: function(t) {
this._rect = t;
this._texture && this._calculateUV();
},
getOriginalSize: function() {
return cc.size(this._originalSize);
},
setOriginalSize: function(t) {
if (this._originalSize) {
this._originalSize.width = t.width;
this._originalSize.height = t.height;
} else this._originalSize = cc.size(t);
},
getTexture: function() {
return this._texture;
},
_textureLoadedCallback: function() {
var t = this._texture;
if (t) {
var e = t.width, i = t.height;
if (this._rotated && cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
this._rotated = !1;
e = this._texture.width;
i = this._texture.height;
this._rect = cc.rect(0, 0, e, i);
}
this._rect ? this._checkRect(this._texture) : this._rect = cc.rect(0, 0, e, i);
this._originalSize || this.setOriginalSize(cc.size(e, i));
this._offset || this.setOffset(cc.v2(0, 0));
this._calculateUV();
this.emit("load");
}
},
_refreshTexture: function(t) {
this._texture = t;
t.loaded ? this._textureLoadedCallback() : t.once("load", this._textureLoadedCallback, this);
},
getOffset: function() {
return cc.v2(this._offset);
},
setOffset: function(t) {
this._offset = cc.v2(t);
},
clone: function() {
return new c(this._texture || this._textureFilename, this._rect, this._rotated, this._offset, this._originalSize);
},
setTexture: function(i, n, r, s, a) {
this._rect = n || null;
s ? this.setOffset(s) : this._offset = null;
a ? this.setOriginalSize(a) : this._originalSize = null;
this._rotated = r || !1;
var o = i;
if ("string" === ("object" === (e = typeof o) ? t(o) : e) && o) {
this._textureFilename = o;
this._loadTexture();
}
o instanceof cc.Texture2D && this._texture !== o && this._refreshTexture(o);
return !0;
},
_loadTexture: function() {
if (this._textureFilename) {
var t = a.loadImage(this._textureFilename);
this._refreshTexture(t);
}
},
ensureLoadTexture: function() {
if (this._texture) {
if (!this._texture.loaded) {
this._refreshTexture(this._texture);
a.postLoadTexture(this._texture);
}
} else this._textureFilename && this._loadTexture();
},
clearTexture: function() {
this._texture = null;
},
_checkRect: function(t) {
var e = this._rect, i = e.x, n = e.y;
if (this._rotated) {
i += e.height;
n += e.width;
} else {
i += e.width;
n += e.height;
}
i > t.width && cc.errorID(3300, t.url + "/" + this.name, i, t.width);
n > t.height && cc.errorID(3400, t.url + "/" + this.name, n, t.height);
},
_calculateSlicedUV: function() {
var t = this._rect, e = this._texture.width, i = this._texture.height, n = this._capInsets[0], r = this._capInsets[2], s = t.width - n - r, a = this._capInsets[1], c = this._capInsets[3], h = t.height - a - c, l = this.uvSliced;
l.length = 0;
if (this._rotated) {
o[0].u = t.x / e;
o[1].u = (t.x + c) / e;
o[2].u = (t.x + c + h) / e;
o[3].u = (t.x + t.height) / e;
o[3].v = t.y / i;
o[2].v = (t.y + n) / i;
o[1].v = (t.y + n + s) / i;
o[0].v = (t.y + t.width) / i;
for (var u = 0; u < 4; ++u) for (var f = o[u], _ = 0; _ < 4; ++_) {
var d = o[3 - _];
l.push({
u: f.u,
v: d.v
});
}
} else {
o[0].u = t.x / e;
o[1].u = (t.x + n) / e;
o[2].u = (t.x + n + s) / e;
o[3].u = (t.x + t.width) / e;
o[3].v = t.y / i;
o[2].v = (t.y + a) / i;
o[1].v = (t.y + a + h) / i;
o[0].v = (t.y + t.height) / i;
for (var p = 0; p < 4; ++p) for (var m = o[p], g = 0; g < 4; ++g) {
var v = o[g];
l.push({
u: v.u,
v: m.v
});
}
}
},
_setDynamicAtlasFrame: function(t) {
if (t) {
this._original = {
_texture: this._texture,
_x: this._rect.x,
_y: this._rect.y
};
this._texture = t.texture;
this._rect.x = t.x;
this._rect.y = t.y;
this._calculateUV();
}
},
_resetDynamicAtlasFrame: function() {
if (this._original) {
this._rect.x = this._original._x;
this._rect.y = this._original._y;
this._texture = this._original._texture;
this._original = null;
this._calculateUV();
}
},
_calculateUV: function() {
var t = this._rect, e = this._texture, i = this.uv, n = e.width, r = e.height;
if (this._rotated) {
var s = 0 === n ? 0 : t.x / n, a = 0 === n ? 0 : (t.x + t.height) / n, o = 0 === r ? 0 : (t.y + t.width) / r, c = 0 === r ? 0 : t.y / r;
i[0] = s;
i[1] = c;
i[2] = s;
i[3] = o;
i[4] = a;
i[5] = c;
i[6] = a;
i[7] = o;
} else {
var h = 0 === n ? 0 : t.x / n, l = 0 === n ? 0 : (t.x + t.width) / n, u = 0 === r ? 0 : (t.y + t.height) / r, f = 0 === r ? 0 : t.y / r;
i[0] = h;
i[1] = u;
i[2] = l;
i[3] = u;
i[4] = h;
i[5] = f;
i[6] = l;
i[7] = f;
}
var _ = this.vertices;
if (_) {
_.nu.length = 0;
_.nv.length = 0;
for (var d = 0; d < _.u.length; d++) {
_.nu[d] = _.u[d] / n;
_.nv[d] = _.v[d] / r;
}
}
this._calculateSlicedUV();
},
_serialize: !1,
_deserialize: function(t, e) {
var i = t.rect;
i && (this._rect = new cc.Rect(i[0], i[1], i[2], i[3]));
t.offset && this.setOffset(new cc.Vec2(t.offset[0], t.offset[1]));
t.originalSize && this.setOriginalSize(new cc.Size(t.originalSize[0], t.originalSize[1]));
this._rotated = 1 === t.rotated;
this._name = t.name;
var n = t.capInsets;
if (n) {
this._capInsets[0] = n[0];
this._capInsets[1] = n[1];
this._capInsets[2] = n[2];
this._capInsets[3] = n[3];
}
0;
this.vertices = t.vertices;
if (this.vertices) {
this.vertices.nu = [];
this.vertices.nv = [];
}
var r = t.texture;
r && e.result.push(this, "_textureSetter", r);
}
}), h = c.prototype;
h.copyWithZone = h.clone;
h.copy = h.clone;
h.initWithTexture = h.setTexture;
cc.SpriteFrame = c;
n.exports = c;
}), {
"../assets/CCAsset": 33,
"../event/event-target": 102,
"../utils/texture-util": 224
} ],
47: [ (function(t, e, i) {
var n = t("./CCFont"), r = cc.Class({
name: "cc.TTFFont",
extends: n,
properties: {
_fontFamily: null,
_nativeAsset: {
type: cc.String,
get: function() {
return this._fontFamily;
},
set: function(t) {
this._fontFamily = t || "Arial";
},
override: !0
}
}
});
cc.TTFFont = e.exports = r;
}), {
"./CCFont": 37
} ],
48: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TextAsset",
extends: cc.Asset,
properties: {
text: ""
},
toString: function() {
return this.text;
}
});
e.exports = cc.TextAsset = n;
}), {} ],
49: [ (function(t, e, i) {
var n = t("../event/event-target"), r = t("../renderer/render-engine"), s = t("../renderer");
t("../platform/CCClass");
var a = r.gfx, o = new (t("../platform/id-generater"))("Tex"), c = cc.Enum({
RGB565: a.TEXTURE_FMT_R5_G6_B5,
RGB5A1: a.TEXTURE_FMT_R5_G5_B5_A1,
RGBA4444: a.TEXTURE_FMT_R4_G4_B4_A4,
RGB888: a.TEXTURE_FMT_RGB8,
RGBA8888: a.TEXTURE_FMT_RGBA8,
A8: a.TEXTURE_FMT_A8,
I8: a.TEXTURE_FMT_L8,
AI8: a.TEXTURE_FMT_L8_A8
}), h = cc.Enum({
REPEAT: 10497,
CLAMP_TO_EDGE: 33071,
MIRRORED_REPEAT: 33648
}), l = cc.Enum({
LINEAR: 9729,
NEAREST: 9728
}), u = {
9728: 0,
9729: 1
}, f = [], _ = {
width: void 0,
height: void 0,
minFilter: void 0,
magFilter: void 0,
wrapS: void 0,
wrapT: void 0,
format: void 0,
mipmap: void 0,
images: void 0,
image: void 0,
flipY: void 0,
premultiplyAlpha: void 0
};
function d() {
for (var t in _) _[t] = void 0;
f.length = 0;
_.images = f;
_.flipY = !1;
return _;
}
var p = cc.Class({
name: "cc.Texture2D",
extends: t("../assets/CCAsset"),
mixins: [ n ],
properties: {
_nativeAsset: {
get: function() {
return this._image;
},
set: function(t) {
this.initWithElement(t);
},
override: !0
},
_hasMipmap: !1,
_format: c.RGBA8888,
_premultiplyAlpha: !1,
_flipY: !1,
_minFilter: l.LINEAR,
_magFilter: l.LINEAR,
_wrapS: h.CLAMP_TO_EDGE,
_wrapT: h.CLAMP_TO_EDGE
},
statics: {
PixelFormat: c,
WrapMode: h,
Filter: l,
_FilterIndex: u,
extnames: [ ".png", ".jpg", ".jpeg", ".bmp", ".webp" ]
},
ctor: function() {
this._id = o.getNewId();
this.url = "";
this.loaded = !1;
this.width = 0;
this.height = 0;
this._hashDirty = !0;
this._hash = 0;
this._texture = null;
},
getImpl: function() {
return this._texture;
},
getId: function() {
return this._id;
},
toString: function() {
return this.url || "";
},
update: function(t) {
if (t) {
var e = !1;
void 0 !== t.width && (this.width = t.width);
void 0 !== t.height && (this.height = t.height);
if (void 0 !== t.minFilter) {
this._minFilter = t.minFilter;
t.minFilter = u[t.minFilter];
}
if (void 0 !== t.magFilter) {
this._magFilter = t.magFilter;
t.magFilter = u[t.magFilter];
}
void 0 !== t.wrapS && (this._wrapS = t.wrapS);
void 0 !== t.wrapT && (this._wrapT = t.wrapT);
void 0 !== t.format && (this._format = t.format);
if (void 0 !== t.flipY) {
this._flipY = t.flipY;
e = !0;
}
if (void 0 !== t.premultiplyAlpha) {
this._premultiplyAlpha = t.premultiplyAlpha;
e = !0;
}
void 0 !== t.mipmap && (this._hasMipmap = t.mipmap);
e && this._image && (t.image = this._image);
if (t.images && t.images.length > 0) this._image = t.images[0]; else if (void 0 !== t.image) {
this._image = t.image;
if (!t.images) {
f.length = 0;
t.images = f;
}
t.images.push(t.image);
}
t.images && t.images.length > 0 && this._texture.update(t);
this._hashDirty = !0;
}
},
initWithElement: function(t) {
if (t) {
this._image = t;
if (t.complete || t instanceof HTMLCanvasElement) this.handleLoadedTexture(); else {
var e = this;
t.addEventListener("load", (function() {
e.handleLoadedTexture();
}));
t.addEventListener("error", (function(t) {
cc.warnID(3119, t.message);
}));
}
}
},
initWithData: function(t, e, i, n) {
var r = d();
r.image = t;
r.images = [ r.image ];
r.hasMipmap = this._hasMipmap;
r.premultiplyAlpha = this._premultiplyAlpha;
r.flipY = this._flipY;
r.minFilter = u[this._minFilter];
r.magFilter = u[this._magFilter];
r.wrapS = this._wrapS;
r.wrapT = this._wrapT;
r.format = e;
r.width = i;
r.height = n;
this._texture ? this.update(r) : this._texture = new s.Texture2D(s.device, r);
this.width = i;
this.height = n;
this.loaded = !0;
this.emit("load");
return !0;
},
getHtmlElementObj: function() {
return this._image;
},
destroy: function() {
this._image = null;
this._texture && this._texture.destroy();
this._super();
},
getPixelFormat: function() {
return this._format;
},
hasPremultipliedAlpha: function() {
return this._premultiplyAlpha || !1;
},
hasMipmap: function() {
return this._hasMipmap || !1;
},
handleLoadedTexture: function() {
if (this._image && this._image.width && this._image.height) {
this.width = this._image.width;
this.height = this._image.height;
var t = d();
t.image = this._image;
t.images = [ t.image ];
t.width = this.width;
t.height = this.height;
t.hasMipmap = this._hasMipmap;
t.format = this._format;
t.premultiplyAlpha = this._premultiplyAlpha;
t.flipY = this._flipY;
t.minFilter = u[this._minFilter];
t.magFilter = u[this._magFilter];
t.wrapS = this._wrapS;
t.wrapT = this._wrapT;
this._texture ? this._texture.update(t) : this._texture = new s.Texture2D(s.device, t);
this.loaded = !0;
this.emit("load");
cc.macro.CLEANUP_IMAGE_CACHE && this._image instanceof HTMLImageElement && this._clearImage();
}
},
description: function() {
return "<cc.Texture2D | Name = " + this.url + " | Dimensions = " + this.width + " x " + this.height + ">";
},
releaseTexture: function() {
this._image = null;
this._texture && this._texture.destroy();
},
setWrapMode: function(t, e) {
if (this._wrapS !== t || this._wrapT !== e) {
var i = d();
i.wrapS = t;
i.wrapT = e;
this.update(i);
}
},
setFilters: function(t, e) {
if (this._minFilter !== t || this._magFilter !== e) {
var i = d();
i.minFilter = t;
i.magFilter = e;
this.update(i);
}
},
setFlipY: function(t) {
if (this._flipY !== t) {
var e = d();
e.flipY = t;
this.update(e);
}
},
setPremultiplyAlpha: function(t) {
if (this._premultiplyAlpha !== t) {
var e = d();
e.premultiplyAlpha = t;
this.update(e);
}
},
setMipmap: function(t) {
if (this._hasMipmap !== t) {
var e = d();
e.mipmap = t;
this.update(e);
}
},
_serialize: !1,
_deserialize: function(t, e) {
var i = t.split(","), n = i[0];
if (n) {
var r = n.charCodeAt(0) - 48, s = p.extnames[r];
this._setRawAsset(s || n);
var a = e.customEnv, o = a && a.uuid;
if (o) {
this._uuid = o;
var c = this.nativeUrl;
this.url = c;
}
}
if (6 === i.length) {
this._minFilter = parseInt(i[1]);
this._magFilter = parseInt(i[2]);
this._wrapS = parseInt(i[3]);
this._wrapT = parseInt(i[4]);
this._premultiplyAlpha = 49 === i[5].charCodeAt(0);
}
},
_getHash: function() {
if (!this._hashDirty) return this._hash;
var t = this._hasMipmap ? 1 : 0, e = this._premultiplyAlpha ? 1 : 0, i = this._flipY ? 1 : 0, n = this._minFilter === l.LINEAR ? 1 : 2, r = this._magFilter === l.LINEAR ? 1 : 2, s = this._wrapS === h.REPEAT ? 1 : this._wrapS === h.CLAMP_TO_EDGE ? 2 : 3, a = this._wrapT === h.REPEAT ? 1 : this._wrapT === h.CLAMP_TO_EDGE ? 2 : 3, o = this._format, c = this._image;
if (c) {
6408 !== c._glFormat && (o = 0);
e = c._premultiplyAlpha;
}
this._hash = Number("" + n + r + o + s + a + t + e + i);
this._hashDirty = !1;
return this._hash;
},
_clearImage: function() {
cc.loader.removeItem(this._image.id || this._image.src);
this._image.src = "";
}
});
cc.Texture2D = e.exports = p;
}), {
"../assets/CCAsset": 33,
"../event/event-target": 102,
"../platform/CCClass": 134,
"../platform/id-generater": 150,
"../renderer": 175,
"../renderer/render-engine": 176
} ],
50: [ (function(t, e, i) {
t("./CCRawAsset");
t("./CCAsset");
t("./CCFont");
t("./CCPrefab");
t("./CCAudioClip");
t("./CCScripts");
t("./CCSceneAsset");
t("./CCSpriteFrame");
t("./CCTexture2D");
t("./CCRenderTexture");
t("./CCTTFFont");
t("./CCSpriteAtlas");
t("./CCBitmapFont");
t("./CCLabelAtlas");
t("./CCTextAsset");
t("./CCJsonAsset");
t("./CCBufferAsset");
}), {
"./CCAsset": 33,
"./CCAudioClip": 34,
"./CCBitmapFont": 35,
"./CCBufferAsset": 36,
"./CCFont": 37,
"./CCJsonAsset": 38,
"./CCLabelAtlas": 39,
"./CCPrefab": 40,
"./CCRawAsset": 41,
"./CCRenderTexture": 42,
"./CCSceneAsset": 43,
"./CCScripts": 44,
"./CCSpriteAtlas": 45,
"./CCSpriteFrame": 46,
"./CCTTFFont": 47,
"./CCTextAsset": 48,
"./CCTexture2D": 49
} ],
51: [ (function(t, e, i) {
t("../CCNode").EventType;
var n = 56, r = 7, s = cc.Enum({
ONCE: 0,
ON_WINDOW_RESIZE: 1,
ALWAYS: 2
});
function a(t) {
return t instanceof cc.Scene ? cc.visibleRect : t._contentSize;
}
function o(t, e, i, n) {
for (var r = t._parent._scale.x, s = t._parent._scale.y, a = 0, o = 0, c = t._parent; ;) {
var h = c._position;
a += h.x;
o += h.y;
if (!(c = c._parent)) {
i.x = i.y = 0;
n.x = n.y = 1;
return;
}
if (c === e) break;
var l = c._scale.x, u = c._scale.y;
a *= l;
o *= u;
r *= l;
s *= u;
}
n.x = 0 !== r ? 1 / r : 1;
n.y = 0 !== s ? 1 / s : 1;
i.x = -a;
i.y = -o;
}
var c = cc.Vec2.ZERO, h = cc.Vec2.ONE;
function l(t, e) {
var i, s, l, u = e._target;
u ? o(t, i = u, s = c, l = h) : i = t._parent;
var f = a(i), _ = i._anchorPoint, d = i instanceof cc.Scene, p = t._position.x, m = t._position.y, g = t._anchorPoint;
if (e._alignFlags & n) {
var v, y, T = f.width;
if (d) {
v = cc.visibleRect.left.x;
y = cc.visibleRect.right.x;
} else y = (v = -_.x * T) + T;
v += e._isAbsLeft ? e._left : e._left * T;
y -= e._isAbsRight ? e._right : e._right * T;
if (u) {
v += s.x;
v *= l.x;
y += s.x;
y *= l.x;
}
var x, E = g.x, C = t._scale.x;
if (C < 0) {
E = 1 - E;
C = -C;
}
if (e.isStretchWidth) {
x = y - v;
0 !== C && (t.width = x / C);
p = v + E * x;
} else {
x = t.width * C;
if (e.isAlignHorizontalCenter) {
var A = e._isAbsHorizontalCenter ? e._horizontalCenter : e._horizontalCenter * T, b = (.5 - _.x) * f.width;
if (u) {
A *= l.x;
b += s.x;
b *= l.x;
}
p = b + (E - .5) * x + A;
} else p = e.isAlignLeft ? v + E * x : y + (E - 1) * x;
}
}
if (e._alignFlags & r) {
var S, w, D = f.height;
if (d) {
w = cc.visibleRect.bottom.y;
S = cc.visibleRect.top.y;
} else S = (w = -_.y * D) + D;
w += e._isAbsBottom ? e._bottom : e._bottom * D;
S -= e._isAbsTop ? e._top : e._top * D;
if (u) {
w += s.y;
w *= l.y;
S += s.y;
S *= l.y;
}
var I, R = g.y, M = t._scale.y;
if (M < 0) {
R = 1 - R;
M = -M;
}
if (e.isStretchHeight) {
I = S - w;
0 !== M && (t.height = I / M);
m = w + R * I;
} else {
I = t.height * M;
if (e.isAlignVerticalCenter) {
var L = e._isAbsVerticalCenter ? e._verticalCenter : e._verticalCenter * D, O = (.5 - _.y) * f.height;
if (u) {
L *= l.y;
O += s.y;
O *= l.y;
}
m = O + (R - .5) * I + L;
} else m = e.isAlignBottom ? w + R * I : S + (R - 1) * I;
}
}
t.setPosition(p, m);
}
function u(t) {
var e = t._widget;
if (e) {
0;
l(t, e);
e.alignMode !== s.ALWAYS ? e.enabled = !1 : _.push(e);
}
for (var i = t._children, n = 0; n < i.length; n++) {
var r = i[n];
r._active && u(r);
}
}
function f() {
var t = cc.director.getScene();
if (t) {
d.isAligning = !0;
if (d._nodesOrderDirty) {
_.length = 0;
u(t);
d._nodesOrderDirty = !1;
} else {
var e, i = d._activeWidgetsIterator;
for (i.i = 0; i.i < _.length; ++i.i) l((e = _[i.i]).node, e);
}
d.isAligning = !1;
}
0;
}
var _ = [];
var d = cc._widgetManager = e.exports = {
_AlignFlags: {
TOP: 1,
MID: 2,
BOT: 4,
LEFT: 8,
CENTER: 16,
RIGHT: 32
},
isAligning: !1,
_nodesOrderDirty: !1,
_activeWidgetsIterator: new cc.js.array.MutableForwardIterator(_),
init: function(t) {
t.on(cc.Director.EVENT_AFTER_UPDATE, f);
cc.sys.isMobile ? window.addEventListener("resize", this.onResized.bind(this)) : cc.view.on("canvas-resize", this.onResized, this);
},
add: function(t) {
t.node._widget = t;
this._nodesOrderDirty = !0;
0;
},
remove: function(t) {
t.node._widget = null;
this._activeWidgetsIterator.remove(t);
0;
},
onResized: function() {
var t = cc.director.getScene();
t && this.refreshWidgetOnResized(t);
},
refreshWidgetOnResized: function(t) {
var e = cc.Node.isNode(t) && t.getComponent(cc.Widget);
e && e.alignMode === s.ON_WINDOW_RESIZE && (e.enabled = !0);
for (var i = t._children, n = 0; n < i.length; n++) {
var r = i[n];
this.refreshWidgetOnResized(r);
}
},
updateAlignment: function t(e) {
var i = e._parent;
cc.Node.isNode(i) && t(i);
var n = e._widget || e.getComponent(cc.Widget);
n && i && l(e, n);
},
AlignMode: s
};
0;
}), {
"../CCNode": 29
} ],
52: [ (function(t, e, i) {
var n = t("../utils/affine-transform"), r = t("../renderer/render-engine"), s = t("../renderer/index"), a = t("../renderer/render-flow"), o = t("../CCGame"), c = cc.vmath.mat4, h = cc.vmath.vec2, l = cc.vmath.vec3, u = c.create(), f = c.create(), _ = l.create(), d = [], p = null;
function m() {
if (p) {
var t = p._node, e = cc.visibleRect;
t.z = e.height / 1.1566;
t.x = _.x = e.width / 2;
t.y = _.y = e.height / 2;
_.z = 0;
t.lookAt(_);
}
}
var g = cc.Enum({
COLOR: 1,
DEPTH: 2,
STENCIL: 4
}), v = cc.Class({
name: "cc.Camera",
extends: cc.Component,
ctor: function() {
if (o.renderType !== o.RENDER_TYPE_CANVAS) {
var t = new r.Camera();
t.setStages([ "transparent" ]);
this._fov = 60 * Math.PI / 180;
t.setFov(this._fov);
t.setNear(.1);
t.setFar(4096);
var e = new r.View();
t.view = e;
t.dirty = !0;
this._matrixDirty = !0;
this._inited = !1;
this._camera = t;
} else this._inited = !0;
},
editor: !1,
properties: {
_cullingMask: 4294967295,
_clearFlags: g.DEPTH | g.STENCIL,
_backgroundColor: cc.color(0, 0, 0, 255),
_depth: 0,
_zoomRatio: 1,
_targetTexture: null,
zoomRatio: {
get: function() {
return this._zoomRatio;
},
set: function(t) {
this._zoomRatio = t;
this._matrixDirty = !0;
}
},
cullingMask: {
get: function() {
return this._cullingMask;
},
set: function(t) {
this._cullingMask = t;
this._updateCameraMask();
}
},
clearFlags: {
get: function() {
return this._clearFlags;
},
set: function(t) {
this._clearFlags = t;
this._camera && this._camera.setClearFlags(t);
}
},
backgroundColor: {
get: function() {
return this._backgroundColor;
},
set: function(t) {
this._backgroundColor = t;
this._updateBackgroundColor();
}
},
depth: {
get: function() {
return this._depth;
},
set: function(t) {
this._depth = t;
this._camera && (this._camera._priority = t);
}
},
targetTexture: {
get: function() {
return this._targetTexture;
},
set: function(t) {
this._targetTexture = t;
this._updateTargetTexture();
}
}
},
statics: {
main: null,
cameras: d,
ClearFlags: g,
findCamera: function(t) {
for (var e = 0, i = d.length; e < i; e++) {
var n = d[e];
if (n.containsNode(t)) return n;
}
return null;
},
_setupDebugCamera: function() {
if (!p && o.renderType !== o.RENDER_TYPE_CANVAS) {
var t = new r.Camera();
p = t;
t.setStages([ "transparent" ]);
t.setFov(60 * Math.PI / 180);
t.setNear(.1);
t.setFar(4096);
var e = new r.View();
t.view = e;
t.dirty = !0;
t._cullingMask = t.view._cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
t._priority = cc.macro.MAX_ZINDEX;
t.setClearFlags(0);
t.setColor(0, 0, 0, 0);
var i = new cc.Node();
t.setNode(i);
m();
cc.view.on("design-resolution-changed", m);
s.scene.addCamera(t);
}
}
},
_updateCameraMask: function() {
if (this._camera) {
var t = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
this._camera._cullingMask = t;
this._camera.view._cullingMask = t;
}
},
_updateBackgroundColor: function() {
if (this._camera) {
var t = this._backgroundColor;
this._camera.setColor(t.r / 255, t.g / 255, t.b / 255, t.a / 255);
}
},
_updateTargetTexture: function() {
var t = this._targetTexture;
this._camera && (this._camera._framebuffer = t ? t._framebuffer : null);
},
_onMatrixDirty: function() {
this._matrixDirty = !0;
},
_init: function() {
if (!this._inited) {
this._inited = !0;
if (this._camera) {
this._camera.setNode(this.node);
this._camera.setClearFlags(this._clearFlags);
this._camera._priority = this._depth;
this._updateBackgroundColor();
this._updateCameraMask();
this._updateTargetTexture();
}
}
},
onLoad: function() {
this._init();
},
onEnable: function() {
this._matrixDirty = !0;
if (o.renderType !== o.RENDER_TYPE_CANVAS) {
cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
s.scene.addCamera(this._camera);
}
d.push(this);
},
onDisable: function() {
if (o.renderType !== o.RENDER_TYPE_CANVAS) {
cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
s.scene.removeCamera(this._camera);
}
cc.js.array.remove(d, this);
},
getNodeToCameraTransform: function(t) {
var e = n.identity();
t.getWorldMatrix(f);
if (this.containsNode(t)) {
this.getWorldToCameraMatrix(u);
c.mul(f, f, u);
}
n.fromMat4(e, f);
return e;
},
getCameraToWorldPoint: function(t, e) {
e = e || cc.v2();
this.getCameraToWorldMatrix(u);
h.transformMat4(e, t, u);
return e;
},
getWorldToCameraPoint: function(t, e) {
e = e || cc.v2();
this.getWorldToCameraMatrix(u);
h.transformMat4(e, t, u);
return e;
},
getCameraToWorldMatrix: function(t) {
this.getWorldToCameraMatrix(t);
c.invert(t, t);
return t;
},
getWorldToCameraMatrix: function(t) {
this.node.getWorldRT(u);
var e = this.zoomRatio;
u.m00 *= e;
u.m01 *= e;
u.m04 *= e;
u.m05 *= e;
var i = u.m12, n = u.m13, r = cc.visibleRect.center;
u.m12 = r.x - (u.m00 * i + u.m04 * n);
u.m13 = r.y - (u.m01 * i + u.m05 * n);
t !== u && c.copy(t, u);
return t;
},
containsNode: function(t) {
return t._cullingMask & this.cullingMask;
},
render: function(t) {
if (!(t = t || cc.director.getScene())) return null;
this.node.getWorldMatrix(u);
this.beforeDraw();
a.visit(t);
s._forward.renderCamera(this._camera, s.scene);
},
beforeDraw: function() {
var t = this.node;
if (this._matrixDirty || t._worldMatDirty) {
var e = this._camera, i = 2 * Math.atan(Math.tan(this._fov / 2) / this.zoomRatio);
e.setFov(i);
var n = cc.game.canvas.height / cc.view._scaleY, r = this._targetTexture;
r && (n = r.height);
t._updateWorldMatrix();
_.x = t._worldMatrix.m12;
_.y = t._worldMatrix.m13;
_.z = 0;
t.z = n / (2 * Math.tan(this._fov / 2));
t.lookAt(_);
this._matrixDirty = !1;
e.dirty = !0;
}
}
});
e.exports = cc.Camera = v;
}), {
"../CCGame": 28,
"../renderer/index": 175,
"../renderer/render-engine": 176,
"../renderer/render-flow": 177,
"../utils/affine-transform": 208
} ],
53: [ (function(t, e, i) {
cc.Collider.Box = cc.Class({
properties: {
_offset: cc.v2(0, 0),
_size: cc.size(100, 100),
offset: {
tooltip: !1,
get: function() {
return this._offset;
},
set: function(t) {
this._offset = t;
},
type: cc.Vec2
},
size: {
tooltip: !1,
get: function() {
return this._size;
},
set: function(t) {
this._size.width = t.width < 0 ? 0 : t.width;
this._size.height = t.height < 0 ? 0 : t.height;
},
type: cc.Size
}
},
resetInEditor: !1
});
var n = cc.Class({
name: "cc.BoxCollider",
extends: cc.Collider,
mixins: [ cc.Collider.Box ],
editor: !1
});
cc.BoxCollider = e.exports = n;
}), {} ],
54: [ (function(t, e, i) {
cc.Collider.Circle = cc.Class({
properties: {
_offset: cc.v2(0, 0),
_radius: 50,
offset: {
get: function() {
return this._offset;
},
set: function(t) {
this._offset = t;
},
type: cc.Vec2
},
radius: {
tooltip: !1,
get: function() {
return this._radius;
},
set: function(t) {
this._radius = t < 0 ? 0 : t;
}
}
},
resetInEditor: !1
});
var n = cc.Class({
name: "cc.CircleCollider",
extends: cc.Collider,
mixins: [ cc.Collider.Circle ],
editor: !1
});
cc.CircleCollider = e.exports = n;
}), {} ],
55: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Collider",
extends: cc.Component,
properties: {
editing: {
default: !1,
serializable: !1,
tooltip: !1
},
tag: {
tooltip: !1,
default: 0,
range: [ 0, 1e7 ],
type: cc.Integer
}
},
onDisable: function() {
cc.director.getCollisionManager().removeCollider(this);
},
onEnable: function() {
cc.director.getCollisionManager().addCollider(this);
}
});
cc.Collider = e.exports = n;
}), {} ],
56: [ (function(t, e, i) {
var n = t("./CCContact"), r = n.CollisionType, s = t("../CCNode").EventType, a = cc.vmath, o = cc.v2();
function c(t, e, i, n, r, s) {
var a = t.x, o = t.y, c = t.width, h = t.height, l = e.m00, u = e.m01, f = e.m04, _ = e.m05, d = l * a + f * o + e.m12, p = u * a + _ * o + e.m13, m = l * c, g = u * c, v = f * h, y = _ * h;
n.x = d;
n.y = p;
r.x = m + d;
r.y = g + p;
i.x = v + d;
i.y = y + p;
s.x = m + v + d;
s.y = g + y + p;
}
var h = cc.Class({
mixins: [ cc.EventTarget ],
properties: {
enabled: !1,
enabledDrawBoundingBox: !1
},
ctor: function() {
this._contacts = [];
this._colliders = [];
this._debugDrawer = null;
this._enabledDebugDraw = !1;
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
},
update: function(t) {
if (this.enabled) {
var e = void 0, i = void 0, n = this._colliders;
for (e = 0, i = n.length; e < i; e++) this.updateCollider(n[e]);
var s = this._contacts, a = [];
for (e = 0, i = s.length; e < i; e++) {
var o = s[e].updateState();
o !== r.None && a.push([ o, s[e] ]);
}
for (e = 0, i = a.length; e < i; e++) {
var c = a[e];
this._doCollide(c[0], c[1]);
}
this.drawColliders();
}
},
_doCollide: function(t, e) {
var i = void 0;
switch (t) {
case r.CollisionEnter:
i = "onCollisionEnter";
break;

case r.CollisionStay:
i = "onCollisionStay";
break;

case r.CollisionExit:
i = "onCollisionExit";
}
var n = e.collider1, s = e.collider2, a = n.node._components, o = s.node._components, c = void 0, h = void 0, l = void 0;
for (c = 0, h = a.length; c < h; c++) (l = a[c])[i] && l[i](s, n);
for (c = 0, h = o.length; c < h; c++) (l = o[c])[i] && l[i](n, s);
},
shouldCollide: function(t, e) {
var i = t.node, n = e.node, r = cc.game.collisionMatrix;
return i !== n && r[i.groupIndex][n.groupIndex];
},
initCollider: function(t) {
if (!t.world) {
var e = t.world = {};
e.aabb = cc.rect();
e.preAabb = cc.rect();
e.matrix = a.mat4.create();
e.radius = 0;
if (t instanceof cc.BoxCollider) {
e.position = null;
e.points = [ cc.v2(), cc.v2(), cc.v2(), cc.v2() ];
} else if (t instanceof cc.PolygonCollider) {
e.position = null;
e.points = t.points.map((function(t) {
return cc.v2(t.x, t.y);
}));
} else if (t instanceof cc.CircleCollider) {
e.position = cc.v2();
e.points = null;
}
}
},
updateCollider: function(t) {
var e = t.offset, i = t.world, n = i.aabb, r = i.matrix;
t.node.getWorldMatrix(r);
var s = i.preAabb;
s.x = n.x;
s.y = n.y;
s.width = n.width;
s.height = n.height;
if (t instanceof cc.BoxCollider) {
var h = t.size;
n.x = e.x - h.width / 2;
n.y = e.y - h.height / 2;
n.width = h.width;
n.height = h.height;
var l = i.points, u = l[0], f = l[1], _ = l[2], d = l[3];
c(n, r, u, f, _, d);
var p = Math.min(u.x, f.x, _.x, d.x), m = Math.min(u.y, f.y, _.y, d.y), g = Math.max(u.x, f.x, _.x, d.x), v = Math.max(u.y, f.y, _.y, d.y);
n.x = p;
n.y = m;
n.width = g - p;
n.height = v - m;
} else if (t instanceof cc.CircleCollider) {
a.vec2.transformMat4(o, t.offset, r);
i.position.x = o.x;
i.position.y = o.y;
var y = r.m12, T = r.m13;
r.m12 = r.m13 = 0;
o.x = t.radius;
o.y = 0;
a.vec2.transformMat4(o, o, r);
var x = Math.sqrt(o.x * o.x + o.y * o.y);
i.radius = x;
n.x = i.position.x - x;
n.y = i.position.y - x;
n.width = 2 * x;
n.height = 2 * x;
r.m12 = y;
r.m13 = T;
} else if (t instanceof cc.PolygonCollider) {
var E = t.points, C = i.points;
C.length = E.length;
for (var A = 1e6, b = 1e6, S = -1e6, w = -1e6, D = 0, I = E.length; D < I; D++) {
C[D] || (C[D] = cc.v2());
o.x = E[D].x + e.x;
o.y = E[D].y + e.y;
a.vec2.transformMat4(o, o, r);
var R = o.x, M = o.y;
C[D].x = R;
C[D].y = M;
R > S && (S = R);
R < A && (A = R);
M > w && (w = M);
M < b && (b = M);
}
n.x = A;
n.y = b;
n.width = S - A;
n.height = w - b;
}
},
addCollider: function(t) {
var e = this._colliders;
if (-1 === e.indexOf(t)) {
for (var i = 0, r = e.length; i < r; i++) {
var a = e[i];
if (this.shouldCollide(t, a)) {
var o = new n(t, a);
this._contacts.push(o);
}
}
e.push(t);
this.initCollider(t);
}
t.node.on(s.GROUP_CHANGED, this.onNodeGroupChanged, this);
},
removeCollider: function(t) {
var e = this._colliders, i = e.indexOf(t);
if (i >= 0) {
e.splice(i, 1);
for (var n = this._contacts, a = n.length - 1; a >= 0; a--) {
var o = n[a];
if (o.collider1 === t || o.collider2 === t) {
o.touching && this._doCollide(r.CollisionExit, o);
n.splice(a, 1);
}
}
t.node.off(s.GROUP_CHANGED, this.onNodeGroupChanged, this);
} else cc.errorID(6600);
},
onNodeGroupChanged: function(t) {
for (var e = t.getComponents(cc.Collider), i = 0, n = e.length; i < n; i++) {
this.removeCollider(e[i]);
this.addCollider(e[i]);
}
},
drawColliders: function() {
if (this._enabledDebugDraw) {
this._checkDebugDrawValid();
var t = this._debugDrawer;
t.clear();
for (var e = this._colliders, i = 0, n = e.length; i < n; i++) {
var r = e[i];
t.strokeColor = cc.Color.WHITE;
if (r instanceof cc.BoxCollider || r instanceof cc.PolygonCollider) {
var s = r.world.points;
if (s.length > 0) {
t.moveTo(s[0].x, s[0].y);
for (var a = 1; a < s.length; a++) t.lineTo(s[a].x, s[a].y);
t.close();
t.stroke();
}
} else if (r instanceof cc.CircleCollider) {
t.circle(r.world.position.x, r.world.position.y, r.world.radius);
t.stroke();
}
if (this.enabledDrawBoundingBox) {
var o = r.world.aabb;
t.strokeColor = cc.Color.BLUE;
t.moveTo(o.xMin, o.yMin);
t.lineTo(o.xMin, o.yMax);
t.lineTo(o.xMax, o.yMax);
t.lineTo(o.xMax, o.yMin);
t.close();
t.stroke();
}
}
}
},
_checkDebugDrawValid: function() {
if (!this._debugDrawer || !this._debugDrawer.isValid) {
var t = new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
t.zIndex = cc.macro.MAX_ZINDEX;
cc.game.addPersistRootNode(t);
this._debugDrawer = t.addComponent(cc.Graphics);
}
}
});
cc.js.getset(h.prototype, "enabledDebugDraw", (function() {
return this._enabledDebugDraw;
}), (function(t) {
if (t && !this._enabledDebugDraw) {
this._checkDebugDrawValid();
this._debugDrawer.node.active = !0;
} else if (!t && this._enabledDebugDraw) {
this._debugDrawer.clear(!0);
this._debugDrawer.node.active = !1;
}
this._enabledDebugDraw = t;
}));
cc.CollisionManager = e.exports = h;
}), {
"../CCNode": 29,
"./CCContact": 57
} ],
57: [ (function(t, e, i) {
var n = t("./CCIntersection"), r = cc.Enum({
None: 0,
CollisionEnter: 1,
CollisionStay: 2,
CollisionExit: 3
});
function s(t, e) {
this.collider1 = t;
this.collider2 = e;
this.touching = !1;
var i = t instanceof cc.BoxCollider || t instanceof cc.PolygonCollider, r = e instanceof cc.BoxCollider || e instanceof cc.PolygonCollider, s = t instanceof cc.CircleCollider, a = e instanceof cc.CircleCollider;
if (i && r) this.testFunc = n.polygonPolygon; else if (s && a) this.testFunc = n.circleCircle; else if (i && a) this.testFunc = n.polygonCircle; else if (s && r) {
this.testFunc = n.polygonCircle;
this.collider1 = e;
this.collider2 = t;
} else cc.errorID(6601, cc.js.getClassName(t), cc.js.getClassName(e));
}
s.prototype.test = function() {
var t = this.collider1.world, e = this.collider2.world;
return !!t.aabb.intersects(e.aabb) && (this.testFunc === n.polygonPolygon ? this.testFunc(t.points, e.points) : this.testFunc === n.circleCircle ? this.testFunc(t, e) : this.testFunc === n.polygonCircle && this.testFunc(t.points, e));
};
s.prototype.updateState = function() {
var t = this.test(), e = r.None;
if (t && !this.touching) {
this.touching = !0;
e = r.CollisionEnter;
} else if (t && this.touching) e = r.CollisionStay; else if (!t && this.touching) {
this.touching = !1;
e = r.CollisionExit;
}
return e;
};
s.CollisionType = r;
e.exports = s;
}), {
"./CCIntersection": 58
} ],
58: [ (function(t, e, i) {
var n = {};
function r(t, e, i, n) {
var r = (n.x - i.x) * (t.y - i.y) - (n.y - i.y) * (t.x - i.x), s = (e.x - t.x) * (t.y - i.y) - (e.y - t.y) * (t.x - i.x), a = (n.y - i.y) * (e.x - t.x) - (n.x - i.x) * (e.y - t.y);
if (0 !== a) {
var o = r / a, c = s / a;
if (0 <= o && o <= 1 && 0 <= c && c <= 1) return !0;
}
return !1;
}
n.lineLine = r;
n.lineRect = function(t, e, i) {
var n = new cc.Vec2(i.x, i.y), s = new cc.Vec2(i.x, i.yMax), a = new cc.Vec2(i.xMax, i.yMax), o = new cc.Vec2(i.xMax, i.y);
return !!(r(t, e, n, s) || r(t, e, s, a) || r(t, e, a, o) || r(t, e, o, n));
};
function s(t, e, i) {
for (var n = i.length, s = 0; s < n; ++s) {
if (r(t, e, i[s], i[(s + 1) % n])) return !0;
}
return !1;
}
n.linePolygon = s;
n.rectRect = function(t, e) {
var i = t.x, n = t.y, r = t.x + t.width, s = t.y + t.height, a = e.x, o = e.y, c = e.x + e.width, h = e.y + e.height;
return i <= c && r >= a && n <= h && s >= o;
};
n.rectPolygon = function(t, e) {
var i, n, r = new cc.Vec2(t.x, t.y), o = new cc.Vec2(t.x, t.yMax), c = new cc.Vec2(t.xMax, t.yMax), h = new cc.Vec2(t.xMax, t.y);
if (s(r, o, e)) return !0;
if (s(o, c, e)) return !0;
if (s(c, h, e)) return !0;
if (s(h, r, e)) return !0;
for (i = 0, n = e.length; i < n; ++i) if (a(e[i], t)) return !0;
return !!(a(r, e) || a(o, e) || a(c, e) || a(h, e));
};
n.polygonPolygon = function(t, e) {
var i, n;
for (i = 0, n = t.length; i < n; ++i) if (s(t[i], t[(i + 1) % n], e)) return !0;
for (i = 0, n = e.length; i < n; ++i) if (a(e[i], t)) return !0;
for (i = 0, n = t.length; i < n; ++i) if (a(t[i], e)) return !0;
return !1;
};
n.circleCircle = function(t, e) {
return t.position.sub(e.position).mag() < t.radius + e.radius;
};
n.polygonCircle = function(t, e) {
var i = e.position;
if (a(i, t)) return !0;
for (var n = 0, r = t.length; n < r; n++) if (o(i, 0 === n ? t[t.length - 1] : t[n - 1], t[n], !0) < e.radius) return !0;
return !1;
};
function a(t, e) {
for (var i = !1, n = t.x, r = t.y, s = e.length, a = 0, o = s - 1; a < s; o = a++) {
var c = e[a].x, h = e[a].y, l = e[o].x, u = e[o].y;
h > r != u > r && n < (l - c) * (r - h) / (u - h) + c && (i = !i);
}
return i;
}
n.pointInPolygon = a;
function o(t, e, i, n) {
var r, s = i.x - e.x, a = i.y - e.y, o = s * s + a * a, c = ((t.x - e.x) * s + (t.y - e.y) * a) / o;
r = n ? o ? c < 0 ? e : c > 1 ? i : cc.v2(e.x + c * s, e.y + c * a) : e : cc.v2(e.x + c * s, e.y + c * a);
s = t.x - r.x;
a = t.y - r.y;
return Math.sqrt(s * s + a * a);
}
n.pointLineDistance = o;
cc.Intersection = e.exports = n;
}), {} ],
59: [ (function(t, e, i) {
cc.Collider.Polygon = cc.Class({
properties: {
threshold: {
default: 1,
serializable: !1,
visible: !1
},
_offset: cc.v2(0, 0),
offset: {
get: function() {
return this._offset;
},
set: function(t) {
this._offset = t;
},
type: cc.Vec2
},
points: {
tooltip: !1,
default: function() {
return [ cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50) ];
},
type: [ cc.Vec2 ]
}
},
resetPointsByContour: !1
});
var n = cc.Class({
name: "cc.PolygonCollider",
extends: cc.Collider,
mixins: [ cc.Collider.Polygon ],
editor: !1
});
cc.PolygonCollider = e.exports = n;
}), {} ],
60: [ (function(t, e, i) {
t("./CCCollisionManager");
t("./CCCollider");
t("./CCBoxCollider");
t("./CCCircleCollider");
t("./CCPolygonCollider");
}), {
"./CCBoxCollider": 53,
"./CCCircleCollider": 54,
"./CCCollider": 55,
"./CCCollisionManager": 56,
"./CCPolygonCollider": 59
} ],
61: [ (function(i, n, r) {
i("./platform/CCClass");
var s = i("./platform/CCObject").Flags, a = i("./platform/js").array, o = s.IsStartCalled, c = s.IsOnEnableCalled, h = (s.IsEditorOnEnableCalled, 
"c.start();c._objFlags|=" + o), l = "c.update(dt)", u = "c.lateUpdate(dt)";
function f(t, e) {
for (var i = e.constructor._executionOrder, n = e._id, r = 0, s = t.length - 1, a = s >>> 1; r <= s; a = r + s >>> 1) {
var o = t[a], c = o.constructor._executionOrder;
if (c > i) s = a - 1; else if (c < i) r = a + 1; else {
var h = o._id;
if (h > n) s = a - 1; else {
if (!(h < n)) return a;
r = a + 1;
}
}
}
return ~r;
}
function _(t, e) {
for (var i = t.array, n = t.i + 1; n < i.length; ) {
var r = i[n];
if (r._enabled && r.node._activeInHierarchy) ++n; else {
t.removeAt(n);
e && (r._objFlags &= ~e);
}
}
}
var d = cc.Class({
__ctor__: function(t) {
var e = a.MutableForwardIterator;
this._zero = new e([]);
this._neg = new e([]);
this._pos = new e([]);
0;
this._invoke = t;
},
statics: {
stableRemoveInactive: _
},
add: null,
remove: null,
invoke: null
});
function p(t, e) {
return t.constructor._executionOrder - e.constructor._executionOrder;
}
var m = cc.Class({
extends: d,
add: function(t) {
var e = t.constructor._executionOrder;
(0 === e ? this._zero : e < 0 ? this._neg : this._pos).array.push(t);
},
remove: function(t) {
var e = t.constructor._executionOrder;
(0 === e ? this._zero : e < 0 ? this._neg : this._pos).fastRemove(t);
},
cancelInactive: function(t) {
_(this._zero, t);
_(this._neg, t);
_(this._pos, t);
},
invoke: function() {
var t = this._neg;
if (t.array.length > 0) {
t.array.sort(p);
this._invoke(t);
t.array.length = 0;
}
this._invoke(this._zero);
this._zero.array.length = 0;
var e = this._pos;
if (e.array.length > 0) {
e.array.sort(p);
this._invoke(e);
e.array.length = 0;
}
}
}), g = cc.Class({
extends: d,
add: function(t) {
var e = t.constructor._executionOrder;
if (0 === e) this._zero.array.push(t); else {
var i = e < 0 ? this._neg.array : this._pos.array, n = f(i, t);
n < 0 && i.splice(~n, 0, t);
}
},
remove: function(t) {
var e = t.constructor._executionOrder;
if (0 === e) this._zero.fastRemove(t); else {
var i = e < 0 ? this._neg : this._pos, n = f(i.array, t);
n >= 0 && i.removeAt(n);
}
},
invoke: function(t) {
this._neg.array.length > 0 && this._invoke(this._neg, t);
this._invoke(this._zero, t);
this._pos.array.length > 0 && this._invoke(this._pos, t);
}
});
function v(i, n) {
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) return n ? function(t, e) {
var n = t.array;
for (t.i = 0; t.i < n.length; ++t.i) {
var r = n[t.i];
i(r, e);
}
} : function(t) {
var e = t.array;
for (t.i = 0; t.i < e.length; ++t.i) {
var n = e[t.i];
i(n);
}
};
var r = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + i + "}";
return n ? Function("it", "dt", r) : Function("it", r);
}
function y() {
this.startInvoker = new m(v(h));
this.updateInvoker = new g(v(l, !0));
this.lateUpdateInvoker = new g(v(u, !0));
this.scheduleInNextFrame = [];
this._updating = !1;
}
var T = cc.Class({
ctor: y,
unscheduleAll: y,
statics: {
LifeCycleInvoker: d,
OneOffInvoker: m,
createInvokeImpl: v,
invokeOnEnable: function(t) {
var e = cc.director._compScheduler, i = t.array;
for (t.i = 0; t.i < i.length; ++t.i) {
var n = i[t.i];
if (n._enabled) {
n.onEnable();
!n.node._activeInHierarchy || e._onEnabled(n);
}
}
}
},
_onEnabled: function(t) {
cc.director.getScheduler().resumeTarget(t);
t._objFlags |= c;
this._updating ? this.scheduleInNextFrame.push(t) : this._scheduleImmediate(t);
},
_onDisabled: function(t) {
cc.director.getScheduler().pauseTarget(t);
t._objFlags &= ~c;
var e = this.scheduleInNextFrame.indexOf(t);
if (e >= 0) a.fastRemoveAt(this.scheduleInNextFrame, e); else {
!t.start || t._objFlags & o || this.startInvoker.remove(t);
t.update && this.updateInvoker.remove(t);
t.lateUpdate && this.lateUpdateInvoker.remove(t);
}
},
enableComp: function(t, e) {
if (!(t._objFlags & c)) {
if (t.onEnable) {
if (e) {
e.add(t);
return;
}
t.onEnable();
if (!t.node._activeInHierarchy) return;
}
this._onEnabled(t);
}
},
disableComp: function(t) {
if (t._objFlags & c) {
t.onDisable && t.onDisable();
this._onDisabled(t);
}
},
_scheduleImmediate: function(t) {
!t.start || t._objFlags & o || this.startInvoker.add(t);
t.update && this.updateInvoker.add(t);
t.lateUpdate && this.lateUpdateInvoker.add(t);
},
_deferredSchedule: function() {
for (var t = this.scheduleInNextFrame, e = 0, i = t.length; e < i; e++) {
var n = t[e];
this._scheduleImmediate(n);
}
t.length = 0;
},
startPhase: function() {
this._updating = !0;
this.scheduleInNextFrame.length > 0 && this._deferredSchedule();
this.startInvoker.invoke();
},
updatePhase: function(t) {
this.updateInvoker.invoke(t);
},
lateUpdatePhase: function(t) {
this.lateUpdateInvoker.invoke(t);
this._updating = !1;
}
});
n.exports = T;
}), {
"./platform/CCClass": 134,
"./platform/CCObject": 140,
"./platform/js": 154,
"./utils/misc": 216
} ],
62: [ (function(t, e, i) {
var n = t("../../animation/animation-animator"), r = t("../../animation/animation-clip"), s = t("../event/event-target"), a = t("../platform/js");
function o(t, e) {
return t === e || t && e && (t.name === e.name || t._uuid === e._uuid);
}
var c = cc.Enum({
PLAY: "play",
STOP: "stop",
PAUSE: "pause",
RESUME: "resume",
LASTFRAME: "lastframe",
FINISHED: "finished"
}), h = cc.Class({
name: "cc.Animation",
extends: t("./CCComponent"),
mixins: [ s ],
editor: !1,
statics: {
EventType: c
},
ctor: function() {
cc.EventTarget.call(this);
this._animator = null;
this._nameToState = a.createMap(!0);
this._didInit = !1;
this._currentClip = null;
},
properties: {
_defaultClip: {
default: null,
type: r
},
defaultClip: {
type: r,
get: function() {
return this._defaultClip;
},
set: function(t) {},
tooltip: !1
},
currentClip: {
get: function() {
return this._currentClip;
},
set: function(t) {
this._currentClip = t;
},
type: r,
visible: !1
},
_clips: {
default: [],
type: [ r ],
tooltip: !1,
visible: !0
},
playOnLoad: {
default: !1,
tooltip: !1
}
},
start: function() {
if (this.playOnLoad && this._defaultClip) {
if (!(this._animator && this._animator.isPlaying)) {
var t = this.getAnimationState(this._defaultClip.name);
this._animator.playState(t);
}
}
},
onEnable: function() {
this._animator && this._animator.resume();
},
onDisable: function() {
this._animator && this._animator.pause();
},
onDestroy: function() {
this.stop();
},
getClips: function() {
return this._clips;
},
play: function(t, e) {
var i = this.playAdditive(t, e);
this._animator.stopStatesExcept(i);
return i;
},
playAdditive: function(t, e) {
this._init();
var i = this.getAnimationState(t || this._defaultClip && this._defaultClip.name);
if (i) {
this.enabled = !0;
var n = this._animator;
if (n.isPlaying && i.isPlaying) if (i.isPaused) n.resumeState(i); else {
n.stopState(i);
n.playState(i, e);
} else n.playState(i, e);
this.enabledInHierarchy || n.pause();
this.currentClip = i.clip;
}
return i;
},
stop: function(t) {
if (this._didInit) if (t) {
var e = this._nameToState[t];
e && this._animator.stopState(e);
} else this._animator.stop();
},
pause: function(t) {
if (this._didInit) if (t) {
var e = this._nameToState[t];
e && this._animator.pauseState(e);
} else this.enabled = !1;
},
resume: function(t) {
if (this._didInit) if (t) {
var e = this._nameToState[t];
e && this._animator.resumeState(e);
} else this.enabled = !0;
},
setCurrentTime: function(t, e) {
this._init();
if (e) {
var i = this._nameToState[e];
i && this._animator.setStateTime(i, t);
} else this._animator.setStateTime(t);
},
getAnimationState: function(t) {
this._init();
var e = this._nameToState[t];
0;
e && !e.curveLoaded && this._animator._reloadClip(e);
return e || null;
},
addClip: function(t, e) {
if (t) {
this._init();
cc.js.array.contains(this._clips, t) || this._clips.push(t);
e = e || t.name;
var i = this._nameToState[e];
if (i) {
if (i.clip === t) return i;
var n = this._clips.indexOf(i.clip);
-1 !== n && this._clips.splice(n, 1);
}
var r = new cc.AnimationState(t, e);
this._nameToState[e] = r;
return r;
}
cc.warnID(3900);
},
removeClip: function(t, e) {
if (t) {
this._init();
var i = void 0;
for (var n in this._nameToState) {
if ((i = this._nameToState[n]).clip === t) break;
}
if (t === this._defaultClip) {
if (!e) {
cc.warnID(3902);
return;
}
this._defaultClip = null;
}
if (i && i.isPlaying) {
if (!e) {
cc.warnID(3903);
return;
}
this.stop(i.name);
}
this._clips = this._clips.filter((function(e) {
return e !== t;
}));
i && delete this._nameToState[i.name];
} else cc.warnID(3901);
},
sample: function(t) {
this._init();
if (t) {
var e = this._nameToState[t];
e && e.sample();
} else this._animator.sample();
},
on: function(t, e, i, n) {
this._init();
var r = this._EventTargetOn(t, e, i, n);
if ("lastframe" === t) for (var s = this._animator._anims.array, a = 0; a < s.length; ++a) {
s[a]._lastframeEventOn = !0;
}
return r;
},
off: function(t, e, i, n) {
this._init();
if ("lastframe" === t) {
var r = this._nameToState;
for (var s in r) {
r[s]._lastframeEventOn = !1;
}
}
this._EventTargetOff(t, e, i, n);
},
_init: function() {
if (!this._didInit) {
this._didInit = !0;
this._animator = new n(this.node, this);
this._createStates();
}
},
_createStates: function() {
this._nameToState = a.createMap(!0);
for (var t = null, e = !1, i = 0; i < this._clips.length; ++i) {
var n = this._clips[i];
if (n) {
t = new cc.AnimationState(n);
0;
this._nameToState[t.name] = t;
o(this._defaultClip, n) && (e = t);
}
}
if (this._defaultClip && !e) {
t = new cc.AnimationState(this._defaultClip);
0;
this._nameToState[t.name] = t;
}
}
});
h.prototype._EventTargetOn = s.prototype.on;
h.prototype._EventTargetOff = s.prototype.off;
cc.Animation = e.exports = h;
}), {
"../../animation/animation-animator": 9,
"../../animation/animation-clip": 10,
"../event/event-target": 102,
"../platform/js": 154,
"./CCComponent": 67
} ],
63: [ (function(i, n, r) {
var s = i("../utils/misc"), a = i("./CCComponent"), o = i("../assets/CCAudioClip"), c = cc.Class({
name: "cc.AudioSource",
extends: a,
editor: !1,
ctor: function() {
this.audio = new cc.Audio();
},
properties: {
_clip: {
default: null,
type: o
},
_volume: 1,
_mute: !1,
_loop: !1,
_pausedFlag: {
default: !1,
serializable: !1
},
isPlaying: {
get: function() {
return this.audio.getState() === cc.Audio.State.PLAYING;
},
visible: !1
},
clip: {
get: function() {
return this._clip;
},
set: function(i) {
var n = this;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
var r = (function() {
cc.warnID(8401, "cc.AudioSource", "cc.AudioClip", "AudioClip", "cc.AudioClip", "audio");
var t = n;
o._loadByUrl(i, (function(e, i) {
i && (t.clip = i);
}));
return {
v: void 0
};
})();
if ("object" === ("object" === (e = typeof r) ? t(r) : e)) return r.v;
}
if (i !== this._clip) {
this._clip = i;
this.audio.stop();
this.preload && (this.audio.src = this._clip);
}
},
type: o,
tooltip: !1,
animatable: !1
},
volume: {
get: function() {
return this._volume;
},
set: function(t) {
t = s.clamp01(t);
this._volume = t;
this._mute || this.audio.setVolume(t);
return t;
},
tooltip: !1
},
mute: {
get: function() {
return this._mute;
},
set: function(t) {
this._mute = t;
this.audio.setVolume(t ? 0 : this._volume);
return t;
},
animatable: !1,
tooltip: !1
},
loop: {
get: function() {
return this._loop;
},
set: function(t) {
this._loop = t;
this.audio.setLoop(t);
return t;
},
animatable: !1,
tooltip: !1
},
playOnLoad: {
default: !1,
tooltip: !1,
animatable: !1
},
preload: {
default: !1,
animatable: !1
}
},
_ensureDataLoaded: function() {
this.audio.src !== this._clip && (this.audio.src = this._clip);
},
_pausedCallback: function() {
if (this.audio.getState() === cc.Audio.State.PLAYING) {
this.audio.pause();
this._pausedFlag = !0;
}
},
_restoreCallback: function() {
this._pausedFlag && this.audio.resume();
this._pausedFlag = !1;
},
onLoad: function() {
this.audio.setVolume(this._mute ? 0 : this._volume);
this.audio.setLoop(this._loop);
},
onEnable: function() {
this.preload && (this.audio.src = this._clip);
this.playOnLoad && this.play();
cc.game.on(cc.game.EVENT_HIDE, this._pausedCallback, this);
cc.game.on(cc.game.EVENT_SHOW, this._restoreCallback, this);
},
onDisable: function() {
this.stop();
cc.game.off(cc.game.EVENT_HIDE, this._pausedCallback, this);
cc.game.off(cc.game.EVENT_SHOW, this._restoreCallback, this);
},
onDestroy: function() {
this.stop();
this.audio.destroy();
cc.audioEngine.uncache(this._clip);
},
play: function() {
if (this._clip) {
var t = this.audio;
this._clip.loaded && t.stop();
this._ensureDataLoaded();
t.setCurrentTime(0);
t.play();
}
},
stop: function() {
this.audio.stop();
},
pause: function() {
this.audio.pause();
},
resume: function() {
this._ensureDataLoaded();
this.audio.resume();
},
rewind: function() {
this.audio.setCurrentTime(0);
},
getCurrentTime: function() {
return this.audio.getCurrentTime();
},
setCurrentTime: function(t) {
this.audio.setCurrentTime(t);
return t;
},
getDuration: function() {
return this.audio.getDuration();
}
});
cc.AudioSource = n.exports = c;
}), {
"../assets/CCAudioClip": 34,
"../utils/misc": 216,
"./CCComponent": 67
} ],
64: [ (function(t, e, i) {
var n = [ "touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup", "mouseenter", "mouseleave", "mousewheel" ];
function r(t) {
t.stopPropagation();
}
var s = cc.Class({
name: "cc.BlockInputEvents",
extends: t("./CCComponent"),
editor: {
menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
inspector: "packages://inspector/inspectors/comps/block-input-events.js",
help: "i18n:COMPONENT.help_url.block_input_events"
},
onEnable: function() {
for (var t = 0; t < n.length; t++) this.node.on(n[t], r, this);
},
onDisable: function() {
for (var t = 0; t < n.length; t++) this.node.off(n[t], r, this);
}
});
cc.BlockInputEvents = e.exports = s;
}), {
"./CCComponent": 67
} ],
65: [ (function(t, e, i) {
var n = t("./CCComponent"), r = cc.Enum({
NONE: 0,
COLOR: 1,
SPRITE: 2,
SCALE: 3
}), s = cc.Enum({
NORMAL: 0,
HOVER: 1,
PRESSED: 2,
DISABLED: 3
}), a = cc.Class({
name: "cc.Button",
extends: n,
ctor: function() {
this._pressed = !1;
this._hovered = !1;
this._fromColor = null;
this._toColor = null;
this._time = 0;
this._transitionFinished = !0;
this._fromScale = cc.Vec2.ZERO;
this._toScale = cc.Vec2.ZERO;
this._originalScale = null;
this._sprite = null;
},
editor: !1,
properties: {
interactable: {
default: !0,
tooltip: !1,
notify: function() {
this._updateState();
this.interactable || this._resetState();
},
animatable: !1
},
_resizeToTarget: {
animatable: !1,
set: function(t) {
t && this._resizeNodeToTargetNode();
}
},
enableAutoGrayEffect: {
default: !1,
tooltip: !1,
notify: function() {
this._updateDisabledState();
}
},
transition: {
default: r.NONE,
tooltip: !1,
type: r,
animatable: !1,
notify: function(t) {
this._updateTransition(t);
},
formerlySerializedAs: "transition"
},
normalColor: {
default: cc.color(214, 214, 214),
displayName: "Normal",
tooltip: !1,
notify: function() {
this.transition === r.Color && this._getButtonState() === s.NORMAL && (this._getTarget().opacity = this.normalColor.a);
this._updateState();
}
},
pressedColor: {
default: cc.color(211, 211, 211),
displayName: "Pressed",
tooltip: !1,
notify: function() {
this.transition === r.Color && this._getButtonState() === s.PRESSED && (this._getTarget().opacity = this.pressedColor.a);
this._updateState();
},
formerlySerializedAs: "pressedColor"
},
hoverColor: {
default: cc.Color.WHITE,
displayName: "Hover",
tooltip: !1,
notify: function() {
this.transition === r.Color && this._getButtonState() === s.HOVER && (this._getTarget().opacity = this.hoverColor.a);
this._updateState();
},
formerlySerializedAs: "hoverColor"
},
disabledColor: {
default: cc.color(124, 124, 124),
displayName: "Disabled",
tooltip: !1,
notify: function() {
this.transition === r.Color && this._getButtonState() === s.DISABLED && (this._getTarget().opacity = this.disabledColor.a);
this._updateState();
}
},
duration: {
default: .1,
range: [ 0, 10 ],
tooltip: !1
},
zoomScale: {
default: 1.2,
tooltip: !1
},
normalSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Normal",
tooltip: !1,
notify: function() {
this._updateState();
}
},
pressedSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Pressed",
tooltip: !1,
formerlySerializedAs: "pressedSprite",
notify: function() {
this._updateState();
}
},
hoverSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Hover",
tooltip: !1,
formerlySerializedAs: "hoverSprite",
notify: function() {
this._updateState();
}
},
disabledSprite: {
default: null,
type: cc.SpriteFrame,
displayName: "Disabled",
tooltip: !1,
notify: function() {
this._updateState();
}
},
target: {
default: null,
type: cc.Node,
tooltip: !1,
notify: function(t) {
this._applyTarget();
t && this.target !== t && this._unregisterTargetEvent(t);
}
},
clickEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
}
},
statics: {
Transition: r
},
__preload: function() {
this._applyTarget();
this._updateState();
},
_resetState: function() {
this._pressed = !1;
this._hovered = !1;
var t = this._getTarget(), e = this.transition, i = this._originalScale;
e === r.COLOR && this.interactable ? this._setTargetColor(this.normalColor) : e === r.SCALE && i && t.setScale(i.x, i.y);
this._transitionFinished = !0;
},
onEnable: function() {
this.normalSprite && this.normalSprite.ensureLoadTexture();
this.hoverSprite && this.hoverSprite.ensureLoadTexture();
this.pressedSprite && this.pressedSprite.ensureLoadTexture();
this.disabledSprite && this.disabledSprite.ensureLoadTexture();
this._registerNodeEvent();
},
onDisable: function() {
this._resetState();
this._unregisterNodeEvent();
},
_getTarget: function() {
return this.target ? this.target : this.node;
},
_onTargetSpriteFrameChanged: function(t) {
this.transition === r.SPRITE && this._setCurrentStateSprite(t.spriteFrame);
},
_onTargetColorChanged: function(t) {
this.transition === r.COLOR && this._setCurrentStateColor(t);
},
_onTargetScaleChanged: function() {
var t = this._getTarget();
if (this._originalScale && (this.transition !== r.SCALE || this._transitionFinished)) {
this._originalScale.x = t.scaleX;
this._originalScale.y = t.scaleY;
}
},
_setTargetColor: function(t) {
var e = this._getTarget();
e.color = t;
e.opacity = t.a;
},
_getStateColor: function(t) {
switch (t) {
case s.NORMAL:
return this.normalColor;

case s.HOVER:
return this.hoverColor;

case s.PRESSED:
return this.pressedColor;

case s.DISABLED:
return this.disabledColor;
}
},
_getStateSprite: function(t) {
switch (t) {
case s.NORMAL:
return this.normalSprite;

case s.HOVER:
return this.hoverSprite;

case s.PRESSED:
return this.pressedSprite;

case s.DISABLED:
return this.disabledSprite;
}
},
_setCurrentStateColor: function(t) {
switch (this._getButtonState()) {
case s.NORMAL:
this.normalColor = t;
break;

case s.HOVER:
this.hoverColor = t;
break;

case s.PRESSED:
this.pressedColor = t;
break;

case s.DISABLED:
this.disabledColor = t;
}
},
_setCurrentStateSprite: function(t) {
switch (this._getButtonState()) {
case s.NORMAL:
this.normalSprite = t;
break;

case s.HOVER:
this.hoverSprite = t;
break;

case s.PRESSED:
this.pressedSprite = t;
break;

case s.DISABLED:
this.disabledSprite = t;
}
},
update: function(t) {
var e = this._getTarget();
if (!this._transitionFinished && (this.transition === r.COLOR || this.transition === r.SCALE)) {
this.time += t;
var i = 1;
this.duration > 0 && (i = this.time / this.duration);
i >= 1 && (i = 1);
if (this.transition === r.COLOR) {
var n = this._fromColor.lerp(this._toColor, i);
this._setTargetColor(n);
} else this.transition === r.SCALE && this._originalScale && (e.scale = this._fromScale.lerp(this._toScale, i));
1 === i && (this._transitionFinished = !0);
}
},
_registerNodeEvent: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
},
_unregisterNodeEvent: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
},
_registerTargetEvent: function(t) {
0;
t.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
},
_unregisterTargetEvent: function(t) {
0;
t.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
},
_getTargetSprite: function(t) {
var e = null;
t && (e = t.getComponent(cc.Sprite));
return e;
},
_applyTarget: function() {
var t = this._getTarget();
this._sprite = this._getTargetSprite(t);
this._originalScale || (this._originalScale = cc.Vec2.ZERO);
this._originalScale.x = t.scaleX;
this._originalScale.y = t.scaleY;
this._registerTargetEvent(t);
},
_onTouchBegan: function(t) {
if (this.interactable && this.enabledInHierarchy) {
this._pressed = !0;
this._updateState();
t.stopPropagation();
}
},
_onTouchMove: function(t) {
if (this.interactable && this.enabledInHierarchy && this._pressed) {
var e = t.touch, i = this.node._hitTest(e.getLocation()), n = this._getTarget(), a = this._originalScale;
if (this.transition === r.SCALE && a) if (i) {
this._fromScale.x = a.x;
this._fromScale.y = a.y;
this._toScale.x = a.x * this.zoomScale;
this._toScale.y = a.y * this.zoomScale;
this._transitionFinished = !1;
} else {
this.time = 0;
this._transitionFinished = !0;
n.setScale(a.x, a.y);
} else {
var o = void 0;
o = i ? s.PRESSED : s.NORMAL;
this._applyTransition(o);
}
t.stopPropagation();
}
},
_onTouchEnded: function(t) {
if (this.interactable && this.enabledInHierarchy) {
if (this._pressed) {
cc.Component.EventHandler.emitEvents(this.clickEvents, t);
this.node.emit("click", this);
}
this._pressed = !1;
this._updateState();
t.stopPropagation();
}
},
_onTouchCancel: function() {
if (this.interactable && this.enabledInHierarchy) {
this._pressed = !1;
this._updateState();
}
},
_onMouseMoveIn: function() {
if (!this._pressed && this.interactable && this.enabledInHierarchy && (this.transition !== r.SPRITE || this.hoverSprite) && !this._hovered) {
this._hovered = !0;
this._updateState();
}
},
_onMouseMoveOut: function() {
if (this._hovered) {
this._hovered = !1;
this._updateState();
}
},
_updateState: function() {
var t = this._getButtonState();
this._applyTransition(t);
this._updateDisabledState();
},
_getButtonState: function() {
return this.interactable ? this._pressed ? s.PRESSED : this._hovered ? s.HOVER : s.NORMAL : s.DISABLED;
},
_updateColorTransitionImmediately: function(t) {
var e = this._getStateColor(t);
this._setTargetColor(e);
},
_updateColorTransition: function(t) {
if (t === s.DISABLED) this._updateColorTransitionImmediately(t); else {
var e = this._getTarget(), i = this._getStateColor(t);
this._fromColor = e.color.clone();
this._toColor = i;
this.time = 0;
this._transitionFinished = !1;
}
},
_updateSpriteTransition: function(t) {
var e = this._getStateSprite(t);
this._sprite && e && (this._sprite.spriteFrame = e);
},
_updateScaleTransition: function(t) {
t === s.PRESSED ? this._zoomUp() : this._zoomBack();
},
_zoomUp: function() {
if (this._originalScale) {
this._fromScale.x = this._originalScale.x;
this._fromScale.y = this._originalScale.y;
this._toScale.x = this._originalScale.x * this.zoomScale;
this._toScale.y = this._originalScale.y * this.zoomScale;
this.time = 0;
this._transitionFinished = !1;
}
},
_zoomBack: function() {
if (this._originalScale) {
var t = this._getTarget();
this._fromScale.x = t.scaleX;
this._fromScale.y = t.scaleY;
this._toScale.x = this._originalScale.x;
this._toScale.y = this._originalScale.y;
this.time = 0;
this._transitionFinished = !1;
}
},
_updateTransition: function(t) {
t === r.COLOR ? this._updateColorTransitionImmediately(s.NORMAL) : t === r.SPRITE && this._updateSpriteTransition(s.NORMAL);
this._updateState();
},
_applyTransition: function(t) {
var e = this.transition;
e === r.COLOR ? this._updateColorTransition(t) : e === r.SPRITE ? this._updateSpriteTransition(t) : e === r.SCALE && this._updateScaleTransition(t);
},
_resizeNodeToTargetNode: !1,
_updateDisabledState: function() {
if (this._sprite) {
if (this.enableAutoGrayEffect && !(this.transition === r.SPRITE && this.disabledSprite || this.interactable)) {
this._sprite.setState(cc.Sprite.State.GRAY);
return;
}
this._sprite.setState(cc.Sprite.State.NORMAL);
}
}
});
cc.Button = e.exports = a;
}), {
"./CCComponent": 67
} ],
66: [ (function(t, e, i) {
var n = t("../camera/CCCamera"), r = t("./CCComponent"), s = cc.Class({
name: "cc.Canvas",
extends: r,
editor: !1,
resetInEditor: !1,
statics: {
instance: null
},
properties: {
_designResolution: cc.size(960, 640),
designResolution: {
get: function() {
return cc.size(this._designResolution);
},
set: function(t) {
this._designResolution.width = t.width;
this._designResolution.height = t.height;
this.applySettings();
this.alignWithScreen();
},
tooltip: !1
},
_fitWidth: !1,
_fitHeight: !0,
fitHeight: {
get: function() {
return this._fitHeight;
},
set: function(t) {
if (this._fitHeight !== t) {
this._fitHeight = t;
this.applySettings();
this.alignWithScreen();
}
},
tooltip: !1
},
fitWidth: {
get: function() {
return this._fitWidth;
},
set: function(t) {
if (this._fitWidth !== t) {
this._fitWidth = t;
this.applySettings();
this.alignWithScreen();
}
},
tooltip: !1
}
},
ctor: function() {
this._thisOnResized = this.alignWithScreen.bind(this);
},
__preload: function() {
if (s.instance) return cc.errorID(6700, this.node.name, s.instance.node.name);
s.instance = this;
cc.sys.isMobile ? window.addEventListener("resize", this._thisOnResized) : cc.view.on("canvas-resize", this._thisOnResized);
this.applySettings();
this.alignWithScreen();
var t = cc.find("Main Camera", this.node);
if (!t) {
(t = new cc.Node("Main Camera")).parent = this.node;
t.setSiblingIndex(0);
}
var e = t.getComponent(n);
if (!e) {
e = t.addComponent(n);
var i = n.ClearFlags;
e.clearFlags = i.COLOR | i.DEPTH | i.STENCIL;
e.depth = -1;
}
n.main = e;
},
onDestroy: function() {
cc.sys.isMobile ? window.removeEventListener("resize", this._thisOnResized) : cc.view.off("canvas-resize", this._thisOnResized);
s.instance === this && (s.instance = null);
},
alignWithScreen: function() {
var t, e, i = e = cc.visibleRect;
t = cc.view.getDesignResolutionSize();
var n = 0, r = 0;
if (!this.fitHeight && !this.fitWidth) {
n = .5 * (t.width - i.width);
r = .5 * (t.height - i.height);
}
this.node.setPosition(.5 * i.width + n, .5 * i.height + r);
this.node.width = e.width;
this.node.height = e.height;
},
applySettings: function() {
var t, e = cc.ResolutionPolicy;
t = this.fitHeight && this.fitWidth ? e.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? e.FIXED_WIDTH : e.FIXED_HEIGHT : e.NO_BORDER;
var i = this._designResolution;
cc.view.setDesignResolutionSize(i.width, i.height, t);
}
});
cc.Canvas = e.exports = s;
}), {
"../camera/CCCamera": 52,
"./CCComponent": 67
} ],
67: [ (function(i, n, r) {
var s = i("../platform/CCObject"), a = i("../platform/js"), o = new (i("../platform/id-generater"))("Comp"), c = (s.Flags.IsOnEnableCalled, 
s.Flags.IsOnLoadCalled), h = cc.Class({
name: "cc.Component",
extends: s,
ctor: function() {
this._id = o.getNewId();
this.__eventTargets = [];
},
properties: {
node: {
default: null,
visible: !1
},
name: {
get: function() {
if (this._name) return this._name;
var t = cc.js.getClassName(this), e = t.lastIndexOf(".");
e >= 0 && (t = t.slice(e + 1));
return this.node.name + "<" + t + ">";
},
set: function(t) {
this._name = t;
},
visible: !1
},
uuid: {
get: function() {
return this._id;
},
visible: !1
},
__scriptAsset: !1,
_enabled: !0,
enabled: {
get: function() {
return this._enabled;
},
set: function(t) {
if (this._enabled !== t) {
this._enabled = t;
if (this.node._activeInHierarchy) {
var e = cc.director._compScheduler;
t ? e.enableComp(this) : e.disableComp(this);
}
}
},
visible: !1,
animatable: !0
},
enabledInHierarchy: {
get: function() {
return this._enabled && this.node._activeInHierarchy;
},
visible: !1
},
_isOnLoadCalled: {
get: function() {
return this._objFlags & c;
}
}
},
update: null,
lateUpdate: null,
__preload: null,
onLoad: null,
start: null,
onEnable: null,
onDisable: null,
onDestroy: null,
onFocusInEditor: null,
onLostFocusInEditor: null,
resetInEditor: null,
addComponent: function(t) {
return this.node.addComponent(t);
},
getComponent: function(t) {
return this.node.getComponent(t);
},
getComponents: function(t) {
return this.node.getComponents(t);
},
getComponentInChildren: function(t) {
return this.node.getComponentInChildren(t);
},
getComponentsInChildren: function(t) {
return this.node.getComponentsInChildren(t);
},
_getLocalBounds: null,
onRestore: null,
destroy: function() {
this._super() && this._enabled && this.node._activeInHierarchy && cc.director._compScheduler.disableComp(this);
},
_onPreDestroy: function() {
this.unscheduleAllCallbacks();
for (var t = this.__eventTargets, e = 0, i = t.length; e < i; ++e) {
var n = t[e];
n && n.targetOff(this);
}
t.length = 0;
0;
cc.director._nodeActivator.destroyComp(this);
this.node._removeComponent(this);
},
_instantiate: function(t) {
t || (t = cc.instantiate._clone(this, this));
t.node = null;
return t;
},
schedule: function(t, e, i, n) {
cc.assertID(t, 1619);
cc.assertID(e >= 0, 1620);
e = e || 0;
i = isNaN(i) ? cc.macro.REPEAT_FOREVER : i;
n = n || 0;
var r = cc.director.getScheduler(), s = r.isTargetPaused(this);
r.schedule(t, this, e, i, n, s);
},
scheduleOnce: function(t, e) {
this.schedule(t, 0, 0, e);
},
unschedule: function(t) {
t && cc.director.getScheduler().unschedule(t, this);
},
unscheduleAllCallbacks: function() {
cc.director.getScheduler().unscheduleAllForTarget(this);
}
});
h._requireComponent = null;
h._executionOrder = 0;
0;
a.value(h, "_registerEditorProps", (function(i, n) {
var r = n.requireComponent;
r && (i._requireComponent = r);
var s = n.executionOrder;
s && "number" === ("object" === (e = typeof s) ? t(s) : e) && (i._executionOrder = s);
}));
h.prototype.__scriptUuid = "";
cc.Component = n.exports = h;
}), {
"../platform/CCObject": 140,
"../platform/id-generater": 150,
"../platform/js": 154
} ],
68: [ (function(i, n, r) {
cc.Component.EventHandler = cc.Class({
name: "cc.ClickEvent",
properties: {
target: {
default: null,
type: cc.Node
},
component: "",
_componentId: "",
_componentName: {
get: function() {
this._genCompIdIfNeeded();
return this._compId2Name(this._componentId);
},
set: function(t) {
this._componentId = this._compName2Id(t);
}
},
handler: {
default: ""
},
customEventData: {
default: ""
}
},
statics: {
emitEvents: function(t) {
"use strict";
var e = void 0;
if (arguments.length > 0) for (var i = 0, n = (e = new Array(arguments.length - 1)).length; i < n; i++) e[i] = arguments[i + 1];
for (var r = 0, s = t.length; r < s; r++) {
var a = t[r];
a instanceof cc.Component.EventHandler && a.emit(e);
}
}
},
emit: function(i) {
var n = this.target;
if (cc.isValid(n)) {
this._genCompIdIfNeeded();
var r = cc.js._getClassById(this._componentId), s = n.getComponent(r);
if (cc.isValid(s)) {
var a = s[this.handler];
if ("function" === ("object" === (e = typeof a) ? t(a) : e)) {
null != this.customEventData && "" !== this.customEventData && (i = i.slice()).push(this.customEventData);
a.apply(s, i);
}
}
}
},
_compName2Id: function(t) {
var e = cc.js.getClassByName(t);
return cc.js._getClassId(e);
},
_compId2Name: function(t) {
var e = cc.js._getClassById(t);
return cc.js.getClassName(e);
},
_genCompIdIfNeeded: function() {
if (!this._componentId) {
this._componentName = this.component;
this.component = "";
}
}
});
}), {} ],
69: [ (function(i, n, r) {
var s = i("../platform/CCMacro"), a = i("./CCRenderComponent"), o = i("../renderer/render-engine"), c = i("../renderer/render-flow"), h = o.SpriteMaterial, l = i("../renderer/utils/dynamic-atlas/manager"), u = i("../renderer/utils/label/label-frame"), f = (c.FLAG_COLOR, 
c.FLAG_OPACITY, s.TextAlignment), _ = s.VerticalTextAlignment, d = cc.Enum({
NONE: 0,
CLAMP: 1,
SHRINK: 2,
RESIZE_HEIGHT: 3
}), p = cc.Enum({
NONE: 0,
BITMAP: 1,
CHAR: 2
}), m = cc.Class({
name: "cc.Label",
extends: a,
ctor: function() {
0;
this._actualFontSize = 0;
this._assemblerData = null;
this._frame = null;
this._ttfTexture = null;
this._letterTexture = null;
},
editor: !1,
properties: {
_useOriginalSize: !0,
_string: {
default: "",
formerlySerializedAs: "_N$string"
},
string: {
get: function() {
return this._string;
},
set: function(t) {
var e = this._string;
this._string = t.toString();
this.string !== e && this._updateRenderData();
this._checkStringEmpty();
},
multiline: !0,
tooltip: !1
},
horizontalAlign: {
default: f.LEFT,
type: f,
tooltip: !1,
notify: function(t) {
this.horizontalAlign !== t && this._updateRenderData();
},
animatable: !1
},
verticalAlign: {
default: _.TOP,
type: _,
tooltip: !1,
notify: function(t) {
this.verticalAlign !== t && this._updateRenderData();
},
animatable: !1
},
actualFontSize: {
displayName: "Actual Font Size",
animatable: !1,
readonly: !0,
get: function() {
return this._actualFontSize;
},
tooltip: !1
},
_fontSize: 40,
fontSize: {
get: function() {
return this._fontSize;
},
set: function(t) {
if (this._fontSize !== t) {
this._fontSize = t;
this._updateRenderData();
}
},
range: [ 0, 512 ],
tooltip: !1
},
fontFamily: {
default: "Arial",
tooltip: !1,
notify: function(t) {
this.fontFamily !== t && this._updateRenderData();
},
animatable: !1
},
_lineHeight: 40,
lineHeight: {
get: function() {
return this._lineHeight;
},
set: function(t) {
if (this._lineHeight !== t) {
this._lineHeight = t;
this._updateRenderData();
}
},
tooltip: !1
},
overflow: {
default: d.NONE,
type: d,
tooltip: !1,
notify: function(t) {
this.overflow !== t && this._updateRenderData();
},
animatable: !1
},
_enableWrapText: !0,
enableWrapText: {
get: function() {
return this._enableWrapText;
},
set: function(t) {
if (this._enableWrapText !== t) {
this._enableWrapText = t;
this._updateRenderData();
}
},
animatable: !1,
tooltip: !1
},
_N$file: null,
font: {
get: function() {
return this._N$file;
},
set: function(i) {
if (this.font !== i) {
i || (this._isSystemFontUsed = !0);
0;
this._N$file = i;
i && this._isSystemFontUsed && (this._isSystemFontUsed = !1);
"string" === ("object" === (e = typeof i) ? t(i) : e) && cc.warnID(4e3);
if (this._renderData) {
this.destroyRenderData(this._renderData);
this._renderData = null;
}
this._fontAtlas = null;
this._updateAssembler();
this._applyFontTexture(!0);
this._updateRenderData();
}
},
type: cc.Font,
tooltip: !1,
animatable: !1
},
_isSystemFontUsed: !0,
useSystemFont: {
get: function() {
return this._isSystemFontUsed;
},
set: function(t) {
if (this._isSystemFontUsed !== t) {
this.destroyRenderData(this._renderData);
this._renderData = null;
0;
this._isSystemFontUsed = !!t;
if (t) {
this.font = null;
this._updateAssembler();
this._updateRenderData();
this._checkStringEmpty();
} else this._userDefinedFont || this.disableRender();
}
},
animatable: !1,
tooltip: !1
},
_bmFontOriginalSize: {
displayName: "BMFont Original Size",
get: function() {
return this._N$file instanceof cc.BitmapFont ? this._N$file.fontSize : -1;
},
visible: !0,
animatable: !1
},
_spacingX: 0,
spacingX: {
get: function() {
return this._spacingX;
},
set: function(t) {
this._spacingX = t;
this._updateRenderData();
},
tooltip: !1
},
_batchAsBitmap: !1,
cacheMode: {
default: p.NONE,
type: p,
tooltip: !1,
notify: function(t) {
if (this.cacheMode !== t) {
t !== p.BITMAP || this.font instanceof cc.BitmapFont || this._frame._resetDynamicAtlasFrame();
t === p.CHAR && (this._ttfTexture = null);
this._updateRenderData(!0);
}
},
animatable: !1
},
_isBold: {
default: !1,
serializable: !1
},
_isItalic: {
default: !1,
serializable: !1
},
_isUnderline: {
default: !1,
serializable: !1
}
},
statics: {
HorizontalAlign: f,
VerticalAlign: _,
Overflow: d,
CacheMode: p
},
onLoad: function() {
if (this._batchAsBitmap && this.cacheMode === p.NONE) {
this.cacheMode = p.BITMAP;
this._batchAsBitmap = !1;
}
},
onEnable: function() {
this._super();
this.font || this._isSystemFontUsed || (this.useSystemFont = !0);
this.useSystemFont && !this.fontFamily && (this.fontFamily = "Arial");
this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateRenderData, this);
this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateRenderData, this);
this._checkStringEmpty();
this._updateRenderData(!0);
},
onDisable: function() {
this._super();
this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateRenderData, this);
this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateRenderData, this);
},
onDestroy: function() {
this._assembler && this._assembler._resetAssemblerData && this._assembler._resetAssemblerData(this._assemblerData);
this._assemblerData = null;
this._letterTexture = null;
if (this._ttfTexture) {
this._ttfTexture.destroy();
this._ttfTexture = null;
}
this._super();
},
_canRender: function() {
var t = this._super(), e = this.font;
if (e instanceof cc.BitmapFont) {
var i = e.spriteFrame;
i && i.textureLoaded() || (t = !1);
}
return t;
},
_checkStringEmpty: function() {
this.markForRender(!!this.string);
},
_updateAssembler: function() {
var t = m._assembler.getAssembler(this);
if (this._assembler !== t) {
this._assembler = t;
this._renderData = null;
this._frame = null;
}
this._renderData || (this._renderData = this._assembler.createData(this));
},
_applyFontTexture: function(t) {
var e = this, i = this.font;
if (i instanceof cc.BitmapFont) (function() {
var n = i.spriteFrame;
e._frame = n;
var r = e, s = function() {
r._frame._texture = n._texture;
r._activateMaterial(t);
t && r._assembler && r._assembler.updateRenderData(r);
};
if (n && n.textureLoaded()) s(); else {
e.disableRender();
if (n) {
n.once("load", s, e);
n.ensureLoadTexture();
}
}
})(); else {
this._frame || (this._frame = new u());
if (this.cacheMode === p.CHAR && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
this._letterTexture = this._assembler._getAssemblerData();
this._frame._refreshTexture(this._letterTexture);
} else if (!this._ttfTexture) {
this._ttfTexture = new cc.Texture2D();
this._assemblerData = this._assembler._getAssemblerData();
this._ttfTexture.initWithElement(this._assemblerData.canvas);
}
if (this.cacheMode !== p.CHAR) {
this._frame._resetDynamicAtlasFrame();
this._frame._refreshTexture(this._ttfTexture);
}
this._activateMaterial(t);
t && this._assembler && this._assembler.updateRenderData(this);
}
},
_updateColor: function() {
if (this.font instanceof cc.BitmapFont) this._super(); else {
this._updateRenderData();
this.node._renderFlag &= ~c.FLAG_COLOR;
}
},
_activateMaterial: function(t) {
var e = this._material;
if (!e || t) {
if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) this._frame._texture.url = this.uuid + "_texture"; else {
e || (e = new h());
e.texture = this._frame._texture;
e.useColor = !1;
this._updateMaterial(e);
}
this.markForUpdateRenderData(!0);
this.markForRender(!0);
}
},
_updateRenderData: function(t) {
var e = this._renderData;
if (e) {
e.vertDirty = !0;
e.uvDirty = !0;
this.markForUpdateRenderData(!0);
}
if (t) {
this._updateAssembler();
this._applyFontTexture(t);
}
},
_calDynamicAtlas: function() {
if (l) {
if (!this._frame._original) {
var t = l.insertSpriteFrame(this._frame);
t && this._frame._setDynamicAtlasFrame(t);
}
this._material._texture !== this._frame._texture && this._activateMaterial(!0);
}
},
_enableBold: function(t) {
this._isBold = !!t;
},
_enableItalics: function(t) {
this._isItalic = !!t;
},
_enableUnderline: function(t) {
this._isUnderline = !!t;
}
});
cc.Label = n.exports = m;
}), {
"../platform/CCMacro": 139,
"../renderer/render-engine": 176,
"../renderer/render-flow": 177,
"../renderer/utils/dynamic-atlas/manager": 179,
"../renderer/utils/label/label-frame": 181,
"./CCRenderComponent": 77
} ],
70: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.LabelOutline",
extends: t("./CCComponent"),
editor: !1,
properties: {
_color: cc.color(255, 255, 255, 255),
_width: 1,
color: {
get: function() {
return this._color;
},
set: function(t) {
this._color = cc.color(t);
this._updateRenderData();
}
},
width: {
get: function() {
return this._width;
},
set: function(t) {
this._width = t;
this._updateRenderData();
}
}
},
onEnable: function() {
this._updateRenderData();
},
onDisable: function() {
this._updateRenderData();
},
_updateRenderData: function() {
var t = this.node.getComponent(cc.Label);
t && t._updateRenderData();
}
});
cc.LabelOutline = e.exports = n;
}), {
"./CCComponent": 67
} ],
71: [ (function(t, e, i) {
var n = t("../CCNode").EventType, r = cc.Enum({
NONE: 0,
HORIZONTAL: 1,
VERTICAL: 2,
GRID: 3
}), s = cc.Enum({
NONE: 0,
CONTAINER: 1,
CHILDREN: 2
}), a = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1
}), o = cc.Enum({
BOTTOM_TO_TOP: 0,
TOP_TO_BOTTOM: 1
}), c = cc.Enum({
LEFT_TO_RIGHT: 0,
RIGHT_TO_LEFT: 1
}), h = cc.Class({
name: "cc.Layout",
extends: t("./CCComponent"),
editor: !1,
properties: {
_layoutSize: cc.size(300, 200),
_layoutDirty: {
default: !0,
serializable: !1
},
_resize: s.NONE,
_N$layoutType: r.NONE,
type: {
type: r,
get: function() {
return this._N$layoutType;
},
set: function(t) {
this._N$layoutType = t;
this._doLayoutDirty();
},
tooltip: !1,
animatable: !1
},
resizeMode: {
type: s,
tooltip: !1,
animatable: !1,
get: function() {
return this._resize;
},
set: function(t) {
if (this.type !== r.NONE || t !== s.CHILDREN) {
this._resize = t;
this._doLayoutDirty();
}
}
},
cellSize: {
default: cc.size(40, 40),
tooltip: !1,
type: cc.Size,
notify: function() {
this._doLayoutDirty();
}
},
startAxis: {
default: a.HORIZONTAL,
tooltip: !1,
type: a,
notify: function() {
this._doLayoutDirty();
},
animatable: !1
},
_N$padding: {
default: 0
},
paddingLeft: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
paddingRight: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
paddingTop: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
paddingBottom: {
default: 0,
tooltip: !1,
notify: function() {
this._doLayoutDirty();
}
},
spacingX: {
default: 0,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1
},
spacingY: {
default: 0,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1
},
verticalDirection: {
default: o.TOP_TO_BOTTOM,
type: o,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1,
animatable: !1
},
horizontalDirection: {
default: c.LEFT_TO_RIGHT,
type: c,
notify: function() {
this._doLayoutDirty();
},
tooltip: !1,
animatable: !1
},
affectedByScale: {
default: !1,
notify: function() {
this._doLayoutDirty();
},
animatable: !1,
tooltip: !1
}
},
statics: {
Type: r,
VerticalDirection: o,
HorizontalDirection: c,
ResizeMode: s,
AxisDirection: a
},
_migratePaddingData: function() {
this.paddingLeft = this._N$padding;
this.paddingRight = this._N$padding;
this.paddingTop = this._N$padding;
this.paddingBottom = this._N$padding;
this._N$padding = 0;
},
onEnable: function() {
this._addEventListeners();
this.node.getContentSize().equals(cc.size(0, 0)) && this.node.setContentSize(this._layoutSize);
0 !== this._N$padding && this._migratePaddingData();
this._doLayoutDirty();
},
onDisable: function() {
this._removeEventListeners();
},
_doLayoutDirty: function() {
this._layoutDirty = !0;
},
_doScaleDirty: function() {
this._layoutDirty = this._layoutDirty || this.affectedByScale;
},
_addEventListeners: function() {
cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
this.node.on(n.SIZE_CHANGED, this._resized, this);
this.node.on(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
this.node.on(n.CHILD_ADDED, this._childAdded, this);
this.node.on(n.CHILD_REMOVED, this._childRemoved, this);
this.node.on(n.CHILD_REORDER, this._doLayoutDirty, this);
this._addChildrenEventListeners();
},
_removeEventListeners: function() {
cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
this.node.off(n.SIZE_CHANGED, this._resized, this);
this.node.off(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
this.node.off(n.CHILD_ADDED, this._childAdded, this);
this.node.off(n.CHILD_REMOVED, this._childRemoved, this);
this.node.off(n.CHILD_REORDER, this._doLayoutDirty, this);
this._removeChildrenEventListeners();
},
_addChildrenEventListeners: function() {
for (var t = this.node.children, e = 0; e < t.length; ++e) {
var i = t[e];
i.on(n.SCALE_CHANGED, this._doScaleDirty, this);
i.on(n.SIZE_CHANGED, this._doLayoutDirty, this);
i.on(n.POSITION_CHANGED, this._doLayoutDirty, this);
i.on(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
i.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
}
},
_removeChildrenEventListeners: function() {
for (var t = this.node.children, e = 0; e < t.length; ++e) {
var i = t[e];
i.off(n.SCALE_CHANGED, this._doScaleDirty, this);
i.off(n.SIZE_CHANGED, this._doLayoutDirty, this);
i.off(n.POSITION_CHANGED, this._doLayoutDirty, this);
i.off(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
i.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
}
},
_childAdded: function(t) {
t.on(n.SCALE_CHANGED, this._doScaleDirty, this);
t.on(n.SIZE_CHANGED, this._doLayoutDirty, this);
t.on(n.POSITION_CHANGED, this._doLayoutDirty, this);
t.on(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
t.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
this._doLayoutDirty();
},
_childRemoved: function(t) {
t.off(n.SCALE_CHANGED, this._doScaleDirty, this);
t.off(n.SIZE_CHANGED, this._doLayoutDirty, this);
t.off(n.POSITION_CHANGED, this._doLayoutDirty, this);
t.off(n.ANCHOR_CHANGED, this._doLayoutDirty, this);
t.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
this._doLayoutDirty();
},
_resized: function() {
this._layoutSize = this.node.getContentSize();
this._doLayoutDirty();
},
_doLayoutHorizontally: function(t, e, i, n) {
var a = this.node.getAnchorPoint(), h = this.node.children, l = 1, u = this.paddingLeft, f = -a.x * t;
if (this.horizontalDirection === c.RIGHT_TO_LEFT) {
l = -1;
f = (1 - a.x) * t;
u = this.paddingRight;
}
for (var _ = f + l * u - l * this.spacingX, d = 0, p = 0, m = 0, g = 0, v = 0, y = 0, T = 0, x = 0; x < h.length; ++x) {
(C = h[x]).activeInHierarchy && T++;
}
var E = this.cellSize.width;
this.type !== r.GRID && this.resizeMode === s.CHILDREN && (E = (t - (this.paddingLeft + this.paddingRight) - (T - 1) * this.spacingX) / T);
for (x = 0; x < h.length; ++x) {
var C = h[x], A = this._getUsedScaleValue(C.scaleX), b = this._getUsedScaleValue(C.scaleY);
if (C.activeInHierarchy) {
if (this._resize === s.CHILDREN) {
C.width = E / A;
this.type === r.GRID && (C.height = this.cellSize.height / b);
}
var S = C.anchorX, w = C.width * A, D = C.height * b;
m > p && (p = m);
if (D >= p) {
m = p;
p = D;
y = C.getAnchorPoint().y;
}
this.horizontalDirection === c.RIGHT_TO_LEFT && (S = 1 - C.anchorX);
_ = _ + l * S * w + l * this.spacingX;
var I = l * (1 - S) * w;
if (e) {
var R = _ + I + l * (l > 0 ? this.paddingRight : this.paddingLeft), M = this.horizontalDirection === c.LEFT_TO_RIGHT && R > (1 - a.x) * t, L = this.horizontalDirection === c.RIGHT_TO_LEFT && R < -a.x * t;
if (M || L) {
if (D >= p) {
0 === m && (m = p);
d += m;
m = p;
} else {
d += p;
m = D;
p = 0;
}
_ = f + l * (u + S * w);
g++;
}
}
var O = i(C, d, g);
t >= w + this.paddingLeft + this.paddingRight && n && C.setPosition(cc.v2(_, O));
var P, F = 1, N = 0 === p ? D : p;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
v = v || this.node._contentSize.height;
(P = O + (F = -1) * (N * y + this.paddingBottom)) < v && (v = P);
} else {
v = v || -this.node._contentSize.height;
(P = O + F * (N * y + this.paddingTop)) > v && (v = P);
}
_ += I;
}
}
return v;
},
_getVerticalBaseHeight: function(t) {
var e = 0, i = 0;
if (this.resizeMode === s.CONTAINER) {
for (var n = 0; n < t.length; ++n) {
var r = t[n];
if (r.activeInHierarchy) {
i++;
e += r.height * this._getUsedScaleValue(r.scaleY);
}
}
e += (i - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
} else e = this.node.getContentSize().height;
return e;
},
_doLayoutVertically: function(t, e, i, n) {
var a = this.node.getAnchorPoint(), h = this.node.children, l = 1, u = this.paddingBottom, f = -a.y * t;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
l = -1;
f = (1 - a.y) * t;
u = this.paddingTop;
}
for (var _ = f + l * u - l * this.spacingY, d = 0, p = 0, m = 0, g = 0, v = 0, y = 0, T = 0, x = 0; x < h.length; ++x) {
(C = h[x]).activeInHierarchy && T++;
}
var E = this.cellSize.height;
this.type !== r.GRID && this.resizeMode === s.CHILDREN && (E = (t - (this.paddingTop + this.paddingBottom) - (T - 1) * this.spacingY) / T);
for (x = 0; x < h.length; ++x) {
var C = h[x], A = this._getUsedScaleValue(C.scaleX), b = this._getUsedScaleValue(C.scaleY);
if (C.activeInHierarchy) {
if (this.resizeMode === s.CHILDREN) {
C.height = E / b;
this.type === r.GRID && (C.width = this.cellSize.width / A);
}
var S = C.anchorY, w = C.width * A, D = C.height * b;
m > p && (p = m);
if (w >= p) {
m = p;
p = w;
y = C.getAnchorPoint().x;
}
this.verticalDirection === o.TOP_TO_BOTTOM && (S = 1 - C.anchorY);
_ = _ + l * S * D + l * this.spacingY;
var I = l * (1 - S) * D;
if (e) {
var R = _ + I + l * (l > 0 ? this.paddingTop : this.paddingBottom), M = this.verticalDirection === o.BOTTOM_TO_TOP && R > (1 - a.y) * t, L = this.verticalDirection === o.TOP_TO_BOTTOM && R < -a.y * t;
if (M || L) {
if (w >= p) {
0 === m && (m = p);
d += m;
m = p;
} else {
d += p;
m = w;
p = 0;
}
_ = f + l * (u + S * D);
g++;
}
}
var O = i(C, d, g);
t >= D + (this.paddingTop + this.paddingBottom) && n && C.setPosition(cc.v2(O, _));
var P, F = 1, N = 0 === p ? w : p;
if (this.horizontalDirection === c.RIGHT_TO_LEFT) {
F = -1;
v = v || this.node._contentSize.width;
(P = O + F * (N * y + this.paddingLeft)) < v && (v = P);
} else {
v = v || -this.node._contentSize.width;
(P = O + F * (N * y + this.paddingRight)) > v && (v = P);
}
_ += I;
}
}
return v;
},
_doLayoutBasic: function() {
for (var t = this.node.children, e = null, i = 0; i < t.length; ++i) {
var n = t[i];
n.activeInHierarchy && (e ? e.union(e, n.getBoundingBoxToWorld()) : e = n.getBoundingBoxToWorld());
}
if (e) {
var r = this.node.parent.convertToNodeSpaceAR(cc.v2(e.x, e.y));
r = cc.v2(r.x - this.paddingLeft, r.y - this.paddingBottom);
var s = this.node.parent.convertToNodeSpaceAR(cc.v2(e.x + e.width, e.y + e.height));
s = cc.v2(s.x + this.paddingRight, s.y + this.paddingTop);
var a = cc.size(parseFloat((s.x - r.x).toFixed(2)), parseFloat((s.y - r.y).toFixed(2))), o = this.node.getPosition();
if (0 !== a.width) {
var c = (o.x - r.x) / a.width;
this.node.anchorX = parseFloat(c.toFixed(2));
}
if (0 !== a.height) {
var h = (o.y - r.y) / a.height;
this.node.anchorY = parseFloat(h.toFixed(2));
}
this.node.setContentSize(a);
}
},
_doLayoutGridAxisHorizontal: function(t, e) {
var i = e.width, n = 1, r = -t.y * e.height, a = this.paddingBottom;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
n = -1;
r = (1 - t.y) * e.height;
a = this.paddingTop;
}
var c = function(t, e, i) {
return r + n * (e + t.anchorY * t.height * this._getUsedScaleValue(t.scaleY) + a + i * this.spacingY);
}.bind(this), h = 0;
if (this.resizeMode === s.CONTAINER) {
var l = this._doLayoutHorizontally(i, !0, c, !1);
(h = r - l) < 0 && (h *= -1);
r = -t.y * h;
if (this.verticalDirection === o.TOP_TO_BOTTOM) {
n = -1;
r = (1 - t.y) * h;
}
}
this._doLayoutHorizontally(i, !0, c, !0);
this.resizeMode === s.CONTAINER && this.node.setContentSize(i, h);
},
_doLayoutGridAxisVertical: function(t, e) {
var i = e.height, n = 1, r = -t.x * e.width, a = this.paddingLeft;
if (this.horizontalDirection === c.RIGHT_TO_LEFT) {
n = -1;
r = (1 - t.x) * e.width;
a = this.paddingRight;
}
var o = function(t, e, i) {
return r + n * (e + t.anchorX * t.width * this._getUsedScaleValue(t.scaleX) + a + i * this.spacingX);
}.bind(this), h = 0;
if (this.resizeMode === s.CONTAINER) {
var l = this._doLayoutVertically(i, !0, o, !1);
(h = r - l) < 0 && (h *= -1);
r = -t.x * h;
if (this.horizontalDirection === c.RIGHT_TO_LEFT) {
n = -1;
r = (1 - t.x) * h;
}
}
this._doLayoutVertically(i, !0, o, !0);
this.resizeMode === s.CONTAINER && this.node.setContentSize(h, i);
},
_doLayoutGrid: function() {
var t = this.node.getAnchorPoint(), e = this.node.getContentSize();
this.startAxis === a.HORIZONTAL ? this._doLayoutGridAxisHorizontal(t, e) : this.startAxis === a.VERTICAL && this._doLayoutGridAxisVertical(t, e);
},
_getHorizontalBaseWidth: function(t) {
var e = 0, i = 0;
if (this.resizeMode === s.CONTAINER) {
for (var n = 0; n < t.length; ++n) {
var r = t[n];
if (r.activeInHierarchy) {
i++;
e += r.width * this._getUsedScaleValue(r.scaleX);
}
}
e += (i - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
} else e = this.node.getContentSize().width;
return e;
},
_doLayout: function() {
if (this.type === r.HORIZONTAL) {
var t = this._getHorizontalBaseWidth(this.node.children);
this._doLayoutHorizontally(t, !1, (function(t) {
return t.y;
}), !0);
this.node.width = t;
} else if (this.type === r.VERTICAL) {
var e = this._getVerticalBaseHeight(this.node.children);
this._doLayoutVertically(e, !1, (function(t) {
return t.x;
}), !0);
this.node.height = e;
} else this.type === r.NONE ? this.resizeMode === s.CONTAINER && this._doLayoutBasic() : this.type === r.GRID && this._doLayoutGrid();
},
_getUsedScaleValue: function(t) {
return this.affectedByScale ? Math.abs(t) : 1;
},
updateLayout: function() {
if (this._layoutDirty && this.node.children.length > 0) {
this._doLayout();
this._layoutDirty = !1;
}
}
});
Object.defineProperty(h.prototype, "padding", {
get: function() {
cc.warnID(4100);
return this.paddingLeft;
},
set: function(t) {
this._N$padding = t;
this._migratePaddingData();
this._doLayoutDirty();
}
});
cc.Layout = e.exports = h;
}), {
"../CCNode": 29,
"./CCComponent": 67
} ],
72: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("../renderer/render-engine"), s = r.math, a = r.StencilMaterial, o = t("./CCRenderComponent"), c = t("../renderer/render-flow"), h = t("../graphics/graphics"), l = t("../CCNode"), u = t("../renderer/utils/dynamic-atlas/manager"), f = cc.v2(), _ = s.mat4.create(), d = [];
function p(t, e, i) {
d.length = 0;
for (var n = 2 * Math.PI / i, r = 0; r < i; ++r) d.push(cc.v2(e.x * Math.cos(n * r) + t.x, e.y * Math.sin(n * r) + t.y));
return d;
}
var m = cc.Enum({
RECT: 0,
ELLIPSE: 1,
IMAGE_STENCIL: 2
}), g = cc.Class({
name: "cc.Mask",
extends: o,
editor: !1,
ctor: function() {
this._graphics = null;
this._clearGraphics = null;
},
properties: {
_spriteFrame: {
default: null,
type: cc.SpriteFrame
},
_type: m.RECT,
type: {
get: function() {
return this._type;
},
set: function(t) {
this._type = t;
if (this._type !== m.IMAGE_STENCIL) {
this.spriteFrame = null;
this.alphaThreshold = 0;
this._updateGraphics();
}
if (this._renderData) {
this.destroyRenderData(this._renderData);
this._renderData = null;
}
this._activateMaterial();
},
type: m,
tooltip: !1
},
spriteFrame: {
type: cc.SpriteFrame,
tooltip: !1,
get: function() {
return this._spriteFrame;
},
set: function(t) {
var e = this._spriteFrame;
if (e !== t) {
this._spriteFrame = t;
this._applySpriteFrame(e);
}
}
},
alphaThreshold: {
default: 0,
type: cc.Float,
range: [ 0, 1, .1 ],
slide: !0,
tooltip: !1,
notify: function() {
if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
if (this._material) {
this._material.alphaThreshold = this.alphaThreshold;
this._material.updateHash();
}
} else cc.warnID(4201);
}
},
inverted: {
default: !1,
type: cc.Boolean,
tooltip: !1,
notify: function() {
cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS || cc.warnID(4202);
}
},
_segments: 64,
segements: {
get: function() {
return this._segments;
},
set: function(t) {
this._segments = n.clampf(t, 3, 1e4);
this._updateGraphics();
},
type: cc.Integer,
tooltip: !1
},
_resizeToTarget: {
animatable: !1,
set: function(t) {
t && this._resizeNodeToTargetNode();
}
}
},
statics: {
Type: m
},
onLoad: function() {
this._createGraphics();
},
onRestore: function() {
this._createGraphics();
this._type !== m.IMAGE_STENCIL ? this._updateGraphics() : this._applySpriteFrame();
},
onEnable: function() {
this._super();
if (this._type === m.IMAGE_STENCIL) {
if (!this._spriteFrame || !this._spriteFrame.textureLoaded()) {
this.markForRender(!1);
if (this._spriteFrame) {
this.markForUpdateRenderData(!1);
this._spriteFrame.once("load", this._onTextureLoaded, this);
this._spriteFrame.ensureLoadTexture();
}
}
} else this._updateGraphics();
this.node.on(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
this.node.on(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
this.node.on(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
this.node._renderFlag |= c.FLAG_POST_RENDER;
this._activateMaterial();
},
onDisable: function() {
this._super();
this.node.off(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
this.node.off(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
this.node.off(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
this.node._renderFlag &= ~c.FLAG_POST_RENDER;
},
onDestroy: function() {
this._super();
this._removeGraphics();
},
_resizeNodeToTargetNode: !1,
_onTextureLoaded: function() {
if (this._renderData) {
this._renderData.uvDirty = !0;
this._renderData.vertDirty = !0;
this.markForUpdateRenderData(!0);
}
this.enabledInHierarchy && this._activateMaterial();
},
_applySpriteFrame: function(t) {
t && t.off && t.off("load", this._onTextureLoaded, this);
var e = this._spriteFrame;
if (e) if (e.textureLoaded()) this._onTextureLoaded(null); else {
e.once("load", this._onTextureLoaded, this);
e.ensureLoadTexture();
} else this.disableRender();
},
_activateMaterial: function() {
if (this._type !== m.IMAGE_STENCIL || this.spriteFrame && this.spriteFrame.textureLoaded()) {
if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
this._material || (this._material = new a());
if (this._type === m.IMAGE_STENCIL) {
var t = this.spriteFrame.getTexture();
this._material.useModel = !1;
this._material.useTexture = !0;
this._material.useColor = !0;
this._material.texture = t;
this._material.alphaThreshold = this.alphaThreshold;
} else {
this._material.useModel = !0;
this._material.useTexture = !1;
this._material.useColor = !1;
}
}
this.markForRender(!0);
} else this.markForRender(!1);
},
_createGraphics: function() {
if (!this._graphics) {
this._graphics = new h();
this._graphics.node = this.node;
this._graphics.lineWidth = 0;
this._graphics.strokeColor = cc.color(0, 0, 0, 0);
}
if (!this._clearGraphics) {
this._clearGraphics = new h();
this._clearGraphics.node = new l();
this._clearGraphics._activateMaterial();
this._clearGraphics.lineWidth = 0;
this._clearGraphics.rect(0, 0, cc.visibleRect.width, cc.visibleRect.height);
this._clearGraphics.fill();
}
},
_updateGraphics: function() {
var t = this.node, e = this._graphics;
e.clear(!1);
var i = t._contentSize.width, n = t._contentSize.height, r = -i * t._anchorPoint.x, s = -n * t._anchorPoint.y;
if (this._type === m.RECT) e.rect(r, s, i, n); else if (this._type === m.ELLIPSE) {
for (var a = p(cc.v2(r + i / 2, s + n / 2), {
x: i / 2,
y: n / 2
}, this._segments), o = 0; o < a.length; ++o) {
var c = a[o];
0 === o ? e.moveTo(c.x, c.y) : e.lineTo(c.x, c.y);
}
e.close();
}
cc.game.renderType === cc.game.RENDER_TYPE_CANVAS ? e.stroke() : e.fill();
},
_removeGraphics: function() {
if (this._graphics) {
this._graphics.destroy();
this._graphics = null;
}
if (this._clearGraphics) {
this._clearGraphics.destroy();
this._clearGraphics = null;
}
},
_hitTest: function(t) {
var e = this.node, i = e.getContentSize(), n = i.width, r = i.height, a = f;
e._updateWorldMatrix();
if (!s.mat4.invert(_, e._worldMatrix)) return !1;
s.vec2.transformMat4(a, t, _);
a.x += e._anchorPoint.x * n;
a.y += e._anchorPoint.y * r;
var o = !1;
if (this.type === m.RECT || this.type === m.IMAGE_STENCIL) o = a.x >= 0 && a.y >= 0 && a.x <= n && a.y <= r; else if (this.type === m.ELLIPSE) {
var c = n / 2, h = r / 2, l = a.x - .5 * n, u = a.y - .5 * r;
o = l * l / (c * c) + u * u / (h * h) < 1;
}
this.inverted && (o = !o);
return o;
},
markForUpdateRenderData: function(t) {
t && this.enabledInHierarchy ? this.node._renderFlag |= c.FLAG_UPDATE_RENDER_DATA : t || (this.node._renderFlag &= ~c.FLAG_UPDATE_RENDER_DATA);
},
markForRender: function(t) {
t && this.enabledInHierarchy ? this.node._renderFlag |= c.FLAG_RENDER | c.FLAG_UPDATE_RENDER_DATA | c.FLAG_POST_RENDER : t || (this.node._renderFlag &= ~(c.FLAG_RENDER | c.FLAG_POST_RENDER));
},
disableRender: function() {
this.node._renderFlag &= ~(c.FLAG_RENDER | c.FLAG_UPDATE_RENDER_DATA | c.FLAG_POST_RENDER);
},
_calDynamicAtlas: function() {
if (this._spriteFrame) {
if (!this._spriteFrame._original && u) {
var t = u.insertSpriteFrame(this._spriteFrame);
t && this._spriteFrame._setDynamicAtlasFrame(t);
}
this._material._texture !== this._spriteFrame._texture && this._activateMaterial();
}
}
});
cc.Mask = e.exports = g;
}), {
"../CCNode": 29,
"../graphics/graphics": 106,
"../renderer/render-engine": 176,
"../renderer/render-flow": 177,
"../renderer/utils/dynamic-atlas/manager": 179,
"../utils/misc": 216,
"./CCRenderComponent": 77
} ],
73: [ (function(t, e, i) {
var n = t("../components/CCRenderComponent"), r = t("../renderer/render-engine").SpriteMaterial, s = t("../utils/texture-util"), a = cc.Class({
name: "cc.MotionStreak",
extends: n,
mixins: [ n.BlendFactorPolyfill ],
editor: !1,
ctor: function() {
this._points = [];
},
properties: {
preview: {
default: !1,
editorOnly: !0,
notify: !1,
animatable: !1
},
_fadeTime: 1,
fadeTime: {
get: function() {
return this._fadeTime;
},
set: function(t) {
this._fadeTime = t;
this.reset();
},
animatable: !1,
tooltip: !1
},
_minSeg: 1,
minSeg: {
get: function() {
return this._minSeg;
},
set: function(t) {
this._minSeg = t;
},
animatable: !1,
tooltip: !1
},
_stroke: 64,
stroke: {
get: function() {
return this._stroke;
},
set: function(t) {
this._stroke = t;
},
animatable: !1,
tooltip: !1
},
_texture: {
default: null,
type: cc.Texture2D
},
texture: {
get: function() {
return this._texture;
},
set: function(t) {
if (this._texture !== t) {
this._texture = t;
if (t && t.loaded) this._activateMaterial(); else {
this.disableRender();
this._ensureLoadTexture();
}
}
},
type: cc.Texture2D,
animatable: !1,
tooltip: !1
},
_color: cc.Color.WHITE,
color: {
get: function() {
return this._color;
},
set: function(t) {
this._color = t;
},
type: cc.Color,
tooltip: !1
},
_fastMode: !1,
fastMode: {
get: function() {
return this._fastMode;
},
set: function(t) {
this._fastMode = t;
},
animatable: !1,
tooltip: !1
}
},
onEnable: function() {
this._super();
if (this._texture && this._texture.loaded) this._activateMaterial(); else {
this.disableRender();
this._ensureLoadTexture();
}
this.reset();
},
_ensureLoadTexture: function() {
var t = this;
this._texture && !this._texture.loaded && (function() {
var e = t;
s.postLoadTexture(t._texture, (function() {
e._activateMaterial();
}));
})();
},
_activateMaterial: function() {
var t = this._material;
t || ((t = this._material = new r()).useColor = !1);
if (this._texture && this._texture.loaded) {
t.texture = this._texture;
this._updateMaterial(t);
this.markForRender(!0);
this.markForUpdateRenderData(!0);
}
},
_updateMaterial: function(t) {
this._material = t;
this._updateBlendFunc();
t.updateHash();
},
onFocusInEditor: !1,
onLostFocusInEditor: !1,
reset: function() {
this._points.length = 0;
var t = this._renderData;
if (t) {
t.dataLength = 0;
t.vertexCount = 0;
t.indiceCount = 0;
}
0;
}
});
cc.MotionStreak = e.exports = a;
}), {
"../components/CCRenderComponent": 77,
"../renderer/render-engine": 176,
"../utils/texture-util": 224
} ],
74: [ (function(t, e, i) {
var n = cc.Enum({
Unified: 0,
Free: 1
}), r = cc.Enum({
Horizontal: 0,
Vertical: 1
}), s = cc.Enum({
PAGE_TURNING: 0
}), a = cc.Class({
name: "cc.PageView",
extends: cc.ScrollView,
editor: !1,
ctor: function() {
this._curPageIdx = 0;
this._lastPageIdx = 0;
this._pages = [];
this._scrollCenterOffsetX = [];
this._scrollCenterOffsetY = [];
},
properties: {
sizeMode: {
default: n.Unified,
type: n,
tooltip: !1,
notify: function() {
this._syncSizeMode();
}
},
direction: {
default: r.Horizontal,
type: r,
tooltip: !1,
notify: function() {
this._syncScrollDirection();
}
},
scrollThreshold: {
default: .5,
type: cc.Float,
slide: !0,
range: [ 0, 1, .01 ],
tooltip: !1
},
autoPageTurningThreshold: {
default: 100,
type: cc.Float,
tooltip: !1
},
pageTurningEventTiming: {
default: .1,
type: cc.Float,
range: [ 0, 1, .01 ],
tooltip: !1
},
indicator: {
default: null,
type: cc.PageViewIndicator,
tooltip: !1,
notify: function() {
this.indicator && this.indicator.setPageView(this);
}
},
pageTurningSpeed: {
default: .3,
type: cc.Float,
tooltip: !1
},
pageEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
}
},
statics: {
SizeMode: n,
Direction: r,
EventType: s
},
__preload: function() {
this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
},
onEnable: function() {
this._super();
this.node.on("scroll-ended-with-threshold", this._dispatchPageTurningEvent, this);
},
onDisable: function() {
this._super();
this.node.off("scroll-ended-with-threshold", this._dispatchPageTurningEvent, this);
},
onLoad: function() {
this._initPages();
this.indicator && this.indicator.setPageView(this);
},
onDestroy: function() {
this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateAllPagesSize, this);
},
getCurrentPageIndex: function() {
return this._curPageIdx;
},
setCurrentPageIndex: function(t) {
this.scrollToPage(t, !0);
},
getPages: function() {
return this._pages;
},
addPage: function(t) {
if (t && -1 === this._pages.indexOf(t) && this.content) {
this.content.addChild(t);
this._pages.push(t);
this._updatePageView();
}
},
insertPage: function(t, e) {
if (!(e < 0) && t && -1 === this._pages.indexOf(t) && this.content) {
if (e >= this._pages.length) this.addPage(t); else {
this._pages.splice(e, 0, t);
this.content.addChild(t);
this._updatePageView();
}
}
},
removePage: function(t) {
if (t && this.content) {
var e = this._pages.indexOf(t);
-1 !== e ? this.removePageAtIndex(e) : cc.warnID(4300, t.name);
}
},
removePageAtIndex: function(t) {
var e = this._pages;
if (!(t < 0 || t >= e.length)) {
var i = e[t];
if (i) {
this.content.removeChild(i);
e.splice(t, 1);
this._updatePageView();
}
}
},
removeAllPages: function() {
if (this.content) {
for (var t = this._pages, e = 0, i = t.length; e < i; e++) this.content.removeChild(t[e]);
this._pages.length = 0;
this._updatePageView();
}
},
scrollToPage: function(t, e) {
if (!(t < 0 || t >= this._pages.length)) {
e = void 0 !== e ? e : .3;
this._curPageIdx = t;
this.scrollToOffset(this._moveOffsetValue(t), e, !0);
this.indicator && this.indicator._changedState();
}
},
getScrollEndedEventTiming: function() {
return this.pageTurningEventTiming;
},
_syncScrollDirection: function() {
this.horizontal = this.direction === r.Horizontal;
this.vertical = this.direction === r.Vertical;
},
_syncSizeMode: function() {
if (this.content) {
var t = this.content.getComponent(cc.Layout);
if (t) {
if (0 === this._pages.length) t.padding = 0; else {
var e = this._pages[this._pages.length - 1];
if (this.sizeMode === n.Free) if (this.direction === r.Horizontal) {
t.paddingLeft = (this._view.width - this._pages[0].width) / 2;
t.paddingRight = (this._view.width - e.width) / 2;
} else if (this.direction === r.Vertical) {
t.paddingTop = (this._view.height - this._pages[0].height) / 2;
t.paddingBottom = (this._view.height - e.height) / 2;
}
}
t.updateLayout();
}
}
},
_updatePageView: function() {
var t = this.content.getComponent(cc.Layout);
t && t.enabled && t.updateLayout();
var e = this._pages.length;
if (this._curPageIdx >= e) {
this._curPageIdx = 0 === e ? 0 : e - 1;
this._lastPageIdx = this._curPageIdx;
}
for (var i = 0; i < e; ++i) {
this._pages[i].setSiblingIndex(i);
this.direction === r.Horizontal ? this._scrollCenterOffsetX[i] = Math.abs(this.content.x + this._pages[i].x) : this._scrollCenterOffsetY[i] = Math.abs(this.content.y + this._pages[i].y);
}
this.indicator && this.indicator._refresh();
},
_updateAllPagesSize: function() {
if (this.sizeMode === n.Unified) for (var t = this._pages, e = this._view.getContentSize(), i = 0, r = t.length; i < r; i++) t[i].setContentSize(e);
},
_initPages: function() {
if (this.content) {
for (var t = this.content.children, e = 0; e < t.length; ++e) {
var i = t[e];
this._pages.indexOf(i) >= 0 || this._pages.push(i);
}
this._syncScrollDirection();
this._syncSizeMode();
this._updatePageView();
}
},
_dispatchPageTurningEvent: function() {
if (this._lastPageIdx !== this._curPageIdx) {
this._lastPageIdx = this._curPageIdx;
cc.Component.EventHandler.emitEvents(this.pageEvents, this, s.PAGE_TURNING);
this.node.emit("page-turning", this);
}
},
_isScrollable: function(t, e, i) {
if (this.sizeMode === n.Free) {
var s, a;
if (this.direction === r.Horizontal) {
s = this._scrollCenterOffsetX[e];
a = this._scrollCenterOffsetX[i];
return Math.abs(t.x) >= Math.abs(s - a) * this.scrollThreshold;
}
if (this.direction === r.Vertical) {
s = this._scrollCenterOffsetY[e];
a = this._scrollCenterOffsetY[i];
return Math.abs(t.y) >= Math.abs(s - a) * this.scrollThreshold;
}
} else {
if (this.direction === r.Horizontal) return Math.abs(t.x) >= this._view.width * this.scrollThreshold;
if (this.direction === r.Vertical) return Math.abs(t.y) >= this._view.height * this.scrollThreshold;
}
},
_isQuicklyScrollable: function(t) {
if (this.direction === r.Horizontal) {
if (Math.abs(t.x) > this.autoPageTurningThreshold) return !0;
} else if (this.direction === r.Vertical && Math.abs(t.y) > this.autoPageTurningThreshold) return !0;
return !1;
},
_moveOffsetValue: function(t) {
var e = cc.v2(0, 0);
this.sizeMode === n.Free ? this.direction === r.Horizontal ? e.x = this._scrollCenterOffsetX[t] : this.direction === r.Vertical && (e.y = this._scrollCenterOffsetY[t]) : this.direction === r.Horizontal ? e.x = t * this._view.width : this.direction === r.Vertical && (e.y = t * this._view.height);
return e;
},
_getDragDirection: function(t) {
return this.direction === r.Horizontal ? 0 === t.x ? 0 : t.x > 0 ? 1 : -1 : this.direction === r.Vertical ? 0 === t.y ? 0 : t.y < 0 ? 1 : -1 : void 0;
},
_handleReleaseLogic: function(t) {
this._autoScrollToPage();
if (this._scrolling) {
this._scrolling = !1;
this._autoScrolling || this._dispatchEvent("scroll-ended");
}
},
_autoScrollToPage: function() {
var t = this._startBounceBackIfNeeded(), e = this._touchBeganPosition.sub(this._touchEndPosition);
if (t) {
var i = this._getDragDirection(e);
if (0 === i) return;
this._curPageIdx = i > 0 ? this._pages.length - 1 : 0;
this.indicator && this.indicator._changedState();
} else {
var n = this._curPageIdx, r = n + this._getDragDirection(e), s = this.pageTurningSpeed * Math.abs(n - r);
if (r < this._pages.length) {
if (this._isScrollable(e, n, r)) {
this.scrollToPage(r, s);
return;
}
var a = this._calculateTouchMoveVelocity();
if (this._isQuicklyScrollable(a)) {
this.scrollToPage(r, s);
return;
}
}
this.scrollToPage(n, s);
}
},
_onTouchBegan: function(t, e) {
this._touchBeganPosition = t.touch.getLocation();
this._super(t, e);
},
_onTouchMoved: function(t, e) {
this._super(t, e);
},
_onTouchEnded: function(t, e) {
this._touchEndPosition = t.touch.getLocation();
this._super(t, e);
},
_onTouchCancelled: function(t, e) {
this._touchEndPosition = t.touch.getLocation();
this._super(t, e);
},
_onMouseWheel: function() {}
});
cc.PageView = e.exports = a;
}), {} ],
75: [ (function(t, e, i) {
var n = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1
}), r = cc.Class({
name: "cc.PageViewIndicator",
extends: t("./CCComponent"),
editor: !1,
properties: {
_layout: null,
_pageView: null,
_indicators: [],
spriteFrame: {
default: null,
type: cc.SpriteFrame,
tooltip: !1
},
direction: {
default: n.HORIZONTAL,
type: n,
tooltip: !1
},
cellSize: {
default: cc.size(20, 20),
tooltip: !1
},
spacing: {
default: 0,
tooltip: !1
}
},
statics: {
Direction: n
},
onLoad: function() {
this._updateLayout();
},
setPageView: function(t) {
this._pageView = t;
this._refresh();
},
_updateLayout: function() {
this._layout = this.getComponent(cc.Layout);
this._layout || (this._layout = this.addComponent(cc.Layout));
if (this.direction === n.HORIZONTAL) {
this._layout.type = cc.Layout.Type.HORIZONTAL;
this._layout.spacingX = this.spacing;
} else if (this.direction === n.VERTICAL) {
this._layout.type = cc.Layout.Type.VERTICAL;
this._layout.spacingY = this.spacing;
}
this._layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
},
_createIndicator: function() {
var t = new cc.Node();
t.addComponent(cc.Sprite).spriteFrame = this.spriteFrame;
t.parent = this.node;
t.width = this.cellSize.width;
t.height = this.cellSize.height;
return t;
},
_changedState: function() {
var t = this._indicators;
if (0 !== t.length) {
var e = this._pageView._curPageIdx;
if (!(e >= t.length)) {
for (var i = 0; i < t.length; ++i) {
t[i].opacity = 127.5;
}
t[e].opacity = 255;
}
}
},
_refresh: function() {
if (this._pageView) {
var t = this._indicators, e = this._pageView.getPages();
if (e.length !== t.length) {
var i = 0;
if (e.length > t.length) for (i = 0; i < e.length; ++i) t[i] || (t[i] = this._createIndicator()); else {
for (i = t.length - e.length; i > 0; --i) {
var n = t[i - 1];
this.node.removeChild(n);
t.splice(i - 1, 1);
}
}
this._layout && this._layout.enabledInHierarchy && this._layout.updateLayout();
this._changedState();
}
}
}
});
cc.PageViewIndicator = e.exports = r;
}), {
"./CCComponent": 67
} ],
76: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("./CCComponent"), s = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1,
FILLED: 2
}), a = cc.Class({
name: "cc.ProgressBar",
extends: r,
editor: !1,
_initBarSprite: function() {
if (this.barSprite) {
var t = this.barSprite.node;
if (!t) return;
var e = this.node.getContentSize(), i = this.node.getAnchorPoint(), n = t.getContentSize();
t.parent === this.node && this.node.setContentSize(n);
this.barSprite.fillType === cc.Sprite.FillType.RADIAL && (this.mode = s.FILLED);
var r = t.getContentSize();
this.mode === s.HORIZONTAL ? this.totalLength = r.width : this.mode === s.VERTICAL ? this.totalLength = r.height : this.totalLength = this.barSprite.fillRange;
if (t.parent === this.node) {
var a = -e.width * i.x;
t.setPosition(cc.v2(a, 0));
}
}
},
_updateBarStatus: function() {
if (this.barSprite) {
var t = this.barSprite.node;
if (!t) return;
var e, i, r, a = t.getAnchorPoint(), o = t.getContentSize(), c = t.getPosition(), h = cc.v2(0, .5), l = n.clamp01(this.progress), u = this.totalLength * l;
switch (this.mode) {
case s.HORIZONTAL:
this.reverse && (h = cc.v2(1, .5));
e = cc.size(u, o.height);
i = this.totalLength;
r = o.height;
break;

case s.VERTICAL:
h = this.reverse ? cc.v2(.5, 1) : cc.v2(.5, 0);
e = cc.size(o.width, u);
i = o.width;
r = this.totalLength;
}
if (this.mode === s.FILLED) if (this.barSprite.type !== cc.Sprite.Type.FILLED) cc.warn("ProgressBar FILLED mode only works when barSprite's Type is FILLED!"); else {
this.reverse && (u *= -1);
this.barSprite.fillRange = u;
} else if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
var f = h.x - a.x, _ = h.y - a.y, d = cc.v2(i * f, r * _);
t.setPosition(c.x + d.x, c.y + d.y);
t.setAnchorPoint(h);
t.setContentSize(e);
} else cc.warn("ProgressBar non-FILLED mode only works when barSprite's Type is non-FILLED!");
}
},
properties: {
barSprite: {
default: null,
type: cc.Sprite,
tooltip: !1,
notify: function() {
this._initBarSprite();
},
animatable: !1
},
mode: {
default: s.HORIZONTAL,
type: s,
tooltip: !1,
notify: function() {
if (this.barSprite) {
var t = this.barSprite.node;
if (!t) return;
var e = t.getContentSize();
this.mode === s.HORIZONTAL ? this.totalLength = e.width : this.mode === s.VERTICAL ? this.totalLength = e.height : this.mode === s.FILLED && (this.totalLength = this.barSprite.fillRange);
}
},
animatable: !1
},
_N$totalLength: 1,
totalLength: {
range: [ 0, Number.MAX_VALUE ],
tooltip: !1,
get: function() {
return this._N$totalLength;
},
set: function(t) {
this.mode === s.FILLED && (t = n.clamp01(t));
this._N$totalLength = t;
this._updateBarStatus();
}
},
progress: {
default: 1,
type: "Float",
range: [ 0, 1, .1 ],
slide: !0,
tooltip: !1,
notify: function() {
this._updateBarStatus();
}
},
reverse: {
default: !1,
tooltip: !1,
notify: function() {
this.barSprite && (this.barSprite.fillStart = 1 - this.barSprite.fillStart);
this._updateBarStatus();
},
animatable: !1
}
},
statics: {
Mode: s
}
});
cc.ProgressBar = e.exports = a;
}), {
"../utils/misc": 216,
"./CCComponent": 67
} ],
77: [ (function(t, e, i) {
var n = t("./CCComponent"), r = t("../renderer/render-engine"), s = t("../renderer/render-flow"), a = t("../platform/CCMacro").BlendFactor, o = r.RenderData, c = r.gfx, h = cc.Class({
name: "BlendFactorPolyfill",
properties: {
_srcBlendFactor: a.SRC_ALPHA,
_dstBlendFactor: a.ONE_MINUS_SRC_ALPHA,
srcBlendFactor: {
get: function() {
return this._srcBlendFactor;
},
set: function(t) {
if (this._srcBlendFactor !== t) {
this._srcBlendFactor = t;
this._updateBlendFunc(!0);
}
},
animatable: !1,
type: a,
tooltip: !1
},
dstBlendFactor: {
get: function() {
return this._dstBlendFactor;
},
set: function(t) {
if (this._dstBlendFactor !== t) {
this._dstBlendFactor = t;
this._updateBlendFunc(!0);
}
},
animatable: !1,
type: a,
tooltip: !1
}
},
_updateBlendFunc: function(t) {
var e = this.getMaterial();
if (e) {
e._mainTech.passes[0].setBlend(c.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, c.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
t && e.updateHash();
}
}
}), l = cc.Class({
name: "RenderComponent",
extends: n,
editor: !1,
properties: {},
ctor: function() {
this._material = null;
this._renderData = null;
this.__allocedDatas = [];
this._vertexFormat = null;
this._toPostHandle = !1;
this._assembler = this.constructor._assembler;
this._postAssembler = this.constructor._postAssembler;
},
onEnable: function() {
this.node._renderComponent && (this.node._renderComponent.enabled = !1);
this.node._renderComponent = this;
this.node._renderFlag |= s.FLAG_RENDER | s.FLAG_UPDATE_RENDER_DATA | s.FLAG_COLOR;
},
onDisable: function() {
this.node._renderComponent = null;
this.disableRender();
},
onDestroy: function() {
for (var t = 0, e = this.__allocedDatas.length; t < e; t++) o.free(this.__allocedDatas[t]);
this.__allocedDatas.length = 0;
this._material = null;
this._renderData = null;
},
_canRender: function() {
return this._enabled && this.node._activeInHierarchy;
},
markForUpdateRenderData: function(t) {
t && this._canRender() ? this.node._renderFlag |= s.FLAG_UPDATE_RENDER_DATA : t || (this.node._renderFlag &= ~s.FLAG_UPDATE_RENDER_DATA);
},
markForRender: function(t) {
t && this._canRender() ? this.node._renderFlag |= s.FLAG_RENDER : t || (this.node._renderFlag &= ~s.FLAG_RENDER);
},
markForCustomIARender: function(t) {
t && this._canRender() ? this.node._renderFlag |= s.FLAG_CUSTOM_IA_RENDER : t || (this.node._renderFlag &= ~s.FLAG_CUSTOM_IA_RENDER);
},
disableRender: function() {
this.node._renderFlag &= ~(s.FLAG_RENDER | s.FLAG_CUSTOM_IA_RENDER | s.FLAG_UPDATE_RENDER_DATA | s.FLAG_COLOR);
},
requestRenderData: function() {
var t = o.alloc();
this.__allocedDatas.push(t);
return t;
},
destroyRenderData: function(t) {
var e = this.__allocedDatas.indexOf(t);
if (-1 !== e) {
this.__allocedDatas.splice(e, 1);
o.free(t);
}
},
_updateColor: function() {
var t = this._material;
if (t) {
if (t.useColor) {
t.color = this.node.color;
t.updateHash();
}
this.node._renderFlag &= ~s.FLAG_COLOR;
}
},
getMaterial: function() {
return this._material;
},
_updateMaterial: function(t) {
this._material = t;
t.updateHash();
}
});
l._assembler = null;
l._postAssembler = null;
l.BlendFactorPolyfill = h;
cc.RenderComponent = e.exports = l;
}), {
"../platform/CCMacro": 139,
"../renderer/render-engine": 176,
"../renderer/render-flow": 177,
"./CCComponent": 67
} ],
78: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("../platform/CCMacro"), o = i("../utils/text-utils"), c = new (i("../utils/html-text-parser"))(), h = a.TextAlignment, l = a.VerticalTextAlignment;
var u = new s.Pool(function(t) {
0;
0;
return !!cc.isValid(t) && !t.getComponent(cc.LabelOutline);
}, 20);
u.get = function(i, n) {
var r = this._get();
r || (r = new cc.PrivateNode("RICHTEXT_CHILD"));
var s = r.getComponent(cc.Label);
s || (s = r.addComponent(cc.Label));
r.setPosition(0, 0);
r.setAnchorPoint(.5, .5);
r.setContentSize(128, 128);
r.skewX = 0;
"string" !== ("object" === (e = typeof i) ? t(i) : e) && (i = "" + i);
n.font instanceof cc.Font ? s.font = n.font : s.fontFamily = n.fontFamily;
s.string = i;
s.horizontalAlign = h.LEFT;
s.verticalAlign = l.TOP;
s.fontSize = n.fontSize || 40;
s.overflow = 0;
s.enableWrapText = !0;
s.lineHeight = 40;
s._enableBold(!1);
s._enableItalics(!1);
s._enableUnderline(!1);
return r;
};
var f = cc.Class({
name: "cc.RichText",
extends: cc.Component,
ctor: function() {
this._textArray = null;
this._labelSegments = [];
this._labelSegmentsCache = [];
this._linesWidth = [];
this._updateRichTextStatus = this._updateRichText;
},
editor: !1,
properties: {
string: {
default: "<color=#00ff00>Rich</c><color=#0fffff>Text</color>",
multiline: !0,
tooltip: !1,
notify: function() {
this._updateRichTextStatus();
}
},
horizontalAlign: {
default: h.LEFT,
type: h,
tooltip: !1,
animatable: !1,
notify: function(t) {
if (this.horizontalAlign !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
fontSize: {
default: 40,
tooltip: !1,
notify: function(t) {
if (this.fontSize !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
_fontFamily: "Arial",
fontFamily: {
tooltip: !1,
get: function() {
return this._fontFamily;
},
set: function(t) {
if (this._fontFamily !== t) {
this._fontFamily = t;
this._layoutDirty = !0;
this._updateRichTextStatus();
}
},
animatable: !1
},
font: {
default: null,
type: cc.TTFFont,
tooltip: !1,
notify: function(t) {
if (this.font !== t) {
this._layoutDirty = !0;
if (this.font) {
this.useSystemFont = !1;
this._onTTFLoaded();
} else this.useSystemFont = !0;
this._updateRichTextStatus();
}
}
},
_isSystemFontUsed: !0,
useSystemFont: {
get: function() {
return this._isSystemFontUsed;
},
set: function(t) {
if ((t || this.font) && this._isSystemFontUsed !== t) {
this._isSystemFontUsed = t;
this._layoutDirty = !0;
this._updateRichTextStatus();
}
},
animatable: !1,
tooltip: !1
},
maxWidth: {
default: 0,
tooltip: !1,
notify: function(t) {
if (this.maxWidth !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
lineHeight: {
default: 40,
tooltip: !1,
notify: function(t) {
if (this.lineHeight !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
imageAtlas: {
default: null,
type: cc.SpriteAtlas,
tooltip: !1,
notify: function(t) {
if (this.imageAtlas !== t) {
this._layoutDirty = !0;
this._updateRichTextStatus();
}
}
},
handleTouchEvent: {
default: !0,
tooltip: !1,
notify: function(t) {
this.handleTouchEvent !== t && this.enabledInHierarchy && (this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners());
}
}
},
statics: {
HorizontalAlign: h,
VerticalAlign: l
},
onEnable: function() {
this.handleTouchEvent && this._addEventListeners();
this._updateRichText();
this._activateChildren(!0);
},
onDisable: function() {
this.handleTouchEvent && this._removeEventListeners();
this._activateChildren(!1);
},
start: function() {
this._onTTFLoaded();
},
_onColorChanged: function(t) {
this.node.children.forEach((function(e) {
e.color = t;
}));
},
_addEventListeners: function() {
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
},
_removeEventListeners: function() {
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
},
_updateLabelSegmentTextAttributes: function() {
this._labelSegments.forEach(function(t) {
this._applyTextAttribute(t);
}.bind(this));
},
_createFontLabel: function(t) {
return u.get(t, this);
},
_onTTFLoaded: function() {
var t = this;
if (this.font instanceof cc.TTFFont) if (this.font._nativeAsset) {
this._layoutDirty = !0;
this._updateRichText();
} else (function() {
var e = t;
cc.loader.load(t.font.nativeUrl, (function(t, i) {
e._layoutDirty = !0;
e._updateRichText();
}));
})(); else {
this._layoutDirty = !0;
this._updateRichText();
}
},
_measureText: function(t, e) {
var i = this, n = function(e) {
var n = void 0;
if (0 === i._labelSegmentsCache.length) {
n = i._createFontLabel(e);
i._labelSegmentsCache.push(n);
} else (n = i._labelSegmentsCache[0]).getComponent(cc.Label).string = e;
n._styleIndex = t;
i._applyTextAttribute(n);
return n.getContentSize().width;
};
return e ? n(e) : n;
},
_onTouchEnded: function(t) {
for (var e = this, i = this.node.getComponents(cc.Component), n = function(n) {
var r = e._labelSegments[n], s = r._clickHandler, a = r._clickParam;
if (s && e._containsTouchLocation(r, t.touch.getLocation())) {
i.forEach((function(e) {
e.enabledInHierarchy && e[s] && e[s](t, a);
}));
t.stopPropagation();
}
}, r = 0; r < this._labelSegments.length; ++r) n(r);
},
_containsTouchLocation: function(t, e) {
return t.getBoundingBoxToWorld().contains(e);
},
_resetState: function() {
for (var t = this.node.children, e = t.length - 1; e >= 0; e--) {
var i = t[e];
if ("RICHTEXT_CHILD" === i.name || "RICHTEXT_Image_CHILD" === i.name) {
i.parent === this.node ? i.parent = null : t.splice(e, 1);
"RICHTEXT_CHILD" === i.name && u.put(i);
}
}
this._labelSegments.length = 0;
this._labelSegmentsCache.length = 0;
this._linesWidth.length = 0;
this._lineOffsetX = 0;
this._lineCount = 1;
this._labelWidth = 0;
this._labelHeight = 0;
this._layoutDirty = !0;
},
onRestore: !1,
_activateChildren: function(t) {
for (var e = this.node.children.length - 1; e >= 0; e--) {
var i = this.node.children[e];
"RICHTEXT_CHILD" !== i.name && "RICHTEXT_Image_CHILD" !== i.name || (i.active = t);
}
},
_addLabelSegment: function(t, e) {
var i = void 0;
0 === this._labelSegmentsCache.length ? i = this._createFontLabel(t) : (i = this._labelSegmentsCache.pop()).getComponent(cc.Label).string = t;
i._styleIndex = e;
i._lineCount = this._lineCount;
i.active = this.node.active;
i.setAnchorPoint(0, 0);
this._applyTextAttribute(i);
this.node.addChild(i);
this._labelSegments.push(i);
return i;
},
_updateRichTextWithMaxWidth: function(t, e, i) {
var n = e;
if (this._lineOffsetX > 0 && n + this._lineOffsetX > this.maxWidth) for (var r = 0; this._lineOffsetX <= this.maxWidth; ) {
var s = this._getFirstWordLen(t, r, t.length), a = t.substr(r, s), c = this._measureText(i, a);
if (!(this._lineOffsetX + c <= this.maxWidth)) {
if (r > 0) {
var h = t.substr(0, r);
this._addLabelSegment(h, i);
t = t.substr(r, t.length);
n = this._measureText(i, t);
}
this._updateLineInfo();
break;
}
this._lineOffsetX += c;
r += s;
}
if (n > this.maxWidth) for (var l = o.fragmentText(t, n, this.maxWidth, this._measureText(i)), u = 0; u < l.length; ++u) {
var f = l[u], _ = this._addLabelSegment(f, i).getContentSize();
this._lineOffsetX += _.width;
l.length > 1 && u < l.length - 1 && this._updateLineInfo();
} else {
this._lineOffsetX += n;
this._addLabelSegment(t, i);
}
},
_isLastComponentCR: function(t) {
return t.length - 1 === t.lastIndexOf("\n");
},
_updateLineInfo: function() {
this._linesWidth.push(this._lineOffsetX);
this._lineOffsetX = 0;
this._lineCount++;
},
_needsUpdateTextLayout: function(t) {
if (this._layoutDirty || !this._textArray || !t) return !0;
if (this._textArray.length !== t.length) return !0;
for (var e = 0; e < this._textArray.length; ++e) {
var i = this._textArray[e], n = t[e];
if (i.text !== n.text) return !0;
if (i.style) {
if (n.style) {
if (!!n.style.outline != !!i.style.outline) return !0;
if (i.style.size !== n.style.size || i.style.italic !== n.style.italic || i.style.isImage !== n.style.isImage) return !0;
if (i.style.isImage === n.style.isImage && i.style.src !== n.style.src) return !0;
} else if (i.style.size || i.style.italic || i.style.isImage || i.style.outline) return !0;
} else if (n.style && (n.style.size || n.style.italic || n.style.isImage || n.style.outline)) return !0;
}
return !1;
},
_addRichTextImageElement: function(t) {
var e = t.style.src, i = this.imageAtlas.getSpriteFrame(e);
if (i) {
var n = new cc.PrivateNode("RICHTEXT_Image_CHILD"), r = n.addComponent(cc.Sprite);
n.setAnchorPoint(0, 0);
r.type = cc.Sprite.Type.SLICED;
r.sizeMode = cc.Sprite.SizeMode.CUSTOM;
this.node.addChild(n);
this._labelSegments.push(n);
var s = i.getRect(), a = 1, o = s.width, c = s.height, h = t.style.imageWidth, l = t.style.imageHeight;
if (l > 0 && l < this.lineHeight) {
o *= a = l / c;
c *= a;
} else {
o *= a = this.lineHeight / c;
c *= a;
}
h > 0 && (o = h);
if (this.maxWidth > 0) {
this._lineOffsetX + o > this.maxWidth && this._updateLineInfo();
this._lineOffsetX += o;
} else {
this._lineOffsetX += o;
this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
}
r.spriteFrame = i;
n.setContentSize(o, c);
n._lineCount = this._lineCount;
if (t.style.event) {
t.style.event.click && (n._clickHandler = t.style.event.click);
t.style.event.param ? n._clickParam = t.style.event.param : n._clickParam = "";
} else n._clickHandler = null;
} else cc.warnID(4400);
},
_updateRichText: function() {
if (this.enabled) {
var t = c.parse(this.string);
if (this._needsUpdateTextLayout(t)) {
this._textArray = t;
this._resetState();
for (var e = !1, i = void 0, n = 0; n < this._textArray.length; ++n) {
var r = this._textArray[n], s = r.text;
if ("" === s) {
if (r.style && r.style.newline) {
this._updateLineInfo();
continue;
}
if (r.style && r.style.isImage && this.imageAtlas) {
this._addRichTextImageElement(r);
continue;
}
}
for (var a = s.split("\n"), o = 0; o < a.length; ++o) {
var h = a[o];
if ("" !== h) {
e = !1;
if (this.maxWidth > 0) {
var l = this._measureText(n, h);
this._updateRichTextWithMaxWidth(h, l, n);
a.length > 1 && o < a.length - 1 && this._updateLineInfo();
} else {
i = this._addLabelSegment(h, n).getContentSize();
this._lineOffsetX += i.width;
this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
a.length > 1 && o < a.length - 1 && this._updateLineInfo();
}
} else {
if (this._isLastComponentCR(s) && o === a.length - 1) continue;
this._updateLineInfo();
e = !0;
}
}
}
e || this._linesWidth.push(this._lineOffsetX);
this.maxWidth > 0 && (this._labelWidth = this.maxWidth);
this._labelHeight = this._lineCount * this.lineHeight;
this.node.setContentSize(this._labelWidth, this._labelHeight);
this._updateRichTextPosition();
this._layoutDirty = !1;
} else {
this._textArray = t;
this._updateLabelSegmentTextAttributes();
}
}
},
_getFirstWordLen: function(t, e, i) {
var n = t.charAt(e);
if (o.isUnicodeCJK(n) || o.isUnicodeSpace(n)) return 1;
for (var r = 1, s = e + 1; s < i; ++s) {
n = t.charAt(s);
if (o.isUnicodeSpace(n) || o.isUnicodeCJK(n)) break;
r++;
}
return r;
},
_updateRichTextPosition: function() {
for (var t = 0, e = 1, i = this._lineCount, n = 0; n < this._labelSegments.length; ++n) {
var r = this._labelSegments[n], s = r._lineCount;
if (s > e) {
t = 0;
e = s;
}
var a = 0;
switch (this.horizontalAlign) {
case h.LEFT:
a = -this._labelWidth / 2;
break;

case h.CENTER:
a = -this._linesWidth[s - 1] / 2;
break;

case h.RIGHT:
a = this._labelWidth / 2 - this._linesWidth[s - 1];
}
r.x = t + a;
var o = r.getContentSize();
r.y = this.lineHeight * (i - s) - this._labelHeight / 2;
s === e && (t += o.width);
}
},
_convertLiteralColorValue: function(t) {
var e = t.toUpperCase();
return cc.Color[e] ? cc.Color[e] : cc.color().fromHEX(t);
},
_applyTextAttribute: function(t) {
var e = t.getComponent(cc.Label);
if (e) {
var i = t._styleIndex;
this._isSystemFontUsed && (e.fontFamily = this._fontFamily);
e.useSystemFont = this._isSystemFontUsed;
e.lineHeight = this.lineHeight;
e.horizontalAlign = h.LEFT;
e.verticalAlign = l.CENTER;
var n = null;
this._textArray[i] && (n = this._textArray[i].style);
n && n.color ? t.color = this._convertLiteralColorValue(n.color) : t.color = this.node.color;
e._enableBold(n && n.bold);
e._enableItalics(n && n.italic);
n && n.italic && (t.skewX = 12);
e._enableUnderline(n && n.underline);
if (n && n.outline) {
var r = t.getComponent(cc.LabelOutline);
r || (r = t.addComponent(cc.LabelOutline));
r.color = this._convertLiteralColorValue(n.outline.color);
r.width = n.outline.width;
}
n && n.size ? e.fontSize = n.size : e.fontSize = this.fontSize;
e._updateRenderData(!0);
if (n && n.event) {
n.event.click && (t._clickHandler = n.event.click);
n.event.param ? t._clickParam = n.event.param : t._clickParam = "";
} else t._clickHandler = null;
}
},
onDestroy: function() {
for (var t = 0; t < this._labelSegments.length; ++t) {
this._labelSegments[t].removeFromParent();
u.put(this._labelSegments[t]);
}
}
});
cc.RichText = n.exports = f;
}), {
"../platform/CCMacro": 139,
"../platform/js": 154,
"../utils/html-text-parser": 213,
"../utils/text-utils": 223
} ],
79: [ (function(t, e, i) {
var n = t("../utils/misc"), r = (t("./CCComponent"), cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1
})), s = cc.Class({
name: "cc.Scrollbar",
extends: t("./CCComponent"),
editor: !1,
properties: {
_scrollView: null,
_touching: !1,
_autoHideRemainingTime: {
default: 0,
serializable: !1
},
_opacity: 255,
handle: {
default: null,
type: cc.Sprite,
tooltip: !1,
notify: function() {
this._onScroll(cc.v2(0, 0));
},
animatable: !1
},
direction: {
default: r.HORIZONTAL,
type: r,
tooltip: !1,
notify: function() {
this._onScroll(cc.v2(0, 0));
},
animatable: !1
},
enableAutoHide: {
default: !0,
animatable: !1,
tooltip: !1
},
autoHideTime: {
default: 1,
animatable: !1,
tooltip: !1
}
},
statics: {
Direction: r
},
setTargetScrollView: function(t) {
this._scrollView = t;
},
_convertToScrollViewSpace: function(t) {
var e = t.convertToWorldSpace(cc.v2(0, 0));
return this._scrollView.node.convertToNodeSpace(e);
},
_setOpacity: function(t) {
if (this.handle) {
this.node.opacity = t;
this.handle.node.opacity = t;
}
},
_onScroll: function(t) {
if (this._scrollView) {
var e = this._scrollView.content;
if (e) {
var i = e.getContentSize(), n = this._scrollView.node.getContentSize(), s = this.node.getContentSize();
if (this._conditionalDisableScrollBar(i, n)) return;
if (this.enableAutoHide) {
this._autoHideRemainingTime = this.autoHideTime;
this._setOpacity(this._opacity);
}
var a = 0, o = 0, c = 0, h = 0, l = 0;
if (this.direction === r.HORIZONTAL) {
a = i.width;
o = n.width;
l = s.width;
c = t.x;
h = -this._convertToScrollViewSpace(e).x;
} else if (this.direction === r.VERTICAL) {
a = i.height;
o = n.height;
l = s.height;
c = t.y;
h = -this._convertToScrollViewSpace(e).y;
}
var u = this._calculateLength(a, o, l, c), f = this._calculatePosition(a, o, l, h, c, u);
this._updateLength(u);
this._updateHanlderPosition(f);
}
}
},
_updateHanlderPosition: function(t) {
if (this.handle) {
var e = this._fixupHandlerPosition();
this.handle.node.setPosition(t.x + e.x, t.y + e.y);
}
},
_fixupHandlerPosition: function() {
var t = this.node.getContentSize(), e = this.node.getAnchorPoint(), i = this.handle.node.getContentSize(), n = this.handle.node.parent, s = this.node.convertToWorldSpaceAR(cc.v2(-t.width * e.x, -t.height * e.y)), a = n.convertToNodeSpaceAR(s);
this.direction === r.HORIZONTAL ? a = cc.v2(a.x, a.y + (t.height - i.height) / 2) : this.direction === r.VERTICAL && (a = cc.v2(a.x + (t.width - i.width) / 2, a.y));
this.handle.node.setPosition(a);
return a;
},
_onTouchBegan: function() {
this.enableAutoHide && (this._touching = !0);
},
_conditionalDisableScrollBar: function(t, e) {
return t.width <= e.width && this.direction === r.HORIZONTAL || t.height <= e.height && this.direction === r.VERTICAL;
},
_onTouchEnded: function() {
if (this.enableAutoHide) {
this._touching = !1;
if (!(this.autoHideTime <= 0)) {
if (this._scrollView) {
var t = this._scrollView.content;
if (t) {
var e = t.getContentSize(), i = this._scrollView.node.getContentSize();
if (this._conditionalDisableScrollBar(e, i)) return;
}
}
this._autoHideRemainingTime = this.autoHideTime;
}
}
},
_calculateLength: function(t, e, i, n) {
var r = t;
n && (r += 20 * (n > 0 ? n : -n));
return i * (e / r);
},
_calculatePosition: function(t, e, i, s, a, o) {
var c = t - e;
a && (c += Math.abs(a));
var h = 0;
if (c) {
h = s / c;
h = n.clamp01(h);
}
var l = (i - o) * h;
return this.direction === r.VERTICAL ? cc.v2(0, l) : cc.v2(l, 0);
},
_updateLength: function(t) {
if (this.handle) {
var e = this.handle.node, i = e.getContentSize();
e.setAnchorPoint(cc.v2(0, 0));
this.direction === r.HORIZONTAL ? e.setContentSize(t, i.height) : e.setContentSize(i.width, t);
}
},
_processAutoHide: function(t) {
if (this.enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching) {
this._autoHideRemainingTime -= t;
if (this._autoHideRemainingTime <= this.autoHideTime) {
this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
var e = this._opacity * (this._autoHideRemainingTime / this.autoHideTime);
this._setOpacity(e);
}
}
},
start: function() {
this.enableAutoHide && this._setOpacity(0);
},
hide: function() {
this._autoHideRemainingTime = 0;
this._setOpacity(0);
},
show: function() {
this._autoHideRemainingTime = this.autoHideTime;
this._setOpacity(this._opacity);
},
update: function(t) {
this._processAutoHide(t);
}
});
cc.Scrollbar = e.exports = s;
}), {
"../utils/misc": 216,
"./CCComponent": 67
} ],
80: [ (function(t, e, i) {
var n = t("../CCNode").EventType, r = function(t) {
return (t -= 1) * t * t * t * t + 1;
}, s = function() {
return new Date().getMilliseconds();
}, a = cc.Enum({
SCROLL_TO_TOP: 0,
SCROLL_TO_BOTTOM: 1,
SCROLL_TO_LEFT: 2,
SCROLL_TO_RIGHT: 3,
SCROLLING: 4,
BOUNCE_TOP: 5,
BOUNCE_BOTTOM: 6,
BOUNCE_LEFT: 7,
BOUNCE_RIGHT: 8,
SCROLL_ENDED: 9,
TOUCH_UP: 10,
AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
SCROLL_BEGAN: 12
}), o = {
"scroll-to-top": a.SCROLL_TO_TOP,
"scroll-to-bottom": a.SCROLL_TO_BOTTOM,
"scroll-to-left": a.SCROLL_TO_LEFT,
"scroll-to-right": a.SCROLL_TO_RIGHT,
scrolling: a.SCROLLING,
"bounce-bottom": a.BOUNCE_BOTTOM,
"bounce-left": a.BOUNCE_LEFT,
"bounce-right": a.BOUNCE_RIGHT,
"bounce-top": a.BOUNCE_TOP,
"scroll-ended": a.SCROLL_ENDED,
"touch-up": a.TOUCH_UP,
"scroll-ended-with-threshold": a.AUTOSCROLL_ENDED_WITH_THRESHOLD,
"scroll-began": a.SCROLL_BEGAN
}, c = cc.Class({
name: "cc.ScrollView",
extends: t("./CCViewGroup"),
editor: !1,
ctor: function() {
this._topBoundary = 0;
this._bottomBoundary = 0;
this._leftBoundary = 0;
this._rightBoundary = 0;
this._touchMoveDisplacements = [];
this._touchMoveTimeDeltas = [];
this._touchMovePreviousTimestamp = 0;
this._touchMoved = !1;
this._autoScrolling = !1;
this._autoScrollAttenuate = !1;
this._autoScrollStartPosition = cc.v2(0, 0);
this._autoScrollTargetDelta = cc.v2(0, 0);
this._autoScrollTotalTime = 0;
this._autoScrollAccumulatedTime = 0;
this._autoScrollCurrentlyOutOfBoundary = !1;
this._autoScrollBraking = !1;
this._autoScrollBrakingStartPosition = cc.v2(0, 0);
this._outOfBoundaryAmount = cc.v2(0, 0);
this._outOfBoundaryAmountDirty = !0;
this._stopMouseWheel = !1;
this._mouseWheelEventElapsedTime = 0;
this._isScrollEndedWithThresholdEventFired = !1;
this._scrollEventEmitMask = 0;
this._isBouncing = !1;
this._scrolling = !1;
},
properties: {
content: {
default: void 0,
type: cc.Node,
tooltip: !1,
formerlySerializedAs: "content",
notify: function(t) {
this._calculateBoundary();
}
},
horizontal: {
default: !0,
animatable: !1,
tooltip: !1
},
vertical: {
default: !0,
animatable: !1,
tooltip: !1
},
inertia: {
default: !0,
tooltip: !1
},
brake: {
default: .5,
type: "Float",
range: [ 0, 1, .1 ],
tooltip: !1
},
elastic: {
default: !0,
animatable: !1,
tooltip: !1
},
bounceDuration: {
default: 1,
range: [ 0, 10 ],
tooltip: !1
},
horizontalScrollBar: {
default: void 0,
type: cc.Scrollbar,
tooltip: !1,
notify: function() {
if (this.horizontalScrollBar) {
this.horizontalScrollBar.setTargetScrollView(this);
this._updateScrollBar(0);
}
},
animatable: !1
},
verticalScrollBar: {
default: void 0,
type: cc.Scrollbar,
tooltip: !1,
notify: function() {
if (this.verticalScrollBar) {
this.verticalScrollBar.setTargetScrollView(this);
this._updateScrollBar(0);
}
},
animatable: !1
},
scrollEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
},
cancelInnerEvents: {
default: !0,
animatable: !1,
tooltip: !1
},
_view: {
get: function() {
if (this.content) return this.content.parent;
}
}
},
statics: {
EventType: a
},
scrollToBottom: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 0),
applyToHorizontal: !1,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i, !0);
},
scrollToTop: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 1),
applyToHorizontal: !1,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToLeft: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 0),
applyToHorizontal: !0,
applyToVertical: !1
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToRight: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(1, 0),
applyToHorizontal: !0,
applyToVertical: !1
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToTopLeft: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 1),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToTopRight: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(1, 1),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToBottomLeft: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(0, 0),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToBottomRight: function(t, e) {
var i = this._calculateMovePercentDelta({
anchor: cc.v2(1, 0),
applyToHorizontal: !0,
applyToVertical: !0
});
t ? this._startAutoScroll(i, t, !1 !== e) : this._moveContent(i);
},
scrollToOffset: function(t, e, i) {
var n = this.getMaxScrollOffset(), r = cc.v2(0, 0);
0 === n.x ? r.x = 0 : r.x = t.x / n.x;
0 === n.y ? r.y = 1 : r.y = (n.y - t.y) / n.y;
this.scrollTo(r, e, i);
},
getScrollOffset: function() {
var t = this._getContentTopBoundary() - this._topBoundary, e = this._getContentLeftBoundary() - this._leftBoundary;
return cc.v2(e, t);
},
getMaxScrollOffset: function() {
var t = this._view.getContentSize(), e = this.content.getContentSize(), i = e.width - t.width, n = e.height - t.height;
i = i >= 0 ? i : 0;
n = n >= 0 ? n : 0;
return cc.v2(i, n);
},
scrollToPercentHorizontal: function(t, e, i) {
var n = this._calculateMovePercentDelta({
anchor: cc.v2(t, 0),
applyToHorizontal: !0,
applyToVertical: !1
});
e ? this._startAutoScroll(n, e, !1 !== i) : this._moveContent(n);
},
scrollTo: function(t, e, i) {
var n = this._calculateMovePercentDelta({
anchor: cc.v2(t),
applyToHorizontal: !0,
applyToVertical: !0
});
e ? this._startAutoScroll(n, e, !1 !== i) : this._moveContent(n);
},
scrollToPercentVertical: function(t, e, i) {
var n = this._calculateMovePercentDelta({
anchor: cc.v2(0, t),
applyToHorizontal: !1,
applyToVertical: !0
});
e ? this._startAutoScroll(n, e, !1 !== i) : this._moveContent(n);
},
stopAutoScroll: function() {
this._autoScrolling = !1;
this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
},
setContentPosition: function(t) {
if (!t.fuzzyEquals(this.getContentPosition(), 1e-4)) {
this.content.setPosition(t);
this._outOfBoundaryAmountDirty = !0;
}
},
getContentPosition: function() {
return this.content.getPosition();
},
isScrolling: function() {
return this._scrolling;
},
isAutoScrolling: function() {
return this._autoScrolling;
},
_registerEvent: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, !0);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, !0);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, !0);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, !0);
this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, !0);
},
_unregisterEvent: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, !0);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, !0);
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, !0);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, !0);
this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, !0);
},
_onMouseWheel: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
var i = cc.v2(0, 0), n = -.1;
n = -7;
this.vertical ? i = cc.v2(0, t.getScrollY() * n) : this.horizontal && (i = cc.v2(t.getScrollY() * n, 0));
this._mouseWheelEventElapsedTime = 0;
this._processDeltaMove(i);
if (!this._stopMouseWheel) {
this._handlePressLogic();
this.schedule(this._checkMouseWheel, 1 / 60);
this._stopMouseWheel = !0;
}
this._stopPropagationIfTargetIsMe(t);
}
},
_checkMouseWheel: function(t) {
if (this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1e-4)) {
this._mouseWheelEventElapsedTime += t;
if (this._mouseWheelEventElapsedTime > .1) {
this._onScrollBarTouchEnded();
this.unschedule(this._checkMouseWheel);
this._stopMouseWheel = !1;
}
} else {
this._processInertiaScroll();
this.unschedule(this._checkMouseWheel);
this._stopMouseWheel = !1;
}
},
_calculateMovePercentDelta: function(t) {
var e = t.anchor, i = t.applyToHorizontal, n = t.applyToVertical;
this._calculateBoundary();
e = e.clampf(cc.v2(0, 0), cc.v2(1, 1));
var r = this._view.getContentSize(), s = this.content.getContentSize(), a = this._getContentBottomBoundary() - this._bottomBoundary;
a = -a;
var o = this._getContentLeftBoundary() - this._leftBoundary;
o = -o;
var c = cc.v2(0, 0), h = 0;
if (i) {
h = s.width - r.width;
c.x = o - h * e.x;
}
if (n) {
h = s.height - r.height;
c.y = a - h * e.y;
}
return c;
},
_moveContentToTopLeft: function(t) {
var e = this.content.getContentSize(), i = this._getContentBottomBoundary() - this._bottomBoundary;
i = -i;
var n = cc.v2(0, 0), r = 0, s = this._getContentLeftBoundary() - this._leftBoundary;
s = -s;
if (e.height < t.height) {
r = e.height - t.height;
n.y = i - r;
this.verticalScrollBar && this.verticalScrollBar.hide();
} else this.verticalScrollBar && this.verticalScrollBar.show();
if (e.width < t.width) {
r = e.width - t.width;
n.x = s;
this.horizontalScrollBar && this.horizontalScrollBar.hide();
} else this.horizontalScrollBar && this.horizontalScrollBar.show();
this._moveContent(n);
this._adjustContentOutOfBoundary();
},
_calculateBoundary: function() {
if (this.content) {
var t = this.content.getComponent(cc.Layout);
t && t.enabledInHierarchy && t.updateLayout();
var e = this._view.getContentSize(), i = e.width * this._view.anchorX, n = e.height * this._view.anchorY;
this._leftBoundary = -i;
this._bottomBoundary = -n;
this._rightBoundary = this._leftBoundary + e.width;
this._topBoundary = this._bottomBoundary + e.height;
this._moveContentToTopLeft(e);
}
},
_hasNestedViewGroup: function(t, e) {
if (t.eventPhase === cc.Event.CAPTURING_PHASE) {
if (e) for (var i = 0; i < e.length; ++i) {
var n = e[i];
if (this.node === n) return !!t.target.getComponent(cc.ViewGroup);
if (n.getComponent(cc.ViewGroup)) return !0;
}
return !1;
}
},
_stopPropagationIfTargetIsMe: function(t) {
t.eventPhase === cc.Event.AT_TARGET && t.target === this.node && t.stopPropagation();
},
_onTouchBegan: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
var i = t.touch;
this.content && this._handlePressLogic(i);
this._touchMoved = !1;
this._stopPropagationIfTargetIsMe(t);
}
},
_onTouchMoved: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
var i = t.touch;
this.content && this._handleMoveLogic(i);
if (this.cancelInnerEvents) {
if (i.getLocation().sub(i.getStartLocation()).mag() > 7 && !this._touchMoved && t.target !== this.node) {
var n = new cc.Event.EventTouch(t.getTouches(), t.bubbles);
n.type = cc.Node.EventType.TOUCH_CANCEL;
n.touch = t.touch;
n.simulate = !0;
t.target.dispatchEvent(n);
this._touchMoved = !0;
}
this._stopPropagationIfTargetIsMe(t);
}
}
},
_onTouchEnded: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
this._dispatchEvent("touch-up");
var i = t.touch;
this.content && this._handleReleaseLogic(i);
this._touchMoved ? t.stopPropagation() : this._stopPropagationIfTargetIsMe(t);
}
},
_onTouchCancelled: function(t, e) {
if (this.enabledInHierarchy && !this._hasNestedViewGroup(t, e)) {
if (!t.simulate) {
var i = t.touch;
this.content && this._handleReleaseLogic(i);
}
this._stopPropagationIfTargetIsMe(t);
}
},
_processDeltaMove: function(t) {
this._scrollChildren(t);
this._gatherTouchMove(t);
},
_handleMoveLogic: function(t) {
var e = t.getDelta();
this._processDeltaMove(e);
},
_scrollChildren: function(t) {
var e = t = this._clampDelta(t), i = void 0;
if (this.elastic) {
i = this._getHowMuchOutOfBoundary();
e.x *= 0 === i.x ? 1 : .5;
e.y *= 0 === i.y ? 1 : .5;
}
if (!this.elastic) {
i = this._getHowMuchOutOfBoundary(e);
e = e.add(i);
}
var n = -1;
if (e.y > 0) {
this.content.y - this.content.anchorY * this.content.height + e.y > this._bottomBoundary && (n = "scroll-to-bottom");
} else if (e.y < 0) {
this.content.y - this.content.anchorY * this.content.height + this.content.height + e.y <= this._topBoundary && (n = "scroll-to-top");
}
if (e.x < 0) {
this.content.x - this.content.anchorX * this.content.width + this.content.width + e.x <= this._rightBoundary && (n = "scroll-to-right");
} else if (e.x > 0) {
this.content.x - this.content.anchorX * this.content.width + e.x >= this._leftBoundary && (n = "scroll-to-left");
}
this._moveContent(e, !1);
if (0 !== e.x || 0 !== e.y) {
if (!this._scrolling) {
this._scrolling = !0;
this._dispatchEvent("scroll-began");
}
this._dispatchEvent("scrolling");
}
-1 !== n && this._dispatchEvent(n);
},
_handlePressLogic: function() {
this._autoScrolling && this._dispatchEvent("scroll-ended");
this._autoScrolling = !1;
this._isBouncing = !1;
this._touchMovePreviousTimestamp = s();
this._touchMoveDisplacements.length = 0;
this._touchMoveTimeDeltas.length = 0;
this._onScrollBarTouchBegan();
},
_clampDelta: function(t) {
var e = this.content.getContentSize(), i = this._view.getContentSize();
e.width < i.width && (t.x = 0);
e.height < i.height && (t.y = 0);
return t;
},
_gatherTouchMove: function(t) {
t = this._clampDelta(t);
for (;this._touchMoveDisplacements.length >= 5; ) {
this._touchMoveDisplacements.shift();
this._touchMoveTimeDeltas.shift();
}
this._touchMoveDisplacements.push(t);
var e = s();
this._touchMoveTimeDeltas.push((e - this._touchMovePreviousTimestamp) / 1e3);
this._touchMovePreviousTimestamp = e;
},
_startBounceBackIfNeeded: function() {
if (!this.elastic) return !1;
var t = this._getHowMuchOutOfBoundary();
if ((t = this._clampDelta(t)).fuzzyEquals(cc.v2(0, 0), 1e-4)) return !1;
var e = Math.max(this.bounceDuration, 0);
this._startAutoScroll(t, e, !0);
if (!this._isBouncing) {
t.y > 0 && this._dispatchEvent("bounce-top");
t.y < 0 && this._dispatchEvent("bounce-bottom");
t.x > 0 && this._dispatchEvent("bounce-right");
t.x < 0 && this._dispatchEvent("bounce-left");
this._isBouncing = !0;
}
return !0;
},
_processInertiaScroll: function() {
if (!this._startBounceBackIfNeeded() && this.inertia) {
var t = this._calculateTouchMoveVelocity();
!t.fuzzyEquals(cc.v2(0, 0), 1e-4) && this.brake < 1 && this._startInertiaScroll(t);
}
this._onScrollBarTouchEnded();
},
_handleReleaseLogic: function(t) {
var e = t.getDelta();
this._gatherTouchMove(e);
this._processInertiaScroll();
if (this._scrolling) {
this._scrolling = !1;
this._autoScrolling || this._dispatchEvent("scroll-ended");
}
},
_isOutOfBoundary: function() {
return !this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1e-4);
},
_isNecessaryAutoScrollBrake: function() {
if (this._autoScrollBraking) return !0;
if (this._isOutOfBoundary()) {
if (!this._autoScrollCurrentlyOutOfBoundary) {
this._autoScrollCurrentlyOutOfBoundary = !0;
this._autoScrollBraking = !0;
this._autoScrollBrakingStartPosition = this.getContentPosition();
return !0;
}
} else this._autoScrollCurrentlyOutOfBoundary = !1;
return !1;
},
getScrollEndedEventTiming: function() {
return 1e-4;
},
_processAutoScrolling: function(t) {
var e = this._isNecessaryAutoScrollBrake(), i = e ? .05 : 1;
this._autoScrollAccumulatedTime += t * (1 / i);
var n = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
this._autoScrollAttenuate && (n = r(n));
var s = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(n)), a = Math.abs(n - 1) <= 1e-4;
if (Math.abs(n - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired) {
this._dispatchEvent("scroll-ended-with-threshold");
this._isScrollEndedWithThresholdEventFired = !0;
}
if (this.elastic) {
var o = s.sub(this._autoScrollBrakingStartPosition);
e && (o = o.mul(i));
s = this._autoScrollBrakingStartPosition.add(o);
} else {
var c = s.sub(this.getContentPosition()), h = this._getHowMuchOutOfBoundary(c);
if (!h.fuzzyEquals(cc.v2(0, 0), 1e-4)) {
s = s.add(h);
a = !0;
}
}
a && (this._autoScrolling = !1);
var l = s.sub(this.getContentPosition());
this._moveContent(this._clampDelta(l), a);
this._dispatchEvent("scrolling");
if (!this._autoScrolling) {
this._isBouncing = !1;
this._scrolling = !1;
this._dispatchEvent("scroll-ended");
}
},
_startInertiaScroll: function(t) {
var e = t.mul(.7);
this._startAttenuatingAutoScroll(e, t);
},
_calculateAttenuatedFactor: function(t) {
return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9));
},
_startAttenuatingAutoScroll: function(t, e) {
var i = this._calculateAutoScrollTimeByInitalSpeed(e.mag()), n = t.normalize(), r = this.content.getContentSize(), s = this._view.getContentSize(), a = r.width - s.width, o = r.height - s.height, c = this._calculateAttenuatedFactor(a), h = this._calculateAttenuatedFactor(o);
n = cc.v2(n.x * a * (1 - this.brake) * c, n.y * o * h * (1 - this.brake));
var l = t.mag(), u = n.mag() / l;
n = n.add(t);
if (this.brake > 0 && u > 7) {
u = Math.sqrt(u);
n = t.mul(u).add(t);
}
this.brake > 0 && u > 3 && (i *= u = 3);
0 === this.brake && u > 1 && (i *= u);
this._startAutoScroll(n, i, !0);
},
_calculateAutoScrollTimeByInitalSpeed: function(t) {
return Math.sqrt(Math.sqrt(t / 5));
},
_startAutoScroll: function(t, e, i) {
var n = this._flattenVectorByDirection(t);
this._autoScrolling = !0;
this._autoScrollTargetDelta = n;
this._autoScrollAttenuate = i;
this._autoScrollStartPosition = this.getContentPosition();
this._autoScrollTotalTime = e;
this._autoScrollAccumulatedTime = 0;
this._autoScrollBraking = !1;
this._isScrollEndedWithThresholdEventFired = !1;
this._autoScrollBrakingStartPosition = cc.v2(0, 0);
this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 1e-4) || (this._autoScrollCurrentlyOutOfBoundary = !0);
},
_calculateTouchMoveVelocity: function() {
var t = 0;
if ((t = this._touchMoveTimeDeltas.reduce((function(t, e) {
return t + e;
}), t)) <= 0 || t >= .5) return cc.v2(0, 0);
var e = cc.v2(0, 0);
e = this._touchMoveDisplacements.reduce((function(t, e) {
return t.add(e);
}), e);
return cc.v2(e.x * (1 - this.brake) / t, e.y * (1 - this.brake) / t);
},
_flattenVectorByDirection: function(t) {
var e = t;
e.x = this.horizontal ? e.x : 0;
e.y = this.vertical ? e.y : 0;
return e;
},
_moveContent: function(t, e) {
var i = this._flattenVectorByDirection(t), n = this.getContentPosition().add(i);
this.setContentPosition(n);
var r = this._getHowMuchOutOfBoundary();
this._updateScrollBar(r);
this.elastic && e && this._startBounceBackIfNeeded();
},
_getContentLeftBoundary: function() {
return this.getContentPosition().x - this.content.getAnchorPoint().x * this.content.getContentSize().width;
},
_getContentRightBoundary: function() {
var t = this.content.getContentSize();
return this._getContentLeftBoundary() + t.width;
},
_getContentTopBoundary: function() {
var t = this.content.getContentSize();
return this._getContentBottomBoundary() + t.height;
},
_getContentBottomBoundary: function() {
return this.getContentPosition().y - this.content.getAnchorPoint().y * this.content.getContentSize().height;
},
_getHowMuchOutOfBoundary: function(t) {
if ((t = t || cc.v2(0, 0)).fuzzyEquals(cc.v2(0, 0), 1e-4) && !this._outOfBoundaryAmountDirty) return this._outOfBoundaryAmount;
var e = cc.v2(0, 0);
this._getContentLeftBoundary() + t.x > this._leftBoundary ? e.x = this._leftBoundary - (this._getContentLeftBoundary() + t.x) : this._getContentRightBoundary() + t.x < this._rightBoundary && (e.x = this._rightBoundary - (this._getContentRightBoundary() + t.x));
this._getContentTopBoundary() + t.y < this._topBoundary ? e.y = this._topBoundary - (this._getContentTopBoundary() + t.y) : this._getContentBottomBoundary() + t.y > this._bottomBoundary && (e.y = this._bottomBoundary - (this._getContentBottomBoundary() + t.y));
if (t.fuzzyEquals(cc.v2(0, 0), 1e-4)) {
this._outOfBoundaryAmount = e;
this._outOfBoundaryAmountDirty = !1;
}
return e = this._clampDelta(e);
},
_updateScrollBar: function(t) {
this.horizontalScrollBar && this.horizontalScrollBar._onScroll(t);
this.verticalScrollBar && this.verticalScrollBar._onScroll(t);
},
_onScrollBarTouchBegan: function() {
this.horizontalScrollBar && this.horizontalScrollBar._onTouchBegan();
this.verticalScrollBar && this.verticalScrollBar._onTouchBegan();
},
_onScrollBarTouchEnded: function() {
this.horizontalScrollBar && this.horizontalScrollBar._onTouchEnded();
this.verticalScrollBar && this.verticalScrollBar._onTouchEnded();
},
_dispatchEvent: function(t) {
if ("scroll-ended" === t) this._scrollEventEmitMask = 0; else if ("scroll-to-top" === t || "scroll-to-bottom" === t || "scroll-to-left" === t || "scroll-to-right" === t) {
var e = 1 << o[t];
if (this._scrollEventEmitMask & e) return;
this._scrollEventEmitMask |= e;
}
cc.Component.EventHandler.emitEvents(this.scrollEvents, this, o[t]);
this.node.emit(t, this);
},
_adjustContentOutOfBoundary: function() {
this._outOfBoundaryAmountDirty = !0;
if (this._isOutOfBoundary()) {
var t = this._getHowMuchOutOfBoundary(cc.v2(0, 0)), e = this.getContentPosition().add(t);
if (this.content) {
this.content.setPosition(e);
this._updateScrollBar(0);
}
}
},
start: function() {
this._calculateBoundary();
this.content && cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
},
_hideScrollbar: function() {
this.horizontalScrollBar && this.horizontalScrollBar.hide();
this.verticalScrollBar && this.verticalScrollBar.hide();
},
_showScrollbar: function() {
this.horizontalScrollBar && this.horizontalScrollBar.show();
this.verticalScrollBar && this.verticalScrollBar.show();
},
onDisable: function() {
this._unregisterEvent();
if (this.content) {
this.content.off(n.SIZE_CHANGED, this._calculateBoundary, this);
this.content.off(n.SCALE_CHANGED, this._calculateBoundary, this);
if (this._view) {
this._view.off(n.POSITION_CHANGED, this._calculateBoundary, this);
this._view.off(n.SCALE_CHANGED, this._calculateBoundary, this);
this._view.off(n.SIZE_CHANGED, this._calculateBoundary, this);
}
}
this._hideScrollbar();
this.stopAutoScroll();
},
onEnable: function() {
this._registerEvent();
if (this.content) {
this.content.on(n.SIZE_CHANGED, this._calculateBoundary, this);
this.content.on(n.SCALE_CHANGED, this._calculateBoundary, this);
if (this._view) {
this._view.on(n.POSITION_CHANGED, this._calculateBoundary, this);
this._view.on(n.SCALE_CHANGED, this._calculateBoundary, this);
this._view.on(n.SIZE_CHANGED, this._calculateBoundary, this);
}
}
this._showScrollbar();
},
update: function(t) {
this._autoScrolling && this._processAutoScrolling(t);
}
});
cc.ScrollView = e.exports = c;
}), {
"../CCNode": 29,
"./CCViewGroup": 87
} ],
81: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("./CCComponent"), s = cc.Enum({
Horizontal: 0,
Vertical: 1
}), a = cc.Class({
name: "cc.Slider",
extends: r,
editor: !1,
ctor: function() {
this._offset = cc.v2();
this._touchHandle = !1;
this._dragging = !1;
},
properties: {
handle: {
default: null,
type: cc.Button,
tooltip: !1,
notify: function() {
0;
}
},
direction: {
default: s.Horizontal,
type: s,
tooltip: !1
},
progress: {
default: .5,
type: cc.Float,
range: [ 0, 1, .1 ],
slide: !0,
tooltip: !1,
notify: function() {
this._updateHandlePosition();
}
},
slideEvents: {
default: [],
type: cc.Component.EventHandler,
tooltip: !1
}
},
statics: {
Direction: s
},
__preload: function() {
this._updateHandlePosition();
},
onEnable: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
if (this.handle && this.handle.isValid) {
this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
}
},
onDisable: function() {
this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
if (this.handle && this.handle.isValid) {
this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
}
},
_onHandleDragStart: function(t) {
this._dragging = !0;
this._touchHandle = !0;
this._offset = this.handle.node.convertToNodeSpaceAR(t.touch.getLocation());
t.stopPropagation();
},
_onTouchBegan: function(t) {
if (this.handle) {
this._dragging = !0;
this._touchHandle || this._handleSliderLogic(t.touch);
t.stopPropagation();
}
},
_onTouchMoved: function(t) {
if (this._dragging) {
this._handleSliderLogic(t.touch);
t.stopPropagation();
}
},
_onTouchEnded: function(t) {
this._dragging = !1;
this._touchHandle = !1;
this._offset = cc.v2();
t.stopPropagation();
},
_onTouchCancelled: function(t) {
this._dragging = !1;
t.stopPropagation();
},
_handleSliderLogic: function(t) {
this._updateProgress(t);
this._emitSlideEvent();
},
_emitSlideEvent: function() {
cc.Component.EventHandler.emitEvents(this.slideEvents, this);
this.node.emit("slide", this);
},
_updateProgress: function(t) {
if (this.handle) {
var e = this.node.convertToNodeSpace(t.getLocation());
this.direction === s.Horizontal ? this.progress = n.clamp01((e.x - this._offset.x) / this.node.width) : this.progress = n.clamp01((e.y - this._offset.y) / this.node.height);
}
},
_updateHandlePosition: function() {
if (this.handle) {
var t;
t = this.direction === s.Horizontal ? cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0) : cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
var e = this.node.convertToWorldSpaceAR(t);
this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(e);
}
}
});
cc.Slider = e.exports = a;
}), {
"../utils/misc": 216,
"./CCComponent": 67
} ],
82: [ (function(t, e, i) {
var n = t("../utils/misc"), r = t("../CCNode").EventType, s = t("./CCRenderComponent"), a = t("../renderer/render-flow"), o = t("../renderer/render-engine"), c = o.SpriteMaterial, h = o.GraySpriteMaterial, l = t("../renderer/utils/dynamic-atlas/manager"), u = cc.Enum({
SIMPLE: 0,
SLICED: 1,
TILED: 2,
FILLED: 3,
MESH: 4
}), f = cc.Enum({
HORIZONTAL: 0,
VERTICAL: 1,
RADIAL: 2
}), _ = cc.Enum({
CUSTOM: 0,
TRIMMED: 1,
RAW: 2
}), d = cc.Enum({
NORMAL: 0,
GRAY: 1
}), p = cc.Class({
name: "cc.Sprite",
extends: s,
mixins: [ s.BlendFactorPolyfill ],
ctor: function() {
this._assembler = null;
this._graySpriteMaterial = null;
this._spriteMaterial = null;
},
editor: !1,
properties: {
_spriteFrame: {
default: null,
type: cc.SpriteFrame
},
_type: u.SIMPLE,
_sizeMode: _.TRIMMED,
_fillType: 0,
_fillCenter: cc.v2(0, 0),
_fillStart: 0,
_fillRange: 0,
_isTrimmedMode: !0,
_state: 0,
_atlas: {
default: null,
type: cc.SpriteAtlas,
tooltip: !1,
editorOnly: !0,
visible: !0,
animatable: !1
},
spriteFrame: {
get: function() {
return this._spriteFrame;
},
set: function(t, e) {
var i = this._spriteFrame;
if (i !== t) {
this._spriteFrame = t;
this.markForUpdateRenderData(!1);
this._applySpriteFrame(i);
0;
}
},
type: cc.SpriteFrame
},
type: {
get: function() {
return this._type;
},
set: function(t) {
if (this._type !== t) {
this.destroyRenderData(this._renderData);
this._renderData = null;
this._type = t;
this._updateAssembler();
}
},
type: u,
animatable: !1,
tooltip: !1
},
fillType: {
get: function() {
return this._fillType;
},
set: function(t) {
if (t !== this._fillType) {
if (t === f.RADIAL || this._fillType === f.RADIAL) {
this.destroyRenderData(this._renderData);
this._renderData = null;
} else this._renderData && this.markForUpdateRenderData(!0);
this._fillType = t;
this._updateAssembler();
}
},
type: f,
tooltip: !1
},
fillCenter: {
get: function() {
return this._fillCenter;
},
set: function(t) {
this._fillCenter.x = t.x;
this._fillCenter.y = t.y;
this._type === u.FILLED && this._renderData && this.markForUpdateRenderData(!0);
},
tooltip: !1
},
fillStart: {
get: function() {
return this._fillStart;
},
set: function(t) {
this._fillStart = n.clampf(t, -1, 1);
this._type === u.FILLED && this._renderData && this.markForUpdateRenderData(!0);
},
tooltip: !1
},
fillRange: {
get: function() {
return this._fillRange;
},
set: function(t) {
this._fillRange = n.clampf(t, -1, 1);
this._type === u.FILLED && this._renderData && this.markForUpdateRenderData(!0);
},
tooltip: !1
},
trim: {
get: function() {
return this._isTrimmedMode;
},
set: function(t) {
if (this._isTrimmedMode !== t) {
this._isTrimmedMode = t;
this._type !== u.SIMPLE && this._type !== u.MESH || !this._renderData || this.markForUpdateRenderData(!0);
}
},
animatable: !1,
tooltip: !1
},
sizeMode: {
get: function() {
return this._sizeMode;
},
set: function(t) {
this._sizeMode = t;
t !== _.CUSTOM && this._applySpriteSize();
},
animatable: !1,
type: _,
tooltip: !1
}
},
statics: {
FillType: f,
Type: u,
SizeMode: _,
State: d
},
setVisible: function(t) {
this.enabled = t;
},
setState: function(t) {
if (this._state !== t) {
this._state = t;
this._activateMaterial();
}
},
getState: function() {
return this._state;
},
onEnable: function() {
this._super();
if (!this._spriteFrame || !this._spriteFrame.textureLoaded()) {
this.disableRender();
if (this._spriteFrame) {
this._spriteFrame.once("load", this._onTextureLoaded, this);
this._spriteFrame.ensureLoadTexture();
}
}
this._updateAssembler();
this._activateMaterial();
this.node.on(r.SIZE_CHANGED, this._onNodeSizeDirty, this);
this.node.on(r.ANCHOR_CHANGED, this._onNodeSizeDirty, this);
},
onDisable: function() {
this._super();
this.node.off(r.SIZE_CHANGED, this._onNodeSizeDirty, this);
this.node.off(r.ANCHOR_CHANGED, this._onNodeSizeDirty, this);
},
_onNodeSizeDirty: function() {
this._renderData && this.markForUpdateRenderData(!0);
},
_updateAssembler: function() {
var t = p._assembler.getAssembler(this);
if (this._assembler !== t) {
this._assembler = t;
this._renderData = null;
}
if (!this._renderData) {
this._renderData = this._assembler.createData(this);
this._renderData.material = this._material;
this.markForUpdateRenderData(!0);
}
},
_activateMaterial: function() {
var t = this._spriteFrame;
if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
var e = void 0;
if (this._state === d.GRAY) {
this._graySpriteMaterial || (this._graySpriteMaterial = new h());
e = this._graySpriteMaterial;
} else {
this._spriteMaterial || (this._spriteMaterial = new c());
e = this._spriteMaterial;
}
e.useColor = !1;
if (t && t.textureLoaded()) {
var i = t.getTexture();
if (e.texture !== i) {
e.texture = i;
this._updateMaterial(e);
} else e !== this._material && this._updateMaterial(e);
this._renderData && (this._renderData.material = e);
this.node._renderFlag |= a.FLAG_COLOR;
this.markForUpdateRenderData(!0);
this.markForRender(!0);
} else this.disableRender();
} else {
this.markForUpdateRenderData(!0);
this.markForRender(!0);
}
},
_updateMaterial: function(t) {
this._material = t;
this._updateBlendFunc();
t.updateHash();
},
_applyAtlas: !1,
_canRender: function() {
if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
if (!this._enabled) return !1;
} else if (!this._enabled || !this._material || !this.node._activeInHierarchy) return !1;
var t = this._spriteFrame;
return !(!t || !t.textureLoaded());
},
markForUpdateRenderData: function(t) {
if (t && this._canRender()) {
this.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
var e = this._renderData;
if (e) {
e.uvDirty = !0;
e.vertDirty = !0;
}
} else t || (this.node._renderFlag &= ~a.FLAG_UPDATE_RENDER_DATA);
},
_applySpriteSize: function() {
if (this._spriteFrame) {
if (_.RAW === this._sizeMode) {
var t = this._spriteFrame.getOriginalSize();
this.node.setContentSize(t);
} else if (_.TRIMMED === this._sizeMode) {
var e = this._spriteFrame.getRect();
this.node.setContentSize(e.width, e.height);
}
this._activateMaterial();
}
},
_onTextureLoaded: function() {
this.isValid && this._applySpriteSize();
},
_applySpriteFrame: function(t) {
t && t.off && t.off("load", this._onTextureLoaded, this);
var e = this._spriteFrame;
e && (this._material && this._material._texture) === (e && e._texture) || this.markForRender(!1);
if (e) if (t && e._texture === t._texture) this._applySpriteSize(); else if (e.textureLoaded()) this._onTextureLoaded(null); else {
e.once("load", this._onTextureLoaded, this);
e.ensureLoadTexture();
}
0;
},
_resized: !1,
_calDynamicAtlas: function() {
if (this._spriteFrame) {
if (!this._spriteFrame._original && l) {
var t = l.insertSpriteFrame(this._spriteFrame);
t && this._spriteFrame._setDynamicAtlasFrame(t);
}
this._material._texture !== this._spriteFrame._texture && this._activateMaterial();
}
}
});
0;
cc.Sprite = e.exports = p;
}), {
"../CCNode": 29,
"../renderer/render-engine": 176,
"../renderer/render-flow": 177,
"../renderer/utils/dynamic-atlas/manager": 179,
"../utils/misc": 216,
"./CCRenderComponent": 77
} ],
83: [ (function(t, e, i) {
var n = cc.Enum({
NONE: 0,
CHECKBOX: 1,
TEXT_ATLAS: 2,
SLIDER_BAR: 3,
LIST_VIEW: 4,
PAGE_VIEW: 5
}), r = cc.Enum({
VERTICAL: 0,
HORIZONTAL: 1
}), s = cc.Enum({
TOP: 0,
CENTER: 1,
BOTTOM: 2
}), a = cc.Enum({
LEFT: 0,
CENTER: 1,
RIGHT: 2
}), o = cc.Class({
name: "cc.StudioComponent",
extends: cc.Component,
editor: !1,
properties: !1,
statics: {
ComponentType: n,
ListDirection: r,
VerticalAlign: s,
HorizontalAlign: a
}
}), c = t("../utils/prefab-helper");
o.PlaceHolder = cc.Class({
name: "cc.StudioComponent.PlaceHolder",
extends: cc.Component,
properties: {
_baseUrl: "",
nestedPrefab: cc.Prefab
},
onLoad: function() {
this.nestedPrefab && this._replaceWithNestedPrefab();
},
_replaceWithNestedPrefab: function() {
var t = this.node, e = t._prefab;
e.root = t;
e.asset = this.nestedPrefab;
c.syncWithPrefab(t);
}
});
cc.StudioComponent = e.exports = o;
var h = cc.Class({
name: "cc.StudioWidget",
extends: cc.Widget,
editor: !1,
_validateTargetInDEV: function() {}
});
cc.StudioWidget = e.exports = h;
}), {
"../utils/prefab-helper": 219
} ],
84: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Toggle",
extends: t("./CCButton"),
editor: !1,
properties: {
_N$isChecked: !0,
isChecked: {
get: function() {
return this._N$isChecked;
},
set: function(t) {
if (t !== this._N$isChecked) {
var e = this.toggleGroup || this._toggleContainer;
if (!(e && e.enabled && this._N$isChecked) || e.allowSwitchOff) {
this._N$isChecked = t;
this._updateCheckMark();
e && e.enabled && e.updateToggles(this);
this._emitToggleEvents();
}
}
},
tooltip: !1
},
toggleGroup: {
default: null,
tooltip: !1,
type: t("./CCToggleGroup")
},
checkMark: {
default: null,
type: cc.Sprite,
tooltip: !1
},
checkEvents: {
default: [],
type: cc.Component.EventHandler
},
_resizeToTarget: {
animatable: !1,
set: function(t) {
t && this._resizeNodeToTargetNode();
}
}
},
onEnable: function() {
this._super();
this._registerToggleEvent();
this.toggleGroup && this.toggleGroup.enabledInHierarchy && this.toggleGroup.addToggle(this);
},
onDisable: function() {
this._super();
this._unregisterToggleEvent();
this.toggleGroup && this.toggleGroup.enabledInHierarchy && this.toggleGroup.removeToggle(this);
},
_hideCheckMark: function() {
this._N$isChecked = !1;
this._updateCheckMark();
},
toggle: function(t) {
this.isChecked = !this.isChecked;
},
check: function() {
this.isChecked = !0;
},
uncheck: function() {
this.isChecked = !1;
},
_updateCheckMark: function() {
this.checkMark && (this.checkMark.node.active = !!this.isChecked);
},
_updateDisabledState: function() {
this._super();
this.checkMark && this.checkMark.setState(0);
this.enableAutoGrayEffect && this.checkMark && !this.interactable && this.checkMark.setState(1);
},
_registerToggleEvent: function() {
this.node.on("click", this.toggle, this);
},
_unregisterToggleEvent: function() {
this.node.off("click", this.toggle, this);
},
_emitToggleEvents: function() {
this.node.emit("toggle", this);
this.checkEvents && cc.Component.EventHandler.emitEvents(this.checkEvents, this);
}
});
cc.Toggle = e.exports = n;
t("../platform/js").get(n.prototype, "_toggleContainer", (function() {
var t = this.node.parent;
return cc.Node.isNode(t) ? t.getComponent(cc.ToggleContainer) : null;
}));
}), {
"../platform/js": 154,
"./CCButton": 65,
"./CCToggleGroup": 86
} ],
85: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.ToggleContainer",
extends: cc.Component,
editor: !1,
properties: {
allowSwitchOff: {
tooltip: !1,
default: !1
},
checkEvents: {
default: [],
type: cc.Component.EventHandler
}
},
updateToggles: function(t) {
if (this.enabledInHierarchy && t.isChecked) {
this.toggleItems.forEach((function(e) {
e !== t && e.isChecked && e.enabled && e._hideCheckMark();
}));
this.checkEvents && cc.Component.EventHandler.emitEvents(this.checkEvents, t);
}
},
_allowOnlyOneToggleChecked: function() {
var t = !1;
this.toggleItems.forEach((function(e) {
t ? e._hideCheckMark() : e.isChecked && (t = !0);
}));
return t;
},
_makeAtLeastOneToggleChecked: function() {
if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
var t = this.toggleItems;
t.length > 0 && t[0].check();
}
},
onEnable: function() {
this.node.on("child-added", this._allowOnlyOneToggleChecked, this);
this.node.on("child-removed", this._makeAtLeastOneToggleChecked, this);
},
onDisable: function() {
this.node.off("child-added", this._allowOnlyOneToggleChecked, this);
this.node.off("child-removed", this._makeAtLeastOneToggleChecked, this);
},
start: function() {
this._makeAtLeastOneToggleChecked();
}
});
t("../platform/js").get(n.prototype, "toggleItems", (function() {
return this.node.getComponentsInChildren(cc.Toggle);
}));
cc.ToggleContainer = e.exports = n;
}), {
"../platform/js": 154
} ],
86: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.ToggleGroup",
extends: cc.Component,
ctor: function() {
this._toggleItems = [];
},
editor: !1,
properties: {
allowSwitchOff: {
tooltip: !1,
default: !1
},
toggleItems: {
get: function() {
return this._toggleItems;
}
}
},
updateToggles: function(t) {
this.enabledInHierarchy && this._toggleItems.forEach((function(e) {
t.isChecked && e !== t && e.isChecked && e.enabled && e._hideCheckMark();
}));
},
addToggle: function(t) {
-1 === this._toggleItems.indexOf(t) && this._toggleItems.push(t);
this._allowOnlyOneToggleChecked();
},
removeToggle: function(t) {
var e = this._toggleItems.indexOf(t);
e > -1 && this._toggleItems.splice(e, 1);
this._makeAtLeastOneToggleChecked();
},
_allowOnlyOneToggleChecked: function() {
var t = !1;
this._toggleItems.forEach((function(e) {
t && e.enabled && e._hideCheckMark();
e.isChecked && e.enabled && (t = !0);
}));
return t;
},
_makeAtLeastOneToggleChecked: function() {
this._allowOnlyOneToggleChecked() || this.allowSwitchOff || this._toggleItems.length > 0 && (this._toggleItems[0].isChecked = !0);
},
start: function() {
this._makeAtLeastOneToggleChecked();
}
}), r = !1;
t("../platform/js").get(cc, "ToggleGroup", (function() {
if (!r) {
cc.logID(1405, "cc.ToggleGroup", "cc.ToggleContainer");
r = !0;
}
return n;
}));
e.exports = n;
}), {
"../platform/js": 154
} ],
87: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.ViewGroup",
extends: t("./CCComponent")
});
cc.ViewGroup = e.exports = n;
}), {
"./CCComponent": 67
} ],
88: [ (function(t, e, i) {
var n = t("../base-ui/CCWidgetManager"), r = n.AlignMode, s = n._AlignFlags, a = s.TOP, o = s.MID, c = s.BOT, h = s.LEFT, l = s.CENTER, u = s.RIGHT, f = a | c, _ = h | u, d = cc.Class({
name: "cc.Widget",
extends: t("./CCComponent"),
editor: !1,
properties: {
target: {
get: function() {
return this._target;
},
set: function(t) {
this._target = t;
0;
},
type: cc.Node,
tooltip: !1
},
isAlignTop: {
get: function() {
return (this._alignFlags & a) > 0;
},
set: function(t) {
this._setAlign(a, t);
},
animatable: !1,
tooltip: !1
},
isAlignVerticalCenter: {
get: function() {
return (this._alignFlags & o) > 0;
},
set: function(t) {
if (t) {
this.isAlignTop = !1;
this.isAlignBottom = !1;
this._alignFlags |= o;
} else this._alignFlags &= ~o;
},
animatable: !1,
tooltip: !1
},
isAlignBottom: {
get: function() {
return (this._alignFlags & c) > 0;
},
set: function(t) {
this._setAlign(c, t);
},
animatable: !1,
tooltip: !1
},
isAlignLeft: {
get: function() {
return (this._alignFlags & h) > 0;
},
set: function(t) {
this._setAlign(h, t);
},
animatable: !1,
tooltip: !1
},
isAlignHorizontalCenter: {
get: function() {
return (this._alignFlags & l) > 0;
},
set: function(t) {
if (t) {
this.isAlignLeft = !1;
this.isAlignRight = !1;
this._alignFlags |= l;
} else this._alignFlags &= ~l;
},
animatable: !1,
tooltip: !1
},
isAlignRight: {
get: function() {
return (this._alignFlags & u) > 0;
},
set: function(t) {
this._setAlign(u, t);
},
animatable: !1,
tooltip: !1
},
isStretchWidth: {
get: function() {
return (this._alignFlags & _) === _;
},
visible: !1
},
isStretchHeight: {
get: function() {
return (this._alignFlags & f) === f;
},
visible: !1
},
top: {
get: function() {
return this._top;
},
set: function(t) {
this._top = t;
},
tooltip: !1
},
bottom: {
get: function() {
return this._bottom;
},
set: function(t) {
this._bottom = t;
},
tooltip: !1
},
left: {
get: function() {
return this._left;
},
set: function(t) {
this._left = t;
},
tooltip: !1
},
right: {
get: function() {
return this._right;
},
set: function(t) {
this._right = t;
},
tooltip: !1
},
horizontalCenter: {
get: function() {
return this._horizontalCenter;
},
set: function(t) {
this._horizontalCenter = t;
},
tooltip: !1
},
verticalCenter: {
get: function() {
return this._verticalCenter;
},
set: function(t) {
this._verticalCenter = t;
},
tooltip: !1
},
isAbsoluteHorizontalCenter: {
get: function() {
return this._isAbsHorizontalCenter;
},
set: function(t) {
this._isAbsHorizontalCenter = t;
},
animatable: !1
},
isAbsoluteVerticalCenter: {
get: function() {
return this._isAbsVerticalCenter;
},
set: function(t) {
this._isAbsVerticalCenter = t;
},
animatable: !1
},
isAbsoluteTop: {
get: function() {
return this._isAbsTop;
},
set: function(t) {
this._isAbsTop = t;
},
animatable: !1
},
isAbsoluteBottom: {
get: function() {
return this._isAbsBottom;
},
set: function(t) {
this._isAbsBottom = t;
},
animatable: !1
},
isAbsoluteLeft: {
get: function() {
return this._isAbsLeft;
},
set: function(t) {
this._isAbsLeft = t;
},
animatable: !1
},
isAbsoluteRight: {
get: function() {
return this._isAbsRight;
},
set: function(t) {
this._isAbsRight = t;
},
animatable: !1
},
alignMode: {
default: r.ON_WINDOW_RESIZE,
type: r,
tooltip: !1
},
_wasAlignOnce: {
default: void 0,
formerlySerializedAs: "isAlignOnce"
},
_target: null,
_alignFlags: 0,
_left: 0,
_right: 0,
_top: 0,
_bottom: 0,
_verticalCenter: 0,
_horizontalCenter: 0,
_isAbsLeft: !0,
_isAbsRight: !0,
_isAbsTop: !0,
_isAbsBottom: !0,
_isAbsHorizontalCenter: !0,
_isAbsVerticalCenter: !0,
_originalWidth: 0,
_originalHeight: 0
},
statics: {
AlignMode: r
},
onLoad: function() {
if (void 0 !== this._wasAlignOnce) {
this.alignMode = this._wasAlignOnce ? r.ONCE : r.ALWAYS;
this._wasAlignOnce = void 0;
}
},
onEnable: function() {
n.add(this);
},
onDisable: function() {
n.remove(this);
},
_validateTargetInDEV: !1,
_setAlign: function(t, e) {
if (e !== (this._alignFlags & t) > 0) {
var i = (t & _) > 0;
if (e) {
this._alignFlags |= t;
if (i) {
this.isAlignHorizontalCenter = !1;
if (this.isStretchWidth) {
this._originalWidth = this.node.width;
0;
}
} else {
this.isAlignVerticalCenter = !1;
if (this.isStretchHeight) {
this._originalHeight = this.node.height;
0;
}
}
0;
} else {
i ? this.isStretchWidth && (this.node.width = this._originalWidth) : this.isStretchHeight && (this.node.height = this._originalHeight);
this._alignFlags &= ~t;
}
}
},
updateAlignment: function() {
n.updateAlignment(this.node);
}
});
Object.defineProperty(d.prototype, "isAlignOnce", {
get: function() {
0;
return this.alignMode === r.ONCE;
},
set: function(t) {
0;
this.alignMode = t ? r.ONCE : r.ALWAYS;
}
});
cc.Widget = e.exports = d;
}), {
"../base-ui/CCWidgetManager": 51,
"./CCComponent": 67
} ],
89: [ (function(t, e, i) {
var n = t("./CCComponent"), r = void 0;
r = cc.sys.platform === cc.sys.BAIDU_GAME ? cc.Class({
name: "cc.SwanSubContextView",
extends: n,
editor: !1,
properties: {
_fps: 60,
fps: {
get: function() {
return this._fps;
},
set: function(t) {
if (this._fps !== t) {
this._fps = t;
this._updateInterval = 1 / t;
this._updateSubContextFrameRate();
}
},
tooltip: !1
}
},
ctor: function() {
this._sprite = null;
this._tex = new cc.Texture2D();
this._context = null;
this._previousUpdateTime = performance.now();
this._updateInterval = 0;
},
onLoad: function() {
if (swan.getOpenDataContext) {
this._updateInterval = 1e3 / this._fps;
this._context = swan.getOpenDataContext();
var t = this._context.canvas;
if (t) {
t.width = this.node.width;
t.height = this.node.height;
}
this._tex.setPremultiplyAlpha(!0);
this._tex.initWithElement(t);
this._sprite = this.node.getComponent(cc.Sprite);
if (!this._sprite) {
this._sprite = this.node.addComponent(cc.Sprite);
this._sprite.srcBlendFactor = cc.macro.BlendFactor.ONE;
}
this._sprite.spriteFrame = new cc.SpriteFrame(this._tex);
} else this.enabled = !1;
},
onEnable: function() {
this._runSubContextMainLoop();
this._registerNodeEvent();
this._updateSubContextFrameRate();
this.updateSubContextViewport();
},
onDisable: function() {
this._unregisterNodeEvent();
this._stopSubContextMainLoop();
},
update: function() {
var t = performance.now(), e = t - this._previousUpdateTime;
if (this._tex && this._context && !(e < this._updateInterval)) {
this._previousUpdateTime = t;
this._tex.initWithElement(this._context.canvas);
this._sprite._activateMaterial();
}
},
updateSubContextViewport: function() {
if (this._context) {
var t = this.node.getBoundingBoxToWorld(), e = cc.view._scaleX, i = cc.view._scaleY;
this._context.postMessage({
fromEngine: !0,
event: "viewport",
x: t.x * e + cc.view._viewportRect.x,
y: t.y * i + cc.view._viewportRect.y,
width: t.width * e,
height: t.height * i
});
}
},
_registerNodeEvent: function() {
this.node.on("position-changed", this.updateSubContextViewport, this);
this.node.on("scale-changed", this.updateSubContextViewport, this);
this.node.on("size-changed", this.updateSubContextViewport, this);
},
_unregisterNodeEvent: function() {
this.node.off("position-changed", this.updateSubContextViewport, this);
this.node.off("scale-changed", this.updateSubContextViewport, this);
this.node.off("size-changed", this.updateSubContextViewport, this);
},
_runSubContextMainLoop: function() {
this._context && this._context.postMessage({
fromEngine: !0,
event: "mainLoop",
value: !0
});
},
_stopSubContextMainLoop: function() {
this._context && this._context.postMessage({
fromEngine: !0,
event: "mainLoop",
value: !1
});
},
_updateSubContextFrameRate: function() {
this._context && this._context.postMessage({
fromEngine: !0,
event: "frameRate",
value: this._fps
});
}
}) : cc.Class({
name: "cc.SwanSubContextView",
extends: n
});
cc.SwanSubContextView = e.exports = r;
}), {
"./CCComponent": 67
} ],
90: [ (function(t, e, i) {
var n = t("./CCComponent"), r = void 0;
r = cc.Class({
name: "cc.WXSubContextView",
extends: n
});
cc.WXSubContextView = e.exports = r;
}), {
"./CCComponent": 67
} ],
91: [ (function(t, e, i) {
var n = t("../../platform/CCMacro"), r = t("../editbox/CCEditBoxImpl"), s = t("../CCLabel"), a = t("./types"), o = a.InputMode, c = a.InputFlag, h = a.KeyboardReturnType;
function l(t) {
return t.replace(/(?:^|\s)\S/g, (function(t) {
return t.toUpperCase();
}));
}
function u(t) {
return t.charAt(0).toUpperCase() + t.slice(1);
}
var f = cc.Class({
name: "cc.EditBox",
extends: cc.Component,
editor: !1,
properties: {
_useOriginalSize: !0,
_string: "",
string: {
tooltip: !1,
get: function() {
return this._string;
},
set: function(t) {
this.maxLength >= 0 && t.length >= this.maxLength && (t = t.slice(0, this.maxLength));
this._string = t;
this._impl && this._updateString(t);
}
},
backgroundImage: {
tooltip: !1,
default: null,
type: cc.SpriteFrame,
notify: function() {
this._createBackgroundSprite();
}
},
returnType: {
default: h.DEFAULT,
tooltip: !1,
displayName: "KeyboardReturnType",
type: h,
notify: function() {
this._impl && (this._impl.returnType = this.returnType);
}
},
inputFlag: {
tooltip: !1,
default: c.DEFAULT,
type: c,
notify: function() {
if (this._impl) {
this._impl.setInputFlag(this.inputFlag);
this._updateString(this._string);
}
}
},
inputMode: {
tooltip: !1,
default: o.ANY,
type: o,
notify: function() {
this._impl && this._impl.setInputMode(this.inputMode);
}
},
fontSize: {
tooltip: !1,
default: 20,
notify: function() {
this._textLabel && (this._textLabel.fontSize = this.fontSize);
this._impl && this._impl.setFontSize(this.fontSize);
}
},
lineHeight: {
tooltip: !1,
default: 40,
notify: function() {
this._textLabel && (this._textLabel.lineHeight = this.lineHeight);
}
},
fontColor: {
tooltip: !1,
default: cc.Color.WHITE,
notify: function() {
if (this._textLabel) {
this._textLabel.node.opacity = this.fontColor.a;
this._textLabel.node.color = this.fontColor;
}
this._impl && this._impl.setFontColor(this.fontColor);
}
},
placeholder: {
tooltip: !1,
default: "Enter text here...",
notify: function() {
this._placeholderLabel && (this._placeholderLabel.string = this.placeholder);
this._impl && this._impl.setPlaceholderText(this.placeholder);
}
},
placeholderFontSize: {
tooltip: !1,
default: 20,
notify: function() {
this._placeholderLabel && (this._placeholderLabel.fontSize = this.placeholderFontSize);
}
},
placeholderFontColor: {
tooltip: !1,
default: cc.Color.GRAY,
notify: function() {
if (this._placeholderLabel) {
this._placeholderLabel.node.color = this.placeholderFontColor;
this._placeholderLabel.node.opacity = this.placeholderFontColor.a;
}
}
},
maxLength: {
tooltip: !1,
default: 20,
notify: function() {
this._impl && this._impl.setMaxLength(this.maxLength);
}
},
stayOnTop: {
tooltip: !1,
default: !1,
notify: function() {
this._impl && this._updateStayOnTop();
}
},
_tabIndex: 0,
tabIndex: {
tooltip: !1,
get: function() {
return this._tabIndex;
},
set: function(t) {
this._tabIndex = t;
this._impl && this._impl.setTabIndex(t);
}
},
editingDidBegan: {
default: [],
type: cc.Component.EventHandler
},
textChanged: {
default: [],
type: cc.Component.EventHandler
},
editingDidEnded: {
default: [],
type: cc.Component.EventHandler
},
editingReturn: {
default: [],
type: cc.Component.EventHandler
}
},
statics: {
_EditBoxImpl: r,
KeyboardReturnType: h,
InputFlag: c,
InputMode: o
},
_init: function() {
this._createBackgroundSprite();
this._createLabels();
this.node.on(cc.Node.EventType.SIZE_CHANGED, this._resizeChildNodes, this);
var t = this._impl = new r();
t.setDelegate(this);
t.setNode(this.node);
t.setInputMode(this.inputMode);
t.setMaxLength(this.maxLength);
t.setInputFlag(this.inputFlag);
t.setReturnType(this.returnType);
t.setTabIndex(this.tabIndex);
t.setFontColor(this.fontColor);
t.setFontSize(this.fontSize);
t.setPlaceholderText(this.placeholder);
this._updateStayOnTop();
this._updateString(this.string);
this._syncSize();
},
_updateStayOnTop: function() {
this.stayOnTop ? this._hideLabels() : this._showLabels();
this._impl.stayOnTop(this.stayOnTop);
},
_syncSize: function() {
var t = this.node.getContentSize();
this._background.node.setAnchorPoint(this.node.getAnchorPoint());
this._background.node.setContentSize(t);
this._updateLabelPosition(t);
this._impl.setSize(t.width, t.height);
},
_updateLabelPosition: function(t) {
var e = this.node, i = -e.anchorX * e.width, r = -e.anchorY * e.height, s = this._placeholderLabel, a = this._textLabel;
a.node.setContentSize(t.width - 2, t.height);
s.node.setContentSize(t.width - 2, t.height);
s.lineHeight = t.height;
s.node.setPosition(i + 2, r + t.height);
a.node.setPosition(i + 2, r + t.height);
if (this.inputMode === o.ANY) {
s.verticalAlign = n.VerticalTextAlignment.TOP;
s.enableWrapText = !0;
a.verticalAlign = n.VerticalTextAlignment.TOP;
a.enableWrapText = !0;
} else {
s.verticalAlign = n.VerticalTextAlignment.CENTER;
s.enableWrapText = !1;
a.verticalAlign = n.VerticalTextAlignment.CENTER;
a.enableWrapText = !1;
}
},
_createBackgroundSprite: function() {
var t = this._background;
if (!t) {
var e = this.node.getChildByName("BACKGROUND_SPRITE");
e || (e = new cc.Node("BACKGROUND_SPRITE"));
(t = e.getComponent(cc.Sprite)) || (t = e.addComponent(cc.Sprite));
t.type = cc.Sprite.Type.SLICED;
e.parent = this.node;
this._background = t;
}
t.spriteFrame = this.backgroundImage;
},
_createLabels: function() {
if (!this._textLabel) {
var t = this.node.getChildByName("TEXT_LABEL");
t || (t = new cc.Node("TEXT_LABEL"));
t.color = this.fontColor;
t.parent = this.node;
t.setAnchorPoint(0, 1);
var e = t.getComponent(s);
e || (e = t.addComponent(s));
e.overflow = s.Overflow.CLAMP;
e.fontSize = this.fontSize;
e.lineHeight = this.lineHeight;
this._textLabel = e;
}
if (!this._placeholderLabel) {
var i = this.node.getChildByName("PLACEHOLDER_LABEL");
i || (i = new cc.Node("PLACEHOLDER_LABEL"));
i.color = this.placeholderFontColor;
i.parent = this.node;
i.setAnchorPoint(0, 1);
var n = i.getComponent(s);
n || (n = i.addComponent(s));
n.overflow = s.Overflow.CLAMP;
n.fontSize = this.placeholderFontSize;
n.string = this.placeholder;
this._placeholderLabel = n;
}
},
_resizeChildNodes: function() {
var t = this._textLabel.node, e = this._placeholderLabel.node, i = this._background.node;
t.x = -this.node.width / 2;
t.y = this.node.height / 2;
t.width = this.node.width;
t.height = this.node.height;
e.x = -this.node.width / 2;
e.y = this.node.height / 2;
e.width = this.node.width;
e.height = this.node.height;
i.width = this.node.width;
i.height = this.node.height;
},
_showLabels: function() {
var t = this._textLabel.string;
this._textLabel.node.active = "" !== t;
this._placeholderLabel.node.active = "" === t;
},
_hideLabels: function() {
this._textLabel.node.active = !1;
this._placeholderLabel.node.active = !1;
},
_updateString: function(t) {
var e = this._textLabel;
if (e) {
var i = t;
i && (i = this._updateLabelStringStyle(i));
e.string = i;
this._impl.setString(t);
this._impl._editing || this.stayOnTop || this._showLabels();
}
},
_updateLabelStringStyle: function(t, e) {
var i = this.inputFlag;
if (e || i !== c.PASSWORD) i === c.INITIAL_CAPS_ALL_CHARACTERS ? t = t.toUpperCase() : i === c.INITIAL_CAPS_WORD ? t = l(t) : i === c.INITIAL_CAPS_SENTENCE && (t = u(t)); else {
for (var n = "", r = t.length, s = 0; s < r; ++s) n += "●";
t = n;
}
return t;
},
editBoxEditingDidBegan: function() {
this._hideLabels();
cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
this.node.emit("editing-did-began", this);
},
editBoxEditingDidEnded: function() {
this.stayOnTop || this._showLabels();
cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
this.node.emit("editing-did-ended", this);
},
editBoxTextChanged: function(t) {
t = this._updateLabelStringStyle(t, !0);
this.string = t;
cc.Component.EventHandler.emitEvents(this.textChanged, t, this);
this.node.emit("text-changed", this);
},
editBoxEditingReturn: function() {
cc.Component.EventHandler.emitEvents(this.editingReturn, this);
this.node.emit("editing-return", this);
},
onDestroy: function() {
this._impl.clear();
},
onEnable: function() {
this._impl && this._impl.onEnable();
},
onDisable: function() {
this._impl && this._impl.onDisable();
},
__preload: function() {
this._registerEvent();
this._init();
},
_registerEvent: function() {
this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
},
_onTouchBegan: function(t) {
this._impl && this._impl._onTouchBegan(t.touch);
t.stopPropagation();
},
_onTouchCancel: function(t) {
this._impl && this._impl._onTouchCancel();
t.stopPropagation();
},
_onTouchEnded: function(t) {
this._impl && this._impl._onTouchEnded();
t.stopPropagation();
},
setFocus: function() {
this._impl && this._impl.setFocus();
},
isFocused: function() {
var t = !1;
this._impl && (t = this._impl.isFocused());
return t;
},
update: function() {
this._impl && this._impl.update();
}
});
cc.EditBox = e.exports = f;
}), {
"../../platform/CCMacro": 139,
"../CCLabel": 69,
"../editbox/CCEditBoxImpl": 92,
"./types": 93
} ],
92: [ (function(t, e, i) {
var n = t("../../platform/utils"), r = t("../../platform/CCMacro"), s = t("./types"), a = s.InputMode, o = s.InputFlag, c = s.KeyboardReturnType, h = cc.vmath, l = h.mat4.create(), u = h.mat4.create(), f = cc.v3(), _ = null, d = {
zoomInvalid: !1
};
cc.sys.OS_ANDROID !== cc.sys.os || cc.sys.browserType !== cc.sys.BROWSER_TYPE_SOUGOU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_360 || (d.zoomInvalid = !0);
var p = cc.Class({
ctor: function() {
this._delegate = null;
this._inputMode = -1;
this._inputFlag = -1;
this._returnType = c.DEFAULT;
this._maxLength = 50;
this._text = "";
this._placeholderText = "";
this._alwaysOnTop = !1;
this._size = cc.size();
this._node = null;
this._editing = !1;
this.__eventListeners = {};
this.__fullscreen = !1;
this.__autoResize = !1;
this.__rotateScreen = !1;
this.__orientationChanged = null;
this._m00 = 0;
this._m01 = 0;
this._m04 = 0;
this._m05 = 0;
this._m12 = 0;
this._m13 = 0;
this._w = 0;
this._h = 0;
},
onEnable: function() {
this._edTxt && (this._alwaysOnTop ? this._edTxt.style.display = "" : this._edTxt.style.display = "none");
},
onDisable: function() {
this._edTxt && (this._edTxt.style.display = "none");
},
setTabIndex: function(t) {
this._edTxt && (this._edTxt.tabIndex = t);
},
setFocus: function() {
this._beginEditing();
},
isFocused: function() {
if (this._edTxt) return document.activeElement === this._edTxt;
cc.warnID(4700);
return !1;
},
stayOnTop: function(t) {
if (this._alwaysOnTop !== t && this._edTxt) {
this._alwaysOnTop = t;
this._edTxt.style.display = t ? "" : "none";
}
},
setMaxLength: function(t) {
if (!isNaN(t)) {
t < 0 && (t = 65535);
this._maxLength = t;
this._edTxt && (this._edTxt.maxLength = t);
}
},
setString: function(t) {
this._text = t;
this._edTxt && (this._edTxt.value = t);
},
getString: function() {
return this._text;
},
setPlaceholderText: function(t) {
this._placeholderText = t;
},
getPlaceholderText: function() {
return this._placeholderText;
},
setDelegate: function(t) {
this._delegate = t;
},
setInputMode: function(t) {
if (this._inputMode !== t) {
this._inputMode = t;
this.createInput();
this._updateDomInputType();
this._updateSize(this._size.width, this._size.height);
}
},
setInputFlag: function(t) {
if (this._inputFlag !== t) {
this._inputFlag = t;
this._updateDomInputType();
var e = "none";
t === o.INITIAL_CAPS_ALL_CHARACTERS ? e = "uppercase" : t === o.INITIAL_CAPS_WORD && (e = "capitalize");
if (this._edTxt) {
this._edTxt.style.textTransform = e;
this._edTxt.value = this._text;
}
}
},
setReturnType: function(t) {
this._returnType = t;
this._updateDomInputType();
},
setFontSize: function(t) {
this._edFontSize = t || this._edFontSize;
this._edTxt && (this._edTxt.style.fontSize = this._edFontSize + "px");
},
setFontColor: function(t) {
this._textColor = t;
this._edTxt && (this._edTxt.style.color = t.toCSS("rgba"));
},
setSize: function(t, e) {
this._size.width = t;
this._size.height = e;
this._updateSize(t, e);
},
setNode: function(t) {
this._node = t;
},
update: function() {
this._updateMatrix();
},
clear: function() {
this._node = null;
this.setDelegate(null);
this.removeDom();
this.removeOrientationchangeEvent();
},
_onTouchBegan: function(t) {},
_onTouchEnded: function() {
this._beginEditing();
},
_beginEditing: function() {
var t = this;
cc.sys.isMobile && !this._editing && this.addOrientationchangeEvent();
this._edTxt && (function() {
t._edTxt.style.display = "";
var e = t;
function i() {
e._edTxt.focus();
}
cc.sys.browserType === cc.sys.BROWSER_TYPE_UC ? setTimeout(i, 400) : cc.sys.browserType === cc.sys.BROWSER_TYPE_FIREFOX ? setTimeout(i, 0) : i();
})();
this._editing = !0;
},
_endEditing: function() {
var t = this, e = function() {
!t._alwaysOnTop && t._edTxt && (t._edTxt.style.display = "none");
t._delegate && t._delegate.editBoxEditingDidEnded && t._delegate.editBoxEditingDidEnded();
};
this._editing && (cc.sys.isMobile ? setTimeout((function() {
t._endEditingOnMobile();
e();
}), 400) : e());
this._editing = !1;
},
_updateDomInputType: function() {
var t = this._inputMode, e = this._edTxt;
if (e) if (this._inputFlag !== o.PASSWORD) {
var i = e.type;
if (t === a.EMAIL_ADDR) i = "email"; else if (t === a.NUMERIC || t === a.DECIMAL) i = "number"; else if (t === a.PHONE_NUMBER) {
i = "number";
e.pattern = "[0-9]*";
} else if (t === a.URL) i = "url"; else {
i = "text";
this._returnType === c.SEARCH && (i = "search");
}
e.type = i;
} else e.type = "password";
},
_updateSize: function(t, e) {
var i = this._edTxt;
if (i) {
i.style.width = t + "px";
i.style.height = e + "px";
}
},
_updateMatrix: function() {
if (this._edTxt) {
var t = this._node;
t.getWorldMatrix(l);
if (this._m00 !== l.m00 || this._m01 !== l.m01 || this._m04 !== l.m04 || this._m05 !== l.m05 || this._m12 !== l.m12 || this._m13 !== l.m13 || this._w !== t._contentSize.width || this._h !== t._contentSize.height) {
this._m00 = l.m00;
this._m01 = l.m01;
this._m04 = l.m04;
this._m05 = l.m05;
this._m12 = l.m12;
this._m13 = l.m13;
this._w = t._contentSize.width;
this._h = t._contentSize.height;
var e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._viewportRect, r = cc.view._devicePixelRatio;
f.x = -t._anchorPoint.x * this._w;
f.y = -t._anchorPoint.y * this._h;
h.mat4.translate(l, l, f);
cc.Camera.findCamera(t).getWorldToCameraMatrix(u);
h.mat4.mul(u, u, l);
e /= r;
i /= r;
var s = cc.game.container, a = u.m00 * e, o = u.m01, c = u.m04, _ = u.m05 * i, p = s && s.style.paddingLeft && parseInt(s.style.paddingLeft);
p += n.x / r;
var m = s && s.style.paddingBottom && parseInt(s.style.paddingBottom);
m += n.y / r;
var g = u.m12 * e + p, v = u.m13 * i + m;
if (d.zoomInvalid) {
this._updateSize(this._size.width * a, this._size.height * _);
a = 1;
_ = 1;
}
var y = "matrix(" + a + "," + -o + "," + -c + "," + _ + "," + g + "," + -v + ")";
this._edTxt.style.transform = y;
this._edTxt.style["-webkit-transform"] = y;
this._edTxt.style["transform-origin"] = "0px 100% 0px";
this._edTxt.style["-webkit-transform-origin"] = "0px 100% 0px";
}
}
},
_adjustEditBoxPosition: function() {
this._node.getWorldMatrix(l);
var t = l.m13, e = cc.visibleRect.height, i = .5;
cc.visibleRect.width > e && (i = .7);
setTimeout((function() {
if (window.scrollY < 40 && t < e * i) {
var n = e * i - t - window.scrollY;
n < 35 && (n = 35);
n > 320 && (n = 320);
window.scrollTo(0, n);
}
}), 400);
}
}), m = p.prototype;
m.createInput = function() {
this._inputMode === a.ANY ? this._createDomTextArea() : this._createDomInput();
};
m._beginEditingOnMobile = function() {
this.addOrientationchangeEvent();
if (cc.view.isAutoFullScreenEnabled()) {
this.__fullscreen = !0;
cc.view.enableAutoFullScreen(!1);
cc.screen.exitFullScreen();
} else this.__fullscreen = !1;
this.__autoResize = cc.view._resizeWithBrowserSize;
cc.view.resizeWithBrowserSize(!1);
_ = this;
};
m._endEditingOnMobile = function() {
if (this.__rotateScreen) {
cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
cc.game.container.style.transform = "rotate(90deg)";
var t = cc.view, e = t._originalDesignResolutionSize.width, i = t._originalDesignResolutionSize.height;
e > 0 && t.setDesignResolutionSize(e, i, t._resolutionPolicy);
this.__rotateScreen = !1;
}
this.removeOrientationchangeEvent();
this.__fullscreen && cc.view.enableAutoFullScreen(!0);
this.__autoResize && _ === this && cc.view.resizeWithBrowserSize(!0);
};
function g(t, e) {
t.value.length > e._maxLength && (t.value = t.value.slice(0, e._maxLength));
if (e._delegate && e._delegate.editBoxTextChanged && e._text !== t.value) {
e._text = t.value;
e._delegate.editBoxTextChanged(e._text);
}
}
function v(t, e, i) {
var n = !1, s = !1, a = e.__eventListeners;
a.compositionstart = function() {
n = !0;
};
t.addEventListener("compositionstart", a.compositionstart);
a.compositionend = function() {
n = !1;
if (s) {
this.value = e._text;
s = !1;
}
g(this, e);
};
t.addEventListener("compositionend", a.compositionend);
a.input = function() {
n || g(this, e);
};
t.addEventListener("input", a.input);
a.focus = function() {
this.style.fontSize = e._edFontSize + "px";
this.style.color = e._textColor.toCSS("rgba");
e._alwaysOnTop && (e._editing = !0);
cc.sys.isMobile && e._beginEditingOnMobile();
e._delegate && e._delegate.editBoxEditingDidBegan && e._delegate.editBoxEditingDidBegan();
};
t.addEventListener("focus", a.focus);
a.keypress = function(t) {
if (t.keyCode === r.KEY.enter) {
t.stopPropagation();
e._delegate && e._delegate.editBoxEditingReturn && e._delegate.editBoxEditingReturn();
if (!i) {
e._text = this.value;
e._endEditing();
cc.game.canvas.focus();
}
}
};
t.addEventListener("keypress", a.keypress);
a.blur = function() {
n ? s = !0 : e._text = this.value;
e._endEditing();
};
t.addEventListener("blur", a.blur);
e._addDomToGameContainer();
}
m._createDomInput = function() {
this.removeDom();
var t = this._edTxt = document.createElement("input");
t.type = "text";
t.style.fontSize = this._edFontSize + "px";
t.style.color = "#000000";
t.style.border = 0;
t.style.background = "transparent";
t.style.width = "100%";
t.style.height = "100%";
t.style.active = 0;
t.style.outline = "medium";
t.style.padding = "0";
t.style.textTransform = "uppercase";
t.style.display = "none";
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "2px";
t.style["-moz-appearance"] = "textfield";
t.style.fontFamily = "Arial";
t.className = "cocosEditBox";
v(t, this);
return t;
};
m._createDomTextArea = function() {
this.removeDom();
var t = this._edTxt = document.createElement("textarea");
t.style.fontSize = this._edFontSize + "px";
t.style.color = "#000000";
t.style.border = 0;
t.style.background = "transparent";
t.style.width = "100%";
t.style.height = "100%";
t.style.active = 0;
t.style.outline = "medium";
t.style.padding = "0";
t.style.resize = "none";
t.style.textTransform = "uppercase";
t.style.overflow_y = "scroll";
t.style.display = "none";
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "2px";
t.style.fontFamily = "Arial";
t.className = "cocosEditBox";
v(t, this, !0);
return t;
};
m._addDomToGameContainer = function() {
cc.game.container.appendChild(this._edTxt);
};
m.removeDom = function() {
var t = this._edTxt;
if (t) {
var e = this.__eventListeners;
t.removeEventListener("compositionstart", e.compositionstart);
t.removeEventListener("compositionend", e.compositionend);
t.removeEventListener("input", e.input);
t.removeEventListener("focus", e.focus);
t.removeEventListener("keypress", e.keypress);
t.removeEventListener("blur", e.blur);
e.compositionstart = null;
e.compositionend = null;
e.input = null;
e.focus = null;
e.keypress = null;
e.blur = null;
n.contains(cc.game.container, t) && cc.game.container.removeChild(t);
}
this._edTxt = null;
};
m.addOrientationchangeEvent = function() {
var t = this;
t.__orientationChanged || (t.__orientationChanged = function() {
t._adjustEditBoxPosition();
});
window.addEventListener("orientationchange", t.__orientationChanged);
};
m.removeOrientationchangeEvent = function() {
if (this.__orientationChanged) {
window.removeEventListener("orientationchange", this.__orientationChanged);
this.__orientationChanged = null;
}
};
e.exports = p;
}), {
"../../platform/CCMacro": 139,
"../../platform/utils": 158,
"./types": 93
} ],
93: [ (function(t, e, i) {
var n = cc.Enum({
DEFAULT: 0,
DONE: 1,
SEND: 2,
SEARCH: 3,
GO: 4,
NEXT: 5
}), r = cc.Enum({
ANY: 0,
EMAIL_ADDR: 1,
NUMERIC: 2,
PHONE_NUMBER: 3,
URL: 4,
DECIMAL: 5,
SINGLE_LINE: 6
}), s = cc.Enum({
PASSWORD: 0,
SENSITIVE: 1,
INITIAL_CAPS_WORD: 2,
INITIAL_CAPS_SENTENCE: 3,
INITIAL_CAPS_ALL_CHARACTERS: 4,
DEFAULT: 5
});
e.exports = {
KeyboardReturnType: n,
InputMode: r,
InputFlag: s
};
}), {} ],
94: [ (function(t, e, i) {
t("./CCComponent");
t("./CCComponentEventHandler");
t("./missing-script");
var n = [ t("./CCSprite"), t("./CCWidget"), t("./CCCanvas"), t("./CCAudioSource"), t("./CCAnimation"), t("./CCButton"), t("./CCLabel"), t("./CCProgressBar"), t("./CCMask"), t("./CCScrollBar"), t("./CCScrollView"), t("./CCPageViewIndicator"), t("./CCPageView"), t("./CCSlider"), t("./CCLayout"), t("./editbox/CCEditBox"), t("./CCLabelOutline"), t("./CCRichText"), t("./CCToggleContainer"), t("./CCToggleGroup"), t("./CCToggle"), t("./CCBlockInputEvents"), t("./CCMotionStreak"), t("./WXSubContextView"), t("./SwanSubContextView") ];
e.exports = n;
}), {
"./CCAnimation": 62,
"./CCAudioSource": 63,
"./CCBlockInputEvents": 64,
"./CCButton": 65,
"./CCCanvas": 66,
"./CCComponent": 67,
"./CCComponentEventHandler": 68,
"./CCLabel": 69,
"./CCLabelOutline": 70,
"./CCLayout": 71,
"./CCMask": 72,
"./CCMotionStreak": 73,
"./CCPageView": 74,
"./CCPageViewIndicator": 75,
"./CCProgressBar": 76,
"./CCRichText": 78,
"./CCScrollBar": 79,
"./CCScrollView": 80,
"./CCSlider": 81,
"./CCSprite": 82,
"./CCToggle": 84,
"./CCToggleContainer": 85,
"./CCToggleGroup": 86,
"./CCWidget": 88,
"./SwanSubContextView": 89,
"./WXSubContextView": 90,
"./editbox/CCEditBox": 91,
"./missing-script": 95
} ],
95: [ (function(t, e, i) {
var n = cc.js, r = t("../utils/misc").BUILTIN_CLASSID_RE, s = cc.Class({
name: "cc.MissingClass",
properties: {
_$erialized: {
default: null,
visible: !1,
editorOnly: !0
}
}
}), a = cc.Class({
name: "cc.MissingScript",
extends: cc.Component,
editor: {
inspector: "packages://inspector/inspectors/comps/missing-script.js"
},
properties: {
compiled: {
default: !1,
serializable: !1
},
_$erialized: {
default: null,
visible: !1,
editorOnly: !0
}
},
ctor: !1,
statics: {
safeFindClass: function(t, e) {
var i = n._getClassById(t);
if (i) return i;
if (t) {
cc.deserialize.reportMissingClass(t);
return a.getMissingWrapper(t, e);
}
return null;
},
getMissingWrapper: function(t, e) {
return e.node && (/^[0-9a-zA-Z+/]{23}$/.test(t) || r.test(t)) ? a : s;
}
},
onLoad: function() {
cc.warnID(4600, this.node.name);
}
});
cc._MissingScript = e.exports = a;
}), {
"../utils/misc": 216
} ],
96: [ (function(t, e, i) {
var n = cc.js;
t("../event/event");
var r = function(t, e) {
cc.Event.call(this, cc.Event.MOUSE, e);
this._eventType = t;
this._button = 0;
this._x = 0;
this._y = 0;
this._prevX = 0;
this._prevY = 0;
this._scrollX = 0;
this._scrollY = 0;
};
n.extend(r, cc.Event);
var s = r.prototype;
s.setScrollData = function(t, e) {
this._scrollX = t;
this._scrollY = e;
};
s.getScrollX = function() {
return this._scrollX;
};
s.getScrollY = function() {
return this._scrollY;
};
s.setLocation = function(t, e) {
this._x = t;
this._y = e;
};
s.getLocation = function() {
return cc.v2(this._x, this._y);
};
s.getLocationInView = function() {
return cc.v2(this._x, cc.view._designResolutionSize.height - this._y);
};
s._setPrevCursor = function(t, e) {
this._prevX = t;
this._prevY = e;
};
s.getPreviousLocation = function() {
return cc.v2(this._prevX, this._prevY);
};
s.getDelta = function() {
return cc.v2(this._x - this._prevX, this._y - this._prevY);
};
s.getDeltaX = function() {
return this._x - this._prevX;
};
s.getDeltaY = function() {
return this._y - this._prevY;
};
s.setButton = function(t) {
this._button = t;
};
s.getButton = function() {
return this._button;
};
s.getLocationX = function() {
return this._x;
};
s.getLocationY = function() {
return this._y;
};
r.NONE = 0;
r.DOWN = 1;
r.UP = 2;
r.MOVE = 3;
r.SCROLL = 4;
r.BUTTON_LEFT = 0;
r.BUTTON_RIGHT = 2;
r.BUTTON_MIDDLE = 1;
r.BUTTON_4 = 3;
r.BUTTON_5 = 4;
r.BUTTON_6 = 5;
r.BUTTON_7 = 6;
r.BUTTON_8 = 7;
var a = function(t, e) {
cc.Event.call(this, cc.Event.TOUCH, e);
this._eventCode = 0;
this._touches = t || [];
this.touch = null;
this.currentTouch = null;
};
n.extend(a, cc.Event);
(s = a.prototype).getEventCode = function() {
return this._eventCode;
};
s.getTouches = function() {
return this._touches;
};
s._setEventCode = function(t) {
this._eventCode = t;
};
s._setTouches = function(t) {
this._touches = t;
};
s.setLocation = function(t, e) {
this.touch && this.touch.setTouchInfo(this.touch.getID(), t, e);
};
s.getLocation = function() {
return this.touch ? this.touch.getLocation() : cc.v2();
};
s.getLocationInView = function() {
return this.touch ? this.touch.getLocationInView() : cc.v2();
};
s.getPreviousLocation = function() {
return this.touch ? this.touch.getPreviousLocation() : cc.v2();
};
s.getStartLocation = function() {
return this.touch ? this.touch.getStartLocation() : cc.v2();
};
s.getID = function() {
return this.touch ? this.touch.getID() : null;
};
s.getDelta = function() {
return this.touch ? this.touch.getDelta() : cc.v2();
};
s.getDeltaX = function() {
return this.touch ? this.touch.getDelta().x : 0;
};
s.getDeltaY = function() {
return this.touch ? this.touch.getDelta().y : 0;
};
s.getLocationX = function() {
return this.touch ? this.touch.getLocationX() : 0;
};
s.getLocationY = function() {
return this.touch ? this.touch.getLocationY() : 0;
};
a.MAX_TOUCHES = 5;
a.BEGAN = 0;
a.MOVED = 1;
a.ENDED = 2;
a.CANCELED = 3;
var o = function(t, e) {
cc.Event.call(this, cc.Event.ACCELERATION, e);
this.acc = t;
};
n.extend(o, cc.Event);
var c = function(t, e, i) {
cc.Event.call(this, cc.Event.KEYBOARD, i);
this.keyCode = t;
this.isPressed = e;
};
n.extend(c, cc.Event);
cc.Event.EventMouse = r;
cc.Event.EventTouch = a;
cc.Event.EventAcceleration = o;
cc.Event.EventKeyboard = c;
e.exports = cc.Event;
}), {
"../event/event": 103
} ],
97: [ (function(t, e, i) {
var n = t("../platform/js");
cc.EventListener = function(t, e, i) {
this._onEvent = i;
this._type = t || 0;
this._listenerID = e || "";
this._registered = !1;
this._fixedPriority = 0;
this._node = null;
this._target = null;
this._paused = !0;
this._isEnabled = !0;
};
cc.EventListener.prototype = {
constructor: cc.EventListener,
_setPaused: function(t) {
this._paused = t;
},
_isPaused: function() {
return this._paused;
},
_setRegistered: function(t) {
this._registered = t;
},
_isRegistered: function() {
return this._registered;
},
_getType: function() {
return this._type;
},
_getListenerID: function() {
return this._listenerID;
},
_setFixedPriority: function(t) {
this._fixedPriority = t;
},
_getFixedPriority: function() {
return this._fixedPriority;
},
_setSceneGraphPriority: function(t) {
this._target = t;
this._node = t;
},
_getSceneGraphPriority: function() {
return this._node;
},
checkAvailable: function() {
return null !== this._onEvent;
},
clone: function() {
return null;
},
setEnabled: function(t) {
this._isEnabled = t;
},
isEnabled: function() {
return this._isEnabled;
},
retain: function() {},
release: function() {}
};
cc.EventListener.UNKNOWN = 0;
cc.EventListener.TOUCH_ONE_BY_ONE = 1;
cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
cc.EventListener.KEYBOARD = 3;
cc.EventListener.MOUSE = 4;
cc.EventListener.ACCELERATION = 6;
cc.EventListener.CUSTOM = 8;
var r = cc.EventListener.ListenerID = {
MOUSE: "__cc_mouse",
TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
KEYBOARD: "__cc_keyboard",
ACCELERATION: "__cc_acceleration"
}, s = function(t, e) {
this._onCustomEvent = e;
cc.EventListener.call(this, cc.EventListener.CUSTOM, t, this._callback);
};
n.extend(s, cc.EventListener);
n.mixin(s.prototype, {
_onCustomEvent: null,
_callback: function(t) {
null !== this._onCustomEvent && this._onCustomEvent(t);
},
checkAvailable: function() {
return cc.EventListener.prototype.checkAvailable.call(this) && null !== this._onCustomEvent;
},
clone: function() {
return new s(this._listenerID, this._onCustomEvent);
}
});
var a = function() {
cc.EventListener.call(this, cc.EventListener.MOUSE, r.MOUSE, this._callback);
};
n.extend(a, cc.EventListener);
n.mixin(a.prototype, {
onMouseDown: null,
onMouseUp: null,
onMouseMove: null,
onMouseScroll: null,
_callback: function(t) {
var e = cc.Event.EventMouse;
switch (t._eventType) {
case e.DOWN:
this.onMouseDown && this.onMouseDown(t);
break;

case e.UP:
this.onMouseUp && this.onMouseUp(t);
break;

case e.MOVE:
this.onMouseMove && this.onMouseMove(t);
break;

case e.SCROLL:
this.onMouseScroll && this.onMouseScroll(t);
}
},
clone: function() {
var t = new a();
t.onMouseDown = this.onMouseDown;
t.onMouseUp = this.onMouseUp;
t.onMouseMove = this.onMouseMove;
t.onMouseScroll = this.onMouseScroll;
return t;
},
checkAvailable: function() {
return !0;
}
});
var o = function() {
cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, r.TOUCH_ONE_BY_ONE, null);
this._claimedTouches = [];
};
n.extend(o, cc.EventListener);
n.mixin(o.prototype, {
constructor: o,
_claimedTouches: null,
swallowTouches: !1,
onTouchBegan: null,
onTouchMoved: null,
onTouchEnded: null,
onTouchCancelled: null,
setSwallowTouches: function(t) {
this.swallowTouches = t;
},
isSwallowTouches: function() {
return this.swallowTouches;
},
clone: function() {
var t = new o();
t.onTouchBegan = this.onTouchBegan;
t.onTouchMoved = this.onTouchMoved;
t.onTouchEnded = this.onTouchEnded;
t.onTouchCancelled = this.onTouchCancelled;
t.swallowTouches = this.swallowTouches;
return t;
},
checkAvailable: function() {
if (!this.onTouchBegan) {
cc.logID(1801);
return !1;
}
return !0;
}
});
var c = function() {
cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, r.TOUCH_ALL_AT_ONCE, null);
};
n.extend(c, cc.EventListener);
n.mixin(c.prototype, {
constructor: c,
onTouchesBegan: null,
onTouchesMoved: null,
onTouchesEnded: null,
onTouchesCancelled: null,
clone: function() {
var t = new c();
t.onTouchesBegan = this.onTouchesBegan;
t.onTouchesMoved = this.onTouchesMoved;
t.onTouchesEnded = this.onTouchesEnded;
t.onTouchesCancelled = this.onTouchesCancelled;
return t;
},
checkAvailable: function() {
if (null === this.onTouchesBegan && null === this.onTouchesMoved && null === this.onTouchesEnded && null === this.onTouchesCancelled) {
cc.logID(1802);
return !1;
}
return !0;
}
});
var h = function(t) {
this._onAccelerationEvent = t;
cc.EventListener.call(this, cc.EventListener.ACCELERATION, r.ACCELERATION, this._callback);
};
n.extend(h, cc.EventListener);
n.mixin(h.prototype, {
constructor: h,
_onAccelerationEvent: null,
_callback: function(t) {
this._onAccelerationEvent(t.acc, t);
},
checkAvailable: function() {
cc.assertID(this._onAccelerationEvent, 1803);
return !0;
},
clone: function() {
return new h(this._onAccelerationEvent);
}
});
var l = function() {
cc.EventListener.call(this, cc.EventListener.KEYBOARD, r.KEYBOARD, this._callback);
};
n.extend(l, cc.EventListener);
n.mixin(l.prototype, {
constructor: l,
onKeyPressed: null,
onKeyReleased: null,
_callback: function(t) {
t.isPressed ? this.onKeyPressed && this.onKeyPressed(t.keyCode, t) : this.onKeyReleased && this.onKeyReleased(t.keyCode, t);
},
clone: function() {
var t = new l();
t.onKeyPressed = this.onKeyPressed;
t.onKeyReleased = this.onKeyReleased;
return t;
},
checkAvailable: function() {
if (null === this.onKeyPressed && null === this.onKeyReleased) {
cc.logID(1800);
return !1;
}
return !0;
}
});
cc.EventListener.create = function(t) {
cc.assertID(t && t.event, 1900);
var e = t.event;
delete t.event;
var i = null;
if (e === cc.EventListener.TOUCH_ONE_BY_ONE) i = new o(); else if (e === cc.EventListener.TOUCH_ALL_AT_ONCE) i = new c(); else if (e === cc.EventListener.MOUSE) i = new a(); else if (e === cc.EventListener.CUSTOM) {
i = new s(t.eventName, t.callback);
delete t.eventName;
delete t.callback;
} else if (e === cc.EventListener.KEYBOARD) i = new l(); else if (e === cc.EventListener.ACCELERATION) {
i = new h(t.callback);
delete t.callback;
}
for (var n in t) i[n] = t[n];
return i;
};
e.exports = cc.EventListener;
}), {
"../platform/js": 154
} ],
98: [ (function(t, e, i) {
var n = t("../platform/js");
t("./CCEventListener");
var r = cc.EventListener.ListenerID, s = function() {
this._fixedListeners = [];
this._sceneGraphListeners = [];
this.gt0Index = 0;
};
s.prototype = {
constructor: s,
size: function() {
return this._fixedListeners.length + this._sceneGraphListeners.length;
},
empty: function() {
return 0 === this._fixedListeners.length && 0 === this._sceneGraphListeners.length;
},
push: function(t) {
0 === t._getFixedPriority() ? this._sceneGraphListeners.push(t) : this._fixedListeners.push(t);
},
clearSceneGraphListeners: function() {
this._sceneGraphListeners.length = 0;
},
clearFixedListeners: function() {
this._fixedListeners.length = 0;
},
clear: function() {
this._sceneGraphListeners.length = 0;
this._fixedListeners.length = 0;
},
getFixedPriorityListeners: function() {
return this._fixedListeners;
},
getSceneGraphPriorityListeners: function() {
return this._sceneGraphListeners;
}
};
var a = function(t) {
var e = cc.Event, i = t.type;
if (i === e.ACCELERATION) return r.ACCELERATION;
if (i === e.KEYBOARD) return r.KEYBOARD;
if (i.startsWith(e.MOUSE)) return r.MOUSE;
i.startsWith(e.TOUCH) && cc.logID(2e3);
return "";
}, o = {
DIRTY_NONE: 0,
DIRTY_FIXED_PRIORITY: 1,
DIRTY_SCENE_GRAPH_PRIORITY: 2,
DIRTY_ALL: 3,
_listenersMap: {},
_priorityDirtyFlagMap: {},
_nodeListenersMap: {},
_toAddedListeners: [],
_toRemovedListeners: [],
_dirtyListeners: {},
_inDispatch: 0,
_isEnabled: !1,
_renderOrderMap: {},
_internalCustomListenerIDs: [],
_setDirtyForNode: function(t) {
var e = this._nodeListenersMap[t._id];
if (void 0 !== e) for (var i = 0, n = e.length; i < n; i++) {
var r = e[i]._getListenerID();
null == this._dirtyListeners[r] && (this._dirtyListeners[r] = !0);
}
if (t.getChildren) {
var s = t.getChildren(), a = 0;
for (n = s ? s.length : 0; a < n; a++) this._setDirtyForNode(s[a]);
}
},
pauseTarget: function(t, e) {
if (t instanceof cc._BaseNode) {
var i, n, r = this._nodeListenersMap[t._id];
if (r) for (i = 0, n = r.length; i < n; i++) r[i]._setPaused(!0);
if (!0 === e) {
var s = t.getChildren();
for (i = 0, n = s ? s.length : 0; i < n; i++) this.pauseTarget(s[i], !0);
}
} else cc.warnID(3506);
},
resumeTarget: function(t, e) {
if (t instanceof cc._BaseNode) {
var i, n, r = this._nodeListenersMap[t._id];
if (r) for (i = 0, n = r.length; i < n; i++) r[i]._setPaused(!1);
this._setDirtyForNode(t);
if (!0 === e && t.getChildren) {
var s = t.getChildren();
for (i = 0, n = s ? s.length : 0; i < n; i++) this.resumeTarget(s[i], !0);
}
} else cc.warnID(3506);
},
_addListener: function(t) {
0 === this._inDispatch ? this._forceAddEventListener(t) : this._toAddedListeners.push(t);
},
_forceAddEventListener: function(t) {
var e = t._getListenerID(), i = this._listenersMap[e];
if (!i) {
i = new s();
this._listenersMap[e] = i;
}
i.push(t);
if (0 === t._getFixedPriority()) {
this._setDirty(e, this.DIRTY_SCENE_GRAPH_PRIORITY);
var n = t._getSceneGraphPriority();
null === n && cc.logID(3507);
this._associateNodeAndEventListener(n, t);
n.activeInHierarchy && this.resumeTarget(n);
} else this._setDirty(e, this.DIRTY_FIXED_PRIORITY);
},
_getListeners: function(t) {
return this._listenersMap[t];
},
_updateDirtyFlagForSceneGraph: function() {
var t = this._dirtyListeners;
for (var e in t) this._setDirty(e, this.DIRTY_SCENE_GRAPH_PRIORITY);
this._dirtyListeners = {};
},
_removeAllListenersInVector: function(t) {
if (t) for (var e, i = t.length - 1; i >= 0; i--) {
(e = t[i])._setRegistered(!1);
if (null != e._getSceneGraphPriority()) {
this._dissociateNodeAndEventListener(e._getSceneGraphPriority(), e);
e._setSceneGraphPriority(null);
}
0 === this._inDispatch && cc.js.array.removeAt(t, i);
}
},
_removeListenersForListenerID: function(t) {
var e, i = this._listenersMap[t];
if (i) {
var n = i.getFixedPriorityListeners(), r = i.getSceneGraphPriorityListeners();
this._removeAllListenersInVector(r);
this._removeAllListenersInVector(n);
delete this._priorityDirtyFlagMap[t];
if (!this._inDispatch) {
i.clear();
delete this._listenersMap[t];
}
}
var s, a = this._toAddedListeners;
for (e = a.length - 1; e >= 0; e--) (s = a[e]) && s._getListenerID() === t && cc.js.array.removeAt(a, e);
},
_sortEventListeners: function(t) {
var e = this.DIRTY_NONE, i = this._priorityDirtyFlagMap;
i[t] && (e = i[t]);
if (e !== this.DIRTY_NONE) {
i[t] = this.DIRTY_NONE;
e & this.DIRTY_FIXED_PRIORITY && this._sortListenersOfFixedPriority(t);
if (e & this.DIRTY_SCENE_GRAPH_PRIORITY) {
var n = cc.director.getScene();
n && this._sortListenersOfSceneGraphPriority(t, n);
}
}
},
_sortListenersOfSceneGraphPriority: function(t, e) {
var i = this._getListeners(t);
if (i) {
var n = i.getSceneGraphPriorityListeners();
n && 0 !== n.length && i.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
}
},
_sortEventListenersOfSceneGraphPriorityDes: function(t, e) {
var i = o._renderOrderMap, n = t._getSceneGraphPriority(), r = e._getSceneGraphPriority(), s = i[n._id], a = i[r._id];
return e && r && a ? t && n && s ? a - s : 1 : -1;
},
_sortListenersOfFixedPriority: function(t) {
var e = this._listenersMap[t];
if (e) {
var i = e.getFixedPriorityListeners();
if (i && 0 !== i.length) {
i.sort(this._sortListenersOfFixedPriorityAsc);
for (var n = 0, r = i.length; n < r && !(i[n]._getFixedPriority() >= 0); ) ++n;
e.gt0Index = n;
}
}
},
_sortListenersOfFixedPriorityAsc: function(t, e) {
return t._getFixedPriority() - e._getFixedPriority();
},
_onUpdateListeners: function(t) {
var e, i, n, r = t.getFixedPriorityListeners(), s = t.getSceneGraphPriorityListeners(), a = this._toRemovedListeners;
if (s) for (e = s.length - 1; e >= 0; e--) if (!(i = s[e])._isRegistered()) {
cc.js.array.removeAt(s, e);
-1 !== (n = a.indexOf(i)) && a.splice(n, 1);
}
if (r) for (e = r.length - 1; e >= 0; e--) if (!(i = r[e])._isRegistered()) {
cc.js.array.removeAt(r, e);
-1 !== (n = a.indexOf(i)) && a.splice(n, 1);
}
s && 0 === s.length && t.clearSceneGraphListeners();
r && 0 === r.length && t.clearFixedListeners();
},
frameUpdateListeners: function() {
var t = this._listenersMap, e = this._priorityDirtyFlagMap;
for (var i in t) if (t[i].empty()) {
delete e[i];
delete t[i];
}
var n = this._toAddedListeners;
if (0 !== n.length) {
for (var r = 0, s = n.length; r < s; r++) this._forceAddEventListener(n[r]);
n.length = 0;
}
0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners();
},
_updateTouchListeners: function(t) {
var e = this._inDispatch;
cc.assertID(e > 0, 3508);
if (!(e > 1)) {
var i;
(i = this._listenersMap[r.TOUCH_ONE_BY_ONE]) && this._onUpdateListeners(i);
(i = this._listenersMap[r.TOUCH_ALL_AT_ONCE]) && this._onUpdateListeners(i);
cc.assertID(1 === e, 3509);
var n = this._toAddedListeners;
if (0 !== n.length) {
for (var s = 0, a = n.length; s < a; s++) this._forceAddEventListener(n[s]);
this._toAddedListeners.length = 0;
}
0 !== this._toRemovedListeners.length && this._cleanToRemovedListeners();
}
},
_cleanToRemovedListeners: function() {
for (var t = this._toRemovedListeners, e = 0; e < t.length; e++) {
var i = t[e], n = this._listenersMap[i._getListenerID()];
if (n) {
var r, s = n.getFixedPriorityListeners(), a = n.getSceneGraphPriorityListeners();
a && -1 !== (r = a.indexOf(i)) && a.splice(r, 1);
s && -1 !== (r = s.indexOf(i)) && s.splice(r, 1);
}
}
t.length = 0;
},
_onTouchEventCallback: function(t, e) {
if (!t._isRegistered()) return !1;
var i = e.event, n = i.currentTouch;
i.currentTarget = t._node;
var r, s = !1, a = i.getEventCode(), c = cc.Event.EventTouch;
if (a === c.BEGAN) t.onTouchBegan && (s = t.onTouchBegan(n, i)) && t._registered && t._claimedTouches.push(n); else if (t._claimedTouches.length > 0 && -1 !== (r = t._claimedTouches.indexOf(n))) {
s = !0;
if (a === c.MOVED && t.onTouchMoved) t.onTouchMoved(n, i); else if (a === c.ENDED) {
t.onTouchEnded && t.onTouchEnded(n, i);
t._registered && t._claimedTouches.splice(r, 1);
} else if (a === c.CANCELLED) {
t.onTouchCancelled && t.onTouchCancelled(n, i);
t._registered && t._claimedTouches.splice(r, 1);
}
}
if (i.isStopped()) {
o._updateTouchListeners(i);
return !0;
}
if (s && t.swallowTouches) {
e.needsMutableSet && e.touches.splice(n, 1);
return !0;
}
return !1;
},
_dispatchTouchEvent: function(t) {
this._sortEventListeners(r.TOUCH_ONE_BY_ONE);
this._sortEventListeners(r.TOUCH_ALL_AT_ONCE);
var e = this._getListeners(r.TOUCH_ONE_BY_ONE), i = this._getListeners(r.TOUCH_ALL_AT_ONCE);
if (null !== e || null !== i) {
var n = t.getTouches(), s = cc.js.array.copy(n), a = {
event: t,
needsMutableSet: e && i,
touches: s,
selTouch: null
};
if (e) for (var o = 0; o < n.length; o++) {
t.currentTouch = n[o];
t._propagationStopped = t._propagationImmediateStopped = !1;
this._dispatchEventToListeners(e, this._onTouchEventCallback, a);
}
if (i && s.length > 0) {
this._dispatchEventToListeners(i, this._onTouchesEventCallback, {
event: t,
touches: s
});
if (t.isStopped()) return;
}
this._updateTouchListeners(t);
}
},
_onTouchesEventCallback: function(t, e) {
if (!t._registered) return !1;
var i = cc.Event.EventTouch, n = e.event, r = e.touches, s = n.getEventCode();
n.currentTarget = t._node;
s === i.BEGAN && t.onTouchesBegan ? t.onTouchesBegan(r, n) : s === i.MOVED && t.onTouchesMoved ? t.onTouchesMoved(r, n) : s === i.ENDED && t.onTouchesEnded ? t.onTouchesEnded(r, n) : s === i.CANCELLED && t.onTouchesCancelled && t.onTouchesCancelled(r, n);
if (n.isStopped()) {
o._updateTouchListeners(n);
return !0;
}
return !1;
},
_associateNodeAndEventListener: function(t, e) {
var i = this._nodeListenersMap[t._id];
if (!i) {
i = [];
this._nodeListenersMap[t._id] = i;
}
i.push(e);
},
_dissociateNodeAndEventListener: function(t, e) {
var i = this._nodeListenersMap[t._id];
if (i) {
cc.js.array.remove(i, e);
0 === i.length && delete this._nodeListenersMap[t._id];
delete this._renderOrderMap[t._id];
}
},
_dispatchEventToListeners: function(t, e, i) {
var n, r, s = !1, a = t.getFixedPriorityListeners(), o = t.getSceneGraphPriorityListeners(), c = 0;
if (a && 0 !== a.length) for (;c < t.gt0Index; ++c) if ((r = a[c]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
s = !0;
break;
}
if (o && !s) for (n = 0; n < o.length; n++) if ((r = o[n]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
s = !0;
break;
}
if (a && !s) for (;c < a.length; ++c) if ((r = a[c]).isEnabled() && !r._isPaused() && r._isRegistered() && e(r, i)) {
s = !0;
break;
}
},
_setDirty: function(t, e) {
var i = this._priorityDirtyFlagMap;
null == i[t] ? i[t] = e : i[t] = e | i[t];
},
_sortNumberAsc: function(t, e) {
return t - e;
},
_updateRenderOrder: function(t, e) {
void 0 !== this._nodeListenersMap[t._id] && (this._renderOrderMap[t._id] = e);
},
hasEventListener: function(t) {
return !!this._getListeners(t);
},
addListener: function(t, e) {
cc.assertID(t && e, 3503);
if (cc.js.isNumber(e) || e instanceof cc._BaseNode) {
if (t instanceof cc.EventListener) {
if (t._isRegistered()) {
cc.logID(3505);
return;
}
} else {
cc.assertID(!cc.js.isNumber(e), 3504);
t = cc.EventListener.create(t);
}
if (t.checkAvailable()) {
if (cc.js.isNumber(e)) {
if (0 === e) {
cc.logID(3500);
return;
}
t._setSceneGraphPriority(null);
t._setFixedPriority(e);
t._setRegistered(!0);
t._setPaused(!1);
this._addListener(t);
} else {
t._setSceneGraphPriority(e);
t._setFixedPriority(0);
t._setRegistered(!0);
this._addListener(t);
}
return t;
}
} else cc.warnID(3506);
},
addCustomListener: function(t, e) {
var i = new cc.EventListener.create({
event: cc.EventListener.CUSTOM,
eventName: t,
callback: e
});
this.addListener(i, 1);
return i;
},
removeListener: function(t) {
if (null != t) {
var e, i = this._listenersMap;
for (var n in i) {
var r = i[n], s = r.getFixedPriorityListeners(), a = r.getSceneGraphPriorityListeners();
(e = this._removeListenerInVector(a, t)) ? this._setDirty(t._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY) : (e = this._removeListenerInVector(s, t)) && this._setDirty(t._getListenerID(), this.DIRTY_FIXED_PRIORITY);
if (r.empty()) {
delete this._priorityDirtyFlagMap[t._getListenerID()];
delete i[n];
}
if (e) break;
}
if (!e) for (var o = this._toAddedListeners, c = o.length - 1; c >= 0; c--) {
var h = o[c];
if (h === t) {
cc.js.array.removeAt(o, c);
h._setRegistered(!1);
break;
}
}
}
},
_removeListenerInCallback: function(t, e) {
if (null == t) return !1;
for (var i = t.length - 1; i >= 0; i--) {
var n = t[i];
if (n._onCustomEvent === e || n._onEvent === e) {
n._setRegistered(!1);
if (null != n._getSceneGraphPriority()) {
this._dissociateNodeAndEventListener(n._getSceneGraphPriority(), n);
n._setSceneGraphPriority(null);
}
0 === this._inDispatch ? cc.js.array.removeAt(t, i) : this._toRemovedListeners.push(n);
return !0;
}
}
return !1;
},
_removeListenerInVector: function(t, e) {
if (null == t) return !1;
for (var i = t.length - 1; i >= 0; i--) {
var n = t[i];
if (n === e) {
n._setRegistered(!1);
if (null != n._getSceneGraphPriority()) {
this._dissociateNodeAndEventListener(n._getSceneGraphPriority(), n);
n._setSceneGraphPriority(null);
}
0 === this._inDispatch ? cc.js.array.removeAt(t, i) : this._toRemovedListeners.push(n);
return !0;
}
}
return !1;
},
removeListeners: function(t, e) {
var i = this;
if (cc.js.isNumber(t) || t instanceof cc._BaseNode) if (void 0 !== t._id) {
var n, s = i._nodeListenersMap[t._id];
if (s) {
var a = cc.js.array.copy(s);
for (n = 0; n < a.length; n++) i.removeListener(a[n]);
delete i._nodeListenersMap[t._id];
delete i._renderOrderMap[t._id];
}
var o = i._toAddedListeners;
for (n = 0; n < o.length; ) {
var c = o[n];
if (c._getSceneGraphPriority() === t) {
c._setSceneGraphPriority(null);
c._setRegistered(!1);
o.splice(n, 1);
} else ++n;
}
if (!0 === e) {
var h, l = t.getChildren();
for (n = 0, h = l.length; n < h; n++) i.removeListeners(l[n], !0);
}
} else t === cc.EventListener.TOUCH_ONE_BY_ONE ? i._removeListenersForListenerID(r.TOUCH_ONE_BY_ONE) : t === cc.EventListener.TOUCH_ALL_AT_ONCE ? i._removeListenersForListenerID(r.TOUCH_ALL_AT_ONCE) : t === cc.EventListener.MOUSE ? i._removeListenersForListenerID(r.MOUSE) : t === cc.EventListener.ACCELERATION ? i._removeListenersForListenerID(r.ACCELERATION) : t === cc.EventListener.KEYBOARD ? i._removeListenersForListenerID(r.KEYBOARD) : cc.logID(3501); else cc.warnID(3506);
},
removeCustomListeners: function(t) {
this._removeListenersForListenerID(t);
},
removeAllListeners: function() {
var t = this._listenersMap, e = this._internalCustomListenerIDs;
for (var i in t) -1 === e.indexOf(i) && this._removeListenersForListenerID(i);
},
setPriority: function(t, e) {
if (null != t) {
var i = this._listenersMap;
for (var n in i) {
var r = i[n].getFixedPriorityListeners();
if (r) {
if (-1 !== r.indexOf(t)) {
null != t._getSceneGraphPriority() && cc.logID(3502);
if (t._getFixedPriority() !== e) {
t._setFixedPriority(e);
this._setDirty(t._getListenerID(), this.DIRTY_FIXED_PRIORITY);
}
return;
}
}
}
}
},
setEnabled: function(t) {
this._isEnabled = t;
},
isEnabled: function() {
return this._isEnabled;
},
dispatchEvent: function(t) {
if (this._isEnabled) {
this._updateDirtyFlagForSceneGraph();
this._inDispatch++;
if (t && t.getType) if (t.getType().startsWith(cc.Event.TOUCH)) {
this._dispatchTouchEvent(t);
this._inDispatch--;
} else {
var e = a(t);
this._sortEventListeners(e);
var i = this._listenersMap[e];
if (null != i) {
this._dispatchEventToListeners(i, this._onListenerCallback, t);
this._onUpdateListeners(i);
}
this._inDispatch--;
} else cc.errorID(3511);
}
},
_onListenerCallback: function(t, e) {
e.currentTarget = t._target;
t._onEvent(e);
return e.isStopped();
},
dispatchCustomEvent: function(t, e) {
var i = new cc.Event.EventCustom(t);
i.setUserData(e);
this.dispatchEvent(i);
}
};
n.get(cc, "eventManager", (function() {
cc.warnID(1405, "cc.eventManager", "cc.EventTarget or cc.systemEvent");
return o;
}));
e.exports = o;
}), {
"../platform/js": 154,
"./CCEventListener": 97
} ],
99: [ (function(t, e, i) {
cc.Touch = function(t, e, i) {
this._lastModified = 0;
this.setTouchInfo(i, t, e);
};
cc.Touch.prototype = {
constructor: cc.Touch,
getLocation: function() {
return cc.v2(this._point.x, this._point.y);
},
getLocationX: function() {
return this._point.x;
},
getLocationY: function() {
return this._point.y;
},
getPreviousLocation: function() {
return cc.v2(this._prevPoint.x, this._prevPoint.y);
},
getStartLocation: function() {
return cc.v2(this._startPoint.x, this._startPoint.y);
},
getDelta: function() {
return this._point.sub(this._prevPoint);
},
getLocationInView: function() {
return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
},
getPreviousLocationInView: function() {
return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
},
getStartLocationInView: function() {
return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
},
getID: function() {
return this._id;
},
setTouchInfo: function(t, e, i) {
this._prevPoint = this._point;
this._point = cc.v2(e || 0, i || 0);
this._id = t;
if (!this._startPointCaptured) {
this._startPoint = cc.v2(this._point);
cc.view._convertPointWithScale(this._startPoint);
this._startPointCaptured = !0;
}
},
_setPoint: function(t, e) {
if (void 0 === e) {
this._point.x = t.x;
this._point.y = t.y;
} else {
this._point.x = t;
this._point.y = e;
}
},
_setPrevPoint: function(t, e) {
this._prevPoint = void 0 === e ? cc.v2(t.x, t.y) : cc.v2(t || 0, e || 0);
}
};
}), {} ],
100: [ (function(t, e, i) {
t("./CCEvent");
t("./CCTouch");
t("./CCEventListener");
var n = t("./CCEventManager");
e.exports = n;
0;
}), {
"./CCEvent": 96,
"./CCEventListener": 97,
"./CCEventManager": 98,
"./CCTouch": 99
} ],
101: [ (function(t, e, i) {
var n = cc.js, r = t("../platform/callbacks-invoker").CallbacksHandler;
function s() {
r.call(this);
}
n.extend(s, r);
s.prototype.invoke = function(t, e) {
var i = t.type, n = this._callbackTable[i];
if (n) {
var r = !n.isInvoking;
n.isInvoking = !0;
for (var s = n.callbacks, a = n.targets, o = 0, c = s.length; o < c; ++o) {
var h = s[o];
if (h) {
var l = a[o] || t.currentTarget;
h.call(l, t, e);
if (t._propagationImmediateStopped) break;
}
}
if (r) {
n.isInvoking = !1;
n.containCanceled && n.purgeCanceled();
}
}
};
e.exports = s;
0;
}), {
"../platform/callbacks-invoker": 147
} ],
102: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("../platform/callbacks-invoker"), s = n.array.fastRemove;
function a() {
r.call(this);
}
n.extend(a, r);
var o = a.prototype;
o.on = function(t, e, i) {
if (e) {
if (!this.hasEventListener(t, e, i)) {
this.add(t, e, i);
i && i.__eventTargets && i.__eventTargets.push(this);
}
return e;
}
cc.errorID(6800);
};
o.off = function(t, e, i) {
if (e) {
this.remove(t, e, i);
i && i.__eventTargets && s(i.__eventTargets, this);
} else this.removeAll(t);
};
o.targetOff = o.removeAll;
o.once = function(t, e, i) {
var n = "__ONCE_FLAG:" + t;
if (!this.hasEventListener(n, e, i)) {
var r = this, s = function(a, o, c, h, l) {
r.off(t, s, i);
r.remove(n, e, i);
e.call(this, a, o, c, h, l);
};
this.on(t, s, i);
this.add(n, e, i);
}
};
o.emit = r.prototype.invoke;
o.dispatchEvent = function(t) {
this.invoke(t.type, t);
};
cc.EventTarget = e.exports = a;
}), {
"../platform/callbacks-invoker": 147,
"../platform/js": 154
} ],
103: [ (function(t, e, i) {
var n = t("../platform/js");
cc.Event = function(t, e) {
this.type = t;
this.bubbles = !!e;
this.target = null;
this.currentTarget = null;
this.eventPhase = 0;
this._propagationStopped = !1;
this._propagationImmediateStopped = !1;
};
cc.Event.prototype = {
constructor: cc.Event,
unuse: function() {
this.type = cc.Event.NO_TYPE;
this.target = null;
this.currentTarget = null;
this.eventPhase = cc.Event.NONE;
this._propagationStopped = !1;
this._propagationImmediateStopped = !1;
},
reuse: function(t, e) {
this.type = t;
this.bubbles = e || !1;
},
stopPropagation: function() {
this._propagationStopped = !0;
},
stopPropagationImmediate: function() {
this._propagationImmediateStopped = !0;
},
isStopped: function() {
return this._propagationStopped || this._propagationImmediateStopped;
},
getCurrentTarget: function() {
return this.currentTarget;
},
getType: function() {
return this.type;
}
};
cc.Event.NO_TYPE = "no_type";
cc.Event.TOUCH = "touch";
cc.Event.MOUSE = "mouse";
cc.Event.KEYBOARD = "keyboard";
cc.Event.ACCELERATION = "acceleration";
cc.Event.NONE = 0;
cc.Event.CAPTURING_PHASE = 1;
cc.Event.AT_TARGET = 2;
cc.Event.BUBBLING_PHASE = 3;
var r = function(t, e) {
cc.Event.call(this, t, e);
this.detail = null;
};
n.extend(r, cc.Event);
r.prototype.reset = r;
r.prototype.setUserData = function(t) {
this.detail = t;
};
r.prototype.getUserData = function() {
return this.detail;
};
r.prototype.getEventName = cc.Event.prototype.getType;
var s = new n.Pool(10);
r.put = function(t) {
s.put(t);
};
r.get = function(t, e) {
var i = s._get();
i ? i.reset(t, e) : i = new r(t, e);
return i;
};
cc.Event.EventCustom = r;
e.exports = cc.Event;
}), {
"../platform/js": 154
} ],
104: [ (function(t, e, i) {
t("./event");
t("./event-listeners");
t("./event-target");
t("./system-event");
}), {
"./event": 103,
"./event-listeners": 101,
"./event-target": 102,
"./system-event": 105
} ],
105: [ (function(t, e, i) {
var n = t("../event/event-target"), r = t("../event-manager"), s = t("../platform/CCInputManager"), a = cc.Enum({
KEY_DOWN: "keydown",
KEY_UP: "keyup",
DEVICEMOTION: "devicemotion"
}), o = null, c = null, h = cc.Class({
name: "SystemEvent",
extends: n,
statics: {
EventType: a
},
setAccelerometerEnabled: function(t) {
0;
s.setAccelerometerEnabled(t);
},
setAccelerometerInterval: function(t) {
0;
s.setAccelerometerInterval(t);
},
on: function(t, e, i) {
0;
this._super(t, e, i);
if (t === a.KEY_DOWN || t === a.KEY_UP) {
o || (o = cc.EventListener.create({
event: cc.EventListener.KEYBOARD,
onKeyPressed: function(t, e) {
e.type = a.KEY_DOWN;
cc.systemEvent.dispatchEvent(e);
},
onKeyReleased: function(t, e) {
e.type = a.KEY_UP;
cc.systemEvent.dispatchEvent(e);
}
}));
r.hasEventListener(cc.EventListener.ListenerID.KEYBOARD) || r.addListener(o, 1);
}
if (t === a.DEVICEMOTION) {
c || (c = cc.EventListener.create({
event: cc.EventListener.ACCELERATION,
callback: function(t, e) {
e.type = a.DEVICEMOTION;
cc.systemEvent.dispatchEvent(e);
}
}));
r.hasEventListener(cc.EventListener.ListenerID.ACCELERATION) || r.addListener(c, 1);
}
},
off: function(t, e, i) {
0;
this._super(t, e, i);
if (o && (t === a.KEY_DOWN || t === a.KEY_UP)) {
var n = this.hasEventListener(a.KEY_DOWN), s = this.hasEventListener(a.KEY_UP);
n || s || r.removeListener(o);
}
c && t === a.DEVICEMOTION && r.removeListener(c);
}
});
cc.SystemEvent = e.exports = h;
cc.systemEvent = new cc.SystemEvent();
}), {
"../event-manager": 100,
"../event/event-target": 102,
"../platform/CCInputManager": 138
} ],
106: [ (function(t, e, i) {
var n = t("../components/CCRenderComponent"), r = t("../renderer/render-engine").SpriteMaterial, s = t("./types"), a = s.LineCap, o = s.LineJoin, c = cc.Class({
name: "cc.Graphics",
extends: n,
editor: !1,
ctor: function() {
this._impl = c._assembler.createImpl(this);
},
properties: {
_lineWidth: 1,
_strokeColor: cc.Color.BLACK,
_lineJoin: o.MITER,
_lineCap: a.BUTT,
_fillColor: cc.Color.WHITE,
_miterLimit: 10,
lineWidth: {
get: function() {
return this._lineWidth;
},
set: function(t) {
this._lineWidth = t;
this._impl.lineWidth = t;
}
},
lineJoin: {
get: function() {
return this._lineJoin;
},
set: function(t) {
this._lineJoin = t;
this._impl.lineJoin = t;
},
type: o
},
lineCap: {
get: function() {
return this._lineCap;
},
set: function(t) {
this._lineCap = t;
this._impl.lineCap = t;
},
type: a
},
strokeColor: {
get: function() {
return this._strokeColor;
},
set: function(t) {
this._impl.strokeColor = this._strokeColor = cc.color(t);
}
},
fillColor: {
get: function() {
return this._fillColor;
},
set: function(t) {
this._impl.fillColor = this._fillColor = cc.color(t);
}
},
miterLimit: {
get: function() {
return this._miterLimit;
},
set: function(t) {
this._miterLimit = t;
this._impl.miterLimit = t;
}
}
},
statics: {
LineJoin: o,
LineCap: a
},
onRestore: function() {
this._impl || (this._impl = c._assembler.createImpl());
},
onEnable: function() {
this._super();
this._activateMaterial();
},
onDestroy: function() {
this._super();
this._impl.clear(this, !0);
this._impl = null;
},
_activateMaterial: function() {
if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
this.node._renderFlag &= ~cc.RenderFlow.FLAG_RENDER;
this.node._renderFlag |= cc.RenderFlow.FLAG_CUSTOM_IA_RENDER;
if (!this._material) {
var t = new r();
t.useColor = !1;
t.useTexture = !1;
t.useModel = !0;
this._updateMaterial(t);
}
}
},
moveTo: function(t, e) {
0;
this._impl.moveTo(t, e);
},
lineTo: function(t, e) {
0;
this._impl.lineTo(t, e);
},
bezierCurveTo: function(t, e, i, n, r, s) {
this._impl.bezierCurveTo(t, e, i, n, r, s);
},
quadraticCurveTo: function(t, e, i, n) {
this._impl.quadraticCurveTo(t, e, i, n);
},
arc: function(t, e, i, n, r, s) {
this._impl.arc(t, e, i, n, r, s);
},
ellipse: function(t, e, i, n) {
this._impl.ellipse(t, e, i, n);
},
circle: function(t, e, i) {
this._impl.circle(t, e, i);
},
rect: function(t, e, i, n) {
this._impl.rect(t, e, i, n);
},
roundRect: function(t, e, i, n, r) {
this._impl.roundRect(t, e, i, n, r);
},
fillRect: function(t, e, i, n) {
this.rect(t, e, i, n);
this.fill();
},
clear: function(t) {
this._impl.clear(this, t);
},
close: function() {
this._impl.close();
},
stroke: function() {
c._assembler.stroke(this);
},
fill: function() {
c._assembler.fill(this);
}
});
cc.Graphics = e.exports = c;
}), {
"../components/CCRenderComponent": 77,
"../renderer/render-engine": 176,
"./types": 109
} ],
107: [ (function(t, e, i) {
var n = t("./types").PointFlags, r = Math.PI, s = Math.min, a = Math.max, o = Math.cos, c = Math.sin, h = Math.abs, l = Math.sign, u = .5522847493;
e.exports = {
arc: function(t, e, i, n, l, u, f) {
var _, d, p, m = 0, g = 0, v = 0, y = 0, T = 0, x = 0, E = 0, C = 0, A = 0, b = 0, S = 0, w = 0, D = 0;
g = u - l;
if (f = f || !1) if (h(g) >= 2 * r) g = 2 * r; else for (;g < 0; ) g += 2 * r; else if (h(g) >= 2 * r) g = 2 * -r; else for (;g > 0; ) g -= 2 * r;
p = 0 | a(1, s(h(g) / (.5 * r) + .5, 5));
v = h(4 / 3 * (1 - o(_ = g / p / 2)) / c(_));
f || (v = -v);
for (d = 0; d <= p; d++) {
y = o(m = l + g * (d / p));
T = c(m);
x = e + y * n;
E = i + T * n;
C = -T * n * v;
A = y * n * v;
0 === d ? t.moveTo(x, E) : t.bezierCurveTo(b + w, S + D, x - C, E - A, x, E);
b = x;
S = E;
w = C;
D = A;
}
},
ellipse: function(t, e, i, n, r) {
t.moveTo(e - n, i);
t.bezierCurveTo(e - n, i + r * u, e - n * u, i + r, e, i + r);
t.bezierCurveTo(e + n * u, i + r, e + n, i + r * u, e + n, i);
t.bezierCurveTo(e + n, i - r * u, e + n * u, i - r, e, i - r);
t.bezierCurveTo(e - n * u, i - r, e - n, i - r * u, e - n, i);
t.close();
},
roundRect: function(t, e, i, n, r, a) {
if (a < .1) t.rect(e, i, n, r); else {
var o = s(a, .5 * h(n)) * l(n), c = s(a, .5 * h(r)) * l(r);
t.moveTo(e, i + c);
t.lineTo(e, i + r - c);
t.bezierCurveTo(e, i + r - c * (1 - u), e + o * (1 - u), i + r, e + o, i + r);
t.lineTo(e + n - o, i + r);
t.bezierCurveTo(e + n - o * (1 - u), i + r, e + n, i + r - c * (1 - u), e + n, i + r - c);
t.lineTo(e + n, i + c);
t.bezierCurveTo(e + n, i + c * (1 - u), e + n - o * (1 - u), i, e + n - o, i);
t.lineTo(e + o, i);
t.bezierCurveTo(e + o * (1 - u), i, e, i + c * (1 - u), e, i + c);
t.close();
}
},
tesselateBezier: function t(e, i, r, s, a, o, c, l, u, f, _) {
var d, p, m, g, v, y, T, x, E, C, A, b, S, w, D, I;
if (!(f > 10)) {
v = .5 * (o + l);
y = .5 * (c + u);
T = .5 * ((d = .5 * (i + s)) + (m = .5 * (s + o)));
x = .5 * ((p = .5 * (r + a)) + (g = .5 * (a + c)));
if (((D = h((s - l) * (w = u - r) - (a - u) * (S = l - i))) + (I = h((o - l) * w - (c - u) * S))) * (D + I) < e._tessTol * (S * S + w * w)) e._addPoint(l, u, 0 === _ ? _ | n.PT_BEVEL : _); else {
t(e, i, r, d, p, T, x, A = .5 * (T + (E = .5 * (m + v))), b = .5 * (x + (C = .5 * (g + y))), f + 1, 0);
t(e, A, b, E, C, v, y, l, u, f + 1, _);
}
}
}
};
}), {
"./types": 109
} ],
108: [ (function(t, e, i) {
"use strict";
t("./graphics");
}), {
"./graphics": 106
} ],
109: [ (function(t, e, i) {
"use strict";
var n = cc.Enum({
BUTT: 0,
ROUND: 1,
SQUARE: 2
}), r = cc.Enum({
BEVEL: 0,
ROUND: 1,
MITER: 2
}), s = cc.Enum({
PT_CORNER: 1,
PT_LEFT: 2,
PT_BEVEL: 4,
PT_INNERBEVEL: 8
});
e.exports = {
LineCap: n,
LineJoin: r,
PointFlags: s
};
}), {} ],
110: [ (function(t, e, i) {
t("./platform");
t("./assets");
t("./CCNode");
t("./CCPrivateNode");
t("./CCScene");
t("./components");
t("./graphics");
t("./collider");
t("./collider/CCIntersection");
t("./physics");
t("./camera/CCCamera");
t("./utils/polyfill-3d");
t("./base-ui/CCWidgetManager");
}), {
"./CCNode": 29,
"./CCPrivateNode": 30,
"./CCScene": 31,
"./assets": 50,
"./base-ui/CCWidgetManager": 51,
"./camera/CCCamera": 52,
"./collider": 60,
"./collider/CCIntersection": 58,
"./components": 94,
"./graphics": 108,
"./physics": void 0,
"./platform": 151,
"./utils/polyfill-3d": 218
} ],
111: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("./pipeline"), o = i("./loading-items"), c = i("./asset-loader"), h = i("./downloader"), l = i("./loader"), u = i("./asset-table"), f = i("../platform/utils").callInNextTick, _ = i("./auto-release-utils"), d = new u();
var p = {
url: null,
raw: !1
};
function m(i) {
var n, r, s;
if ("object" === ("object" === (e = typeof i) ? t(i) : e)) {
r = i;
if (i.url) return r;
n = i.uuid;
} else {
r = {};
n = i;
}
s = r.type ? "uuid" === r.type : cc.AssetLibrary._uuidInSettings(n);
cc.AssetLibrary._getAssetInfoInRuntime(n, p);
r.url = s ? p.url : n;
if (p.url && "uuid" === r.type && p.raw) {
r.type = null;
r.isRawAsset = !0;
} else s || (r.isRawAsset = !0);
return r;
}
var g = [], v = [];
function y() {
var t = new c(), e = new h(), i = new l();
a.call(this, [ t, e, i ]);
this.assetLoader = t;
this.md5Pipe = null;
this.downloader = e;
this.loader = i;
this.onProgress = null;
this._autoReleaseSetting = s.createMap(!0);
0;
}
s.extend(y, a);
var T = y.prototype;
T.init = function(t) {};
T.getXMLHttpRequest = function() {
return window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("MSXML2.XMLHTTP");
};
T.addDownloadHandlers = function(t) {
this.downloader.addHandlers(t);
};
T.addLoadHandlers = function(t) {
this.loader.addHandlers(t);
};
T.load = function(t, e, i) {
0;
if (void 0 === i) {
i = e;
e = this.onProgress || null;
}
var n, r = this, s = !1;
if (!(t instanceof Array)) if (t) {
s = !0;
t = [ t ];
} else t = [];
g.length = 0;
for (var a = 0; a < t.length; ++a) {
var c = t[a];
if (c && c.id) {
cc.warnID(4920, c.id);
c.uuid || c.url || (c.url = c.id);
}
if ((n = m(c)).url || n.uuid) {
var h = this._cache[n.url];
g.push(h || n);
}
}
var l = o.create(this, e, (function(t, e) {
f((function() {
if (i) {
if (s) {
var a = n.url;
i.call(r, t, e.getContent(a));
} else i.call(r, t, e);
i = null;
}
e.destroy();
}));
}));
o.initQueueDeps(l);
l.append(g);
g.length = 0;
};
T.flowInDeps = function(t, e, i) {
v.length = 0;
for (var n = 0; n < e.length; ++n) {
var r = m(e[n]);
if (r.url || r.uuid) {
var s = this._cache[r.url];
s ? v.push(s) : v.push(r);
}
}
var a = o.create(this, t ? function(t, e, i) {
this._ownerQueue && this._ownerQueue.onProgress && this._ownerQueue._childOnProgress(i);
} : null, (function(e, n) {
i(e, n);
t && t.deps && (t.deps.length = 0);
n.destroy();
}));
if (t) {
var c = o.getQueue(t);
a._ownerQueue = c._ownerQueue || c;
}
var h = a.append(v, t);
v.length = 0;
return h;
};
T._resources = d;
T._getResUuid = function(t, e, i) {
if (!t) return null;
var n = t.indexOf("?");
-1 !== n && (t = t.substr(0, n));
var r = d.getUuid(t, e);
if (!r) {
var s = cc.path.extname(t);
if (s) {
t = t.slice(0, -s.length);
(r = d.getUuid(t, e)) && !i && cc.warnID(4901, t, s);
}
}
return r;
};
T._getReferenceKey = function(i) {
var n;
"object" === ("object" === (e = typeof i) ? t(i) : e) ? n = i._uuid || null : "string" === ("object" === (e = typeof i) ? t(i) : e) && (n = this._getResUuid(i, null, !0) || i);
if (!n) {
cc.warnID(4800, i);
return n;
}
cc.AssetLibrary._getAssetInfoInRuntime(n, p);
return this._cache[p.url] ? p.url : n;
};
T._urlNotFound = function(t, e, i) {
f((function() {
t = cc.url.normalize(t);
var n = (e ? s.getClassName(e) : "Asset") + ' in "resources/' + t + '" does not exist.';
i && i(new Error(n), []);
}));
};
T._parseLoadResArgs = function(t, e, i) {
if (void 0 === i) {
var n = t instanceof Array || s.isChildClassOf(t, cc.RawAsset);
if (e) {
i = e;
n && (e = this.onProgress || null);
} else if (void 0 === e && !n) {
i = t;
e = this.onProgress || null;
t = null;
}
if (void 0 !== e && !n) {
e = t;
t = null;
}
}
return {
type: t,
onProgress: e,
onComplete: i
};
};
T.loadRes = function(t, e, i, n) {
var r = this._parseLoadResArgs(e, i, n);
e = r.type;
i = r.onProgress;
n = r.onComplete;
var s = this, a = s._getResUuid(t, e);
a ? this.load({
type: "uuid",
uuid: a
}, i, (function(t, e) {
e && s.setAutoReleaseRecursively(a, !1);
n && n(t, e);
})) : s._urlNotFound(t, e, n);
};
T._loadResUuids = function(t, e, i, n) {
if (t.length > 0) {
var r = this, s = t.map((function(t) {
return {
type: "uuid",
uuid: t
};
}));
this.load(s, e, (function(t, e) {
if (i) {
for (var a = [], o = n && [], c = 0; c < s.length; ++c) {
var h = s[c].uuid, l = this._getReferenceKey(h), u = e.getContent(l);
if (u) {
r.setAutoReleaseRecursively(h, !1);
a.push(u);
o && o.push(n[c]);
}
}
n ? i(t, a, o) : i(t, a);
}
}));
} else i && f((function() {
n ? i(null, [], []) : i(null, []);
}));
};
T.loadResArray = function(t, e, i, n) {
var r = this._parseLoadResArgs(e, i, n);
e = r.type;
i = r.onProgress;
n = r.onComplete;
for (var s = [], a = e instanceof Array, o = 0; o < t.length; o++) {
var c = t[o], h = a ? e[o] : e, l = this._getResUuid(c, h);
if (!l) {
this._urlNotFound(c, h, n);
return;
}
s.push(l);
}
this._loadResUuids(s, i, n);
};
T.loadResDir = function(t, e, i, n) {
var r = this._parseLoadResArgs(e, i, n);
e = r.type;
i = r.onProgress;
n = r.onComplete;
var s = [], a = d.getUuidArray(t, e, s);
this._loadResUuids(a, i, n, s);
};
T.getRes = function(t, e) {
var i = this._cache[t];
if (!i) {
var n = this._getResUuid(t, e, !0);
if (!n) return null;
var r = this._getReferenceKey(n);
i = this._cache[r];
}
i && i.alias && (i = i.alias);
return i && i.complete ? i.content : null;
};
T.getResCount = function() {
return Object.keys(this._cache).length;
};
T.getDependsRecursively = function(t) {
if (t) {
var e = this._getReferenceKey(t), i = _.getDependsRecursively(e);
i.push(e);
return i;
}
return [];
};
T.release = function(t) {
if (Array.isArray(t)) for (var e = 0; e < t.length; e++) {
var i = t[e];
this.release(i);
} else if (t) {
var n = this._getReferenceKey(t), r = this.getItem(n);
if (r) {
this.removeItem(n);
if ((t = r.content) instanceof cc.Asset) {
var s = t.nativeUrl;
s && this.release(s);
t.destroy();
}
0;
}
}
};
T.releaseAsset = function(t) {
var e = t._uuid;
e && this.release(e);
};
T.releaseRes = function(t, e) {
var i = this._getResUuid(t, e);
i ? this.release(i) : cc.errorID(4914, t);
};
T.releaseResDir = function(t, e) {
for (var i = d.getUuidArray(t, e), n = 0; n < i.length; n++) {
var r = i[n];
this.release(r);
}
};
T.releaseAll = function() {
for (var t in this._cache) this.release(t);
};
T.removeItem = function(t) {
var e = a.prototype.removeItem.call(this, t);
delete this._autoReleaseSetting[t];
return e;
};
T.setAutoRelease = function(t, e) {
var i = this._getReferenceKey(t);
i && (this._autoReleaseSetting[i] = !!e);
};
T.setAutoReleaseRecursively = function(t, e) {
e = !!e;
var i = this._getReferenceKey(t);
if (i) {
this._autoReleaseSetting[i] = e;
for (var n = _.getDependsRecursively(i), r = 0; r < n.length; r++) {
var s = n[r];
this._autoReleaseSetting[s] = e;
}
} else 0;
};
T.isAutoRelease = function(t) {
var e = this._getReferenceKey(t);
return !!e && !!this._autoReleaseSetting[e];
};
cc.loader = new y();
0;
n.exports = cc.loader;
}), {
"../platform/js": 154,
"../platform/utils": 158,
"./asset-loader": 112,
"./asset-table": 113,
"./auto-release-utils": 115,
"./downloader": 117,
"./loader": 120,
"./loading-items": 121,
"./pipeline": 124,
"./released-asset-checker": 125
} ],
112: [ (function(t, e, i) {
t("../utils/CCPath");
var n = t("../CCDebug"), r = t("./pipeline"), s = t("./loading-items"), a = "AssetLoader", o = function(t) {
this.id = a;
this.async = !0;
this.pipeline = null;
};
o.ID = a;
var c = [];
o.prototype.handle = function(t, e) {
var i = t.uuid;
if (!i) return t.content || null;
cc.AssetLibrary.queryAssetInfo(i, (function(r, a, o) {
if (r) e(r); else {
t.url = t.rawUrl = a;
t.isRawAsset = o;
if (o) {
var h = cc.path.extname(a).toLowerCase();
if (!h) {
e(new Error(n.getError(4931, i, a)));
return;
}
h = h.substr(1);
var l = s.getQueue(t);
c[0] = {
queueId: t.queueId,
id: a,
url: a,
type: h,
error: null,
alias: t,
complete: !0
};
0;
l.append(c);
t.type = h;
e(null, t.content);
} else {
t.type = "uuid";
e(null, t.content);
}
}
}));
};
r.AssetLoader = e.exports = o;
}), {
"../CCDebug": 26,
"../utils/CCPath": 207,
"./loading-items": 121,
"./pipeline": 124
} ],
113: [ (function(t, e, i) {
var n = t("../utils/misc").pushToMap, r = t("../platform/js");
function s(t, e) {
this.uuid = t;
this.type = e;
}
function a() {
this._pathToUuid = r.createMap(!0);
}
function o(t, e) {
if (t.length > e.length) {
var i = t.charCodeAt(e.length);
return 46 === i || 47 === i;
}
return !0;
}
var c = a.prototype;
c.getUuid = function(t, e) {
t = cc.url.normalize(t);
var i = this._pathToUuid[t];
if (i) if (Array.isArray(i)) {
if (!e) return i[0].uuid;
for (var n = 0; n < i.length; n++) {
var s = i[n];
if (r.isChildClassOf(s.type, e)) return s.uuid;
}
} else {
if (!e || r.isChildClassOf(i.type, e)) return i.uuid;
0;
}
return "";
};
c.getUuidArray = function(t, e, i) {
"/" === (t = cc.url.normalize(t))[t.length - 1] && (t = t.slice(0, -1));
var n = this._pathToUuid, s = [], a = r.isChildClassOf;
for (var c in n) if (c.startsWith(t) && o(c, t) || !t) {
var h = n[c];
if (Array.isArray(h)) for (var l = 0; l < h.length; l++) {
var u = h[l];
if (!e || a(u.type, e)) {
s.push(u.uuid);
i && i.push(c);
} else 0;
} else if (!e || a(h.type, e)) {
s.push(h.uuid);
i && i.push(c);
} else 0;
}
0;
return s;
};
c.add = function(t, e, i, r) {
t = t.substring(0, t.length - cc.path.extname(t).length);
var a = new s(e, i);
n(this._pathToUuid, t, a, r);
};
c._getInfo_DEBUG = !1;
c.reset = function() {
this._pathToUuid = r.createMap(!0);
};
e.exports = a;
}), {
"../platform/js": 154,
"../utils/misc": 216
} ],
114: [ (function(t, e, i) {
var n = t("../platform/CCSys"), r = t("../CCDebug"), s = n.__audioSupport, a = s.format, o = s.context;
function c(t, e) {
var i = document.createElement("audio");
i.src = t.url;
var n = cc.sys.platform === cc.sys.XIAOMI_GAME;
if (cc.sys.platform === cc.sys.BAIDU_GAME || n) e(null, i); else {
var r = function() {
clearTimeout(a);
i.removeEventListener("canplaythrough", o, !1);
i.removeEventListener("error", c, !1);
s.USE_LOADER_EVENT && i.removeEventListener(s.USE_LOADER_EVENT, o, !1);
}, a = setTimeout((function() {
0 === i.readyState ? c() : o();
}), 8e3), o = function() {
r();
e(null, i);
}, c = function() {
r();
var i = "load audio failure - " + t.url;
cc.log(i);
e(i);
};
i.addEventListener("canplaythrough", o, !1);
i.addEventListener("error", c, !1);
s.USE_LOADER_EVENT && i.addEventListener(s.USE_LOADER_EVENT, o, !1);
}
}
function h(t, e) {
o || e(new Error(r.getError(4926)));
var i = cc.loader.getXMLHttpRequest();
i.open("GET", t.url, !0);
i.responseType = "arraybuffer";
i.onload = function() {
o.decodeAudioData(i.response, (function(t) {
e(null, t);
}), (function() {
e("decode error - " + t.id, null);
}));
};
i.onerror = function() {
e("request error - " + t.id, null);
};
i.send();
}
e.exports = function(t, e) {
if (0 === a.length) return new Error(r.getError(4927));
var i;
i = s.WEB_AUDIO ? t._owner instanceof cc.AudioClip ? t._owner.loadMode === cc.AudioClip.LoadMode.WEB_AUDIO ? h : c : t.urlParam && t.urlParam.useDom ? c : h : c;
i(t, e);
};
}), {
"../CCDebug": 26,
"../platform/CCSys": 143
} ],
115: [ (function(i, n, r) {
var s = i("../platform/js");
function a(t, e) {
var i = cc.loader.getItem(t);
if (i) {
var n = i.dependKeys;
if (n) for (var r = 0; r < n.length; r++) {
var s = n[r];
if (!e[s]) {
e[s] = !0;
a(s, e);
}
}
}
}
function o(t, e) {
if (t._uuid) {
var i = cc.loader._getReferenceKey(t);
if (!e[i]) {
e[i] = !0;
a(i, e);
}
}
}
function c(i, n) {
for (var r = Object.getOwnPropertyNames(i), s = 0; s < r.length; s++) {
var a = i[r[s]];
if ("object" === ("object" === (e = typeof a) ? t(a) : e) && a) if (Array.isArray(a)) for (var c = 0; c < a.length; c++) {
var h = a[c];
h instanceof cc.RawAsset && o(h, n);
} else if (a.constructor && a.constructor !== Object) a instanceof cc.RawAsset && o(a, n); else for (var l = Object.getOwnPropertyNames(a), u = 0; u < l.length; u++) {
var f = a[l[u]];
f instanceof cc.RawAsset && o(f, n);
}
}
}
function h(t, e) {
for (var i = 0; i < t._components.length; i++) c(t._components[i], e);
for (var n = 0; n < t._children.length; n++) h(t._children[n], e);
}
n.exports = {
autoRelease: function(t, e, i) {
var n = cc.loader._autoReleaseSetting, r = s.createMap();
if (e) for (var a = 0; a < e.length; a++) r[e[a]] = !0;
for (var o = 0; o < i.length; o++) h(i[o], r);
if (t) for (var c = 0; c < t.length; c++) {
var l = t[c];
!1 === n[l] || r[l] || cc.loader.release(l);
}
for (var u = Object.keys(n), f = 0; f < u.length; f++) {
var _ = u[f];
!0 !== n[_] || r[_] || cc.loader.release(_);
}
},
getDependsRecursively: function(t) {
var e = {};
a(t, e);
return Object.keys(e);
}
};
}), {
"../platform/js": 154
} ],
116: [ (function(t, e, i) {
e.exports = function(t, e) {
var i = t.url, n = cc.loader.getXMLHttpRequest(), r = "Load binary data failed: " + i;
n.open("GET", i, !0);
n.responseType = "arraybuffer";
n.onload = function() {
var t = n.response;
if (t) {
var i = new Uint8Array(t);
e(null, i);
} else e({
status: n.status,
errorMessage: r + "(no response)"
});
};
n.onerror = function() {
e({
status: n.status,
errorMessage: r + "(error)"
});
};
n.ontimeout = function() {
e({
status: n.status,
errorMessage: r + "(time out)"
});
};
n.send(null);
};
}), {} ],
117: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("../CCDebug");
t("../utils/CCPath");
var s, a = t("./pipeline"), o = t("./pack-downloader"), c = t("./binary-downloader"), h = t("./text-downloader"), l = t("./utils").urlAppendTimestamp;
function u() {
return null;
}
function f(t, e, i) {
var n = t.url, s = document, a = document.createElement("script");
"file:" !== window.location.protocol && (a.crossOrigin = "anonymous");
a.async = i;
a.src = l(n);
function o() {
a.parentNode.removeChild(a);
a.removeEventListener("load", o, !1);
a.removeEventListener("error", c, !1);
e(null, n);
}
function c() {
a.parentNode.removeChild(a);
a.removeEventListener("load", o, !1);
a.removeEventListener("error", c, !1);
e(new Error(r.getError(4928, n)));
}
a.addEventListener("load", o, !1);
a.addEventListener("error", c, !1);
s.body.appendChild(a);
}
function _(t, e, i, n) {
void 0 === i && (i = !0);
var s = l(t.url);
n = n || new Image();
i && "file:" !== window.location.protocol ? n.crossOrigin = "anonymous" : n.crossOrigin = null;
if (n.complete && n.naturalWidth > 0 && n.src === s) return n;
(function() {
function i() {
n.removeEventListener("load", i);
n.removeEventListener("error", a);
n.id = t.id;
e(null, n);
}
function a() {
n.removeEventListener("load", i);
n.removeEventListener("error", a);
"https:" !== window.location.protocol && n.crossOrigin && "anonymous" === n.crossOrigin.toLowerCase() ? _(t, e, !1, n) : e(new Error(r.getError(4930, s)));
}
n.addEventListener("load", i);
n.addEventListener("error", a);
n.src = s;
})();
}
var d = {
js: f,
png: _,
jpg: _,
bmp: _,
jpeg: _,
gif: _,
ico: _,
tiff: _,
webp: function(t, e, i, n) {
return cc.sys.capabilities.webp ? _(t, e, i, n) : new Error(r.getError(4929, t.url));
},
image: _,
mp3: s = t("./audio-downloader"),
ogg: s,
wav: s,
m4a: s,
txt: h,
xml: h,
vsh: h,
fsh: h,
atlas: h,
tmx: h,
tsx: h,
json: h,
ExportJson: h,
plist: h,
fnt: h,
font: u,
eot: u,
ttf: u,
woff: u,
svg: u,
ttc: u,
uuid: function(t, e) {
var i = o.load(t, e);
return void 0 === i ? this.extMap.json(t, e) : i || void 0;
},
binary: c,
bin: c,
dbbin: c,
default: h
}, p = "Downloader", m = function(t) {
this.id = p;
this.async = !0;
this.pipeline = null;
this._curConcurrent = 0;
this._loadQueue = [];
this._subpackages = {};
this.extMap = n.mixin(t, d);
};
m.ID = p;
m.PackDownloader = o;
m.prototype.addHandlers = function(t) {
n.mixin(this.extMap, t);
};
m.prototype._handleLoadQueue = function() {
for (;this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT; ) {
var t = this._loadQueue.shift();
if (!t) break;
var e = this.handle(t.item, t.callback);
void 0 !== e && (e instanceof Error ? t.callback(e) : t.callback(null, e));
}
};
m.prototype.handle = function(t, e) {
var i = this, n = this.extMap[t.type] || this.extMap.default, r = void 0;
if (this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
this._curConcurrent++;
if (void 0 !== (r = n.call(this, t, (function(t, n) {
i._curConcurrent = Math.max(0, i._curConcurrent - 1);
i._handleLoadQueue();
e && e(t, n);
})))) {
this._curConcurrent = Math.max(0, this._curConcurrent - 1);
this._handleLoadQueue();
return r;
}
} else if (t.ignoreMaxConcurrency) {
if (void 0 !== (r = n.call(this, t, e))) return r;
} else this._loadQueue.push({
item: t,
callback: e
});
};
m.prototype.loadSubpackage = function(t, e) {
var i = this._subpackages[t];
i ? i.loaded ? e && e() : f({
url: i.path + "index.js"
}, (function(t) {
t || (i.loaded = !0);
e && e(t);
})) : e && e(new Error("Can't find subpackage " + t));
};
a.Downloader = e.exports = m;
}), {
"../CCDebug": 26,
"../platform/js": 154,
"../utils/CCPath": 207,
"./audio-downloader": 114,
"./binary-downloader": 116,
"./pack-downloader": 123,
"./pipeline": 124,
"./text-downloader": 127,
"./utils": 129
} ],
118: [ (function(t, e, i) {
var n = t("../utils/text-utils"), r = null, s = "BES bswy:->@123丁ぁᄁ", a = {}, o = -1, c = [], h = 6e4, l = (function() {
var t = void 0;
return function() {
if (void 0 === t) if (window.FontFace) {
var e = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent), i = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
t = e ? parseInt(e[1], 10) > 42 : !i;
} else t = !1;
return t;
};
})();
function u() {
for (var t = !0, e = Date.now(), i = c.length - 1; i >= 0; i--) {
var a = c[i], l = a.fontFamilyName;
if (e - a.startTime > h) {
cc.warnID(4933, l);
a.callback(null, l);
c.splice(i, 1);
} else {
var u = a.refWidth;
r.font = "40px " + l;
if (u !== n.safeMeasureText(r, s)) {
c.splice(i, 1);
a.callback(null, l);
} else t = !1;
}
}
if (t) {
clearInterval(o);
o = -1;
}
}
function f(t, e, i) {
var n = new Promise(function(i, n) {
var r = function() {
Date.now() - t >= h ? n() : document.fonts.load("40px " + e).then((function(t) {
t.length >= 1 ? i() : setTimeout(r, 100);
}), (function() {
n();
}));
};
r();
}), r = null, s = new Promise(function(t, e) {
r = setTimeout(e, h);
});
Promise.race([ s, n ]).then((function() {
if (r) {
clearTimeout(r);
r = null;
}
i(null, e);
}), (function() {
cc.warnID(4933, e);
i(null, e);
}));
}
var _ = {
loadFont: function(t, e) {
var i = t.url, h = _._getFontFamily(i);
if (a[h]) return h;
if (!r) {
var d = document.createElement("canvas");
d.width = 100;
d.height = 100;
r = d.getContext("2d");
}
var p = "40px " + h;
r.font = p;
var m = n.safeMeasureText(r, s), g = document.createElement("style");
g.type = "text/css";
var v = "";
isNaN(h - 0) ? v += "@font-face { font-family:" + h + "; src:" : v += "@font-face { font-family:'" + h + "'; src:";
v += "url('" + i + "');";
g.textContent = v + "}";
document.body.appendChild(g);
var y = document.createElement("div"), T = y.style;
T.fontFamily = h;
y.innerHTML = ".";
T.position = "absolute";
T.left = "-100px";
T.top = "-100px";
document.body.appendChild(y);
if (l()) f(Date.now(), h, e); else {
var x = {
fontFamilyName: h,
refWidth: m,
callback: e,
startTime: Date.now()
};
c.push(x);
-1 === o && (o = setInterval(u, 100));
}
a[h] = g;
},
_getFontFamily: function(t) {
var e = t.lastIndexOf(".ttf");
if (-1 === e) return t;
var i, n = t.lastIndexOf("/");
-1 !== (i = -1 === n ? t.substring(0, e) + "_LABEL" : t.substring(n + 1, e) + "_LABEL").indexOf(" ") && (i = '"' + i + '"');
return i;
}
};
e.exports = _;
}), {
"../utils/text-utils": 223
} ],
119: [ (function(t, e, i) {
t("./downloader");
t("./loader");
t("./loading-items");
t("./pipeline");
t("./CCLoader");
}), {
"./CCLoader": 111,
"./downloader": 117,
"./loader": 120,
"./loading-items": 121,
"./pipeline": 124
} ],
120: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("../platform/CCSAXParser").plistParser, o = i("./pipeline"), c = i("../assets/CCTexture2D"), h = i("./uuid-loader"), l = i("./font-loader");
function u(i) {
if ("string" !== ("object" === (e = typeof i.content) ? t(i.content) : e)) return new Error("JSON Loader: Input item doesn't contain string content");
try {
return JSON.parse(i.content);
} catch (t) {
return new Error("JSON Loader: Parse json [" + i.id + "] failed : " + t);
}
}
function f(t) {
if (t._owner instanceof cc.Asset) return null;
var e = t.content;
if (cc.sys.platform !== cc.sys.FB_PLAYABLE_ADS && !(e instanceof Image)) return new Error("Image Loader: Input item doesn't contain Image content");
var i = t.rawUrl, n = t.texture || new c();
n._uuid = t.uuid;
n.url = i;
n._setRawAsset(i, !1);
n._nativeAsset = e;
return n;
}
function _(t, e) {
if (t._owner instanceof cc.Asset) return null;
var i = new cc.AudioClip();
i._setRawAsset(t.rawUrl, !1);
i._nativeAsset = t.content;
return i;
}
function d(t) {
return t.load ? t.load(t.content) : null;
}
var p = {
png: f,
jpg: f,
bmp: f,
jpeg: f,
gif: f,
ico: f,
tiff: f,
webp: f,
image: f,
mp3: _,
ogg: _,
wav: _,
m4a: _,
json: u,
ExportJson: u,
plist: function(i) {
if ("string" !== ("object" == (e = typeof i.content) ? t(i.content) : e)) return new Error("Plist Loader: Input item doesn't contain string content");
var n = a.parse(i.content);
return n || new Error("Plist Loader: Parse [" + i.id + "] failed");
},
uuid: h,
prefab: h,
fire: h,
scene: h,
binary: d,
dbbin: d,
bin: d,
font: l.loadFont,
eot: l.loadFont,
ttf: l.loadFont,
woff: l.loadFont,
svg: l.loadFont,
ttc: l.loadFont,
default: function() {
return null;
}
}, m = function(t) {
this.id = "Loader";
this.async = !0;
this.pipeline = null;
this.extMap = s.mixin(t, p);
};
m.ID = "Loader";
m.prototype.addHandlers = function(t) {
this.extMap = s.mixin(this.extMap, t);
};
m.prototype.handle = function(t, e) {
return (this.extMap[t.type] || this.extMap.default).call(this, t, e);
};
o.Loader = n.exports = m;
}), {
"../assets/CCTexture2D": 49,
"../platform/CCSAXParser": 141,
"../platform/js": 154,
"./font-loader": 118,
"./pipeline": 124,
"./uuid-loader": 130
} ],
121: [ (function(i, n, r) {
var s = i("../platform/callbacks-invoker");
i("../utils/CCPath");
var a = i("../platform/js"), o = 0 | 998 * Math.random(), c = a.createMap(!0), h = [], l = {
WORKING: 1,
COMPLETE: 2,
ERROR: 3
}, u = a.createMap(!0);
function f(i) {
var n = i.url || i;
return "string" === ("object" === (e = typeof n) ? t(n) : e);
}
function _(t) {
if (t) {
var e = t.split("?");
if (e && e[0] && e[1]) {
var i = {};
e[1].split("&").forEach((function(t) {
var e = t.split("=");
i[e[0]] = e[1];
}));
return i;
}
}
}
function d(i, n) {
var r = "object" === ("object" === (e = typeof i) ? t(i) : e) ? i.url : i, s = {
queueId: n,
id: r,
url: r,
rawUrl: void 0,
urlParam: _(r),
type: "",
error: null,
content: null,
complete: !1,
states: {},
deps: null
};
if ("object" === ("object" === (e = typeof i) ? t(i) : e)) {
a.mixin(s, i);
if (i.skips) for (var o = 0; o < i.skips.length; o++) {
var c = i.skips[o];
s.states[c] = l.COMPLETE;
}
}
s.rawUrl = s.url;
r && !s.type && (s.type = cc.path.extname(r).toLowerCase().substr(1));
return s;
}
var p = [];
function m(t, e, i) {
if (!t || !e) return !1;
var n = !1;
p.push(e.id);
if (e.deps) {
var r, s, a = e.deps;
for (r = 0; r < a.length; r++) {
if ((s = a[r]).id === t.id) {
n = !0;
break;
}
if (!(p.indexOf(s.id) >= 0) && (s.deps && m(t, s, !0))) {
n = !0;
break;
}
}
}
i || (p.length = 0);
return n;
}
var g = function(t, e, i, n) {
s.call(this);
this._id = ++o;
c[this._id] = this;
this._pipeline = t;
this._errorUrls = a.createMap(!0);
this._appending = !1;
this._ownerQueue = null;
this.onProgress = i;
this.onComplete = n;
this.map = a.createMap(!0);
this.completed = {};
this.totalCount = 0;
this.completedCount = 0;
this._pipeline ? this.active = !0 : this.active = !1;
e && (e.length > 0 ? this.append(e) : this.allComplete());
};
g.ItemState = new cc.Enum(l);
g.create = function(i, n, r, s) {
if (void 0 === r) {
if ("function" === ("object" === (e = typeof n) ? t(n) : e)) {
s = n;
n = r = null;
}
} else if (void 0 === s) if ("function" === ("object" === (e = typeof n) ? t(n) : e)) {
s = r;
r = n;
n = null;
} else {
s = r;
r = null;
}
var a = h.pop();
if (a) {
a._pipeline = i;
a.onProgress = r;
a.onComplete = s;
c[a._id] = a;
a._pipeline && (a.active = !0);
n && a.append(n);
} else a = new g(i, n, r, s);
return a;
};
g.getQueue = function(t) {
return t.queueId ? c[t.queueId] : null;
};
g.itemComplete = function(t) {
var e = c[t.queueId];
e && e.itemComplete(t.id);
};
g.initQueueDeps = function(t) {
var e = u[t._id];
if (e) {
e.completed.length = 0;
e.deps.length = 0;
} else e = u[t._id] = {
completed: [],
deps: []
};
};
g.registerQueueDep = function(t, e) {
var i = t.queueId || t;
if (!i) return !1;
var n = u[i];
if (n) -1 === n.deps.indexOf(e) && n.deps.push(e); else if (t.id) for (var r in u) {
var s = u[r];
-1 !== s.deps.indexOf(t.id) && -1 === s.deps.indexOf(e) && s.deps.push(e);
}
};
g.finishDep = function(t) {
for (var e in u) {
var i = u[e];
-1 !== i.deps.indexOf(t) && -1 === i.completed.indexOf(t) && i.completed.push(t);
}
};
var v = g.prototype;
a.mixin(v, s.prototype);
v.append = function(t, e) {
if (!this.active) return [];
e && !e.deps && (e.deps = []);
this._appending = !0;
var i, n, r, s = [];
for (i = 0; i < t.length; ++i) if (!(n = t[i]).queueId || this.map[n.id]) {
if (f(n)) {
var a = (r = d(n, this._id)).id;
if (!this.map[a]) {
this.map[a] = r;
this.totalCount++;
e && e.deps.push(r);
g.registerQueueDep(e || this._id, a);
s.push(r);
}
}
} else {
this.map[n.id] = n;
e && e.deps.push(n);
if (n.complete || m(e, n)) {
this.totalCount++;
this.itemComplete(n.id);
continue;
}
var o = this, h = c[n.queueId];
if (h) {
this.totalCount++;
g.registerQueueDep(e || this._id, n.id);
h.addListener(n.id, (function(t) {
o.itemComplete(t.id);
}));
}
}
this._appending = !1;
this.completedCount === this.totalCount ? this.allComplete() : this._pipeline.flowIn(s);
return s;
};
v._childOnProgress = function(t) {
if (this.onProgress) {
var e = u[this._id];
this.onProgress(e ? e.completed.length : this.completedCount, e ? e.deps.length : this.totalCount, t);
}
};
v.allComplete = function() {
var t = a.isEmptyObject(this._errorUrls) ? null : this._errorUrls;
this.onComplete && this.onComplete(t, this);
};
v.isCompleted = function() {
return this.completedCount >= this.totalCount;
};
v.isItemCompleted = function(t) {
return !!this.completed[t];
};
v.exists = function(t) {
return !!this.map[t];
};
v.getContent = function(t) {
var e = this.map[t], i = null;
e && (e.content ? i = e.content : e.alias && (i = e.alias.content));
return i;
};
v.getError = function(t) {
var e = this.map[t], i = null;
e && (e.error ? i = e.error : e.alias && (i = e.alias.error));
return i;
};
v.addListener = s.prototype.add;
v.hasListener = s.prototype.has;
v.removeListener = s.prototype.remove;
v.removeAllListeners = s.prototype.removeAll;
v.removeItem = function(t) {
var e = this.map[t];
if (e && this.completed[e.alias || t]) {
delete this.completed[t];
delete this.map[t];
if (e.alias) {
delete this.completed[e.alias.id];
delete this.map[e.alias.id];
}
this.completedCount--;
this.totalCount--;
}
};
v.itemComplete = function(t) {
var e = this.map[t];
if (e) {
var i = t in this._errorUrls;
e.error instanceof Error || a.isString(e.error) ? this._errorUrls[t] = e.error : e.error ? a.mixin(this._errorUrls, e.error) : !e.error && i && delete this._errorUrls[t];
this.completed[t] = e;
this.completedCount++;
g.finishDep(e.id);
if (this.onProgress) {
var n = u[this._id];
this.onProgress(n ? n.completed.length : this.completedCount, n ? n.deps.length : this.totalCount, e);
}
this.invoke(t, e);
this.removeAll(t);
!this._appending && this.completedCount >= this.totalCount && this.allComplete();
}
};
v.destroy = function() {
this.active = !1;
this._appending = !1;
this._pipeline = null;
this._ownerQueue = null;
a.clear(this._errorUrls);
this.onProgress = null;
this.onComplete = null;
this.map = a.createMap(!0);
this.completed = {};
this.totalCount = 0;
this.completedCount = 0;
s.call(this);
if (u[this._id]) {
u[this._id].completed.length = 0;
u[this._id].deps.length = 0;
}
delete c[this._id];
delete u[this._id];
-1 === h.indexOf(this) && h.length < 10 && h.push(this);
};
cc.LoadingItems = n.exports = g;
}), {
"../platform/callbacks-invoker": 147,
"../platform/js": 154,
"../utils/CCPath": 207
} ],
122: [ (function(t, e, i) {
var n = t("./pipeline"), r = "MD5Pipe", s = /(\.[^.\n\\/]*)$/, a = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
function o(t) {
var e = t.match(a);
return e ? e[1] : "";
}
var c = function(t, e, i) {
this.id = r;
this.async = !1;
this.pipeline = null;
this.md5AssetsMap = t;
this.md5NativeAssetsMap = e;
this.libraryBase = i;
};
c.ID = r;
c.prototype.handle = function(t) {
var e = !1;
"ttf" === t.type && (e = !0);
t.url = this.transformURL(t.url, e);
return null;
};
c.prototype.transformURL = function(t, e) {
var i = this, n = o(t);
if (n) {
var r, a, c, h;
(function() {
r = !t.startsWith(i.libraryBase);
var o = (r ? i.md5NativeAssetsMap : i.md5AssetsMap)[n];
if (o) if (e) {
a = cc.path.dirname(t);
c = cc.path.basename(t);
t = a + "." + o + "/" + c;
} else {
h = !1;
t = t.replace(s, (function(t, e) {
h = !0;
return "." + o + e;
}));
h || (t = t + "." + o);
}
})();
}
return t;
};
n.MD5Pipe = e.exports = c;
}), {
"./pipeline": 124
} ],
123: [ (function(i, n, r) {
var s = i("./unpackers"), a = i("../utils/misc").pushToMap, o = {
Invalid: 0,
Removed: 1,
Downloading: 2,
Loaded: 3
};
function c() {
this.unpacker = null;
this.state = o.Invalid;
}
var h = {}, l = {}, u = {};
function f(t, e) {
return new Error("Can not retrieve " + t + " from packer " + e);
}
n.exports = {
initPacks: function(t) {
l = t;
h = {};
for (var e in t) for (var i = t[e], n = 0; n < i.length; n++) {
var r = i[n], s = 1 === i.length;
a(h, r, e, s);
}
},
_loadNewPack: function(t, e, i) {
var n = this, r = cc.AssetLibrary.getLibUrlNoExt(e) + ".json";
cc.loader.load({
url: r,
ignoreMaxConcurrency: !0
}, (function(r, s) {
if (r) {
cc.errorID(4916, t);
return i(r);
}
var a = n._doLoadNewPack(t, e, s);
a ? i(null, a) : i(f(t, e));
}));
},
_doPreload: function(t, e) {
var i = u[t];
i || ((i = u[t] = new c()).state = o.Downloading);
if (i.state !== o.Loaded) {
i.unpacker = new s.JsonUnpacker();
i.unpacker.load(l[t], e);
i.state = o.Loaded;
}
},
_doLoadNewPack: function(i, n, r) {
var a = u[n];
if (a.state !== o.Loaded) {
"string" === ("object" === (e = typeof r) ? t(r) : e) && (r = JSON.parse(r));
Array.isArray(r) ? a.unpacker = new s.JsonUnpacker() : r.type === s.TextureUnpacker.ID && (a.unpacker = new s.TextureUnpacker());
a.unpacker.load(l[n], r);
a.state = o.Loaded;
}
return a.unpacker.retrieve(i);
},
_selectLoadedPack: function(t) {
for (var e = o.Invalid, i = "", n = 0; n < t.length; n++) {
var r = t[n], s = u[r];
if (s) {
var a = s.state;
if (a === o.Loaded) return r;
if (a > e) {
e = a;
i = r;
}
}
}
return e !== o.Invalid ? i : t[0];
},
load: function(t, e) {
var i = t.uuid, n = h[i];
if (n) {
Array.isArray(n) && (n = this._selectLoadedPack(n));
var r = u[n];
if (r && r.state === o.Loaded) {
var s = r.unpacker.retrieve(i);
return s || f(i, n);
}
if (!r) {
console.log("Create unpacker %s for %s", n, i);
(r = u[n] = new c()).state = o.Downloading;
}
this._loadNewPack(i, n, e);
return null;
}
}
};
0;
}), {
"../utils/misc": 216,
"./unpackers": 128
} ],
124: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("./loading-items"), s = r.ItemState;
function a(t, e) {
var i = t.id, n = e.states[i], r = t.next, o = t.pipeline;
if (!e.error && n !== s.WORKING && n !== s.ERROR) if (n === s.COMPLETE) r ? a(r, e) : o.flowOut(e); else {
e.states[i] = s.WORKING;
var c = t.handle(e, (function(t, n) {
if (t) {
e.error = t;
e.states[i] = s.ERROR;
o.flowOut(e);
} else {
n && (e.content = n);
e.states[i] = s.COMPLETE;
r ? a(r, e) : o.flowOut(e);
}
}));
if (c instanceof Error) {
e.error = c;
e.states[i] = s.ERROR;
o.flowOut(e);
} else if (void 0 !== c) {
null !== c && (e.content = c);
e.states[i] = s.COMPLETE;
r ? a(r, e) : o.flowOut(e);
}
}
}
var o = function(t) {
this._pipes = t;
this._cache = n.createMap(!0);
for (var e = 0; e < t.length; ++e) {
var i = t[e];
if (i.handle && i.id) {
i.pipeline = this;
i.next = e < t.length - 1 ? t[e + 1] : null;
}
}
};
o.ItemState = s;
var c = o.prototype;
c.insertPipe = function(t, e) {
if (!t.handle || !t.id || e > this._pipes.length) cc.warnID(4921); else if (this._pipes.indexOf(t) > 0) cc.warnID(4922); else {
t.pipeline = this;
var i = null;
e < this._pipes.length && (i = this._pipes[e]);
var n = null;
e > 0 && (n = this._pipes[e - 1]);
n && (n.next = t);
t.next = i;
this._pipes.splice(e, 0, t);
}
};
c.insertPipeAfter = function(t, e) {
var i = this._pipes.indexOf(t);
i < 0 || this.insertPipe(e, i + 1);
};
c.appendPipe = function(t) {
if (t.handle && t.id) {
t.pipeline = this;
t.next = null;
this._pipes.length > 0 && (this._pipes[this._pipes.length - 1].next = t);
this._pipes.push(t);
}
};
c.flowIn = function(t) {
var e, i, n = this._pipes[0];
if (n) {
for (e = 0; e < t.length; e++) {
i = t[e];
this._cache[i.id] = i;
}
for (e = 0; e < t.length; e++) a(n, i = t[e]);
} else for (e = 0; e < t.length; e++) this.flowOut(t[e]);
};
c.flowInDeps = function(t, e, i) {
return r.create(this, (function(t, e) {
i(t, e);
e.destroy();
})).append(e, t);
};
c.flowOut = function(t) {
t.error ? delete this._cache[t.id] : this._cache[t.id] || (this._cache[t.id] = t);
t.complete = !0;
r.itemComplete(t);
};
c.copyItemStates = function(t, e) {
if (e instanceof Array) for (var i = 0; i < e.length; ++i) e[i].states = t.states; else e.states = t.states;
};
c.getItem = function(t) {
var e = this._cache[t];
if (!e) return e;
e.alias && (e = e.alias);
return e;
};
c.removeItem = function(t) {
var e = this._cache[t];
e && e.complete && delete this._cache[t];
return e;
};
c.clear = function() {
for (var t in this._cache) {
var e = this._cache[t];
delete this._cache[t];
if (!e.complete) {
e.error = new Error("Canceled manually");
this.flowOut(e);
}
}
};
cc.Pipeline = e.exports = o;
}), {
"../platform/js": 154,
"./loading-items": 121
} ],
125: [ (function(t, e, i) {}), {
"../platform/js": 154
} ],
126: [ (function(t, e, i) {
var n = t("./pipeline"), r = "SubPackPipe", s = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
function a(t) {
var e = t.match(s);
return e ? e[1] : "";
}
var o = Object.create(null), c = function(t) {
this.id = r;
this.async = !1;
this.pipeline = null;
for (var e in t) {
var i = t[e];
i.uuids && i.uuids.forEach((function(t) {
o[t] = i.path;
}));
}
};
c.ID = r;
c.prototype.handle = function(t) {
t.url = this.transformURL(t.url);
return null;
};
c.prototype.transformURL = function(t) {
var e = a(t);
if (e) {
var i = o[e];
if (i) return t.replace("res/raw-assets/", i + "raw-assets/");
}
return t;
};
n.SubPackPipe = e.exports = c;
}), {
"./pipeline": 124
} ],
127: [ (function(t, e, i) {
var n = t("./utils").urlAppendTimestamp;
e.exports = function(t, e) {
var i = t.url;
i = n(i);
var r = cc.loader.getXMLHttpRequest(), s = "Load text file failed: " + i;
r.open("GET", i, !0);
r.overrideMimeType && r.overrideMimeType("text/plain; charset=utf-8");
r.onload = function() {
4 === r.readyState ? 200 === r.status || 0 === r.status ? e(null, r.responseText) : e({
status: r.status,
errorMessage: s + "(wrong status)"
}) : e({
status: r.status,
errorMessage: s + "(wrong readyState)"
});
};
r.onerror = function() {
e({
status: r.status,
errorMessage: s + "(error)"
});
};
r.ontimeout = function() {
e({
status: r.status,
errorMessage: s + "(time out)"
});
};
r.send(null);
};
}), {
"./utils": 129
} ],
128: [ (function(t, e, i) {
var n = t("../assets/CCTexture2D"), r = t("../platform/js");
function s() {
this.jsons = {};
}
s.prototype.load = function(t, e) {
e.length !== t.length && cc.errorID(4915);
for (var i = 0; i < t.length; i++) {
var n = t[i], r = e[i];
this.jsons[n] = r;
}
};
s.prototype.retrieve = function(t) {
return this.jsons[t] || null;
};
function a() {
this.contents = {};
}
a.ID = r._getClassId(n);
a.prototype.load = function(t, e) {
var i = e.data.split("|");
i.length !== t.length && cc.errorID(4915);
for (var n = 0; n < t.length; n++) this.contents[t[n]] = i[n];
};
a.prototype.retrieve = function(t) {
var e = this.contents[t];
return e ? {
__type__: a.ID,
content: e
} : null;
};
0;
e.exports = {
JsonUnpacker: s,
TextureUnpacker: a
};
}), {
"../assets/CCTexture2D": 49,
"../platform/js": 154
} ],
129: [ (function(i, n, r) {
var s = /\?/;
n.exports = {
urlAppendTimestamp: function(i) {
cc.game.config.noCache && "string" === ("object" === (e = typeof i) ? t(i) : e) && (s.test(i) ? i += "&_t=" + (new Date() - 0) : i += "?_t=" + (new Date() - 0));
return i;
}
};
}), {} ],
130: [ (function(i, n, r) {
var s = i("../platform/js"), a = i("../CCDebug");
i("../platform/deserialize");
var o = i("./loading-items");
function c(t) {
return t && (t[0] && "cc.Scene" === t[0].__type__ || t[1] && "cc.Scene" === t[1].__type__ || t[0] && "cc.Prefab" === t[0].__type__);
}
function h(t, e, i, n) {
var r, s, a, o = i.uuidList, c = i.uuidObjList, h = i.uuidPropList, l = i._stillUseUrl, u = t.dependKeys = [];
if (n) {
r = [];
for (s = 0; s < o.length; s++) {
a = o[s];
var f = c[s], _ = h[s], d = cc.AssetLibrary._getAssetInfoInRuntime(a);
if (d.raw) {
var p = d.url;
f[_] = p;
u.push(p);
} else r.push({
type: "uuid",
uuid: a,
deferredLoadRaw: !0,
_owner: f,
_ownerProp: _,
_stillUseUrl: l[s]
});
}
} else {
r = new Array(o.length);
for (s = 0; s < o.length; s++) {
a = o[s];
r[s] = {
type: "uuid",
uuid: a,
_owner: c[s],
_ownerProp: h[s],
_stillUseUrl: l[s]
};
}
e._native && !e.constructor.preventPreloadNativeObject && r.push({
url: e.nativeUrl,
_owner: e,
_ownerProp: "_nativeAsset"
});
}
return r;
}
function l(t, e, i, n, r) {
e.content = i;
var s = e.dependKeys;
t.flowInDeps(e, n, (function(t, e) {
var a, c = e.map;
for (var h in c) (a = c[h]).uuid && a.content && (a.content._uuid = a.uuid);
for (var l = 0; l < n.length; l++) {
var u = n[l], f = u.uuid, _ = u.url;
u._owner, u._ownerProp;
if (a = c[_]) {
var d = u;
if (a.complete || a.content) if (a.error) {
cc._throw(a.error.message || a.error.errorMessage || a.error);
} else g.call(d, a); else {
var p = o.getQueue(a), m = p._callbackTable[f];
m ? m.unshift(g, d) : p.addListener(f, g, d);
}
}
function g(t) {
var e = t.content;
this._stillUseUrl && (e = e && cc.RawAsset.wasRawAssetType(e.constructor) ? e.nativeUrl : t.rawUrl);
this._owner[this._ownerProp] = e;
t.uuid !== i._uuid && s.indexOf(t.id) < 0 && s.push(t.id);
}
}
r(t, i);
}));
}
function u(t, e, i) {
0;
var n = e.deferredLoadRaw;
n ? t instanceof cc.Asset && t.constructor.preventDeferredLoadDependents && (n = !1) : i && (t instanceof cc.SceneAsset || t instanceof cc.Prefab) && (n = t.asyncLoadAssets);
return n;
}
function f(i, n) {
0;
var r, o;
if ("string" === ("object" === (e = typeof i.content) ? t(i.content) : e)) try {
r = JSON.parse(i.content);
} catch (t) {
return new Error(a.getError(4923, i.id, t.stack));
} else {
if ("object" !== ("object" === (e = typeof i.content) ? t(i.content) : e)) return new Error(a.getError(4924));
r = i.content;
}
var f = c(r);
o = f ? cc._MissingScript.safeFindClass : function(t) {
var e = s._getClassById(t);
if (e) return e;
cc.warnID(4903, t);
return Object;
};
var _, d = cc.deserialize.Details.pool.get();
try {
_ = cc.deserialize(r, d, {
classFinder: o,
target: i.existingAsset,
customEnv: i
});
} catch (t) {
cc.deserialize.Details.pool.put(d);
var p = t + "\n" + t.stack;
return new Error(a.getError(4925, i.id, p));
}
_._uuid = i.uuid;
0;
var m = h(i, _, d, u(_, i, f));
cc.deserialize.Details.pool.put(d);
if (0 === m.length) return n(null, _);
l(this.pipeline, i, _, m, n);
}
n.exports = f;
f.isSceneObj = c;
}), {
"../CCDebug": 26,
"../platform/deserialize": 149,
"../platform/js": 154,
"./loading-items": 121
} ],
131: [ (function(t, e, i) {
var n = t("./component-scheduler"), r = t("./platform/CCObject").Flags, s = t("./platform/js"), a = r.IsPreloadStarted, o = r.IsOnLoadStarted, c = r.IsOnLoadCalled, h = r.Deactivating, l = "c.onLoad();c._objFlags|=" + c, u = cc.Class({
extends: n.LifeCycleInvoker,
add: function(t) {
this._zero.array.push(t);
},
remove: function(t) {
this._zero.fastRemove(t);
},
cancelInactive: function(t) {
n.LifeCycleInvoker.stableRemoveInactive(this._zero, t);
},
invoke: function() {
this._invoke(this._zero);
this._zero.array.length = 0;
}
}), f = n.createInvokeImpl("c.__preload();"), _ = n.createInvokeImpl(l), d = new s.Pool(4);
d.get = function() {
var t = this._get() || {
preload: new u(f),
onLoad: new n.OneOffInvoker(_),
onEnable: new n.OneOffInvoker(n.invokeOnEnable)
};
t.preload._zero.i = -1;
var e = t.onLoad;
e._zero.i = -1;
e._neg.i = -1;
e._pos.i = -1;
(e = t.onEnable)._zero.i = -1;
e._neg.i = -1;
e._pos.i = -1;
return t;
};
function p(t, e, i) {
0;
e ? t._removeComponent(e) : s.array.removeAt(t._components, i);
}
function m() {
this._activatingStack = [];
}
var g = cc.Class({
ctor: m,
reset: m,
_activateNodeRecursively: function(t, e, i, n) {
if (t._objFlags & h) cc.errorID(3816, t.name); else {
t._activeInHierarchy = !0;
for (var r = t._components.length, s = 0; s < r; ++s) {
var a = t._components[s];
if (a instanceof cc.Component) this.activateComp(a, e, i, n); else {
p(t, a, s);
--s;
--r;
}
}
for (var o = 0, c = t._children.length; o < c; ++o) {
var l = t._children[o];
l._active && this._activateNodeRecursively(l, e, i, n);
}
t._onPostActivated(!0);
}
},
_deactivateNodeRecursively: function(t) {
0;
t._objFlags |= h;
t._activeInHierarchy = !1;
for (var e = t._components.length, i = 0; i < e; ++i) {
var n = t._components[i];
if (n._enabled) {
cc.director._compScheduler.disableComp(n);
if (t._activeInHierarchy) {
t._objFlags &= ~h;
return;
}
}
}
for (var r = 0, s = t._children.length; r < s; ++r) {
var a = t._children[r];
if (a._activeInHierarchy) {
this._deactivateNodeRecursively(a);
if (t._activeInHierarchy) {
t._objFlags &= ~h;
return;
}
}
}
t._onPostActivated(!1);
t._objFlags &= ~h;
},
activateNode: function(t, e) {
if (e) {
var i = d.get();
this._activatingStack.push(i);
this._activateNodeRecursively(t, i.preload, i.onLoad, i.onEnable);
i.preload.invoke();
i.onLoad.invoke();
i.onEnable.invoke();
this._activatingStack.pop();
d.put(i);
} else {
this._deactivateNodeRecursively(t);
for (var n = this._activatingStack, r = 0; r < n.length; r++) {
var s = n[r];
s.preload.cancelInactive(a);
s.onLoad.cancelInactive(o);
s.onEnable.cancelInactive();
}
}
t.emit("active-in-hierarchy-changed", t);
},
activateComp: function(t, e, i, n) {
if (cc.isValid(t, !0)) {
if (!(t._objFlags & a)) {
t._objFlags |= a;
t.__preload && (e ? e.add(t) : t.__preload());
}
if (!(t._objFlags & o)) {
t._objFlags |= o;
if (t.onLoad) if (i) i.add(t); else {
t.onLoad();
t._objFlags |= c;
} else t._objFlags |= c;
}
if (t._enabled) {
if (!t.node._activeInHierarchy) return;
cc.director._compScheduler.enableComp(t, n);
}
}
},
destroyComp: function(t) {
cc.director._compScheduler.disableComp(t);
t.onDestroy && t._objFlags & c && t.onDestroy();
},
resetComp: !1
});
e.exports = g;
}), {
"./component-scheduler": 61,
"./platform/CCObject": 140,
"./platform/js": 154,
"./utils/misc": 216
} ],
132: [ (function(t, e, i) {}), {
"../event-manager": 100,
"../platform/js": 154,
"./CCMacro": 139,
"./CCSys": 143
} ],
133: [ (function(i, n, r) {
i("../assets/CCAsset");
var s = i("./utils").callInNextTick, a = i("../load-pipeline/CCLoader"), o = i("../load-pipeline/pack-downloader"), c = i("../load-pipeline/auto-release-utils"), h = i("../utils/decode-uuid"), l = i("../load-pipeline/md5-pipe"), u = i("../load-pipeline/subpackage-pipe"), f = i("./js"), _ = "", d = "", p = f.createMap(!0);
function m(t) {
return t && (t.constructor === cc.SceneAsset || t instanceof cc.Scene);
}
function g(t, e) {
this.url = t;
this.type = e;
}
var v = {
loadAsset: function(i, n, r) {
if ("string" !== ("object" === (e = typeof i) ? t(i) : e)) return s(n, new Error("[AssetLibrary] uuid must be string"), null);
var o = {
uuid: i,
type: "uuid"
};
r && r.existingAsset && (o.existingAsset = r.existingAsset);
a.load(o, (function(t, e) {
if (t || !e) t = new Error("[AssetLibrary] loading JSON or dependencies failed: " + (t ? t.message : "Unknown error")); else {
if (e.constructor === cc.SceneAsset) {
var r = cc.loader._getReferenceKey(i);
e.scene.dependAssets = c.getDependsRecursively(r);
}
if (m(e)) {
var s = cc.loader._getReferenceKey(i);
a.removeItem(s);
}
}
n && n(t, e);
}));
},
getLibUrlNoExt: function(t, e) {
t = h(t);
return (e ? d + "assets/" : _) + t.slice(0, 2) + "/" + t;
},
_queryAssetInfoInEditor: function(t, e) {
0;
},
_getAssetInfoInRuntime: function(t, e) {
e = e || {
url: null,
raw: !1
};
var i = p[t];
if (i && !f.isChildClassOf(i.type, cc.Asset)) {
e.url = d + i.url;
e.raw = !0;
} else {
e.url = this.getLibUrlNoExt(t) + ".json";
e.raw = !1;
}
return e;
},
_uuidInSettings: function(t) {
return t in p;
},
queryAssetInfo: function(t, e) {
var i = this._getAssetInfoInRuntime(t);
e(null, i.url, i.raw);
},
parseUuidInEditor: function(t) {},
loadJson: function(t, e) {
var i = "" + (new Date().getTime() + Math.random()), n = {
uuid: i,
type: "uuid",
content: t,
skips: [ a.assetLoader.id, a.downloader.id ]
};
a.load(n, (function(t, n) {
if (t) t = new Error("[AssetLibrary] loading JSON or dependencies failed: " + t.message); else {
if (n.constructor === cc.SceneAsset) {
var r = cc.loader._getReferenceKey(i);
n.scene.dependAssets = c.getDependsRecursively(r);
}
if (m(n)) {
var s = cc.loader._getReferenceKey(i);
a.removeItem(s);
}
}
n._uuid = "";
e && e(t, n);
}));
},
getAssetByUuid: function(t) {
return v._uuidToAsset[t] || null;
},
init: function(t) {
0;
var e = t.libraryPath;
e = e.replace(/\\/g, "/");
_ = cc.path.stripSep(e) + "/";
d = t.rawAssetsBase;
if (t.subpackages) {
var i = new u(t.subpackages);
cc.loader.insertPipeAfter(cc.loader.assetLoader, i);
cc.loader.subPackPipe = i;
}
var n = t.md5AssetsMap;
if (n && n.import) {
var r = 0, s = 0, c = f.createMap(!0), m = n.import;
for (r = 0; r < m.length; r += 2) c[s = h(m[r])] = m[r + 1];
var v = f.createMap(!0);
m = n["raw-assets"];
for (r = 0; r < m.length; r += 2) v[s = h(m[r])] = m[r + 1];
var y = new l(c, v, _);
cc.loader.insertPipeAfter(cc.loader.assetLoader, y);
cc.loader.md5Pipe = y;
}
var T = a._resources;
T.reset();
var x = t.rawAssets;
if (x) for (var E in x) {
var C = x[E];
for (var s in C) {
var A = C[s], b = A[0], S = A[1], w = cc.js._getClassById(S);
if (w) {
p[s] = new g(E + "/" + b, w);
if ("assets" === E) {
var D = cc.path.extname(b);
D && (b = b.slice(0, -D.length));
var I = 1 === A[2];
T.add(b, s, w, !I);
}
} else cc.error("Cannot get", S);
}
}
t.packedAssets && o.initPacks(t.packedAssets);
cc.url._init(t.mountPaths && t.mountPaths.assets || d + "assets");
},
_uuidToAsset: {}
};
n.exports = cc.AssetLibrary = v;
}), {
"../assets/CCAsset": 33,
"../load-pipeline/CCLoader": 111,
"../load-pipeline/auto-release-utils": 115,
"../load-pipeline/md5-pipe": 122,
"../load-pipeline/pack-downloader": 123,
"../load-pipeline/subpackage-pipe": 126,
"../utils/decode-uuid": 211,
"./js": 154,
"./utils": 158
} ],
134: [ (function(i, n, r) {
var s = i("./js"), a = i("./CCEnum"), o = i("./utils"), c = (o.isPlainEmptyObj_DEV, 
o.cloneable_DEV, i("./attribute")), h = c.DELIMETER, l = c.getTypeChecker, u = i("./preprocess-class");
i("./requiring-frame");
var f = [ "name", "extends", "mixins", "ctor", "__ctor__", "properties", "statics", "editor", "__ES6__" ];
function _(t, e) {
t.indexOf(e) < 0 && t.push(e);
}
var d = {
datas: null,
push: function(t) {
if (this.datas) this.datas.push(t); else {
this.datas = [ t ];
var e = this;
setTimeout((function() {
e.init();
}), 0);
}
},
init: function() {
var i = this.datas;
if (i) {
for (var n = 0; n < i.length; ++n) {
var r = i[n], a = r.cls, o = r.props;
"function" === ("object" === (e = typeof o) ? t(o) : e) && (o = o());
var c = s.getClassName(a);
o ? L(a, c, o, a.$super, r.mixins) : cc.errorID(3633, c);
}
this.datas = null;
}
}
};
function p(t, e) {
0;
_(t.__props__, e);
}
var m = [];
function g(t, e, i, n, r) {
var s = n.default;
0;
c.setClassAttr(t, i, "default", s);
p(t, i);
var a = N(t, n, e, i, !1);
if (a) {
for (var o = m, h = 0; h < a.length; h++) {
var l = a[h];
c.attr(t, i, l);
l._onAfterProp && o.push(l._onAfterProp);
}
for (var u = 0; u < o.length; u++) o[u](t, i);
m.length = 0;
a.length = 0;
}
}
function v(t, e, i, n, r) {
var a = n.get, o = n.set, h = t.prototype, l = Object.getOwnPropertyDescriptor(h, i), u = !l;
if (a) {
0;
for (var f = N(t, n, e, i, !0), _ = 0; _ < f.length; _++) c.attr(t, i, f[_]);
f.length = 0;
c.setClassAttr(t, i, "serializable", !1);
0;
r || s.get(h, i, a, u, u);
0;
}
if (o) {
if (!r) {
0;
s.set(h, i, o, u, u);
}
0;
}
}
function y(i) {
return "function" === ("object" === (e = typeof i) ? t(i) : e) ? i() : i;
}
function T(t, e, i) {
for (var n in e) t.hasOwnProperty(n) || i && !i(n) || Object.defineProperty(t, n, s.getPropertyDescriptor(e, n));
}
function x(t, e, i, n) {
var r, a, o = n.__ctor__, h = n.ctor, l = n.__ES6__;
if (l) {
r = [ h ];
a = h;
} else {
r = o ? [ o ] : I(e, i, n);
a = D(r, e, t, n);
s.value(a, "extend", (function(t) {
t.extends = this;
return O(t);
}), !0);
}
s.value(a, "__ctors__", r.length > 0 ? r : null, !0);
var u = a.prototype;
if (e) {
if (!l) {
s.extend(a, e);
u = a.prototype;
}
a.$super = e;
0;
}
if (i) {
for (var f = i.length - 1; f >= 0; f--) {
var _ = i[f];
T(u, _.prototype);
T(a, _, (function(t) {
return _.hasOwnProperty(t) && !0;
}));
O._isCCClass(_) && T(c.getClassAttrs(a).constructor.prototype, c.getClassAttrs(_).constructor.prototype);
}
u.constructor = a;
}
l || (u.__initProps__ = w);
s.setClassName(t, a);
return a;
}
function E(t, e, i, n) {
var r = cc.Component, a = cc._RF.peek();
if (a && s.isChildClassOf(e, r)) {
if (s.isChildClassOf(a.cls, r)) {
cc.errorID(3615);
return null;
}
0;
t = t || a.script;
}
var o = x(t, e, i, n);
if (a) if (s.isChildClassOf(e, r)) {
var c = a.uuid;
if (c) {
s._setClassId(c, o);
0;
}
a.cls = o;
} else s.isChildClassOf(a.cls, r) || (a.cls = o);
return o;
}
function C(t) {
for (var e = s.getClassName(t), i = t.constructor, n = "new " + e + "(", r = 0; r < i.__props__.length; r++) {
var a = t[i.__props__[r]];
0;
n += a;
r < i.__props__.length - 1 && (n += ",");
}
return n + ")";
}
function A(t) {
return JSON.stringify(t).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}
function b(i, n) {
for (var r = [], s = "", a = 0; a < n.length; a++) {
var o = n[a], c = o + h + "default";
if (c in i) {
var l, u;
l = S.test(o) ? "this." + o + "=" : "this[" + A(o) + "]=";
var f = i[c];
if ("object" === ("object" === (e = typeof f) ? t(f) : e) && f) u = f instanceof cc.ValueType ? C(f) : Array.isArray(f) ? "[]" : "{}"; else if ("function" === ("object" === (e = typeof f) ? t(f) : e)) {
var _ = r.length;
r.push(f);
u = "F[" + _ + "]()";
0;
} else u = "string" === ("object" === (e = typeof f) ? t(f) : e) ? A(f) : f;
s += l = l + u + ";\n";
}
}
return 0 === r.length ? Function(s) : Function("F", "return (function(){\n" + s + "})")(r);
}
var S = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
function w(t) {
var e = c.getClassAttrs(t), i = t.__props__;
if (null === i) {
d.init();
i = t.__props__;
}
var n = b(e, i);
t.prototype.__initProps__ = n;
n.call(this);
}
var D = function(t, e, i, n) {
var r = "return function CCClass(){\n";
e && M(e, n, i) && (r += "this._super=null;\n");
r += "this.__initProps__(CCClass);\n";
var s = t.length;
if (s > 0) {
0;
var a = "].apply(this,arguments);\n";
if (1 === s) r += "CCClass.__ctors__[0" + a; else {
r += "var cs=CCClass.__ctors__;\n";
for (var o = 0; o < s; o++) r += "cs[" + o + a;
}
0;
}
r += "}";
return Function(r)();
};
function I(t, e, i) {
function n(t) {
return O._isCCClass(t) ? t.__ctors__ || [] : [ t ];
}
for (var r = [], s = [ t ].concat(e), a = 0; a < s.length; a++) {
var o = s[a];
if (o) for (var c = n(o), h = 0; h < c.length; h++) _(r, c[h]);
}
var l = i.ctor;
l && r.push(l);
return r;
}
var R = /xyz/.test((function() {
xyz;
})) ? /\b\._super\b/ : /.*/;
/xyz/.test((function() {
xyz;
}));
function M(i, n, r) {
var a = !1;
for (var o in n) if (!(f.indexOf(o) >= 0)) {
var c = n[o];
if ("function" === ("object" === (e = typeof c) ? t(c) : e)) {
var h = s.getPropertyDescriptor(i.prototype, o);
if (h) {
var l = h.value;
if ("function" === ("object" === (e = typeof l) ? t(l) : e)) {
if (R.test(c)) {
a = !0;
n[o] = (function(t, e) {
return function() {
var i = this._super;
this._super = t;
var n = e.apply(this, arguments);
this._super = i;
return n;
};
})(l, c);
}
continue;
}
}
0;
}
}
return a;
}
function L(t, e, i, n, r, s) {
t.__props__ = [];
n && n.__props__ && (t.__props__ = n.__props__.slice());
if (r) for (var a = 0; a < r.length; ++a) {
var o = r[a];
o.__props__ && (t.__props__ = t.__props__.concat(o.__props__.filter((function(e) {
return t.__props__.indexOf(e) < 0;
}))));
}
if (i) {
u.preprocessAttrs(i, e, t, s);
for (var l in i) {
var f = i[l];
"default" in f ? g(t, e, l, f) : v(t, e, l, f, s);
}
}
var _ = c.getClassAttrs(t);
t.__values__ = t.__props__.filter((function(t) {
return !1 !== _[t + h + "serializable"];
}));
}
function O(i) {
var n = (i = i || {}).name, r = i.extends, a = i.mixins, o = E(n, r, a, i);
n || (n = cc.js.getClassName(o));
o._sealed = !0;
r && (r._sealed = !1);
var c = i.properties;
if ("function" === ("object" === (e = typeof c) ? t(c) : e) || r && null === r.__props__ || a && a.some((function(t) {
return null === t.__props__;
}))) {
d.push({
cls: o,
props: c,
mixins: a
});
o.__props__ = o.__values__ = null;
} else L(o, n, c, r, i.mixins, i.__ES6__);
var h = i.statics;
if (h) {
var l;
0;
for (l in h) o[l] = h[l];
}
for (var _ in i) if (!(f.indexOf(_) >= 0)) {
var p = i[_];
u.validateMethodWithProps(p, _, n, o, r) && s.value(o.prototype, _, p, !0, !0);
}
var m = i.editor;
m && s.isChildClassOf(r, cc.Component) && cc.Component._registerEditorProps(o, m);
return o;
}
O._isCCClass = function(t) {
return t && t.hasOwnProperty("__ctors__");
};
O._fastDefine = function(t, e, i) {
s.setClassName(t, e);
for (var n = e.__props__ = e.__values__ = Object.keys(i), r = c.getClassAttrsProto(e), a = 0; a < n.length; a++) {
var o = n[a];
r[o + h + "visible"] = !1;
r[o + h + "default"] = i[o];
}
};
O.Attr = c;
O.attr = c.attr;
O.getInheritanceChain = function(t) {
for (var e = []; t = s.getSuper(t); ) t !== Object && e.push(t);
return e;
};
var P = {
Integer: "Number",
Float: "Number",
Boolean: "Boolean",
String: "String"
}, F = [];
function N(i, n, r, s, o) {
var u = null, f = "";
function _() {
f = s + h;
return u = c.getClassAttrsProto(i);
}
F.length = 0;
var d = F, p = n.type;
if (p) {
var m = P[p];
if (m) d.push({
type: p,
_onAfterProp: l(m, "cc." + p)
}); else if ("Object" === p) 0; else if (p === c.ScriptUuid) {
var g = c.ObjectType(cc.ScriptAsset);
g.type = "Script";
d.push(g);
} else "object" === ("object" === (e = typeof p) ? t(p) : e) ? a.isEnum(p) && d.push({
type: "Enum",
enumList: a.getList(p)
}) : "function" === ("object" === (e = typeof p) ? t(p) : e) && (n.url ? d.push({
type: "Object",
ctor: p,
_onAfterProp: l("String", "cc.String")
}) : d.push(n._short ? {
type: "Object",
ctor: p
} : c.ObjectType(p)));
}
function v(i, r) {
if (i in n) {
var s = n[i];
("object" === (e = typeof s) ? t(s) : e) === r && ((u || _())[f + i] = s);
}
}
n.editorOnly && ((u || _())[f + "editorOnly"] = !0);
0;
n.url && ((u || _())[f + "saveUrlAsAsset"] = !0);
!1 === n.serializable && ((u || _())[f + "serializable"] = !1);
v("formerlySerializedAs", "string");
0;
var y = n.range;
if (y) if (Array.isArray(y)) if (y.length >= 2) {
(u || _())[f + "min"] = y[0];
u[f + "max"] = y[1];
y.length > 2 && (u[f + "step"] = y[2]);
} else 0; else 0;
v("min", "number");
v("max", "number");
v("step", "number");
return d;
}
cc.Class = O;
n.exports = {
isArray: function(t) {
t = y(t);
return Array.isArray(t);
},
fastDefine: O._fastDefine,
getNewValueTypeCode: C,
IDENTIFIER_RE: S,
escapeForJS: A,
getDefault: y
};
0;
}), {
"./CCEnum": 136,
"./attribute": 146,
"./js": 154,
"./preprocess-class": 155,
"./requiring-frame": 156,
"./utils": 158
} ],
135: [ (function(i, n, r) {
i("./CCClass");
var s = i("./preprocess-class"), a = i("./js"), o = "__ccclassCache__";
function c(t) {
return t;
}
function h(t, e) {
return t[e] || (t[e] = {});
}
function l(i) {
return function(n) {
return "function" === ("object" === (e = typeof n) ? t(n) : e) ? i(n) : function(t) {
return i(t, n);
};
};
}
function u(t, e, i) {
return function(t) {
0;
return function(i) {
return e(i, t);
};
};
}
var f = u.bind(null, !1);
function _(t) {
return u.bind(null, !1);
}
var d = _(), p = _();
function m(t, e) {
0;
return h(t, o);
}
function g(i) {
var n;
try {
n = i();
} catch (t) {
return i;
}
return "object" !== ("object" === (e = typeof n) ? t(n) : e) || null === n ? n : i;
}
function v(t) {
var e;
try {
e = new t();
} catch (t) {
0;
return {};
}
return e;
}
function y(t, e, i, n, r, o) {
var c;
n && (c = (c = s.getFullFormOfProperty(n)) || n);
var h = e[i], l = a.mixin(h || {}, c || {});
if (r && (r.get || r.set)) {
r.get && (l.get = r.get);
r.set && (l.set = r.set);
} else {
0;
var u = void 0;
if (r) {
if (r.initializer) {
u = g(r.initializer);
!0;
}
} else {
var f = o.default || (o.default = v(t));
if (f.hasOwnProperty(i)) {
u = f[i];
!0;
}
}
0;
l.default = u;
}
e[i] = l;
}
var T = l((function(t, e) {
var i = a.getSuper(t);
i === Object && (i = null);
var n = {
name: e,
extends: i,
ctor: t,
__ES6__: !0
}, r = t[o];
if (r) {
var s = r.proto;
s && a.mixin(n, s);
t[o] = void 0;
}
return cc.Class(n);
}));
function x(t, e, i) {
return t((function(t, n) {
var r = m(t);
if (r) {
var s = void 0 !== i ? i : n;
h(h(r, "proto"), "editor")[e] = s;
}
}), e);
}
function E(t) {
return t(c);
}
var C = E(l), A = x(f, "requireComponent"), b = E(d), S = x(p, "executionOrder"), w = E(l), D = E(l), I = E(d), R = E(d), M = E(d);
cc._decorator = n.exports = {
ccclass: T,
property: function(i, n, r) {
var s = null;
function a(t, e, i) {
var n = m(t.constructor);
if (n) {
var r = h(h(n, "proto"), "properties");
y(t.constructor, r, e, s, i, n);
}
}
if ("undefined" === ("object" == (e = typeof n) ? t(n) : e)) {
s = i;
return a;
}
a(i, n, r);
},
executeInEditMode: C,
requireComponent: A,
menu: b,
executionOrder: S,
disallowMultiple: w,
playOnFocus: D,
inspector: I,
icon: R,
help: M,
mixins: function() {
for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
return function(e) {
var i = m(e);
i && (h(i, "proto").mixins = t);
};
}
};
}), {
"./CCClass": 134,
"./js": 154,
"./preprocess-class": 155,
"./utils": 158
} ],
136: [ (function(i, n, r) {
var s = i("./js");
function a(i) {
if ("__enums__" in i) return i;
s.value(i, "__enums__", null, !0);
for (var n = -1, r = Object.keys(i), a = 0; a < r.length; a++) {
var o = r[a], c = i[o];
if (-1 === c) {
c = ++n;
i[o] = c;
} else if ("number" === ("object" === (e = typeof c) ? t(c) : e)) n = c; else if ("string" === ("object" === (e = typeof c) ? t(c) : e) && Number.isInteger(parseFloat(o))) continue;
var h = "" + c;
if (o !== h) {
0;
s.value(i, h, o);
}
}
return i;
}
a.isEnum = function(t) {
return t && t.hasOwnProperty("__enums__");
};
a.getList = function(t) {
if (t.__enums__) return t.__enums__;
var e = t.__enums__ = [];
for (var i in t) {
var n = t[i];
Number.isInteger(n) && e.push({
name: i,
value: n
});
}
e.sort((function(t, e) {
return t.value - e.value;
}));
return e;
};
n.exports = cc.Enum = a;
}), {
"./js": 154
} ],
137: [ (function(t, e, i) {
var n = t("../event-manager"), r = t("./CCInputManager"), s = void 0;
cc.Acceleration = function(t, e, i, n) {
this.x = t || 0;
this.y = e || 0;
this.z = i || 0;
this.timestamp = n || 0;
};
r.setAccelerometerEnabled = function(t) {
var e = this;
if (e._accelEnabled !== t) {
e._accelEnabled = t;
var i = cc.director.getScheduler();
i.enableForTarget(e);
if (e._accelEnabled) {
e._registerAccelerometerEvent();
e._accelCurTime = 0;
i.scheduleUpdate(e);
} else {
e._unregisterAccelerometerEvent();
e._accelCurTime = 0;
i.unscheduleUpdate(e);
}
jsb.device.setMotionEnabled(t);
}
};
r.setAccelerometerInterval = function(t) {
if (this._accelInterval !== t) {
this._accelInterval = t;
jsb.device.setMotionInterval(t);
}
};
r._registerKeyboardEvent = function() {
cc.game.canvas.addEventListener("keydown", (function(t) {
n.dispatchEvent(new cc.Event.EventKeyboard(t.keyCode, !0));
t.stopPropagation();
t.preventDefault();
}), !1);
cc.game.canvas.addEventListener("keyup", (function(t) {
n.dispatchEvent(new cc.Event.EventKeyboard(t.keyCode, !1));
t.stopPropagation();
t.preventDefault();
}), !1);
};
r._registerAccelerometerEvent = function() {
var t = window, e = this;
e._acceleration = new cc.Acceleration();
e._accelDeviceEvent = t.DeviceMotionEvent || t.DeviceOrientationEvent;
cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ && (e._accelDeviceEvent = window.DeviceOrientationEvent);
var i = e._accelDeviceEvent === t.DeviceMotionEvent ? "devicemotion" : "deviceorientation", n = navigator.userAgent;
(/Android/.test(n) || /Adr/.test(n) && cc.sys.browserType === cc.BROWSER_TYPE_UC) && (e._minus = -1);
s = e.didAccelerate.bind(e);
t.addEventListener(i, s, !1);
};
r._unregisterAccelerometerEvent = function() {
var t = window, e = this._accelDeviceEvent === t.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
s && t.removeEventListener(e, s, !1);
};
r.didAccelerate = function(t) {
var e = this, i = window;
if (e._accelEnabled) {
var n = e._acceleration, r = void 0, s = void 0, a = void 0;
if (e._accelDeviceEvent === window.DeviceMotionEvent) {
var o = t.accelerationIncludingGravity;
r = e._accelMinus * o.x * .1;
s = e._accelMinus * o.y * .1;
a = .1 * o.z;
} else {
r = t.gamma / 90 * .981;
s = -t.beta / 90 * .981;
a = t.alpha / 90 * .981;
}
if (cc.view._isRotated) {
var c = r;
r = -s;
s = c;
}
n.x = r;
n.y = s;
n.z = a;
n.timestamp = t.timeStamp || Date.now();
var h = n.x;
if (90 === i.orientation) {
n.x = -n.y;
n.y = h;
} else if (-90 === i.orientation) {
n.x = n.y;
n.y = -h;
} else if (180 === i.orientation) {
n.x = -n.x;
n.y = -n.y;
}
if (cc.sys.os === cc.sys.OS_ANDROID && cc.sys.browserType !== cc.sys.BROWSER_TYPE_MOBILE_QQ) {
n.x = -n.x;
n.y = -n.y;
}
}
};
}), {
"../event-manager": 100,
"./CCInputManager": 138
} ],
138: [ (function(t, e, i) {
var n = t("./CCMacro"), r = t("./CCSys"), s = t("../event-manager"), a = n.TOUCH_TIMEOUT, o = cc.v2(), c = {
_mousePressed: !1,
_isRegisterEvent: !1,
_preTouchPoint: cc.v2(0, 0),
_prevMousePoint: cc.v2(0, 0),
_preTouchPool: [],
_preTouchPoolPointer: 0,
_touches: [],
_touchesIntegerDict: {},
_indexBitsUsed: 0,
_maxTouches: 8,
_accelEnabled: !1,
_accelInterval: .2,
_accelMinus: 1,
_accelCurTime: 0,
_acceleration: null,
_accelDeviceEvent: null,
_getUnUsedIndex: function() {
for (var t = this._indexBitsUsed, e = cc.sys.now(), i = 0; i < this._maxTouches; i++) {
if (!(1 & t)) {
this._indexBitsUsed |= 1 << i;
return i;
}
var n = this._touches[i];
if (e - n._lastModified > a) {
this._removeUsedIndexBit(i);
delete this._touchesIntegerDict[n.getID()];
return i;
}
t >>= 1;
}
return -1;
},
_removeUsedIndexBit: function(t) {
if (!(t < 0 || t >= this._maxTouches)) {
var e = 1 << t;
e = ~e;
this._indexBitsUsed &= e;
}
},
_glView: null,
handleTouchesBegin: function(t) {
for (var e = void 0, i = void 0, n = void 0, a = [], o = this._touchesIntegerDict, c = r.now(), h = 0, l = t.length; h < l; h++) if (null == o[n = (e = t[h]).getID()]) {
var u = this._getUnUsedIndex();
if (-1 === u) {
cc.logID(2300, u);
continue;
}
(i = this._touches[u] = new cc.Touch(e._point.x, e._point.y, e.getID()))._lastModified = c;
i._setPrevPoint(e._prevPoint);
o[n] = u;
a.push(i);
}
if (a.length > 0) {
this._glView._convertTouchesWithScale(a);
var f = new cc.Event.EventTouch(a);
f._eventCode = cc.Event.EventTouch.BEGAN;
s.dispatchEvent(f);
}
},
handleTouchesMove: function(t) {
for (var e = void 0, i = void 0, n = void 0, a = [], o = this._touches, c = r.now(), h = 0, l = t.length; h < l; h++) {
n = (e = t[h]).getID();
if (null != (i = this._touchesIntegerDict[n]) && o[i]) {
o[i]._setPoint(e._point);
o[i]._setPrevPoint(e._prevPoint);
o[i]._lastModified = c;
a.push(o[i]);
}
}
if (a.length > 0) {
this._glView._convertTouchesWithScale(a);
var u = new cc.Event.EventTouch(a);
u._eventCode = cc.Event.EventTouch.MOVED;
s.dispatchEvent(u);
}
},
handleTouchesEnd: function(t) {
var e = this.getSetOfTouchesEndOrCancel(t);
if (e.length > 0) {
this._glView._convertTouchesWithScale(e);
var i = new cc.Event.EventTouch(e);
i._eventCode = cc.Event.EventTouch.ENDED;
s.dispatchEvent(i);
}
this._preTouchPool.length = 0;
},
handleTouchesCancel: function(t) {
var e = this.getSetOfTouchesEndOrCancel(t);
if (e.length > 0) {
this._glView._convertTouchesWithScale(e);
var i = new cc.Event.EventTouch(e);
i._eventCode = cc.Event.EventTouch.CANCELLED;
s.dispatchEvent(i);
}
this._preTouchPool.length = 0;
},
getSetOfTouchesEndOrCancel: function(t) {
for (var e = void 0, i = void 0, n = void 0, r = [], s = this._touches, a = this._touchesIntegerDict, o = 0, c = t.length; o < c; o++) if (null != (i = a[n = (e = t[o]).getID()]) && s[i]) {
s[i]._setPoint(e._point);
s[i]._setPrevPoint(e._prevPoint);
r.push(s[i]);
this._removeUsedIndexBit(i);
delete a[n];
}
return r;
},
getHTMLElementPosition: function(t) {
0;
var e = document.documentElement, i = window.pageXOffset - e.clientLeft, n = window.pageYOffset - e.clientTop;
if (t.getBoundingClientRect) {
var r = t.getBoundingClientRect();
return {
left: r.left + i,
top: r.top + n,
width: r.width,
height: r.height
};
}
return t instanceof HTMLCanvasElement ? {
left: i,
top: n,
width: t.width,
height: t.height
} : {
left: i,
top: n,
width: parseInt(t.style.width),
height: parseInt(t.style.height)
};
},
getPreTouch: function(t) {
for (var e = null, i = this._preTouchPool, n = t.getID(), r = i.length - 1; r >= 0; r--) if (i[r].getID() === n) {
e = i[r];
break;
}
e || (e = t);
return e;
},
setPreTouch: function(t) {
for (var e = !1, i = this._preTouchPool, n = t.getID(), r = i.length - 1; r >= 0; r--) if (i[r].getID() === n) {
i[r] = t;
e = !0;
break;
}
if (!e) if (i.length <= 50) i.push(t); else {
i[this._preTouchPoolPointer] = t;
this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
}
},
getTouchByXY: function(t, e, i) {
var n = this._preTouchPoint, r = this._glView.convertToLocationInView(t, e, i), s = new cc.Touch(r.x, r.y, 0);
s._setPrevPoint(n.x, n.y);
n.x = r.x;
n.y = r.y;
return s;
},
getMouseEvent: function(t, e, i) {
var n = this._prevMousePoint, r = new cc.Event.EventMouse(i);
r._setPrevCursor(n.x, n.y);
n.x = t.x;
n.y = t.y;
this._glView._convertMouseToLocationInView(n, e);
r.setLocation(n.x, n.y);
return r;
},
getPointByEvent: function(t, e) {
if (null != t.pageX) return {
x: t.pageX,
y: t.pageY
};
e.left -= document.body.scrollLeft;
e.top -= document.body.scrollTop;
return {
x: t.clientX,
y: t.clientY
};
},
getTouchesByEvent: function(t, e) {
for (var i = [], n = this._glView, s = void 0, a = void 0, c = void 0, h = this._preTouchPoint, l = t.changedTouches.length, u = 0; u < l; u++) if (s = t.changedTouches[u]) {
var f = void 0;
f = r.BROWSER_TYPE_FIREFOX === r.browserType ? n.convertToLocationInView(s.pageX, s.pageY, e, o) : n.convertToLocationInView(s.clientX, s.clientY, e, o);
if (null != s.identifier) {
a = new cc.Touch(f.x, f.y, s.identifier);
c = this.getPreTouch(a).getLocation();
a._setPrevPoint(c.x, c.y);
this.setPreTouch(a);
} else (a = new cc.Touch(f.x, f.y))._setPrevPoint(h.x, h.y);
h.x = f.x;
h.y = f.y;
i.push(a);
}
return i;
},
registerSystemEvent: function(t) {
if (!this._isRegisterEvent) {
this._glView = cc.view;
var e = this, i = r.isMobile, n = "mouse" in r.capabilities, a = "touches" in r.capabilities;
0;
if (n) {
if (!i) {
window.addEventListener("mousedown", (function() {
e._mousePressed = !0;
}), !1);
window.addEventListener("mouseup", (function(i) {
if (e._mousePressed) {
e._mousePressed = !1;
var n = e.getHTMLElementPosition(t), r = e.getPointByEvent(i, n);
if (!cc.rect(n.left, n.top, n.width, n.height).contains(r)) {
e.handleTouchesEnd([ e.getTouchByXY(r.x, r.y, n) ]);
var a = e.getMouseEvent(r, n, cc.Event.EventMouse.UP);
a.setButton(i.button);
s.dispatchEvent(a);
}
}
}), !1);
}
for (var o = cc.Event.EventMouse, c = [ !i && [ "mousedown", o.DOWN, function(i, n, r, s) {
e._mousePressed = !0;
e.handleTouchesBegin([ e.getTouchByXY(r.x, r.y, s) ]);
t.focus();
} ], !i && [ "mouseup", o.UP, function(t, i, n, r) {
e._mousePressed = !1;
e.handleTouchesEnd([ e.getTouchByXY(n.x, n.y, r) ]);
} ], !i && [ "mousemove", o.MOVE, function(t, i, n, r) {
e.handleTouchesMove([ e.getTouchByXY(n.x, n.y, r) ]);
e._mousePressed || i.setButton(null);
} ], [ "mousewheel", o.SCROLL, function(t, e) {
e.setScrollData(0, t.wheelDelta);
} ], [ "DOMMouseScroll", o.SCROLL, function(t, e) {
e.setScrollData(0, -120 * t.detail);
} ] ], h = 0; h < c.length; ++h) {
var l = c[h];
l && (function() {
var i = l[0], n = l[1], r = l[2];
t.addEventListener(i, (function(i) {
var a = e.getHTMLElementPosition(t), o = e.getPointByEvent(i, a), c = e.getMouseEvent(o, a, n);
c.setButton(i.button);
r(i, c, o, a);
s.dispatchEvent(c);
i.stopPropagation();
i.preventDefault();
}), !1);
})();
}
}
if (window.navigator.msPointerEnabled) {
var u = {
MSPointerDown: e.handleTouchesBegin,
MSPointerMove: e.handleTouchesMove,
MSPointerUp: e.handleTouchesEnd,
MSPointerCancel: e.handleTouchesCancel
}, f = function(i) {
var n = u[i];
t.addEventListener(i, (function(i) {
var r = e.getHTMLElementPosition(t);
r.left -= document.documentElement.scrollLeft;
r.top -= document.documentElement.scrollTop;
n.call(e, [ e.getTouchByXY(i.clientX, i.clientY, r) ]);
i.stopPropagation();
}), !1);
};
for (var _ in u) f(_);
}
a && (function() {
var i = {
touchstart: function(i) {
e.handleTouchesBegin(i);
t.focus();
},
touchmove: function(t) {
e.handleTouchesMove(t);
},
touchend: function(t) {
e.handleTouchesEnd(t);
},
touchcancel: function(t) {
e.handleTouchesCancel(t);
}
}, n = void 0;
if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
i = {
onTouchStart: i.touchstart,
onTouchMove: i.touchmove,
onTouchEnd: i.touchend,
onTouchCancel: i.touchcancel
};
n = function(n) {
var r = i[n];
wx[n]((function(i) {
if (i.changedTouches) {
var n = e.getHTMLElementPosition(t), s = document.body;
n.left -= s.scrollLeft || 0;
n.top -= s.scrollTop || 0;
r(e.getTouchesByEvent(i, n));
}
}));
};
} else n = function(n) {
var r = i[n];
t.addEventListener(n, (function(i) {
if (i.changedTouches) {
var n = e.getHTMLElementPosition(t), s = document.body;
n.left -= s.scrollLeft || 0;
n.top -= s.scrollTop || 0;
r(e.getTouchesByEvent(i, n));
i.stopPropagation();
i.preventDefault();
}
}), !1);
};
for (var r in i) n(r);
})();
cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB && this._registerKeyboardEvent();
this._isRegisterEvent = !0;
}
},
_registerKeyboardEvent: function() {},
_registerAccelerometerEvent: function() {},
update: function(t) {
if (this._accelCurTime > this._accelInterval) {
this._accelCurTime -= this._accelInterval;
s.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
}
this._accelCurTime += t;
}
};
e.exports = _cc.inputManager = c;
}), {
"../event-manager": 100,
"./CCMacro": 139,
"./CCSys": 143
} ],
139: [ (function(t, e, i) {
var n = t("./js");
cc.macro = {
RAD: Math.PI / 180,
DEG: 180 / Math.PI,
REPEAT_FOREVER: Number.MAX_VALUE - 1,
FLT_EPSILON: 1.192092896e-7,
MIN_ZINDEX: -Math.pow(2, 15),
MAX_ZINDEX: Math.pow(2, 15) - 1,
ONE: 1,
ZERO: 0,
SRC_ALPHA: 770,
SRC_ALPHA_SATURATE: 776,
SRC_COLOR: 768,
DST_ALPHA: 772,
DST_COLOR: 774,
ONE_MINUS_SRC_ALPHA: 771,
ONE_MINUS_SRC_COLOR: 769,
ONE_MINUS_DST_ALPHA: 773,
ONE_MINUS_DST_COLOR: 775,
ONE_MINUS_CONSTANT_ALPHA: 32772,
ONE_MINUS_CONSTANT_COLOR: 32770,
ORIENTATION_PORTRAIT: 1,
ORIENTATION_LANDSCAPE: 2,
ORIENTATION_AUTO: 3,
DENSITYDPI_DEVICE: "device-dpi",
DENSITYDPI_HIGH: "high-dpi",
DENSITYDPI_MEDIUM: "medium-dpi",
DENSITYDPI_LOW: "low-dpi",
FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: !0,
DIRECTOR_STATS_POSITION: cc.v2(0, 0),
ENABLE_STACKABLE_ACTIONS: !0,
TOUCH_TIMEOUT: 5e3,
BATCH_VERTEX_COUNT: 2e4,
ENABLE_TILEDMAP_CULLING: !0,
DOWNLOAD_MAX_CONCURRENT: 64,
ENABLE_TRANSPARENT_CANVAS: !1,
ENABLE_WEBGL_ANTIALIAS: !1,
ENABLE_CULLING: !1,
CLEANUP_IMAGE_CACHE: !1
};
n.getset(cc.macro, "ENABLE_3D", (function() {
return cc._polyfill3D.enabled;
}), (function(t) {
t ? cc._polyfill3D.enable() : cc._polyfill3D.disable();
}));
cc.macro.KEY = {
none: 0,
back: 6,
menu: 18,
backspace: 8,
tab: 9,
enter: 13,
shift: 16,
ctrl: 17,
alt: 18,
pause: 19,
capslock: 20,
escape: 27,
space: 32,
pageup: 33,
pagedown: 34,
end: 35,
home: 36,
left: 37,
up: 38,
right: 39,
down: 40,
select: 41,
insert: 45,
Delete: 46,
0: 48,
1: 49,
2: 50,
3: 51,
4: 52,
5: 53,
6: 54,
7: 55,
8: 56,
9: 57,
a: 65,
b: 66,
c: 67,
d: 68,
e: 69,
f: 70,
g: 71,
h: 72,
i: 73,
j: 74,
k: 75,
l: 76,
m: 77,
n: 78,
o: 79,
p: 80,
q: 81,
r: 82,
s: 83,
t: 84,
u: 85,
v: 86,
w: 87,
x: 88,
y: 89,
z: 90,
num0: 96,
num1: 97,
num2: 98,
num3: 99,
num4: 100,
num5: 101,
num6: 102,
num7: 103,
num8: 104,
num9: 105,
"*": 106,
"+": 107,
"-": 109,
numdel: 110,
"/": 111,
f1: 112,
f2: 113,
f3: 114,
f4: 115,
f5: 116,
f6: 117,
f7: 118,
f8: 119,
f9: 120,
f10: 121,
f11: 122,
f12: 123,
numlock: 144,
scrolllock: 145,
";": 186,
semicolon: 186,
equal: 187,
"=": 187,
",": 188,
comma: 188,
dash: 189,
".": 190,
period: 190,
forwardslash: 191,
grave: 192,
"[": 219,
openbracket: 219,
backslash: 220,
"]": 221,
closebracket: 221,
quote: 222,
dpadLeft: 1e3,
dpadRight: 1001,
dpadUp: 1003,
dpadDown: 1004,
dpadCenter: 1005
};
cc.macro.ImageFormat = cc.Enum({
JPG: 0,
PNG: 1,
TIFF: 2,
WEBP: 3,
PVR: 4,
ETC: 5,
S3TC: 6,
ATITC: 7,
TGA: 8,
RAWDATA: 9,
UNKNOWN: 10
});
cc.macro.BlendFactor = cc.Enum({
ONE: 1,
ZERO: 0,
SRC_ALPHA: 770,
SRC_COLOR: 768,
DST_ALPHA: 772,
DST_COLOR: 774,
ONE_MINUS_SRC_ALPHA: 771,
ONE_MINUS_SRC_COLOR: 769,
ONE_MINUS_DST_ALPHA: 773,
ONE_MINUS_DST_COLOR: 775
});
cc.macro.TextAlignment = cc.Enum({
LEFT: 0,
CENTER: 1,
RIGHT: 2
});
cc.macro.VerticalTextAlignment = cc.Enum({
TOP: 0,
CENTER: 1,
BOTTOM: 2
});
e.exports = cc.macro;
}), {
"./js": 154
} ],
140: [ (function(i, n, r) {
var s = i("./js"), a = i("./CCClass"), o = 1;
function c() {
this._name = "";
this._objFlags = 0;
}
a.fastDefine("cc.Object", c, {
_name: "",
_objFlags: 0
});
s.value(c, "Flags", {
Destroyed: o,
DontSave: 8,
EditorOnly: 16,
Dirty: 32,
DontDestroy: 64,
PersistentMask: -4192741,
Destroying: 128,
Deactivating: 256,
LockedInEditor: 512,
IsPreloadStarted: 8192,
IsOnLoadStarted: 32768,
IsOnLoadCalled: 16384,
IsOnEnableCalled: 2048,
IsStartCalled: 65536,
IsEditorOnEnableCalled: 4096,
IsPositionLocked: 1 << 21,
IsRotationLocked: 1 << 17,
IsScaleLocked: 1 << 18,
IsAnchorLocked: 1 << 19,
IsSizeLocked: 1 << 20
});
var h = [];
function l() {
for (var t = h.length, e = 0; e < t; ++e) {
var i = h[e];
i._objFlags & o || i._destroyImmediate();
}
t === h.length ? h.length = 0 : h.splice(0, t);
0;
}
s.value(c, "_deferredDestroy", l);
0;
var u = c.prototype;
s.getset(u, "name", (function() {
return this._name;
}), (function(t) {
this._name = t;
}), !0);
s.get(u, "isValid", (function() {
return !(this._objFlags & o);
}), !0);
0;
u.destroy = function() {
if (this._objFlags & o) {
cc.warnID(5e3);
return !1;
}
if (4 & this._objFlags) return !1;
this._objFlags |= 4;
h.push(this);
0;
return !0;
};
0;
function f(i, n) {
var r, s = i instanceof cc._BaseNode || i instanceof cc.Component, o = s ? "_id" : null, c = {};
for (r in i) if (i.hasOwnProperty(r)) {
if (r === o) continue;
switch ("object" === (e = typeof i[r]) ? t(i[r]) : e) {
case "string":
c[r] = "";
break;

case "object":
case "function":
c[r] = null;
}
}
if (cc.Class._isCCClass(n)) for (var h = cc.Class.Attr.getClassAttrs(n), l = n.__props__, u = 0; u < l.length; u++) {
var f = (r = l[u]) + cc.Class.Attr.DELIMETER + "default";
if (f in h) {
if (s && "_id" === r) continue;
switch ("object" === (e = typeof h[f]) ? t(h[f]) : e) {
case "string":
c[r] = "";
break;

case "object":
case "function":
c[r] = null;
break;

case "undefined":
c[r] = void 0;
}
}
}
var _ = "";
for (r in c) {
var d;
d = a.IDENTIFIER_RE.test(r) ? "o." + r + "=" : "o[" + a.escapeForJS(r) + "]=";
var p = c[r];
"" === p && (p = '""');
_ += d + p + ";\n";
}
return Function("o", _);
}
u._destruct = function() {
var t = this.constructor, e = t.__destruct__;
if (!e) {
e = f(this, t);
s.value(t, "__destruct__", e, !0);
}
e(this);
};
u._onPreDestroy = null;
u._destroyImmediate = function() {
if (this._objFlags & o) cc.errorID(5e3); else {
this._onPreDestroy && this._onPreDestroy();
this._destruct();
this._objFlags |= o;
}
};
0;
u._deserialize = null;
cc.isValid = function(i, n) {
return "object" === ("object" === (e = typeof i) ? t(i) : e) ? !(!i || i._objFlags & (n ? 4 | o : o)) : "undefined" !== ("object" === (e = typeof i) ? t(i) : e);
};
0;
cc.Object = n.exports = c;
}), {
"./CCClass": 134,
"./js": 154
} ],
141: [ (function(t, e, i) {
var n = t("../platform/js");
cc.SAXParser = function() {
if (window.DOMParser) {
this._isSupportDOMParser = !0;
this._parser = new DOMParser();
} else {
this._isSupportDOMParser = !1;
this._parser = null;
}
};
cc.SAXParser.prototype = {
constructor: cc.SAXParser,
parse: function(t) {
return this._parseXML(t);
},
_parseXML: function(t) {
var e;
if (this._isSupportDOMParser) e = this._parser.parseFromString(t, "text/xml"); else {
(e = new ActiveXObject("Microsoft.XMLDOM")).async = "false";
e.loadXML(t);
}
return e;
}
};
cc.PlistParser = function() {
cc.SAXParser.call(this);
};
n.extend(cc.PlistParser, cc.SAXParser);
n.mixin(cc.PlistParser.prototype, {
parse: function(t) {
var e = this._parseXML(t), i = e.documentElement;
if ("plist" !== i.tagName) {
cc.warnID(5100);
return {};
}
for (var n = null, r = 0, s = i.childNodes.length; r < s && 1 !== (n = i.childNodes[r]).nodeType; r++) ;
e = null;
return this._parseNode(n);
},
_parseNode: function(t) {
var e = null, i = t.tagName;
if ("dict" === i) e = this._parseDict(t); else if ("array" === i) e = this._parseArray(t); else if ("string" === i) if (1 === t.childNodes.length) e = t.firstChild.nodeValue; else {
e = "";
for (var n = 0; n < t.childNodes.length; n++) e += t.childNodes[n].nodeValue;
} else "false" === i ? e = !1 : "true" === i ? e = !0 : "real" === i ? e = parseFloat(t.firstChild.nodeValue) : "integer" === i && (e = parseInt(t.firstChild.nodeValue, 10));
return e;
},
_parseArray: function(t) {
for (var e = [], i = 0, n = t.childNodes.length; i < n; i++) {
var r = t.childNodes[i];
1 === r.nodeType && e.push(this._parseNode(r));
}
return e;
},
_parseDict: function(t) {
for (var e = {}, i = null, n = 0, r = t.childNodes.length; n < r; n++) {
var s = t.childNodes[n];
1 === s.nodeType && ("key" === s.tagName ? i = s.firstChild.nodeValue : e[i] = this._parseNode(s));
}
return e;
}
});
cc.saxParser = new cc.SAXParser();
cc.plistParser = new cc.PlistParser();
e.exports = {
saxParser: cc.saxParser,
plistParser: cc.plistParser
};
}), {
"../platform/js": 154
} ],
142: [ (function(i, n, r) {
cc.screen = {
_supportsFullScreen: !1,
_preOnFullScreenChange: null,
_touchEvent: "",
_fn: null,
_fnMap: [ [ "requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenEnabled", "fullscreenElement" ], [ "requestFullScreen", "exitFullScreen", "fullScreenchange", "fullScreenEnabled", "fullScreenElement" ], [ "webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitIsFullScreen", "webkitCurrentFullScreenElement" ], [ "mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozFullScreen", "mozFullScreenElement" ], [ "msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "msFullscreenEnabled", "msFullscreenElement" ] ],
init: function() {
this._fn = {};
var i, n, r, s, a = this._fnMap;
for (i = 0, n = a.length; i < n; i++) if ((r = a[i]) && "undefined" !== ("object" === (e = typeof document[r[1]]) ? t(document[r[1]]) : e)) {
for (i = 0, s = r.length; i < s; i++) this._fn[a[0][i]] = r[i];
break;
}
this._supportsFullScreen = void 0 !== this._fn.requestFullscreen;
this._touchEvent = "ontouchstart" in window ? "touchstart" : "mousedown";
},
fullScreen: function() {
return !!this._supportsFullScreen && !!(document[this._fn.fullscreenElement] || document[this._fn.webkitFullscreenElement] || document[this._fn.mozFullScreenElement]);
},
requestFullScreen: function(t, e) {
if (t && "video" === t.tagName.toLowerCase()) {
if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && t.readyState > 0) {
t.webkitEnterFullscreen && t.webkitEnterFullscreen();
return;
}
t.setAttribute("x5-video-player-fullscreen", "true");
}
if (this._supportsFullScreen) {
t = t || document.documentElement;
if (e) {
var i = this._fn.fullscreenchange;
this._preOnFullScreenChange && document.removeEventListener(i, this._preOnFullScreenChange);
this._preOnFullScreenChange = e;
document.addEventListener(i, e, !1);
}
return t[this._fn.requestFullscreen]();
}
},
exitFullScreen: function(t) {
if (t && "video" === t.tagName.toLowerCase()) {
if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
t.webkitExitFullscreen && t.webkitExitFullscreen();
return;
}
t.setAttribute("x5-video-player-fullscreen", "false");
}
return !this._supportsFullScreen || document[this._fn.exitFullscreen]();
},
autoFullScreen: function(t, e) {
t = t || document.body;
var i = cc.game.canvas || t, n = this;
this.requestFullScreen(t, e);
i.addEventListener(this._touchEvent, (function r() {
i.removeEventListener(n._touchEvent, r);
n.requestFullScreen(t, e);
}));
}
};
cc.screen.init();
}), {} ],
143: [ (function(i, n, r) {
var s = void 0, a = (s = window._CCSettings ? _CCSettings.platform : void 0, "qgame" === s), o = "quickgame" === s, c = "huawei" === s, h = "jkw-game" === s, l = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window;
var u = cc && cc.sys ? cc.sys : (function() {
cc.sys = {};
var i = cc.sys;
i.LANGUAGE_ENGLISH = "en";
i.LANGUAGE_CHINESE = "zh";
i.LANGUAGE_FRENCH = "fr";
i.LANGUAGE_ITALIAN = "it";
i.LANGUAGE_GERMAN = "de";
i.LANGUAGE_SPANISH = "es";
i.LANGUAGE_DUTCH = "du";
i.LANGUAGE_RUSSIAN = "ru";
i.LANGUAGE_KOREAN = "ko";
i.LANGUAGE_JAPANESE = "ja";
i.LANGUAGE_HUNGARIAN = "hu";
i.LANGUAGE_PORTUGUESE = "pt";
i.LANGUAGE_ARABIC = "ar";
i.LANGUAGE_NORWEGIAN = "no";
i.LANGUAGE_POLISH = "pl";
i.LANGUAGE_TURKISH = "tr";
i.LANGUAGE_UKRAINIAN = "uk";
i.LANGUAGE_ROMANIAN = "ro";
i.LANGUAGE_BULGARIAN = "bg";
i.LANGUAGE_UNKNOWN = "unknown";
i.OS_IOS = "iOS";
i.OS_ANDROID = "Android";
i.OS_WINDOWS = "Windows";
i.OS_MARMALADE = "Marmalade";
i.OS_LINUX = "Linux";
i.OS_BADA = "Bada";
i.OS_BLACKBERRY = "Blackberry";
i.OS_OSX = "OS X";
i.OS_WP8 = "WP8";
i.OS_WINRT = "WINRT";
i.OS_UNKNOWN = "Unknown";
i.UNKNOWN = -1;
i.WIN32 = 0;
i.LINUX = 1;
i.MACOS = 2;
i.ANDROID = 3;
i.IPHONE = 4;
i.IPAD = 5;
i.BLACKBERRY = 6;
i.NACL = 7;
i.EMSCRIPTEN = 8;
i.TIZEN = 9;
i.WINRT = 10;
i.WP8 = 11;
i.MOBILE_BROWSER = 100;
i.DESKTOP_BROWSER = 101;
i.EDITOR_PAGE = 102;
i.EDITOR_CORE = 103;
i.WECHAT_GAME = 104;
i.QQ_PLAY = 105;
i.FB_PLAYABLE_ADS = 106;
i.BAIDU_GAME = 107;
i.VIVO_GAME = 108;
i.OPPO_GAME = 109;
i.HUAWEI_GAME = 110;
i.XIAOMI_GAME = 111;
i.JKW_GAME = 112;
i.BROWSER_TYPE_WECHAT = "wechat";
i.BROWSER_TYPE_WECHAT_GAME = "wechatgame";
i.BROWSER_TYPE_WECHAT_GAME_SUB = "wechatgamesub";
i.BROWSER_TYPE_BAIDU_GAME = "baidugame";
i.BROWSER_TYPE_BAIDU_GAME_SUB = "baidugamesub";
i.BROWSER_TYPE_XIAOMI_GAME = "xiaomigame";
i.BROWSER_TYPE_QQ_PLAY = "qqplay";
i.BROWSER_TYPE_ANDROID = "androidbrowser";
i.BROWSER_TYPE_IE = "ie";
i.BROWSER_TYPE_QQ = "qqbrowser";
i.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
i.BROWSER_TYPE_UC = "ucbrowser";
i.BROWSER_TYPE_UCBS = "ucbs";
i.BROWSER_TYPE_360 = "360browser";
i.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
i.BROWSER_TYPE_BAIDU = "baidubrowser";
i.BROWSER_TYPE_MAXTHON = "maxthon";
i.BROWSER_TYPE_OPERA = "opera";
i.BROWSER_TYPE_OUPENG = "oupeng";
i.BROWSER_TYPE_MIUI = "miuibrowser";
i.BROWSER_TYPE_FIREFOX = "firefox";
i.BROWSER_TYPE_SAFARI = "safari";
i.BROWSER_TYPE_CHROME = "chrome";
i.BROWSER_TYPE_LIEBAO = "liebao";
i.BROWSER_TYPE_QZONE = "qzone";
i.BROWSER_TYPE_SOUGOU = "sogou";
i.BROWSER_TYPE_UNKNOWN = "unknown";
i.isNative = !0;
i.isBrowser = "object" === ("object" == (e = typeof window) ? t(window) : e) && "object" === ("object" == (e = typeof document) ? t(document) : e) && !1;
if (l.__platform && l.__platform.getSystemInfo) {
var n = l.__platform.getSystemInfo();
i.isNative = n.isNative;
i.isBrowser = n.isBrowser;
i.platform = n.platform;
i.browserType = n.browserType;
i.isMobile = n.isMobile;
i.language = n.language;
i.languageCode = n.language.toLowerCase();
i.os = n.os;
i.osVersion = n.osVersion;
i.osMainVersion = n.osMainVersion;
i.browserVersion = n.browserVersion;
i.windowPixelResolution = n.windowPixelResolution;
i.localStorage = n.localStorage;
i.capabilities = n.capabilities;
i.__audioSupport = n.audioSupport;
l.__platform = void 0;
} else {
var r, s = void 0;
s = a ? i.VIVO_GAME : o ? i.OPPO_GAME : c ? i.HUAWEI_GAME : h ? i.JKW_GAME : __getPlatform();
i.platform = s;
i.isMobile = s === i.ANDROID || s === i.IPAD || s === i.IPHONE || s === i.WP8 || s === i.TIZEN || s === i.BLACKBERRY || s === i.XIAOMI_GAME || a || o || c || h;
i.os = __getOS();
i.language = __getCurrentLanguage();
r = __getCurrentLanguageCode();
i.languageCode = r ? r.toLowerCase() : void 0;
i.osVersion = __getOSVersion();
i.osMainVersion = parseInt(i.osVersion);
i.browserType = null;
i.browserVersion = null;
var u, f = window.innerWidth, _ = window.innerHeight, d = window.devicePixelRatio || 1;
i.windowPixelResolution = {
width: d * f,
height: d * _
};
i.localStorage = window.localStorage;
u = i.capabilities = {
canvas: !1,
opengl: !0,
webp: !0
};
if (i.isMobile) {
u.accelerometer = !0;
u.touches = !0;
} else {
u.keyboard = !0;
u.mouse = !0;
u.touches = !1;
}
i.__audioSupport = {
ONLY_ONE: !1,
WEB_AUDIO: !1,
DELAY_CREATE_CTX: !1,
format: [ ".mp3" ]
};
}
i.NetworkType = {
NONE: 0,
LAN: 1,
WWAN: 2
};
i.getNetworkType = function() {
return i.NetworkType.LAN;
};
i.getBatteryLevel = function() {
return 1;
};
i.garbageCollect = function() {};
i.restartVM = function() {};
i.getSafeAreaRect = function() {
var t = cc.view.getVisibleSize();
return cc.rect(0, 0, t.width, t.height);
};
i.isObjectValid = function(t) {
return !!t;
};
i.dump = function() {
var t = "";
t += "isMobile : " + this.isMobile + "\r\n";
t += "language : " + this.language + "\r\n";
t += "browserType : " + this.browserType + "\r\n";
t += "browserVersion : " + this.browserVersion + "\r\n";
t += "capabilities : " + JSON.stringify(this.capabilities) + "\r\n";
t += "os : " + this.os + "\r\n";
t += "osVersion : " + this.osVersion + "\r\n";
t += "platform : " + this.platform + "\r\n";
t += "Using " + (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WEBGL" : "CANVAS") + " renderer.\r\n";
cc.log(t);
};
i.openURL = function(t) {
jsb.openURL(t);
};
i.now = function() {
return Date.now ? Date.now() : +new Date();
};
return i;
})();
n.exports = u;
}), {} ],
144: [ (function(i, n, r) {
var s = i("../event/event-target"), a = i("../platform/js"), o = i("../renderer");
i("../platform/CCClass");
var c = cc.sys.platform === cc.sys.XIAOMI_GAME, h = cc.sys.platform === cc.sys.BAIDU_GAME, l = {
init: function() {
h || c || (this.html = document.getElementsByTagName("html")[0]);
},
availWidth: function(t) {
return t && t !== this.html ? t.clientWidth : window.innerWidth;
},
availHeight: function(t) {
return t && t !== this.html ? t.clientHeight : window.innerHeight;
},
meta: {
width: "device-width"
},
adaptationType: cc.sys.browserType
};
cc.sys.os === cc.sys.OS_IOS && (l.adaptationType = cc.sys.BROWSER_TYPE_SAFARI);
h && (cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB ? l.adaptationType = cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB : l.adaptationType = cc.sys.BROWSER_TYPE_BAIDU_GAME);
c && (l.adaptationType = cc.sys.BROWSER_TYPE_XIAOMI_GAME);
0;
0;
switch (l.adaptationType) {
case cc.sys.BROWSER_TYPE_SAFARI:
l.meta["minimal-ui"] = "true";

case cc.sys.BROWSER_TYPE_SOUGOU:
case cc.sys.BROWSER_TYPE_UC:
l.availWidth = function(t) {
return t.clientWidth;
};
l.availHeight = function(t) {
return t.clientHeight;
};
break;

case cc.sys.BROWSER_TYPE_WECHAT_GAME:
l.availWidth = function() {
return window.innerWidth;
};
l.availHeight = function() {
return window.innerHeight;
};
break;

case cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB:
var u = window.sharedCanvas || wx.getSharedCanvas();
l.availWidth = function() {
return u.width;
};
l.availHeight = function() {
return u.height;
};
}
var f = null, _ = function() {
s.call(this);
var t = this, e = cc.ContainerStrategy, i = cc.ContentStrategy;
l.init(this);
t._frameSize = cc.size(0, 0);
t._designResolutionSize = cc.size(0, 0);
t._originalDesignResolutionSize = cc.size(0, 0);
t._scaleX = 1;
t._scaleY = 1;
t._viewportRect = cc.rect(0, 0, 0, 0);
t._visibleRect = cc.rect(0, 0, 0, 0);
t._autoFullScreen = !1;
t._devicePixelRatio = 1;
t._maxPixelRatio = 2;
t._retinaEnabled = !1;
t._resizeCallback = null;
t._resizing = !1;
t._resizeWithBrowserSize = !1;
t._orientationChanging = !0;
t._isRotated = !1;
t._orientation = cc.macro.ORIENTATION_AUTO;
t._isAdjustViewport = !0;
t._antiAliasEnabled = !1;
t._resolutionPolicy = null;
t._rpExactFit = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.EXACT_FIT);
t._rpShowAll = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.SHOW_ALL);
t._rpNoBorder = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.NO_BORDER);
t._rpFixedHeight = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.FIXED_HEIGHT);
t._rpFixedWidth = new cc.ResolutionPolicy(e.EQUAL_TO_FRAME, i.FIXED_WIDTH);
cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
};
cc.js.extend(_, s);
cc.js.mixin(_.prototype, {
init: function() {
this._initFrameSize();
this.enableAntiAlias(!0);
var t = cc.game.canvas.width, e = cc.game.canvas.height;
this._designResolutionSize.width = t;
this._designResolutionSize.height = e;
this._originalDesignResolutionSize.width = t;
this._originalDesignResolutionSize.height = e;
this._viewportRect.width = t;
this._viewportRect.height = e;
this._visibleRect.width = t;
this._visibleRect.height = e;
cc.winSize.width = this._visibleRect.width;
cc.winSize.height = this._visibleRect.height;
cc.visibleRect && cc.visibleRect.init(this._visibleRect);
},
_resizeEvent: function(t) {
var e, i = (e = this.setDesignResolutionSize ? this : cc.view)._frameSize.width, n = e._frameSize.height, r = e._isRotated;
if (cc.sys.isMobile) {
var s = cc.game.container.style, a = s.margin;
s.margin = "0";
s.display = "none";
e._initFrameSize();
s.margin = a;
s.display = "block";
} else e._initFrameSize();
if (!0 === t || e._isRotated !== r || e._frameSize.width !== i || e._frameSize.height !== n) {
var o = e._originalDesignResolutionSize.width, c = e._originalDesignResolutionSize.height;
e._resizing = !0;
o > 0 && e.setDesignResolutionSize(o, c, e._resolutionPolicy);
e._resizing = !1;
e.emit("canvas-resize");
e._resizeCallback && e._resizeCallback.call();
}
},
_orientationChange: function() {
cc.view._orientationChanging = !0;
cc.view._resizeEvent();
},
resizeWithBrowserSize: function(t) {
if (t) {
if (!this._resizeWithBrowserSize) {
this._resizeWithBrowserSize = !0;
window.addEventListener("resize", this._resizeEvent);
window.addEventListener("orientationchange", this._orientationChange);
}
} else if (this._resizeWithBrowserSize) {
this._resizeWithBrowserSize = !1;
window.removeEventListener("resize", this._resizeEvent);
window.removeEventListener("orientationchange", this._orientationChange);
}
},
setResizeCallback: function(i) {
0;
"function" !== ("object" === (e = typeof i) ? t(i) : e) && null != i || (this._resizeCallback = i);
},
setOrientation: function(t) {
if ((t &= cc.macro.ORIENTATION_AUTO) && this._orientation !== t) {
this._orientation = t;
var e = this._originalDesignResolutionSize.width, i = this._originalDesignResolutionSize.height;
this.setDesignResolutionSize(e, i, this._resolutionPolicy);
}
},
_initFrameSize: function() {
var t = this._frameSize, e = l.availWidth(cc.game.frame), i = l.availHeight(cc.game.frame), n = e >= i;
if (!cc.sys.isMobile || n && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !n && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
t.width = e;
t.height = i;
cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
cc.game.container.style.transform = "rotate(0deg)";
this._isRotated = !1;
} else {
t.width = i;
t.height = e;
cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
cc.game.container.style.transform = "rotate(90deg)";
cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px";
cc.game.container.style.transformOrigin = "0px 0px 0px";
this._isRotated = !0;
}
this._orientationChanging && setTimeout((function() {
cc.view._orientationChanging = !1;
}), 1e3);
},
_adjustSizeKeepCanvasSize: function() {
var t = this._originalDesignResolutionSize.width, e = this._originalDesignResolutionSize.height;
t > 0 && this.setDesignResolutionSize(t, e, this._resolutionPolicy);
},
_setViewportMeta: function(t, e) {
var i = document.getElementById("cocosMetaElement");
i && e && document.head.removeChild(i);
var n, r, s, a = document.getElementsByName("viewport"), o = a ? a[0] : null;
n = o ? o.content : "";
(i = i || document.createElement("meta")).id = "cocosMetaElement";
i.name = "viewport";
i.content = "";
for (r in t) if (-1 == n.indexOf(r)) n += "," + r + "=" + t[r]; else if (e) {
s = new RegExp(r + "s*=s*[^,]+");
n.replace(s, r + "=" + t[r]);
}
/^,/.test(n) && (n = n.substr(1));
i.content = n;
o && (o.content = n);
document.head.appendChild(i);
},
_adjustViewportMeta: function() {
if ((this._isAdjustViewport, 0) && !h && !c) {
this._setViewportMeta(l.meta, !1);
this._isAdjustViewport = !1;
}
},
adjustViewportMeta: function(t) {
this._isAdjustViewport = t;
},
enableRetina: function(t) {
this._retinaEnabled = !!t;
},
isRetinaEnabled: function() {
return this._retinaEnabled;
},
enableAntiAlias: function(t) {
if (this._antiAliasEnabled !== t) {
this._antiAliasEnabled = t;
if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
var e = cc.loader._cache;
for (var i in e) {
var n = e[i], r = n && n.content instanceof cc.Texture2D ? n.content : null;
if (r) {
var s = cc.Texture2D.Filter;
t ? r.setFilters(s.LINEAR, s.LINEAR) : r.setFilters(s.NEAREST, s.NEAREST);
}
}
} else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
var a = cc.game.canvas.getContext("2d");
a.imageSmoothingEnabled = t;
a.mozImageSmoothingEnabled = t;
}
}
},
isAntiAliasEnabled: function() {
return this._antiAliasEnabled;
},
enableAutoFullScreen: function(t) {
if (t && t !== this._autoFullScreen && cc.sys.isMobile && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT) {
this._autoFullScreen = !0;
cc.screen.autoFullScreen(cc.game.frame);
} else this._autoFullScreen = !1;
},
isAutoFullScreenEnabled: function() {
return this._autoFullScreen;
},
setCanvasSize: function(t, e) {
var i = cc.game.canvas, n = cc.game.container;
i.width = t * this._devicePixelRatio;
i.height = e * this._devicePixelRatio;
i.style.width = t + "px";
i.style.height = e + "px";
n.style.width = t + "px";
n.style.height = e + "px";
this._resizeEvent();
},
getCanvasSize: function() {
return cc.size(cc.game.canvas.width, cc.game.canvas.height);
},
getFrameSize: function() {
return cc.size(this._frameSize.width, this._frameSize.height);
},
setFrameSize: function(t, e) {
this._frameSize.width = t;
this._frameSize.height = e;
cc.game.frame.style.width = t + "px";
cc.game.frame.style.height = e + "px";
this._resizeEvent(!0);
},
getVisibleSize: function() {
return cc.size(this._visibleRect.width, this._visibleRect.height);
},
getVisibleSizeInPixel: function() {
return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
},
getVisibleOrigin: function() {
return cc.v2(this._visibleRect.x, this._visibleRect.y);
},
getVisibleOriginInPixel: function() {
return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
},
getResolutionPolicy: function() {
return this._resolutionPolicy;
},
setResolutionPolicy: function(t) {
var e = this;
if (t instanceof cc.ResolutionPolicy) e._resolutionPolicy = t; else {
var i = cc.ResolutionPolicy;
t === i.EXACT_FIT && (e._resolutionPolicy = e._rpExactFit);
t === i.SHOW_ALL && (e._resolutionPolicy = e._rpShowAll);
t === i.NO_BORDER && (e._resolutionPolicy = e._rpNoBorder);
t === i.FIXED_HEIGHT && (e._resolutionPolicy = e._rpFixedHeight);
t === i.FIXED_WIDTH && (e._resolutionPolicy = e._rpFixedWidth);
}
},
setDesignResolutionSize: function(t, e, i) {
if (t > 0 || e > 0) {
this.setResolutionPolicy(i);
var n = this._resolutionPolicy;
n && n.preApply(this);
cc.sys.isMobile && this._adjustViewportMeta();
this._orientationChanging = !0;
this._resizing || this._initFrameSize();
if (n) {
this._originalDesignResolutionSize.width = this._designResolutionSize.width = t;
this._originalDesignResolutionSize.height = this._designResolutionSize.height = e;
var r = n.apply(this, this._designResolutionSize);
if (r.scale && 2 === r.scale.length) {
this._scaleX = r.scale[0];
this._scaleY = r.scale[1];
}
if (r.viewport) {
var s = this._viewportRect, a = this._visibleRect, c = r.viewport;
s.x = c.x;
s.y = c.y;
s.width = c.width;
s.height = c.height;
a.x = 0;
a.y = 0;
a.width = c.width / this._scaleX;
a.height = c.height / this._scaleY;
}
n.postApply(this);
cc.winSize.width = this._visibleRect.width;
cc.winSize.height = this._visibleRect.height;
cc.visibleRect && cc.visibleRect.init(this._visibleRect);
o.updateCameraViewport();
this.emit("design-resolution-changed");
} else cc.logID(2201);
} else cc.logID(2200);
},
getDesignResolutionSize: function() {
return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
},
setRealPixelResolution: function(t, e, i) {
0;
this.setDesignResolutionSize(t, e, i);
},
setViewportInPoints: function(t, e, i, n) {
var r = this._scaleX, s = this._scaleY;
cc.game._renderContext.viewport(t * r + this._viewportRect.x, e * s + this._viewportRect.y, i * r, n * s);
},
setScissorInPoints: function(t, e, i, n) {
var r = this._scaleX, s = this._scaleY, a = Math.ceil(t * r + this._viewportRect.x), o = Math.ceil(e * s + this._viewportRect.y), c = Math.ceil(i * r), h = Math.ceil(n * s), l = cc.game._renderContext;
if (!f) {
var u = l.getParameter(l.SCISSOR_BOX);
f = cc.rect(u[0], u[1], u[2], u[3]);
}
if (f.x !== a || f.y !== o || f.width !== c || f.height !== h) {
f.x = a;
f.y = o;
f.width = c;
f.height = h;
l.scissor(a, o, c, h);
}
},
isScissorEnabled: function() {
return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
},
getScissorRect: function() {
if (!f) {
var t = gl.getParameter(gl.SCISSOR_BOX);
f = cc.rect(t[0], t[1], t[2], t[3]);
}
var e = 1 / this._scaleX, i = 1 / this._scaleY;
return cc.rect((f.x - this._viewportRect.x) * e, (f.y - this._viewportRect.y) * i, f.width * e, f.height * i);
},
getViewportRect: function() {
return this._viewportRect;
},
getScaleX: function() {
return this._scaleX;
},
getScaleY: function() {
return this._scaleY;
},
getDevicePixelRatio: function() {
return this._devicePixelRatio;
},
convertToLocationInView: function(t, e, i, n) {
var r = n || cc.v2(), s = this._devicePixelRatio * (t - i.left), a = this._devicePixelRatio * (i.top + i.height - e);
if (this._isRotated) {
r.x = cc.game.canvas.width - a;
r.y = s;
} else {
r.x = s;
r.y = a;
}
return r;
},
_convertMouseToLocationInView: function(t, e) {
var i = this._viewportRect;
t.x = (this._devicePixelRatio * (t.x - e.left) - i.x) / this._scaleX;
t.y = (this._devicePixelRatio * (e.top + e.height - t.y) - i.y) / this._scaleY;
},
_convertPointWithScale: function(t) {
var e = this._viewportRect;
t.x = (t.x - e.x) / this._scaleX;
t.y = (t.y - e.y) / this._scaleY;
},
_convertTouchesWithScale: function(t) {
for (var e, i, n, r = this._viewportRect, s = this._scaleX, a = this._scaleY, o = 0; o < t.length; o++) {
i = (e = t[o])._point;
n = e._prevPoint;
i.x = (i.x - r.x) / s;
i.y = (i.y - r.y) / a;
n.x = (n.x - r.x) / s;
n.y = (n.y - r.y) / a;
}
}
});
cc.ContainerStrategy = cc.Class({
name: "ContainerStrategy",
preApply: function(t) {},
apply: function(t, e) {},
postApply: function(t) {},
_setupContainer: function(t, e, i) {
var n = cc.game.canvas, r = cc.game.container;
if (!h && !c) {
if (cc.sys.os === cc.sys.OS_ANDROID) {
document.body.style.width = (t._isRotated ? i : e) + "px";
document.body.style.height = (t._isRotated ? e : i) + "px";
}
r.style.width = n.style.width = e + "px";
r.style.height = n.style.height = i + "px";
}
var s = t._devicePixelRatio = 1;
t.isRetinaEnabled() && (s = t._devicePixelRatio = Math.min(t._maxPixelRatio, window.devicePixelRatio || 1));
n.width = e * s;
n.height = i * s;
},
_fixContainer: function() {
document.body.insertBefore(cc.game.container, document.body.firstChild);
var t = document.body.style;
t.width = window.innerWidth + "px";
t.height = window.innerHeight + "px";
t.overflow = "hidden";
var e = cc.game.container.style;
e.position = "fixed";
e.left = e.top = "0px";
document.body.scrollTop = 0;
}
});
cc.ContentStrategy = cc.Class({
name: "ContentStrategy",
ctor: function() {
this._result = {
scale: [ 1, 1 ],
viewport: null
};
},
_buildResult: function(t, e, i, n, r, s) {
Math.abs(t - i) < 2 && (i = t);
Math.abs(e - n) < 2 && (n = e);
var a = cc.rect((t - i) / 2, (e - n) / 2, i, n);
cc.game.renderType, cc.game.RENDER_TYPE_CANVAS;
this._result.scale = [ r, s ];
this._result.viewport = a;
return this._result;
},
preApply: function(t) {},
apply: function(t, e) {
return {
scale: [ 1, 1 ]
};
},
postApply: function(t) {}
});
(function() {
var t = cc.Class({
name: "EqualToFrame",
extends: cc.ContainerStrategy,
apply: function(t) {
var e = t._frameSize.height, i = cc.game.container.style;
this._setupContainer(t, t._frameSize.width, t._frameSize.height);
t._isRotated ? i.margin = "0 0 0 " + e + "px" : i.margin = "0px";
i.padding = "0px";
}
}), e = cc.Class({
name: "ProportionalToFrame",
extends: cc.ContainerStrategy,
apply: function(t, e) {
var i, n, r = t._frameSize.width, s = t._frameSize.height, a = cc.game.container.style, o = e.width, c = e.height, h = r / o, l = s / c;
h < l ? (i = r, n = c * h) : (i = o * l, n = s);
var u = Math.round((r - i) / 2), f = Math.round((s - n) / 2);
i = r - 2 * u;
n = s - 2 * f;
this._setupContainer(t, i, n);
t._isRotated ? a.margin = "0 0 0 " + s + "px" : a.margin = "0px";
a.paddingLeft = u + "px";
a.paddingRight = u + "px";
a.paddingTop = f + "px";
a.paddingBottom = f + "px";
}
}), i = (cc.Class({
name: "EqualToWindow",
extends: t,
preApply: function(t) {
this._super(t);
cc.game.frame = document.documentElement;
},
apply: function(t) {
this._super(t);
this._fixContainer();
}
}), cc.Class({
name: "ProportionalToWindow",
extends: e,
preApply: function(t) {
this._super(t);
cc.game.frame = document.documentElement;
},
apply: function(t, e) {
this._super(t, e);
this._fixContainer();
}
}), cc.Class({
name: "OriginalContainer",
extends: cc.ContainerStrategy,
apply: function(t) {
this._setupContainer(t, cc.game.canvas.width, cc.game.canvas.height);
}
}));
cc.ContainerStrategy.EQUAL_TO_FRAME = new t();
cc.ContainerStrategy.PROPORTION_TO_FRAME = new e();
cc.ContainerStrategy.ORIGINAL_CONTAINER = new i();
var n = cc.Class({
name: "ExactFit",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i = cc.game.canvas.width, n = cc.game.canvas.height, r = i / e.width, s = n / e.height;
return this._buildResult(i, n, i, n, r, s);
}
}), r = cc.Class({
name: "ShowAll",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i, n, r = cc.game.canvas.width, s = cc.game.canvas.height, a = e.width, o = e.height, c = r / a, h = s / o, l = 0;
c < h ? (i = r, n = o * (l = c)) : (i = a * (l = h), n = s);
return this._buildResult(r, s, i, n, l, l);
}
}), s = cc.Class({
name: "NoBorder",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i, n, r, s = cc.game.canvas.width, a = cc.game.canvas.height, o = e.width, c = e.height, h = s / o, l = a / c;
h < l ? (n = o * (i = l), r = a) : (n = s, r = c * (i = h));
return this._buildResult(s, a, n, r, i, i);
}
}), a = cc.Class({
name: "FixedHeight",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i = cc.game.canvas.width, n = cc.game.canvas.height, r = n / e.height, s = i, a = n;
return this._buildResult(i, n, s, a, r, r);
}
}), o = cc.Class({
name: "FixedWidth",
extends: cc.ContentStrategy,
apply: function(t, e) {
var i = cc.game.canvas.width, n = cc.game.canvas.height, r = i / e.width, s = i, a = n;
return this._buildResult(i, n, s, a, r, r);
}
});
cc.ContentStrategy.EXACT_FIT = new n();
cc.ContentStrategy.SHOW_ALL = new r();
cc.ContentStrategy.NO_BORDER = new s();
cc.ContentStrategy.FIXED_HEIGHT = new a();
cc.ContentStrategy.FIXED_WIDTH = new o();
})();
cc.ResolutionPolicy = cc.Class({
name: "cc.ResolutionPolicy",
ctor: function(t, e) {
this._containerStrategy = null;
this._contentStrategy = null;
this.setContainerStrategy(t);
this.setContentStrategy(e);
},
preApply: function(t) {
this._containerStrategy.preApply(t);
this._contentStrategy.preApply(t);
},
apply: function(t, e) {
this._containerStrategy.apply(t, e);
return this._contentStrategy.apply(t, e);
},
postApply: function(t) {
this._containerStrategy.postApply(t);
this._contentStrategy.postApply(t);
},
setContainerStrategy: function(t) {
t instanceof cc.ContainerStrategy && (this._containerStrategy = t);
},
setContentStrategy: function(t) {
t instanceof cc.ContentStrategy && (this._contentStrategy = t);
}
});
a.get(cc.ResolutionPolicy.prototype, "canvasSize", (function() {
return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
}));
cc.ResolutionPolicy.EXACT_FIT = 0;
cc.ResolutionPolicy.NO_BORDER = 1;
cc.ResolutionPolicy.SHOW_ALL = 2;
cc.ResolutionPolicy.FIXED_HEIGHT = 3;
cc.ResolutionPolicy.FIXED_WIDTH = 4;
cc.ResolutionPolicy.UNKNOWN = 5;
cc.view = new _();
cc.winSize = cc.v2();
n.exports = cc.view;
}), {
"../event/event-target": 102,
"../platform/CCClass": 134,
"../platform/js": 154,
"../renderer": 175
} ],
145: [ (function(t, e, i) {
cc.visibleRect = {
topLeft: cc.v2(0, 0),
topRight: cc.v2(0, 0),
top: cc.v2(0, 0),
bottomLeft: cc.v2(0, 0),
bottomRight: cc.v2(0, 0),
bottom: cc.v2(0, 0),
center: cc.v2(0, 0),
left: cc.v2(0, 0),
right: cc.v2(0, 0),
width: 0,
height: 0,
init: function(t) {
var e = this.width = t.width, i = this.height = t.height, n = t.x, r = t.y, s = r + i, a = n + e;
this.topLeft.x = n;
this.topLeft.y = s;
this.topRight.x = a;
this.topRight.y = s;
this.top.x = n + e / 2;
this.top.y = s;
this.bottomLeft.x = n;
this.bottomLeft.y = r;
this.bottomRight.x = a;
this.bottomRight.y = r;
this.bottom.x = n + e / 2;
this.bottom.y = r;
this.center.x = n + e / 2;
this.center.y = r + i / 2;
this.left.x = n;
this.left.y = r + i / 2;
this.right.x = a;
this.right.y = r + i / 2;
}
};
}), {} ],
146: [ (function(i, n, r) {
var s = i("./js"), a = (i("./utils").isPlainEmptyObj_DEV, "$_$");
function o(t, e, i) {
var n;
n = function() {};
i && s.extend(n, i.constructor);
var r = new n();
s.value(t, "__attrs__", r);
return r;
}
function c(t) {
for (var e, i = cc.Class.getInheritanceChain(t), n = i.length - 1; n >= 0; n--) {
var r = i[n];
r.hasOwnProperty("__attrs__") && r.__attrs__ || o(r, 0, (e = i[n + 1]) && e.__attrs__);
}
o(t, 0, (e = i[0]) && e.__attrs__);
return t.__attrs__;
}
function h(i, n, r) {
var s, c, h;
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) c = (s = l(i)).constructor.prototype; else {
var u = i;
if (!(s = u.__attrs__)) {
s = o(u, 0, l(i = u.constructor));
}
c = s;
}
if ("undefined" === ("object" === (e = typeof r) ? t(r) : e)) {
var f = n + a, _ = {};
for (h in s) h.startsWith(f) && (_[h.slice(f.length)] = s[h]);
return _;
}
if ("object" === ("object" === (e = typeof r) ? t(r) : e)) for (h in r) 95 !== h.charCodeAt(0) && (c[n + a + h] = r[h]); else 0;
}
function l(t) {
return t.hasOwnProperty("__attrs__") && t.__attrs__ || c(t);
}
function u(t) {
return l(t).constructor.prototype;
}
cc.Integer = "Integer";
cc.Float = "Float";
0;
cc.Boolean = "Boolean";
cc.String = "String";
function f(t, e) {
0;
}
n.exports = {
attr: h,
getClassAttrs: l,
getClassAttrsProto: u,
setClassAttr: function(t, e, i, n) {
u(t)[e + a + i] = n;
},
DELIMETER: a,
getTypeChecker: f,
ObjectType: function(t) {
return {
type: "Object",
ctor: t,
_onAfterProp: !1
};
},
ScriptUuid: {}
};
}), {
"./CCClass": 134,
"./js": 154,
"./utils": 158
} ],
147: [ (function(i, n, r) {
var s = i("./js"), a = s.array.fastRemoveAt;
function o() {
this.callbacks = [];
this.targets = [];
this.isInvoking = !1;
this.containCanceled = !1;
}
var c = o.prototype;
c.removeBy = function(t, e) {
for (var i = this.callbacks, n = this.targets, r = 0; r < t.length; ++r) if (t[r] === e) {
a(i, r);
a(n, r);
--r;
}
};
c.cancel = function(t) {
this.callbacks[t] = this.targets[t] = null;
this.containCanceled = !0;
};
c.cancelAll = function() {
for (var t = this.callbacks, e = this.targets, i = 0; i < t.length; i++) t[i] = e[i] = null;
this.containCanceled = !0;
};
c.purgeCanceled = function() {
this.removeBy(this.callbacks, null);
this.containCanceled = !1;
};
var h = new s.Pool(function(t) {
t.callbacks.length = 0;
t.targets.length = 0;
t.isInvoking = !1;
t.containCanceled = !1;
}, 16);
h.get = function() {
return this._get() || new o();
};
function l() {
this._callbackTable = s.createMap(!0);
}
(c = l.prototype).add = function(t, e, i) {
var n = this._callbackTable[t];
n || (n = this._callbackTable[t] = h.get());
n.callbacks.push(e);
n.targets.push(i || null);
};
c.hasEventListener = function(t, e, i) {
var n = this._callbackTable[t];
if (!n) return !1;
var r = n.callbacks;
if (!e) {
if (n.isInvoking) {
for (var s = 0; s < r.length; s++) if (r[s]) return !0;
return !1;
}
return r.length > 0;
}
i = i || null;
for (var a = n.targets, o = 0; o < r.length; ++o) if (r[o] === e && a[o] === i) return !0;
return !1;
};
c.removeAll = function(i) {
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
var n = this._callbackTable[i];
if (n) if (n.isInvoking) n.cancelAll(); else {
h.put(n);
delete this._callbackTable[i];
}
} else if (i) for (var r in this._callbackTable) {
var s = this._callbackTable[r];
if (s.isInvoking) for (var a = s.targets, o = 0; o < a.length; ++o) a[o] === i && s.cancel(o); else s.removeBy(s.targets, i);
}
};
c.remove = function(t, e, i) {
var n = this._callbackTable[t];
if (n) {
i = i || null;
for (var r = n.callbacks, s = n.targets, o = 0; o < r.length; ++o) if (r[o] === e && s[o] === i) {
if (n.isInvoking) n.cancel(o); else {
a(r, o);
a(s, o);
}
break;
}
}
};
var u = function() {
l.call(this);
};
s.extend(u, l);
0;
u.prototype.invoke = function(t, e, i, n, r, s) {
var a = this._callbackTable[t];
if (a) {
var o = !a.isInvoking;
a.isInvoking = !0;
for (var c = a.callbacks, h = a.targets, l = 0, u = c.length; l < u; ++l) {
var f = c[l];
if (f) {
var _ = h[l];
_ ? f.call(_, e, i, n, r, s) : f(e, i, n, r, s);
}
}
if (o) {
a.isInvoking = !1;
a.containCanceled && a.purgeCanceled();
}
}
};
u.CallbacksHandler = l;
n.exports = u;
}), {
"./js": 154
} ],
148: [ (function(t, e, i) {
function n(t, e) {
for (var i = 0; i < e.length; i++) {
var r = e[i];
Array.isArray(r) ? n(t, r) : t.push(r);
}
}
e.exports = {
flattenCodeArray: function(t) {
var e = [];
n(e, t);
return e.join("");
}
};
}), {} ],
149: [ (function(i, n, r) {
var s = i("./js"), a = i("./attribute"), o = i("./CCClass"), c = i("../utils/misc"), h = function() {
this.uuidList = [];
this.uuidObjList = [];
this.uuidPropList = [];
this._stillUseUrl = s.createMap(!0);
};
h.prototype.reset = function() {
this.uuidList.length = 0;
this.uuidObjList.length = 0;
this.uuidPropList.length = 0;
s.clear(this._stillUseUrl);
};
0;
h.prototype.push = function(t, e, i, n) {
n && (this._stillUseUrl[this.uuidList.length] = !0);
this.uuidList.push(i);
this.uuidObjList.push(t);
this.uuidPropList.push(e);
};
(h.pool = new s.Pool(function(t) {
t.reset();
}, 10)).get = function() {
return this._get() || new h();
};
var l = (function() {
function i(t, e, i, n, r) {
this.result = t;
this.customEnv = n;
this.deserializedList = [];
this.deserializedData = null;
this._classFinder = i;
0;
this._idList = [];
this._idObjList = [];
this._idPropList = [];
}
function n(t) {
var e, i, n, r = t.deserializedList, s = t._idPropList, a = t._idList, o = t._idObjList;
t._classFinder && t._classFinder.onDereferenced;
for (e = 0; e < a.length; e++) {
i = s[e];
n = a[e];
o[e][i] = r[n];
}
}
var r = i.prototype;
r.deserialize = function(t) {
if (Array.isArray(t)) {
var e = t, i = e.length;
this.deserializedList.length = i;
for (var r = 0; r < i; r++) if (e[r]) {
this.deserializedList[r] = this._deserializeObject(e[r], !1);
}
this.deserializedData = i > 0 ? this.deserializedList[0] : [];
} else {
this.deserializedList.length = 1;
this.deserializedData = t ? this._deserializeObject(t, !1) : null;
this.deserializedList[0] = this.deserializedData;
}
n(this);
return this.deserializedData;
};
r._deserializeObject = function(i, n, r, a, o) {
var c, h = null, l = null, f = i.__type__;
if (f) {
if (!(l = this._classFinder(f, i, a, o))) {
this._classFinder === s._getClassById && cc.deserialize.reportMissingClass(f);
return null;
}
if ((h = new l())._deserialize) {
h._deserialize(i.content, this);
return h;
}
cc.Class._isCCClass(l) ? u(this, h, i, l, r) : this._deserializeTypedObject(h, i, l);
} else if (Array.isArray(i)) {
h = new Array(i.length);
for (var _ = 0; _ < i.length; _++) {
c = i[_];
"object" === ("object" === (e = typeof c) ? t(c) : e) && c ? this._deserializeObjField(h, c, "" + _, null, n) : h[_] = c;
}
} else {
h = {};
this._deserializePrimitiveObject(h, i);
}
return h;
};
r._deserializeObjField = function(t, e, i, n, r) {
var s = e.__id__;
if (void 0 === s) {
var a = e.__uuid__;
a ? this.result.push(t, i, a, r) : t[i] = this._deserializeObject(e, r);
} else {
var o = this.deserializedList[s];
if (o) t[i] = o; else {
this._idList.push(s);
this._idObjList.push(t);
this._idPropList.push(i);
}
}
};
r._deserializePrimitiveObject = function(i, n) {
for (var r in n) if (n.hasOwnProperty(r)) {
var s = n[r];
"object" !== ("object" === (e = typeof s) ? t(s) : e) ? "__type__" !== r && (i[r] = s) : s ? this._deserializeObjField(i, s, r) : i[r] = null;
}
};
r._deserializeTypedObject = function(i, n, r) {
if (r !== cc.Vec2) if (r !== cc.Vec3) if (r !== cc.Color) if (r !== cc.Size) for (var s = a.DELIMETER + "default", c = a.getClassAttrs(r), h = r.__props__ || Object.keys(i), l = 0; l < h.length; l++) {
var u = h[l], f = n[u];
void 0 !== f && n.hasOwnProperty(u) || (f = o.getDefault(c[u + s]));
"object" !== ("object" === (e = typeof f) ? t(f) : e) ? i[u] = f : f ? this._deserializeObjField(i, f, u) : i[u] = null;
} else {
i.width = n.width || 0;
i.height = n.height || 0;
} else {
i.r = n.r || 0;
i.g = n.g || 0;
i.b = n.b || 0;
var _ = n.a;
i.a = void 0 === _ ? 255 : _;
} else {
i.x = n.x || 0;
i.y = n.y || 0;
i.z = n.z || 0;
} else {
i.x = n.x || 0;
i.y = n.y || 0;
}
};
function h(t, e, i, n, r, a) {
if (e instanceof cc.ValueType) {
r || t.push("if(prop){");
var o = s.getClassName(e);
t.push("s._deserializeTypedObject(o" + i + ",prop," + o + ");");
r || t.push("}else o" + i + "=null;");
} else {
t.push("if(prop){");
t.push("s._deserializeObjField(o,prop," + n + ",null," + !!a + ");");
t.push("}else o" + i + "=null;");
}
}
var l = function(i, n) {
for (var r = a.DELIMETER + "type", l = (a.DELIMETER, a.DELIMETER + "default"), u = a.DELIMETER + "saveUrlAsAsset", f = a.DELIMETER + "formerlySerializedAs", _ = a.getClassAttrs(n), d = n.__values__, p = [ "var prop;" ], m = c.BUILTIN_CLASSID_RE.test(s._getClassId(n)), g = 0; g < d.length; g++) {
var v, y, T = d[g];
0;
if (o.IDENTIFIER_RE.test(T)) {
y = '"' + T + '"';
v = "." + T;
} else v = "[" + (y = o.escapeForJS(T)) + "]";
var x = v;
if (_[T + f]) {
var E = _[T + f];
x = o.IDENTIFIER_RE.test(E) ? "." + E : "[" + o.escapeForJS(E) + "]";
}
p.push("prop=d" + x + ";");
p.push('if(typeof (prop)!=="undefined"){');
var C = _[T + u], A = o.getDefault(_[T + l]);
if (m) {
var b, S = _[T + r];
if (void 0 === A && S) b = S === cc.String || S === cc.Integer || S === cc.Float || S === cc.Boolean; else {
var w = "object" === (e = typeof A) ? t(A) : e;
b = "string" === w && !C || "number" === w || "boolean" === w;
}
b ? p.push("o" + v + "=prop;") : h(p, A, v, y, !0, C);
} else {
p.push('if(typeof (prop)!=="object"){o' + v + "=prop;}else{");
h(p, A, v, y, !1, C);
p.push("}");
}
p.push("}");
}
if (cc.js.isChildClassOf(n, cc._BaseNode) || cc.js.isChildClassOf(n, cc.Component)) {
p.push("d._id&&(o._id=d._id);");
}
if ("_$erialized" === d[d.length - 1]) {
p.push("o._$erialized=JSON.parse(JSON.stringify(d));");
p.push("s._deserializePrimitiveObject(o._$erialized,d);");
}
return Function("s", "o", "d", "k", "t", p.join(""));
};
function u(t, e, i, n, r) {
var a;
if (n.hasOwnProperty("__deserialize__")) a = n.__deserialize__; else {
a = l(t, n);
s.value(n, "__deserialize__", a, !0);
}
a(t, e, i, n, r);
0;
}
i.pool = new s.Pool(function(t) {
t.result = null;
t.customEnv = null;
t.deserializedList.length = 0;
t.deserializedData = null;
t._classFinder = null;
0;
t._idList.length = 0;
t._idObjList.length = 0;
t._idPropList.length = 0;
}, 1);
i.pool.get = function(t, e, n, r, s) {
var a = this._get();
if (a) {
a.result = t;
a.customEnv = r;
a._classFinder = n;
0;
return a;
}
return new i(t, e, n, r, s);
};
return i;
})();
cc.deserialize = function(i, n, r) {
var a = (r = r || {}).classFinder || s._getClassById, o = r.createAssetRefs || cc.sys.platform === cc.sys.EDITOR_CORE, c = r.customEnv, u = r.ignoreEditorOnly;
0;
"string" === ("object" === (e = typeof i) ? t(i) : e) && (i = JSON.parse(i));
var f = !n;
n = n || h.pool.get();
var _ = l.pool.get(n, !1, a, c, u);
cc.game._isCloning = !0;
var d = _.deserialize(i);
cc.game._isCloning = !1;
l.pool.put(_);
o && n.assignAssetsBy(Editor.serialize.asAsset);
f && h.pool.put(n);
return d;
};
cc.deserialize.Details = h;
cc.deserialize.reportMissingClass = function(t) {
cc.warnID(5302, t);
};
}), {
"../utils/misc": 216,
"./CCClass": 134,
"./attribute": 146,
"./js": 154
} ],
150: [ (function(t, e, i) {
var n = ".";
function r(t) {
this.id = 0 | 998 * Math.random();
this.prefix = t ? t + n : "";
}
r.prototype.getNewId = function() {
return this.prefix + ++this.id;
};
r.global = new r("global");
e.exports = r;
}), {} ],
151: [ (function(t, e, i) {
t("./js");
t("./CCClass");
t("./CCClassDecorator");
t("./CCEnum");
t("./CCObject");
t("./callbacks-invoker");
t("./url");
t("./deserialize");
t("./instantiate");
t("./instantiate-jit");
t("./requiring-frame");
t("./CCSys");
t("./CCMacro");
t("./CCAssetLibrary");
t("./CCVisibleRect");
}), {
"./CCAssetLibrary": 133,
"./CCClass": 134,
"./CCClassDecorator": 135,
"./CCEnum": 136,
"./CCMacro": 139,
"./CCObject": 140,
"./CCSys": 143,
"./CCVisibleRect": 145,
"./callbacks-invoker": 147,
"./deserialize": 149,
"./instantiate": 153,
"./instantiate-jit": 152,
"./js": 154,
"./requiring-frame": 156,
"./url": 157
} ],
152: [ (function(i, n, r) {
var s = i("./CCObject"), a = s.Flags.Destroyed, o = s.Flags.PersistentMask, c = i("./attribute"), h = i("./js"), l = i("./CCClass"), u = i("./compiler"), f = c.DELIMETER + "default", _ = l.IDENTIFIER_RE, d = l.escapeForJS, p = "var ", m = "o", g = "t", v = {
"cc.Node": "cc.Node",
"cc.Sprite": "cc.Sprite",
"cc.Label": "cc.Label",
"cc.Button": "cc.Button",
"cc.Widget": "cc.Widget",
"cc.Animation": "cc.Animation",
"cc.ClickEvent": !1,
"cc.PrefabInfo": !1
};
function y(t, e) {
this.varName = t;
this.expression = e;
}
y.prototype.toString = function() {
return p + this.varName + "=" + this.expression + ";";
};
function T(t, e) {
return e instanceof y ? new y(e.varName, t + e.expression) : t + e;
}
function x(t, e, i) {
if (Array.isArray(i)) {
i[0] = T(e, i[0]);
t.push(i);
} else t.push(T(e, i) + ";");
}
function E(t) {
this._exps = [];
this._targetExp = t;
}
E.prototype.append = function(t, e) {
this._exps.push([ t, e ]);
};
E.prototype.writeCode = function(t) {
var e;
if (this._exps.length > 1) {
t.push(g + "=" + this._targetExp + ";");
e = g;
} else {
if (1 !== this._exps.length) return;
e = this._targetExp;
}
for (var i = 0; i < this._exps.length; i++) {
var n = this._exps[i];
x(t, e + A(n[0]) + "=", n[1]);
}
};
E.pool = new h.Pool(function(t) {
t._exps.length = 0;
t._targetExp = null;
}, 1);
E.pool.get = function(t) {
var e = this._get() || new E();
e._targetExp = t;
return e;
};
function C(i, n) {
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) try {
i = i();
} catch (t) {
return !1;
}
if (i === n) return !0;
if (i && n) {
if (i instanceof cc.ValueType && i.equals(n)) return !0;
if (Array.isArray(i) && Array.isArray(n) || i.constructor === Object && n.constructor === Object) try {
return Array.isArray(i) && Array.isArray(n) && 0 === i.length && 0 === n.length;
} catch (t) {}
}
return !1;
}
function A(t) {
return _.test(t) ? "." + t : "[" + d(t) + "]";
}
function b(t, e) {
this.parent = e;
this.objsToClear_iN$t = [];
this.codeArray = [];
this.objs = [];
this.funcs = [];
this.funcModuleCache = h.createMap();
h.mixin(this.funcModuleCache, v);
this.globalVariables = [];
this.globalVariableId = 0;
this.localVariableId = 0;
this.codeArray.push(p + m + "," + g + ";", "if(R){", m + "=R;", "}else{", m + "=R=new " + this.getFuncModule(t.constructor, !0) + "();", "}");
h.value(t, "_iN$t", {
globalVar: "R"
}, !0);
this.objsToClear_iN$t.push(t);
this.enumerateObject(this.codeArray, t);
var i;
this.globalVariables.length > 0 && (i = p + this.globalVariables.join(",") + ";");
var n = u.flattenCodeArray([ "return (function(R){", i || [], this.codeArray, "return o;", "})" ]);
this.result = Function("O", "F", n)(this.objs, this.funcs);
for (var r = 0, s = this.objsToClear_iN$t.length; r < s; ++r) this.objsToClear_iN$t[r]._iN$t = null;
this.objsToClear_iN$t.length = 0;
}
var S = b.prototype;
S.getFuncModule = function(t, e) {
var i = h.getClassName(t);
if (i) {
var n = this.funcModuleCache[i];
if (n) return n;
if (void 0 === n) {
var r = -1 !== i.indexOf(".");
if (r) try {
if (r = t === Function("return " + i)()) {
this.funcModuleCache[i] = i;
return i;
}
} catch (t) {}
}
}
var s = this.funcs.indexOf(t);
if (s < 0) {
s = this.funcs.length;
this.funcs.push(t);
}
var a = "F[" + s + "]";
e && (a = "(" + a + ")");
this.funcModuleCache[i] = a;
return a;
};
S.getObjRef = function(t) {
var e = this.objs.indexOf(t);
if (e < 0) {
e = this.objs.length;
this.objs.push(t);
}
return "O[" + e + "]";
};
S.setValueType = function(t, e, i, n) {
var r = E.pool.get(n), s = e.constructor.__props__;
s || (s = Object.keys(e));
for (var a = 0; a < s.length; a++) {
var o = s[a], c = i[o];
if (e[o] !== c) {
var h = this.enumerateField(i, o, c);
r.append(o, h);
}
}
r.writeCode(t);
E.pool.put(r);
};
S.enumerateCCClass = function(i, n, r) {
for (var s = r.__values__, a = c.getClassAttrs(r), o = 0; o < s.length; o++) {
var h = s[o], u = n[h], _ = a[h + f];
if (!C(_, u)) if ("object" === ("object" === (e = typeof u) ? t(u) : e) && u instanceof cc.ValueType && (_ = l.getDefault(_)) && _.constructor === u.constructor) {
var d = m + A(h);
this.setValueType(i, _, u, d);
} else this.setObjProp(i, n, h, u);
}
};
S.instantiateArray = function(t) {
if (0 === t.length) return "[]";
var e = "a" + ++this.localVariableId, i = [ new y(e, "new Array(" + t.length + ")") ];
h.value(t, "_iN$t", {
globalVar: "",
source: i
}, !0);
this.objsToClear_iN$t.push(t);
for (var n = 0; n < t.length; ++n) {
x(i, e + "[" + n + "]=", this.enumerateField(t, n, t[n]));
}
return i;
};
S.enumerateField = function(i, n, r) {
if ("object" === ("object" === (e = typeof r) ? t(r) : e) && r) {
var a = r._iN$t;
if (a) {
var c = a.globalVar;
if (!c) {
c = a.globalVar = "v" + ++this.globalVariableId;
this.globalVariables.push(c);
var h = a.source[0];
a.source[0] = T(c + "=", h);
}
return c;
}
return Array.isArray(r) ? this.instantiateArray(r) : this.instantiateObj(r);
}
if ("function" === ("object" === (e = typeof r) ? t(r) : e)) return this.getFuncModule(r);
if ("string" === ("object" === (e = typeof r) ? t(r) : e)) return d(r);
"_objFlags" === n && i instanceof s && (r &= o);
return r;
};
S.setObjProp = function(t, e, i, n) {
x(t, m + A(i) + "=", this.enumerateField(e, i, n));
};
S.enumerateObject = function(i, n) {
var r = n.constructor;
if (cc.Class._isCCClass(r)) this.enumerateCCClass(i, n, r); else for (var s in n) if (n.hasOwnProperty(s) && (95 !== s.charCodeAt(0) || 95 !== s.charCodeAt(1) || "__type__" === s)) {
var a = n[s];
"object" === ("object" === (e = typeof a) ? t(a) : e) && a && a === n._iN$t || this.setObjProp(i, n, s, a);
}
};
S.instantiateObj = function(t) {
if (t instanceof cc.ValueType) return l.getNewValueTypeCode(t);
if (t instanceof cc.Asset) return this.getObjRef(t);
if (t._objFlags & a) return null;
var e, i = t.constructor;
if (cc.Class._isCCClass(i)) {
if (this.parent) if (this.parent instanceof cc.Component) {
if (t instanceof cc._BaseNode || t instanceof cc.Component) return this.getObjRef(t);
} else if (this.parent instanceof cc._BaseNode) if (t instanceof cc._BaseNode) {
if (!t.isChildOf(this.parent)) return this.getObjRef(t);
} else if (t instanceof cc.Component && !t.node.isChildOf(this.parent)) return this.getObjRef(t);
e = new y(m, "new " + this.getFuncModule(i, !0) + "()");
} else if (i === Object) e = new y(m, "{}"); else {
if (i) return this.getObjRef(t);
e = new y(m, "Object.create(null)");
}
var n = [ e ];
h.value(t, "_iN$t", {
globalVar: "",
source: n
}, !0);
this.objsToClear_iN$t.push(t);
this.enumerateObject(n, t);
return [ "(function(){", n, "return o;})();" ];
};
n.exports = {
compile: function(t) {
return new b(t, t instanceof cc._BaseNode && t).result;
},
equalsToDefault: C
};
0;
}), {
"./CCClass": 134,
"./CCObject": 140,
"./attribute": 146,
"./compiler": 148,
"./js": 154
} ],
153: [ (function(i, n, r) {
var s = i("./CCObject"), a = i("../value-types/value-type"), o = s.Flags.Destroyed, c = s.Flags.PersistentMask, h = i("./utils").isDomNode, l = i("./js");
function u(i, n) {
if (!n) {
if ("object" !== ("object" === (e = typeof i) ? t(i) : e) || Array.isArray(i)) {
0;
return null;
}
if (!i) {
0;
return null;
}
if (!cc.isValid(i)) {
0;
return null;
}
0;
}
var r;
if (i instanceof s) {
if (i._instantiate) {
cc.game._isCloning = !0;
r = i._instantiate();
cc.game._isCloning = !1;
return r;
}
if (i instanceof cc.Asset) {
0;
return null;
}
}
cc.game._isCloning = !0;
r = _(i);
cc.game._isCloning = !1;
return r;
}
var f = [];
function _(t, e) {
if (Array.isArray(t)) {
0;
return null;
}
if (h && h(t)) {
0;
return null;
}
var i;
if (t._iN$t) i = t._iN$t; else if (t.constructor) {
i = new (0, t.constructor)();
} else i = Object.create(null);
p(t, i, e);
for (var n = 0, r = f.length; n < r; ++n) f[n]._iN$t = null;
f.length = 0;
return i;
}
function d(i, n, r, s) {
for (var o = i.__values__, c = 0; c < o.length; c++) {
var h = o[c], l = n[h];
if ("object" === ("object" === (e = typeof l) ? t(l) : e) && l) {
var u = r[h];
u instanceof a && u.constructor === l.constructor ? u.set(l) : r[h] = l._iN$t || m(l, s);
} else r[h] = l;
}
}
function p(i, n, r) {
l.value(i, "_iN$t", n, !0);
f.push(i);
var a = i.constructor;
if (cc.Class._isCCClass(a)) d(a, i, n, r); else for (var o in i) if (i.hasOwnProperty(o) && (95 !== o.charCodeAt(0) || 95 !== o.charCodeAt(1) || "__type__" === o)) {
var h = i[o];
if ("object" === ("object" === (e = typeof h) ? t(h) : e) && h) {
if (h === n) continue;
n[o] = h._iN$t || m(h, r);
} else n[o] = h;
}
i instanceof s && (n._objFlags &= c);
}
function m(i, n) {
if (i instanceof a) return i.clone();
if (i instanceof cc.Asset) return i;
var r;
if (Array.isArray(i)) {
var s = i.length;
r = new Array(s);
l.value(i, "_iN$t", r, !0);
for (var c = 0; c < s; ++c) {
var h = i[c];
"object" === ("object" === (e = typeof h) ? t(h) : e) && h ? r[c] = h._iN$t || m(h, n) : r[c] = h;
}
f.push(i);
return r;
}
if (i._objFlags & o) return null;
var u = i.constructor;
if (cc.Class._isCCClass(u)) {
if (n) if (n instanceof cc.Component) {
if (i instanceof cc._BaseNode || i instanceof cc.Component) return i;
} else if (n instanceof cc._BaseNode) if (i instanceof cc._BaseNode) {
if (!i.isChildOf(n)) return i;
} else if (i instanceof cc.Component && !i.node.isChildOf(n)) return i;
r = new u();
} else if (u === Object) r = {}; else {
if (u) return i;
r = Object.create(null);
}
p(i, r, n);
return r;
}
u._clone = _;
cc.instantiate = u;
n.exports = u;
}), {
"../value-types/value-type": 231,
"./CCObject": 140,
"./js": 154,
"./utils": 158
} ],
154: [ (function(i, n, r) {
var s = new (i("./id-generater"))("TmpCId.");
function a(t, e) {
for (;t; ) {
var i = Object.getOwnPropertyDescriptor(t, e);
if (i) return i;
t = Object.getPrototypeOf(t);
}
return null;
}
function o(t, e, i) {
var n = a(e, t);
Object.defineProperty(i, t, n);
}
var c = {
isNumber: function(i) {
return "number" === ("object" === (e = typeof i) ? t(i) : e) || i instanceof Number;
},
isString: function(i) {
return "string" === ("object" === (e = typeof i) ? t(i) : e) || i instanceof String;
},
addon: function(i) {
"use strict";
i = i || {};
for (var n = 1, r = arguments.length; n < r; n++) {
var s = arguments[n];
if (s) {
if ("object" !== ("object" === (e = typeof s) ? t(s) : e)) {
cc.errorID(5402, s);
continue;
}
for (var a in s) a in i || o(a, s, i);
}
}
return i;
},
mixin: function(i) {
"use strict";
i = i || {};
for (var n = 1, r = arguments.length; n < r; n++) {
var s = arguments[n];
if (s) {
if ("object" !== ("object" === (e = typeof s) ? t(s) : e)) {
cc.errorID(5403, s);
continue;
}
for (var a in s) o(a, s, i);
}
}
return i;
},
extend: function(t, e) {
0;
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
t.prototype = Object.create(e.prototype, {
constructor: {
value: t,
writable: !0,
configurable: !0
}
});
return t;
},
getSuper: function(t) {
var e = t.prototype, i = e && Object.getPrototypeOf(e);
return i && i.constructor;
},
isChildClassOf: function(i, n) {
if (i && n) {
if ("function" !== ("object" === (e = typeof i) ? t(i) : e)) return !1;
if ("function" !== ("object" === (e = typeof n) ? t(n) : e)) {
0;
return !1;
}
if (i === n) return !0;
for (;;) {
if (!(i = c.getSuper(i))) return !1;
if (i === n) return !0;
}
}
return !1;
},
clear: function(t) {
for (var e = Object.keys(t), i = 0; i < e.length; i++) delete t[e[i]];
},
isEmptyObject: function(t) {
for (var e in t) return !1;
return !0;
},
getPropertyDescriptor: a
}, h = {
value: void 0,
enumerable: !1,
writable: !1,
configurable: !0
};
c.value = function(t, e, i, n, r) {
h.value = i;
h.writable = n;
h.enumerable = r;
Object.defineProperty(t, e, h);
h.value = void 0;
};
var l = {
get: null,
set: null,
enumerable: !1
};
c.getset = function(i, n, r, s, a) {
if ("function" !== ("object" === (e = typeof s) ? t(s) : e)) {
a = s;
s = void 0;
}
l.get = r;
l.set = s;
l.enumerable = a;
Object.defineProperty(i, n, l);
l.get = null;
l.set = null;
};
var u = {
get: null,
enumerable: !1,
configurable: !1
};
c.get = function(t, e, i, n, r) {
u.get = i;
u.enumerable = n;
u.configurable = r;
Object.defineProperty(t, e, u);
u.get = null;
};
var f = {
set: null,
enumerable: !1,
configurable: !1
};
c.set = function(t, e, i, n, r) {
f.set = i;
f.enumerable = n;
f.configurable = r;
Object.defineProperty(t, e, f);
f.set = null;
};
c.getClassName = function(i) {
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) {
var n = i.prototype;
if (n && n.hasOwnProperty("__classname__") && n.__classname__) return n.__classname__;
var r = "";
i.name && (r = i.name);
if (i.toString) {
var s, a = i.toString();
(s = "[" === a.charAt(0) ? a.match(/\[\w+\s*(\w+)\]/) : a.match(/function\s*(\w+)/)) && 2 === s.length && (r = s[1]);
}
return "Object" !== r ? r : "";
}
return i && i.constructor ? c.getClassName(i.constructor) : "";
};
(function() {
var i = {}, n = {};
function r(t, e, i) {
c.getset(c, e, (function() {
return Object.assign({}, i);
}), (function(t) {
c.clear(i);
Object.assign(i, t);
}));
return function(e, n) {
n.prototype.hasOwnProperty(t) && delete i[n.prototype[t]];
c.value(n.prototype, t, e);
if (e) {
var r = i[e];
if (r && r !== n) {
var s = "A Class already exists with the same " + t + ' : "' + e + '".';
0;
cc.error(s);
} else i[e] = n;
}
};
}
c._setClassId = r("__cid__", "_registeredClassIds", i);
var a = r("__classname__", "_registeredClassNames", n);
c.setClassName = function(t, e) {
a(t, e);
if (!e.prototype.hasOwnProperty("__cid__")) {
var i = t || s.getNewId();
i && c._setClassId(i, e);
}
};
c.unregisterClass = function() {
for (var t = 0; t < arguments.length; t++) {
var e = arguments[t].prototype, r = e.__cid__;
r && delete i[r];
var s = e.__classname__;
s && delete n[s];
}
};
c._getClassById = function(t) {
return i[t];
};
c.getClassByName = function(t) {
return n[t];
};
c._getClassId = function(i, n) {
n = "undefined" === ("object" === (e = typeof n) ? t(n) : e) || n;
if ("function" === ("object" === (e = typeof i) ? t(i) : e) && i.prototype.hasOwnProperty("__cid__")) {
0;
return i.prototype.__cid__;
}
if (i && i.constructor) {
var r = i.constructor.prototype;
if (r && r.hasOwnProperty("__cid__")) {
0;
return i.__cid__;
}
}
return "";
};
})();
c.obsolete = function(t, e, i, n) {
var r = /([^.]+)$/, s = r.exec(e)[0], a = r.exec(i)[0];
function o() {
0;
return this[a];
}
n ? c.getset(t, s, o, (function(t) {
0;
this[a] = t;
})) : c.get(t, s, o);
};
c.obsoletes = function(t, e, i, n) {
for (var r in i) {
var s = i[r];
c.obsolete(t, e + "." + r, s, n);
}
};
var _ = /(%d)|(%s)/, d = /%s/;
c.formatStr = function() {
var i = arguments.length;
if (0 === i) return "";
var n = arguments[0];
if (1 === i) return "" + n;
if ("string" === ("object" === (e = typeof n) ? t(n) : e) && _.test(n)) for (var r = 1; r < i; ++r) {
var s = arguments[r], a = "number" === ("object" === (e = typeof s) ? t(s) : e) ? _ : d;
a.test(n) ? n = n.replace(a, s) : n += " " + s;
} else for (var o = 1; o < i; ++o) n += " " + arguments[o];
return n;
};
c.shiftArguments = function() {
for (var t = arguments.length - 1, e = new Array(t), i = 0; i < t; ++i) e[i] = arguments[i + 1];
return e;
};
c.createMap = function(t) {
var e = Object.create(null);
if (t) {
e["."] = !0;
e["/"] = !0;
delete e["."];
delete e["/"];
}
return e;
};
function p(t, e) {
t.splice(e, 1);
}
function m(t, e) {
var i = t.indexOf(e);
if (i >= 0) {
p(t, i);
return !0;
}
return !1;
}
var g = Array.prototype.indexOf;
c.array = {
remove: m,
fastRemove: function(t, e) {
var i = t.indexOf(e);
if (i >= 0) {
t[i] = t[t.length - 1];
--t.length;
}
},
removeAt: p,
fastRemoveAt: function(t, e) {
var i = t.length;
if (!(e < 0 || e >= i)) {
t[e] = t[i - 1];
t.length = i - 1;
}
},
contains: function(t, e) {
return t.indexOf(e) >= 0;
},
verifyType: function(t, e) {
if (t && t.length > 0) for (var i = 0; i < t.length; i++) if (!(t[i] instanceof e)) {
cc.logID(1300);
return !1;
}
return !0;
},
removeArray: function(t, e) {
for (var i = 0, n = e.length; i < n; i++) m(t, e[i]);
},
appendObjectsAt: function(t, e, i) {
t.splice.apply(t, [ i, 0 ].concat(e));
return t;
},
copy: function(t) {
var e, i = t.length, n = new Array(i);
for (e = 0; e < i; e += 1) n[e] = t[e];
return n;
},
indexOf: g,
MutableForwardIterator: i("../utils/mutable-forward-iterator")
};
function v(t, e) {
if (void 0 === e) {
e = t;
t = null;
}
this.get = null;
this.count = 0;
this._pool = new Array(e);
this._cleanup = t;
}
v.prototype._get = function() {
if (this.count > 0) {
--this.count;
var t = this._pool[this.count];
this._pool[this.count] = null;
return t;
}
return null;
};
v.prototype.put = function(t) {
var e = this._pool;
if (this.count < e.length) {
if (this._cleanup && !1 === this._cleanup(t)) return;
e[this.count] = t;
++this.count;
}
};
v.prototype.resize = function(t) {
if (t >= 0) {
this._pool.length = t;
this.count > t && (this.count = t);
}
};
c.Pool = v;
cc.js = c;
n.exports = c;
}), {
"../utils/mutable-forward-iterator": 217,
"./id-generater": 150
} ],
155: [ (function(i, n, r) {
var s = i("./js"), a = {
url: {
canUsedInGet: !0
},
default: {},
serializable: {},
editorOnly: {},
formerlySerializedAs: {}
};
function o(t, e, i, n) {
if (t.get || t.set) 0; else if (t.hasOwnProperty("default")) {
var r = "_N$" + e;
t.get = function() {
return this[r];
};
t.set = function(t) {
var e = this[r];
this[r] = t;
i.call(this, e);
};
0;
var s = {};
n[r] = s;
for (var o in a) {
var c = a[o];
if (t.hasOwnProperty(o)) {
s[o] = t[o];
c.canUsedInGet || delete t[o];
}
}
} else 0;
}
function c(t, e, i, n) {
Array.isArray(n) && n.length > 0 && (n = n[0]);
0;
t.type = n;
}
function h(t, e, i, n) {
if (Array.isArray(e)) {
if (!(e.length > 0)) return cc.errorID(5508, i, n);
if (cc.RawAsset.isRawAssetType(e[0])) {
t.url = e[0];
delete t.type;
return;
}
t.type = e = e[0];
}
0;
}
r.getFullFormOfProperty = function(i, n, r) {
if (!(i && i.constructor === Object)) {
if (Array.isArray(i) && i.length > 0) {
var a = i[0];
0;
return {
default: [],
type: i,
_short: !0
};
}
if ("function" === ("object" === (e = typeof i) ? t(i) : e)) {
a = i;
if (!cc.RawAsset.isRawAssetType(a)) {
if (!cc.RawAsset.wasRawAssetType(a)) return {
default: s.isChildClassOf(a, cc.ValueType) ? new a() : null,
type: a,
_short: !0
};
0;
}
return {
default: "",
url: a,
_short: !0
};
}
return {
default: i,
_short: !0
};
}
return null;
};
r.preprocessAttrs = function(t, e, i, n) {
for (var s in t) {
var a = t[s], l = r.getFullFormOfProperty(a, s, e);
l && (a = t[s] = l);
if (a) {
var u = a.notify;
u && o(a, s, u, t);
"type" in a && h(a, a.type, e, s);
"url" in a && c(a, 0, 0, a.url);
"type" in a && a.type;
}
}
};
0;
r.validateMethodWithProps = function(i, n, r, s, a) {
0;
if ("function" !== ("object" === (e = typeof i) ? t(i) : e) && null !== i) {
return !1;
}
0;
return !0;
};
}), {
"./CCClass": 134,
"./js": 154
} ],
156: [ (function(t, e, i) {
var n = [];
cc._RF = {
push: function(t, e, i) {
if (void 0 === i) {
i = e;
e = "";
}
n.push({
uuid: e,
script: i,
module: t,
exports: t.exports,
beh: null
});
},
pop: function() {
var t = n.pop(), e = t.module, i = e.exports;
if (i === t.exports) {
for (var r in i) return;
e.exports = i = t.cls;
}
},
peek: function() {
return n[n.length - 1];
}
};
0;
}), {} ],
157: [ (function(t, e, i) {
cc.url = {
_rawAssets: "",
normalize: function(t) {
t && (46 === t.charCodeAt(0) && 47 === t.charCodeAt(1) ? t = t.slice(2) : 47 === t.charCodeAt(0) && (t = t.slice(1)));
return t;
},
raw: function(t) {
0;
if ((t = this.normalize(t)).startsWith("resources/")) {
var e = cc.loader._getResUuid(t.slice(10), cc.Asset, !0);
if (e) return cc.AssetLibrary.getLibUrlNoExt(e, !0) + cc.path.extname(t);
} else cc.errorID(7002, t);
return this._rawAssets + t;
},
_init: function(t) {
this._rawAssets = cc.path.stripSep(t) + "/";
}
};
e.exports = cc.url;
}), {} ],
158: [ (function(i, n, r) {
i("./js");
n.exports = {
contains: function(i, n) {
if ("function" == ("object" === (e = typeof i.contains) ? t(i.contains) : e)) return i.contains(n);
if ("function" == ("object" === (e = typeof i.compareDocumentPosition) ? t(i.compareDocumentPosition) : e)) return !!(16 & i.compareDocumentPosition(n));
var r = n.parentNode;
if (r) do {
if (r === i) return !0;
r = r.parentNode;
} while (null !== r);
return !1;
},
isDomNode: "object" === (e = typeof window, "object" === e ? t(window) : e) && ("function" === (e = typeof Node, 
"object" === e ? t(Node) : e) ? function(t) {
return t instanceof Node;
} : function(i) {
return i && "object" === ("object" === (e = typeof i) ? t(i) : e) && "number" === ("object" === (e = typeof i.nodeType) ? t(i.nodeType) : e) && "string" === ("object" === (e = typeof i.nodeName) ? t(i.nodeName) : e);
}),
callInNextTick: function(t, e, i) {
t && setTimeout((function() {
t(e, i);
}), 0);
}
};
0;
0;
}), {
"./js": 154
} ],
159: [ (function(t, e, i) {
t("./platform/js");
t("./value-types");
t("./utils");
t("./platform/CCInputManager");
t("./platform/CCInputExtension");
t("./event");
t("./platform/CCSys");
t("./platform/CCMacro");
t("./load-pipeline");
t("./CCDirector");
t("./renderer");
t("./platform/CCView");
t("./platform/CCScreen");
t("./CCScheduler");
t("./event-manager");
}), {
"./CCDirector": 27,
"./CCScheduler": 32,
"./event": 104,
"./event-manager": 100,
"./load-pipeline": 119,
"./platform/CCInputExtension": 137,
"./platform/CCInputManager": 138,
"./platform/CCMacro": 139,
"./platform/CCScreen": 142,
"./platform/CCSys": 143,
"./platform/CCView": 144,
"./platform/js": 154,
"./renderer": 175,
"./utils": 214,
"./value-types": 226
} ],
160: [ (function(t, e, i) {
var n = function() {};
n.prototype = {
constructor: n,
_reset: function() {},
render: function() {}
};
e.exports = n;
}), {} ],
161: [ (function(t, e, i) {
e.exports = {
ForwardRenderer: t("./forward-renderer"),
RenderComponentHandle: t("./render-component-handle"),
_renderers: t("./renderers")
};
}), {
"./forward-renderer": 160,
"./render-component-handle": 162,
"./renderers": 165
} ],
162: [ (function(t, e, i) {
t("./renderers");
var n = t("./renderers/utils"), r = function(t, e) {
this._device = t;
this._camera = e;
this.parentOpacity = 1;
this.parentOpacityDirty = 0;
this.worldMatDirty = 0;
this.walking = !1;
};
r.prototype = {
constructor: r,
reset: function() {
var t = this._device._ctx, e = this._device._canvas, i = cc.Camera.main ? cc.Camera.main.backgroundColor : cc.color(), r = "rgba(" + i.r + ", " + i.g + ", " + i.b + ", " + i.a / 255 + ")";
t.fillStyle = r;
t.setTransform(1, 0, 0, 1, 0, 0);
t.clearRect(0, 0, e.width, e.height);
t.fillRect(0, 0, e.width, e.height);
this._device._stats.drawcalls = 0;
n.context.reset();
},
terminate: function() {
this.walking = !1;
},
_commitComp: function(t, e) {
var i = this._device._ctx, n = this._camera;
i.setTransform(n.a, n.b, n.c, n.d, n.tx, n.ty);
i.scale(1, -1);
e.draw(i, t);
}
};
e.exports = r;
}), {
"./renderers": 165,
"./renderers/utils": 174
} ],
163: [ (function(t, e, i) {
var n = t("../../../../graphics/helper"), r = t("../../../../graphics/types"), s = t("../../../../platform/js"), a = (r.PointFlags, 
r.LineJoin), o = r.LineCap;
function c() {
this.cmds = [];
this.style = {
strokeStyle: "black",
fillStyle: "white",
lineCap: "butt",
lineJoin: "miter",
miterLimit: 10
};
}
var h = c.prototype;
s.mixin(h, {
moveTo: function(t, e) {
this.cmds.push([ "moveTo", [ t, e ] ]);
},
lineTo: function(t, e) {
this.cmds.push([ "lineTo", [ t, e ] ]);
},
bezierCurveTo: function(t, e, i, n, r, s) {
this.cmds.push([ "bezierCurveTo", [ t, e, i, n, r, s ] ]);
},
quadraticCurveTo: function(t, e, i, n) {
this.cmds.push([ "quadraticCurveTo", [ t, e, i, n ] ]);
},
arc: function(t, e, i, r, s, a) {
n.arc(this, t, e, i, r, s, a);
},
ellipse: function(t, e, i, r) {
n.ellipse(this, t, e, i, r);
},
circle: function(t, e, i) {
n.ellipse(this, t, e, i, i);
},
rect: function(t, e, i, n) {
this.moveTo(t, e);
this.lineTo(t, e + n);
this.lineTo(t + i, e + n);
this.lineTo(t + i, e);
this.close();
},
roundRect: function(t, e, i, r, s) {
n.roundRect(this, t, e, i, r, s);
},
clear: function(t, e) {
this.cmds.length = 0;
},
close: function() {
this.cmds.push([ "closePath", [] ]);
},
stroke: function() {
this.cmds.push([ "stroke", [] ]);
},
fill: function() {
this.cmds.push([ "fill", [] ]);
}
});
s.set(h, "strokeColor", (function(t) {
var e = "rgba(" + (0 | t.r) + "," + (0 | t.g) + "," + (0 | t.b) + "," + t.a / 255 + ")";
this.cmds.push([ "strokeStyle", e ]);
this.style.strokeStyle = e;
}));
s.set(h, "fillColor", (function(t) {
var e = "rgba(" + (0 | t.r) + "," + (0 | t.g) + "," + (0 | t.b) + "," + t.a / 255 + ")";
this.cmds.push([ "fillStyle", e ]);
this.style.fillStyle = e;
}));
s.set(h, "lineWidth", (function(t) {
this.cmds.push([ "lineWidth", t ]);
this.style.lineWidth = t;
}));
s.set(h, "lineCap", (function(t) {
var e = "butt";
t === o.BUTT ? e = "butt" : t === o.ROUND ? e = "round" : t === o.SQUARE && (e = "square");
this.cmds.push([ "lineCap", e ]);
this.style.lineCap = e;
}));
s.set(h, "lineJoin", (function(t) {
var e = "bevel";
t === a.BEVEL ? e = "bevel" : t === a.ROUND ? e = "round" : t === a.MITER && (e = "miter");
this.cmds.push([ "lineJoin", e ]);
this.style.lineJoin = e;
}));
s.set(h, "miterLimit", (function(t) {
this.cmds.push([ "miterLimit", t ]);
this.style.miterLimit = t;
}));
e.exports = c;
}), {
"../../../../graphics/helper": 107,
"../../../../graphics/types": 109,
"../../../../platform/js": 154
} ],
164: [ (function(i, n, r) {
var s = i("./impl");
n.exports = {
createImpl: function() {
return new s();
},
draw: function(i, n) {
var r = n.node, s = r._worldMatrix, a = s.m00, o = s.m01, c = s.m04, h = s.m05, l = s.m12, u = s.m13;
i.transform(a, o, c, h, l, u);
i.save();
i.globalAlpha = r.opacity / 255;
var f = n._impl.style;
i.strokeStyle = f.strokeStyle;
i.fillStyle = f.fillStyle;
i.lineWidth = f.lineWidth;
i.lineJoin = f.lineJoin;
i.miterLimit = f.miterLimit;
for (var _ = !0, d = n._impl.cmds, p = 0, m = d.length; p < m; p++) {
var g = d[p], v = g[0], y = g[1];
if ("moveTo" === v && _) {
i.beginPath();
_ = !1;
} else "fill" !== v && "stroke" !== v && "fillRect" !== v || (_ = !0);
"function" === ("object" === (e = typeof i[v]) ? t(i[v]) : e) ? i[v].apply(i, y) : i[v] = y;
}
i.restore();
return 1;
},
stroke: function(t) {
t._impl.stroke();
},
fill: function(t) {
t._impl.fill();
}
};
}), {
"./impl": 163
} ],
165: [ (function(t, e, i) {
var n = t("../../../platform/js"), r = t("../../../components/CCSprite"), s = t("../../../components/CCLabel"), a = t("../../../components/CCMask"), o = t("../../../graphics/graphics"), c = t("./sprite"), h = t("./label"), l = t("./graphics"), u = t("./mask"), f = {}, _ = {};
function d(t, e, i) {
var r = n.getClassName(t);
f[r] = e;
i && (_[r] = i);
t._assembler = e;
t._postAssembler = i;
}
d(r, c);
d(s, h);
a && d(a, u.beforeHandler, u.afterHandler);
o && d(o, l);
e.exports = {
map: f,
postMap: _,
addRenderer: d
};
}), {
"../../../components/CCLabel": 69,
"../../../components/CCMask": 72,
"../../../components/CCSprite": 82,
"../../../graphics/graphics": 106,
"../../../platform/js": 154,
"./graphics": 164,
"./label": 167,
"./mask": 169,
"./sprite": 170
} ],
166: [ (function(t, e, i) {
var n = t("../../../utils/label/bmfont"), r = t("../../../../platform/js"), s = t("../utils");
e.exports = r.addon({
createData: function(t) {
return t.requestRenderData();
},
appendQuad: function(t, e, i, n, r, s, a) {
var o = t.dataLength;
t.dataLength += 2;
var c = t._data, h = (e.width, e.height, i.width), l = i.height, u = void 0, f = void 0, _ = void 0, d = void 0;
if (n) {
u = i.x;
_ = i.x + l;
f = i.y;
d = i.y + h;
c[o].u = u;
c[o].v = d;
c[o + 1].u = u;
c[o + 1].v = f;
} else {
u = i.x;
_ = i.x + h;
f = i.y;
d = i.y + l;
c[o].u = u;
c[o].v = f;
c[o + 1].u = _;
c[o + 1].v = d;
}
c[o].x = r;
c[o].y = s - l * a;
c[o + 1].x = r + h * a;
c[o + 1].y = s;
},
draw: function(t, e) {
var i = e.node, n = i._worldMatrix, r = n.m00, a = n.m01, o = n.m04, c = n.m05, h = n.m12, l = n.m13;
t.transform(r, a, o, c, h, l);
t.scale(1, -1);
s.context.setGlobalAlpha(t, i.opacity / 255);
for (var u = e._frame._texture, f = e._renderData._data, _ = s.getColorizedImage(u, i._color), d = 0, p = f.length; d < p; d += 2) {
var m = f[d].x, g = f[d].y, v = f[d + 1].x - m, y = f[d + 1].y - g;
g = -g - y;
var T = f[d].u, x = f[d].v, E = f[d + 1].u - T, C = f[d + 1].v - x;
t.drawImage(_, T, x, E, C, m, g, v, y);
}
return 1;
}
}, n);
}), {
"../../../../platform/js": 154,
"../../../utils/label/bmfont": 180,
"../utils": 174
} ],
167: [ (function(t, e, i) {
var n = t("../../../../components/CCLabel"), r = t("./ttf"), s = t("./bmfont"), a = {
pool: [],
get: function() {
var t = this.pool.pop();
if (!t) {
var e = document.createElement("canvas");
t = {
canvas: e,
context: e.getContext("2d")
};
}
return t;
},
put: function(t) {
this.pool.length >= 32 || this.pool.push(t);
}
};
n._canvasPool = a;
e.exports = {
getAssembler: function(t) {
var e = r;
t.font instanceof cc.BitmapFont && (e = s);
return e;
},
createData: function(t) {
return t._assembler.createData(t);
},
draw: function(t, e) {
if (!e._texture) return 0;
var i = e._assembler;
if (!i) return 0;
i.updateRenderData(e);
return i.draw(t, e);
}
};
}), {
"../../../../components/CCLabel": 69,
"./bmfont": 166,
"./ttf": 168
} ],
168: [ (function(t, e, i) {
var n = t("../../../utils/label/ttf"), r = t("../../../../platform/js"), s = t("../utils");
e.exports = r.addon({
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 2;
return e;
},
_updateVerts: function(t) {
var e = t._renderData, i = t.node, n = i.width, r = i.height, s = i.anchorX * n, a = i.anchorY * r, o = e._data;
o[0].x = -s;
o[0].y = -a;
o[1].x = n - s;
o[1].y = r - a;
},
_updateTexture: function(t) {
n._updateTexture(t);
var e = t._frame._texture;
s.dropColorizedImage(e, t.node.color);
},
draw: function(t, e) {
var i = e.node, n = i._worldMatrix, r = n.m00, a = n.m01, o = n.m04, c = n.m05, h = n.m12, l = n.m13;
t.transform(r, a, o, c, h, l);
t.scale(1, -1);
s.context.setGlobalAlpha(t, i.opacity / 255);
var u = e._frame._texture, f = e._renderData._data, _ = u.getHtmlElementObj(), d = f[0].x, p = f[0].y, m = f[1].x - d, g = f[1].y - p;
p = -p - g;
t.drawImage(_, d, p, m, g);
return 1;
}
}, n);
}), {
"../../../../platform/js": 154,
"../../../utils/label/ttf": 183,
"../utils": 174
} ],
169: [ (function(t, e, i) {
t("../../../components/CCMask");
var n = t("./graphics"), r = {
updateRenderData: function(t) {},
draw: function(t, e) {
t.save();
n.draw(t, e._graphics);
t.clip();
}
};
e.exports = {
beforeHandler: r,
afterHandler: {
updateRenderData: function(t) {},
draw: function(t, e) {
t.restore();
}
}
};
}), {
"../../../components/CCMask": 72,
"./graphics": 164
} ],
170: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite"), r = n.Type, s = n.FillType, a = t("./simple"), o = t("./sliced"), c = t("./tiled");
0;
e.exports = {
getAssembler: function(t) {
switch (t.type) {
case r.SIMPLE:
return a;

case r.SLICED:
return o;

case r.TILED:
return c;

case r.FILLED:
return t._fillType, s.RADIAL, null;
}
},
createData: function(t) {
return t._assembler.createData(t);
}
};
}), {
"../../../../components/CCSprite": 82,
"../../../webgl/assemblers/sprite/index.js": 195,
"./simple": 171,
"./sliced": 172,
"./tiled": 173
} ],
171: [ (function(t, e, i) {
var n = t("../utils"), r = {
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 2;
return e;
},
updateRenderData: function(t) {
t._material || t._activateMaterial();
var e = t._renderData;
e.uvDirty && this.updateUVs(t);
e.vertDirty && this.updateVerts(t);
},
updateUVs: function(t) {
var e = t.spriteFrame, i = t._renderData, n = i._data, r = e._rect;
e._texture;
if (e._rotated) {
var s = r.x, a = r.height, o = r.y, c = r.width;
n[0].u = s;
n[0].v = c;
n[1].u = a;
n[1].v = o;
} else {
var h = r.x, l = r.width, u = r.y, f = r.height;
n[0].u = h;
n[0].v = u;
n[1].u = l;
n[1].v = f;
}
i.uvDirty = !1;
},
updateVerts: function(t) {
var e = t._renderData, i = t.node, n = e._data, r = i.width, s = i.height, a = i.anchorX * r, o = i.anchorY * s, c = void 0, h = void 0, l = void 0, u = void 0;
if (t.trim) {
c = -a;
h = -o;
l = r;
u = s;
} else {
var f = t.spriteFrame, _ = f._originalSize.width, d = f._originalSize.height, p = f._rect.width, m = f._rect.height, g = f._offset, v = r / _, y = s / d, T = g.x + (_ - p) / 2, x = (g.x, 
g.y + (d - m) / 2);
g.y;
c = T * v - a;
h = x * y - o;
l = r;
u = s;
}
n[0].x = c;
n[0].y = h;
n[1].x = l;
n[1].y = u;
e.vertDirty = !1;
},
draw: function(t, e) {
var i = e.node, r = i._worldMatrix, s = r.m00, a = r.m01, o = r.m04, c = r.m05, h = r.m12, l = r.m13;
t.transform(s, a, o, c, h, l);
t.scale(1, -1);
n.context.setGlobalAlpha(t, i.opacity / 255);
var u = e._spriteFrame._texture, f = e._renderData._data, _ = n.getColorizedImage(u, i._color), d = f[0].x, p = f[0].y, m = f[1].x, g = f[1].y;
p = -p - g;
var v = f[0].u, y = f[0].v, T = f[1].u, x = f[1].v;
t.drawImage(_, v, y, T, x, d, p, m, g);
return 1;
}
};
e.exports = r;
}), {
"../utils": 174
} ],
172: [ (function(t, e, i) {
var n = t("../utils"), r = {
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 4;
return e;
},
updateRenderData: t("./simple").updateRenderData,
updateUVs: function(t) {
var e = t.spriteFrame, i = t._renderData, n = e._rect, r = (e._texture, e.insetLeft), s = e.insetRight, a = n.width - r - s, o = e.insetTop, c = e.insetBottom, h = n.height - o - c, l = i._data;
if (e._rotated) {
l[0].u = n.x;
l[1].u = c + n.x;
l[2].u = c + h + n.x;
l[3].u = n.x + n.height;
l[3].v = n.y;
l[2].v = r + n.y;
l[1].v = r + a + n.y;
l[0].v = n.y + n.width;
} else {
l[0].u = n.x;
l[1].u = r + n.x;
l[2].u = r + a + n.x;
l[3].u = n.x + n.width;
l[3].v = n.y;
l[2].v = o + n.y;
l[1].v = o + h + n.y;
l[0].v = n.y + n.height;
}
i.uvDirty = !1;
},
updateVerts: function(t) {
var e = t._renderData, i = e._data, n = t.node, r = n.width, s = n.height, a = n.anchorX * r, o = n.anchorY * s, c = t.spriteFrame, h = (c._rect, 
c.insetLeft), l = c.insetRight, u = c.insetTop, f = c.insetBottom, _ = r - h - l, d = s - u - f, p = r / (h + l), m = s / (u + f);
p = isNaN(p) || p > 1 ? 1 : p;
m = isNaN(m) || m > 1 ? 1 : m;
_ = _ < 0 ? 0 : _;
d = d < 0 ? 0 : d;
i[0].x = -a;
i[0].y = -o;
i[1].x = h * p - a;
i[1].y = f * m - o;
i[2].x = i[1].x + _;
i[2].y = i[1].y + d;
i[3].x = r - a;
i[3].y = s - o;
e.vertDirty = !1;
},
draw: function(t, e) {
var i = e.node, r = i._worldMatrix, s = r.m00, a = r.m01, o = r.m04, c = r.m05, h = r.m12, l = r.m13;
t.transform(s, a, o, c, h, l);
t.scale(1, -1);
n.context.setGlobalAlpha(t, i.opacity / 255);
for (var u = e._spriteFrame._texture, f = e._renderData._data, _ = n.getColorizedImage(u, i._color), d = 0, p = void 0, m = void 0, g = void 0, v = void 0, y = void 0, T = void 0, x = void 0, E = void 0, C = void 0, A = void 0, b = void 0, S = void 0, w = 0; w < 3; ++w) {
v = f[w];
g = f[w + 1];
for (var D = 0; D < 3; ++D) {
p = f[D];
m = f[D + 1];
y = p.x;
T = v.y;
x = m.x - y;
T = -T - (E = g.y - T);
C = p.u;
A = g.v;
b = m.u - C;
S = v.v - A;
if (b > 0 && S > 0 && x > 0 && E > 0) {
t.drawImage(_, C, A, b, S, y, T, x, E);
d++;
}
}
}
return d;
}
};
e.exports = r;
}), {
"../utils": 174,
"./simple": 171
} ],
173: [ (function(t, e, i) {
var n = t("../utils"), r = {
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
t._material || t._activateMaterial();
},
draw: function(t, e) {
var i = e.node, r = i._worldMatrix, s = r.m00, a = r.m01, o = r.m04, c = r.m05, h = r.m12, l = r.m13;
t.transform(s, a, o, c, h, l);
t.scale(1, -1);
n.context.setGlobalAlpha(t, i.opacity / 255);
var u = e.spriteFrame, f = u._rect, _ = u._texture, d = f.x, p = f.y, m = u._rotated ? f.height : f.width, g = u._rotated ? f.width : f.height, v = n.getFrameCache(_, i._color, d, p, m, g), y = i.width, T = i.height, x = -i.anchorX * y, E = -i.anchorY * T;
E = -E - T;
t.translate(x, E);
t.fillStyle = t.createPattern(v, "repeat");
t.fillRect(0, 0, y, T);
return 1;
}
};
e.exports = r;
}), {
"../utils": 174
} ],
174: [ (function(t, e, i) {
function n(t, e, i, n, r, s, a) {
var o = e._image, c = t.getContext("2d");
t.width = s;
t.height = a;
c.globalCompositeOperation = "source-over";
c.fillStyle = "rgb(" + i.r + "," + i.g + "," + i.b + ")";
c.fillRect(0, 0, s, a);
c.globalCompositeOperation = "multiply";
c.drawImage(o, n, r, s, a, 0, 0, s, a);
c.globalCompositeOperation = "destination-atop";
c.drawImage(o, n, r, s, a, 0, 0, s, a);
return t;
}
var r = {
canvasMap: {},
canvasUsed: {},
canvasPool: [],
checking: !1,
check: function() {
var t = !1;
for (var e in this.canvasUsed) {
t = !0;
if (this.canvasUsed[e]) this.canvasUsed[e] = !1; else {
var i = this.canvasMap[e];
i.width = 0;
i.height = 0;
this.canvasPool.length < 32 && this.canvasPool.push(i);
delete this.canvasMap[e];
delete this.canvasUsed[e];
}
}
if (!t) {
cc.director.off(cc.Director.EVENT_AFTER_DRAW, this.check, this);
this.checking = !1;
}
},
startCheck: function() {
cc.director.on(cc.Director.EVENT_AFTER_DRAW, this.check, this);
this.checking = !0;
},
getCanvas: function(t) {
this.canvasUsed[t] = !0;
return this.canvasMap[t];
},
cacheCanvas: function(t, e) {
this.canvasMap[e] = t;
this.canvasUsed[e] = !0;
this.checking || this.startCheck();
},
dropImage: function(t) {
this.canvasMap[t] && delete this.canvasMap[t];
}
};
e.exports = {
getColorizedImage: function(t, e) {
if (!t) return null;
if (0 === t.width || 0 === t.height) return t._image;
var i = 16777215 & e._val;
if (16777215 === i) return t._image;
var s = t.url + i, a = r.getCanvas(s);
if (!a) {
n(a = r.canvasPool.pop() || document.createElement("canvas"), t, e, 0, 0, t.width, t.height);
r.cacheCanvas(a, s);
}
return a;
},
getFrameCache: function(t, e, i, s, a, o) {
if (!t || !t.url || i < 0 || s < 0 || a <= 0 || o <= 0) return null;
var c = t.url, h = !1, l = 16777215 & e._val;
if (16777215 !== l) {
c += l;
h = !0;
}
if (0 !== i || 0 !== s && a !== t.width && o !== t.height) {
c += "_" + i + "_" + s + "_" + a + "_" + o;
h = !0;
}
if (!h) return t._image;
var u = r.getCanvas(c);
if (!u) {
n(u = r.canvasPool.pop() || document.createElement("canvas"), t, e, i, s, a, o);
r.cacheCanvas(u, c);
}
return u;
},
dropColorizedImage: function(t, e) {
var i = t.url + (16777215 & e._val);
r.dropImage(i);
}
};
var s = -1, a = {
setGlobalAlpha: function(t, e) {
if (s !== e) {
s = e;
t.globalAlpha = s;
}
},
reset: function() {
s = -1;
}
};
e.exports.context = a;
}), {} ],
175: [ (function(t, e, i) {
var n = t("./render-engine"), r = t("./render-flow");
cc.vmath.vec3.create();
function s(t) {
return {
defaultTexture: new n.Texture2D(t, {
images: [],
width: 128,
height: 128,
wrapS: n.gfx.WRAP_REPEAT,
wrapT: n.gfx.WRAP_REPEAT,
format: n.gfx.TEXTURE_FMT_RGB8,
mipmap: !1
}),
programTemplates: n.shaders.templates,
programChunks: n.shaders.chunks
};
}
cc.renderer = e.exports = {
renderEngine: n,
Texture2D: null,
canvas: null,
device: null,
scene: null,
drawCalls: 0,
_handle: null,
_cameraNode: null,
_camera: null,
_forward: null,
initWebGL: function(e, i) {
t("./webgl/assemblers");
var a = t("./webgl/model-batcher");
this.Texture2D = n.Texture2D;
this.canvas = e;
this.device = new n.Device(e, i);
this.scene = new n.Scene();
this._handle = new a(this.device, this.scene);
r.init(this._handle);
var o = s(this.device);
this._forward = new n.ForwardRenderer(this.device, o);
},
initCanvas: function(e) {
var i = t("./canvas");
n.Texture2D = n.canvas.Texture2D;
n.Device = n.canvas.Device;
this.Texture2D = n.Texture2D;
this.canvas = e;
this.device = new n.Device(e);
this._camera = {
a: 1,
b: 0,
c: 0,
d: 1,
tx: 0,
ty: 0
};
this._handle = new i.RenderComponentHandle(this.device, this._camera);
r.init(this._handle);
this._forward = new i.ForwardRenderer();
},
updateCameraViewport: function() {
if (cc.director) {
var t = cc.director.getScene();
t.scaleX = t.scaleY = 1;
}
if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
var e = cc.view.getViewportRect();
this.device.setViewport(e.x, e.y, e.width, e.height);
this._camera.a = cc.view.getScaleX();
this._camera.d = cc.view.getScaleY();
this._camera.tx = e.x;
this._camera.ty = e.y + e.height;
} else {
}
},
render: function(t) {
this.device._stats.drawcalls = 0;
if (t) {
r.visit(t);
this._forward.render(this.scene);
this.drawCalls = this.device._stats.drawcalls;
}
},
clear: function() {
this._handle.reset();
this._forward._reset();
}
};
}), {
"./canvas": 161,
"./render-engine": 176,
"./render-flow": 177,
"./webgl/assemblers": 187,
"./webgl/model-batcher": 202
} ],
176: [ (function(t, e, i) {
"use strict";
var n = Math.PI / 180, r = 180 / Math.PI, s = 1e-6;
function a(t) {
return t * n;
}
var o = Math.random;
function c(t, e) {
return Math.random() * (e - t) + t;
}
var h = 32, l = -1 << h - 1;
function u(t) {
var e = 32;
(t &= -t) && e--;
65535 & t && (e -= 16);
16711935 & t && (e -= 8);
252645135 & t && (e -= 4);
858993459 & t && (e -= 2);
1431655765 & t && (e -= 1);
return e;
}
var f = new Array(256);
(function(t) {
for (var e = 0; e < 256; ++e) {
var i = e, n = e, r = 7;
for (i >>>= 1; i; i >>>= 1) {
n <<= 1;
n |= 1 & i;
--r;
}
t[e] = n << r & 255;
}
})(f);
var _ = Object.freeze({
INT_BITS: h,
INT_MAX: 2147483647,
INT_MIN: l,
sign: function(t) {
return (t > 0) - (t < 0);
},
abs: function(t) {
var e = t >> h - 1;
return (t ^ e) - e;
},
min: function(t, e) {
return e ^ (t ^ e) & -(t < e);
},
max: function(t, e) {
return t ^ (t ^ e) & -(t < e);
},
isPow2: function(t) {
return !(t & t - 1 || !t);
},
log2: function(t) {
var e, i;
e = (t > 65535) << 4;
e |= i = ((t >>>= e) > 255) << 3;
e |= i = ((t >>>= i) > 15) << 2;
return (e |= i = ((t >>>= i) > 3) << 1) | (t >>>= i) >> 1;
},
log10: function(t) {
return t >= 1e9 ? 9 : t >= 1e8 ? 8 : t >= 1e7 ? 7 : t >= 1e6 ? 6 : t >= 1e5 ? 5 : t >= 1e4 ? 4 : t >= 1e3 ? 3 : t >= 100 ? 2 : t >= 10 ? 1 : 0;
},
popCount: function(t) {
return 16843009 * ((t = (858993459 & (t -= t >>> 1 & 1431655765)) + (t >>> 2 & 858993459)) + (t >>> 4) & 252645135) >>> 24;
},
countTrailingZeros: u,
nextPow2: function(t) {
t += 0 === t;
--t;
t |= t >>> 1;
t |= t >>> 2;
t |= t >>> 4;
t |= t >>> 8;
return 1 + (t |= t >>> 16);
},
prevPow2: function(t) {
t |= t >>> 1;
t |= t >>> 2;
t |= t >>> 4;
t |= t >>> 8;
return (t |= t >>> 16) - (t >>> 1);
},
parity: function(t) {
t ^= t >>> 16;
t ^= t >>> 8;
t ^= t >>> 4;
return 27030 >>> (t &= 15) & 1;
},
reverse: function(t) {
return f[255 & t] << 24 | f[t >>> 8 & 255] << 16 | f[t >>> 16 & 255] << 8 | f[t >>> 24 & 255];
},
interleave2: function(t, e) {
return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t &= 65535) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e &= 65535) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
},
deinterleave2: function(t, e) {
return (t = 65535 & ((t = 16711935 & ((t = 252645135 & ((t = 858993459 & ((t = t >>> e & 1431655765) | t >>> 1)) | t >>> 2)) | t >>> 4)) | t >>> 16)) << 16 >> 16;
},
interleave3: function(t, e, i) {
t = 1227133513 & ((t = 3272356035 & ((t = 251719695 & ((t = 4278190335 & ((t &= 1023) | t << 16)) | t << 8)) | t << 4)) | t << 2);
return (t |= (e = 1227133513 & ((e = 3272356035 & ((e = 251719695 & ((e = 4278190335 & ((e &= 1023) | e << 16)) | e << 8)) | e << 4)) | e << 2)) << 1) | (i = 1227133513 & ((i = 3272356035 & ((i = 251719695 & ((i = 4278190335 & ((i &= 1023) | i << 16)) | i << 8)) | i << 4)) | i << 2)) << 2;
},
deinterleave3: function(t, e) {
return (t = 1023 & ((t = 4278190335 & ((t = 251719695 & ((t = 3272356035 & ((t = t >>> e & 1227133513) | t >>> 2)) | t >>> 4)) | t >>> 8)) | t >>> 16)) << 22 >> 22;
},
nextCombination: function(t) {
var e = t | t - 1;
return e + 1 | (~e & -~e) - 1 >>> u(t) + 1;
}
}), d = new Array(2), p = function(t, e) {
this.x = t;
this.y = e;
};
p.prototype.toJSON = function() {
d[0] = this.x;
d[1] = this.y;
return d;
};
var m = {
create: function() {
return new p(0, 0);
},
new: function(t, e) {
return new p(t, e);
},
clone: function(t) {
return new p(t.x, t.y);
},
copy: function(t, e) {
t.x = e.x;
t.y = e.y;
return t;
},
set: function(t, e, i) {
t.x = e;
t.y = i;
return t;
},
add: function(t, e, i) {
t.x = e.x + i.x;
t.y = e.y + i.y;
return t;
},
subtract: function(t, e, i) {
t.x = e.x - i.x;
t.y = e.y - i.y;
return t;
}
};
m.sub = m.subtract;
m.multiply = function(t, e, i) {
t.x = e.x * i.x;
t.y = e.y * i.y;
return t;
};
m.mul = m.multiply;
m.divide = function(t, e, i) {
t.x = e.x / i.x;
t.y = e.y / i.y;
return t;
};
m.div = m.divide;
m.ceil = function(t, e) {
t.x = Math.ceil(e.x);
t.y = Math.ceil(e.y);
return t;
};
m.floor = function(t, e) {
t.x = Math.floor(e.x);
t.y = Math.floor(e.y);
return t;
};
m.min = function(t, e, i) {
t.x = Math.min(e.x, i.x);
t.y = Math.min(e.y, i.y);
return t;
};
m.max = function(t, e, i) {
t.x = Math.max(e.x, i.x);
t.y = Math.max(e.y, i.y);
return t;
};
m.round = function(t, e) {
t.x = Math.round(e.x);
t.y = Math.round(e.y);
return t;
};
m.scale = function(t, e, i) {
t.x = e.x * i;
t.y = e.y * i;
return t;
};
m.scaleAndAdd = function(t, e, i, n) {
t.x = e.x + i.x * n;
t.y = e.y + i.y * n;
return t;
};
m.distance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y;
return Math.sqrt(i * i + n * n);
};
m.dist = m.distance;
m.squaredDistance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y;
return i * i + n * n;
};
m.sqrDist = m.squaredDistance;
m.length = function(t) {
var e = t.x, i = t.y;
return Math.sqrt(e * e + i * i);
};
m.len = m.length;
m.squaredLength = function(t) {
var e = t.x, i = t.y;
return e * e + i * i;
};
m.sqrLen = m.squaredLength;
m.negate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
return t;
};
m.inverse = function(t, e) {
t.x = 1 / e.x;
t.y = 1 / e.y;
return t;
};
m.inverseSafe = function(t, e) {
var i = e.x, n = e.y;
Math.abs(i) < s ? t.x = 0 : t.x = 1 / i;
Math.abs(n) < s ? t.y = 0 : t.y = 1 / e.y;
return t;
};
m.normalize = function(t, e) {
var i = e.x, n = e.y, r = i * i + n * n;
if (r > 0) {
r = 1 / Math.sqrt(r);
t.x = e.x * r;
t.y = e.y * r;
}
return t;
};
m.dot = function(t, e) {
return t.x * e.x + t.y * e.y;
};
m.cross = function(t, e, i) {
var n = e.x * i.y - e.y * i.x;
t.x = t.y = 0;
t.z = n;
return t;
};
m.lerp = function(t, e, i, n) {
var r = e.x, s = e.y;
t.x = r + n * (i.x - r);
t.y = s + n * (i.y - s);
return t;
};
m.random = function(t, e) {
e = e || 1;
var i = 2 * o() * Math.PI;
t.x = Math.cos(i) * e;
t.y = Math.sin(i) * e;
return t;
};
m.transformMat2 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m02 * r;
t.y = i.m01 * n + i.m03 * r;
return t;
};
m.transformMat23 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m02 * r + i.m04;
t.y = i.m01 * n + i.m03 * r + i.m05;
return t;
};
m.transformMat3 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m03 * r + i.m06;
t.y = i.m01 * n + i.m04 * r + i.m07;
return t;
};
m.transformMat4 = function(t, e, i) {
var n = e.x, r = e.y;
t.x = i.m00 * n + i.m04 * r + i.m12;
t.y = i.m01 * n + i.m05 * r + i.m13;
return t;
};
m.forEach = (function() {
var t = m.create();
return function(e, i, n, r, s, a) {
var o, c;
i || (i = 2);
n || (n = 0);
c = r ? Math.min(r * i + n, e.length) : e.length;
for (o = n; o < c; o += i) {
t.x = e[o];
t.y = e[o + 1];
s(t, t, a);
e[o] = t.x;
e[o + 1] = t.y;
}
return e;
};
})();
m.str = function(t) {
return "vec2(" + t.x + ", " + t.y + ")";
};
m.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
return t;
};
m.exactEquals = function(t, e) {
return t.x === e.x && t.y === e.y;
};
m.equals = function(t, e) {
var i = t.x, n = t.y, r = e.x, a = e.y;
return Math.abs(i - r) <= s * Math.max(1, Math.abs(i), Math.abs(r)) && Math.abs(n - a) <= s * Math.max(1, Math.abs(n), Math.abs(a));
};
var g = new Array(3), v = function(t, e, i) {
this.x = t;
this.y = e;
this.z = i;
};
v.prototype.toJSON = function() {
g[0] = this.x;
g[1] = this.y;
g[2] = this.z;
return g;
};
var y = {
create: function() {
return new v(0, 0, 0);
},
new: function(t, e, i) {
return new v(t, e, i);
},
clone: function(t) {
return new v(t.x, t.y, t.z);
},
copy: function(t, e) {
t.x = e.x;
t.y = e.y;
t.z = e.z;
return t;
},
set: function(t, e, i, n) {
t.x = e;
t.y = i;
t.z = n;
return t;
},
add: function(t, e, i) {
t.x = e.x + i.x;
t.y = e.y + i.y;
t.z = e.z + i.z;
return t;
},
subtract: function(t, e, i) {
t.x = e.x - i.x;
t.y = e.y - i.y;
t.z = e.z - i.z;
return t;
}
};
y.sub = y.subtract;
y.multiply = function(t, e, i) {
t.x = e.x * i.x;
t.y = e.y * i.y;
t.z = e.z * i.z;
return t;
};
y.mul = y.multiply;
y.divide = function(t, e, i) {
t.x = e.x / i.x;
t.y = e.y / i.y;
t.z = e.z / i.z;
return t;
};
y.div = y.divide;
y.ceil = function(t, e) {
t.x = Math.ceil(e.x);
t.y = Math.ceil(e.y);
t.z = Math.ceil(e.z);
return t;
};
y.floor = function(t, e) {
t.x = Math.floor(e.x);
t.y = Math.floor(e.y);
t.z = Math.floor(e.z);
return t;
};
y.min = function(t, e, i) {
t.x = Math.min(e.x, i.x);
t.y = Math.min(e.y, i.y);
t.z = Math.min(e.z, i.z);
return t;
};
y.max = function(t, e, i) {
t.x = Math.max(e.x, i.x);
t.y = Math.max(e.y, i.y);
t.z = Math.max(e.z, i.z);
return t;
};
y.round = function(t, e) {
t.x = Math.round(e.x);
t.y = Math.round(e.y);
t.z = Math.round(e.z);
return t;
};
y.scale = function(t, e, i) {
t.x = e.x * i;
t.y = e.y * i;
t.z = e.z * i;
return t;
};
y.scaleAndAdd = function(t, e, i, n) {
t.x = e.x + i.x * n;
t.y = e.y + i.y * n;
t.z = e.z + i.z * n;
return t;
};
y.distance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z;
return Math.sqrt(i * i + n * n + r * r);
};
y.dist = y.distance;
y.squaredDistance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z;
return i * i + n * n + r * r;
};
y.sqrDist = y.squaredDistance;
y.length = function(t) {
var e = t.x, i = t.y, n = t.z;
return Math.sqrt(e * e + i * i + n * n);
};
y.len = y.length;
y.squaredLength = function(t) {
var e = t.x, i = t.y, n = t.z;
return e * e + i * i + n * n;
};
y.sqrLen = y.squaredLength;
y.negate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
t.z = -e.z;
return t;
};
y.inverse = function(t, e) {
t.x = 1 / e.x;
t.y = 1 / e.y;
t.z = 1 / e.z;
return t;
};
y.inverseSafe = function(t, e) {
var i = e.x, n = e.y, r = e.z;
Math.abs(i) < s ? t.x = 0 : t.x = 1 / i;
Math.abs(n) < s ? t.y = 0 : t.y = 1 / n;
Math.abs(r) < s ? t.z = 0 : t.z = 1 / r;
return t;
};
y.normalize = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = i * i + n * n + r * r;
if (s > 0) {
s = 1 / Math.sqrt(s);
t.x = i * s;
t.y = n * s;
t.z = r * s;
}
return t;
};
y.dot = function(t, e) {
return t.x * e.x + t.y * e.y + t.z * e.z;
};
y.cross = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.x, o = i.y, c = i.z;
t.x = r * c - s * o;
t.y = s * a - n * c;
t.z = n * o - r * a;
return t;
};
y.lerp = function(t, e, i, n) {
var r = e.x, s = e.y, a = e.z;
t.x = r + n * (i.x - r);
t.y = s + n * (i.y - s);
t.z = a + n * (i.z - a);
return t;
};
y.hermite = function(t, e, i, n, r, s) {
var a = s * s, o = a * (2 * s - 3) + 1, c = a * (s - 2) + s, h = a * (s - 1), l = a * (3 - 2 * s);
t.x = e.x * o + i.x * c + n.x * h + r.x * l;
t.y = e.y * o + i.y * c + n.y * h + r.y * l;
t.z = e.z * o + i.z * c + n.z * h + r.z * l;
return t;
};
y.bezier = function(t, e, i, n, r, s) {
var a = 1 - s, o = a * a, c = s * s, h = o * a, l = 3 * s * o, u = 3 * c * a, f = c * s;
t.x = e.x * h + i.x * l + n.x * u + r.x * f;
t.y = e.y * h + i.y * l + n.y * u + r.y * f;
t.z = e.z * h + i.z * l + n.z * u + r.z * f;
return t;
};
y.random = function(t, e) {
e = e || 1;
var i = 2 * o() * Math.PI, n = 2 * o() - 1, r = Math.sqrt(1 - n * n) * e;
t.x = Math.cos(i) * r;
t.y = Math.sin(i) * r;
t.z = n * e;
return t;
};
y.transformMat4 = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.m03 * n + i.m07 * r + i.m11 * s + i.m15;
a = a || 1;
t.x = (i.m00 * n + i.m04 * r + i.m08 * s + i.m12) / a;
t.y = (i.m01 * n + i.m05 * r + i.m09 * s + i.m13) / a;
t.z = (i.m02 * n + i.m06 * r + i.m10 * s + i.m14) / a;
return t;
};
y.transformMat3 = function(t, e, i) {
var n = e.x, r = e.y, s = e.z;
t.x = n * i.m00 + r * i.m03 + s * i.m06;
t.y = n * i.m01 + r * i.m04 + s * i.m07;
t.z = n * i.m02 + r * i.m05 + s * i.m08;
return t;
};
y.transformQuat = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.x, o = i.y, c = i.z, h = i.w, l = h * n + o * s - c * r, u = h * r + c * n - a * s, f = h * s + a * r - o * n, _ = -a * n - o * r - c * s;
t.x = l * h + _ * -a + u * -c - f * -o;
t.y = u * h + _ * -o + f * -a - l * -c;
t.z = f * h + _ * -c + l * -o - u * -a;
return t;
};
y.rotateX = function(t, e, i, n) {
var r = [], s = [];
r.x = e.x - i.x;
r.y = e.y - i.y;
r.z = e.z - i.z;
s.x = r.x;
s.y = r.y * Math.cos(n) - r.z * Math.sin(n);
s.z = r.y * Math.sin(n) + r.z * Math.cos(n);
t.x = s.x + i.x;
t.y = s.y + i.y;
t.z = s.z + i.z;
return t;
};
y.rotateY = function(t, e, i, n) {
var r = [], s = [];
r.x = e.x - i.x;
r.y = e.y - i.y;
r.z = e.z - i.z;
s.x = r.z * Math.sin(n) + r.x * Math.cos(n);
s.y = r.y;
s.z = r.z * Math.cos(n) - r.x * Math.sin(n);
t.x = s.x + i.x;
t.y = s.y + i.y;
t.z = s.z + i.z;
return t;
};
y.rotateZ = function(t, e, i, n) {
var r = [], s = [];
r.x = e.x - i.x;
r.y = e.y - i.y;
r.z = e.z - i.z;
s.x = r.x * Math.cos(n) - r.y * Math.sin(n);
s.y = r.x * Math.sin(n) + r.y * Math.cos(n);
s.z = r.z;
t.x = s.x + i.x;
t.y = s.y + i.y;
t.z = s.z + i.z;
return t;
};
y.forEach = (function() {
var t = y.create();
return function(e, i, n, r, s, a) {
var o, c;
i || (i = 3);
n || (n = 0);
c = r ? Math.min(r * i + n, e.length) : e.length;
for (o = n; o < c; o += i) {
t.x = e[o];
t.y = e[o + 1];
t.z = e[o + 2];
s(t, t, a);
e[o] = t.x;
e[o + 1] = t.y;
e[o + 2] = t.z;
}
return e;
};
})();
y.angle = (function() {
var t = y.create(), e = y.create();
return function(i, n) {
y.copy(t, i);
y.copy(e, n);
y.normalize(t, t);
y.normalize(e, e);
var r = y.dot(t, e);
return r > 1 ? 0 : r < -1 ? Math.PI : Math.acos(r);
};
})();
y.str = function(t) {
return "vec3(" + t.x + ", " + t.y + ", " + t.z + ")";
};
y.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
t[2] = e.z;
return t;
};
y.exactEquals = function(t, e) {
return t.x === e.x && t.y === e.y && t.z === e.z;
};
y.equals = function(t, e) {
var i = t.x, n = t.y, r = t.z, a = e.x, o = e.y, c = e.z;
return Math.abs(i - a) <= s * Math.max(1, Math.abs(i), Math.abs(a)) && Math.abs(n - o) <= s * Math.max(1, Math.abs(n), Math.abs(o)) && Math.abs(r - c) <= s * Math.max(1, Math.abs(r), Math.abs(c));
};
var T = new Array(4), x = function(t, e, i, n) {
this.x = t;
this.y = e;
this.z = i;
this.w = n;
};
x.prototype.toJSON = function() {
T[0] = this.x;
T[1] = this.y;
T[2] = this.z;
T[3] = this.w;
return T;
};
var E = {
create: function() {
return new x(0, 0, 0, 0);
},
new: function(t, e, i, n) {
return new x(t, e, i, n);
},
clone: function(t) {
return new x(t.x, t.y, t.z, t.w);
},
copy: function(t, e) {
t.x = e.x;
t.y = e.y;
t.z = e.z;
t.w = e.w;
return t;
},
set: function(t, e, i, n, r) {
t.x = e;
t.y = i;
t.z = n;
t.w = r;
return t;
},
add: function(t, e, i) {
t.x = e.x + i.x;
t.y = e.y + i.y;
t.z = e.z + i.z;
t.w = e.w + i.w;
return t;
},
subtract: function(t, e, i) {
t.x = e.x - i.x;
t.y = e.y - i.y;
t.z = e.z - i.z;
t.w = e.w - i.w;
return t;
}
};
E.sub = E.subtract;
E.multiply = function(t, e, i) {
t.x = e.x * i.x;
t.y = e.y * i.y;
t.z = e.z * i.z;
t.w = e.w * i.w;
return t;
};
E.mul = E.multiply;
E.divide = function(t, e, i) {
t.x = e.x / i.x;
t.y = e.y / i.y;
t.z = e.z / i.z;
t.w = e.w / i.w;
return t;
};
E.div = E.divide;
E.ceil = function(t, e) {
t.x = Math.ceil(e.x);
t.y = Math.ceil(e.y);
t.z = Math.ceil(e.z);
t.w = Math.ceil(e.w);
return t;
};
E.floor = function(t, e) {
t.x = Math.floor(e.x);
t.y = Math.floor(e.y);
t.z = Math.floor(e.z);
t.w = Math.floor(e.w);
return t;
};
E.min = function(t, e, i) {
t.x = Math.min(e.x, i.x);
t.y = Math.min(e.y, i.y);
t.z = Math.min(e.z, i.z);
t.w = Math.min(e.w, i.w);
return t;
};
E.max = function(t, e, i) {
t.x = Math.max(e.x, i.x);
t.y = Math.max(e.y, i.y);
t.z = Math.max(e.z, i.z);
t.w = Math.max(e.w, i.w);
return t;
};
E.round = function(t, e) {
t.x = Math.round(e.x);
t.y = Math.round(e.y);
t.z = Math.round(e.z);
t.w = Math.round(e.w);
return t;
};
E.scale = function(t, e, i) {
t.x = e.x * i;
t.y = e.y * i;
t.z = e.z * i;
t.w = e.w * i;
return t;
};
E.scaleAndAdd = function(t, e, i, n) {
t.x = e.x + i.x * n;
t.y = e.y + i.y * n;
t.z = e.z + i.z * n;
t.w = e.w + i.w * n;
return t;
};
E.distance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z, s = e.w - t.w;
return Math.sqrt(i * i + n * n + r * r + s * s);
};
E.dist = E.distance;
E.squaredDistance = function(t, e) {
var i = e.x - t.x, n = e.y - t.y, r = e.z - t.z, s = e.w - t.w;
return i * i + n * n + r * r + s * s;
};
E.sqrDist = E.squaredDistance;
E.length = function(t) {
var e = t.x, i = t.y, n = t.z, r = t.w;
return Math.sqrt(e * e + i * i + n * n + r * r);
};
E.len = E.length;
E.squaredLength = function(t) {
var e = t.x, i = t.y, n = t.z, r = t.w;
return e * e + i * i + n * n + r * r;
};
E.sqrLen = E.squaredLength;
E.negate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
t.z = -e.z;
t.w = -e.w;
return t;
};
E.inverse = function(t, e) {
t.x = 1 / e.x;
t.y = 1 / e.y;
t.z = 1 / e.z;
t.w = 1 / e.w;
return t;
};
E.inverseSafe = function(t, e) {
var i = e.x, n = e.y, r = e.z, a = e.w;
Math.abs(i) < s ? t.x = 0 : t.x = 1 / i;
Math.abs(n) < s ? t.y = 0 : t.y = 1 / n;
Math.abs(r) < s ? t.z = 0 : t.z = 1 / r;
Math.abs(a) < s ? t.w = 0 : t.w = 1 / a;
return t;
};
E.normalize = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i * i + n * n + r * r + s * s;
if (a > 0) {
a = 1 / Math.sqrt(a);
t.x = i * a;
t.y = n * a;
t.z = r * a;
t.w = s * a;
}
return t;
};
E.dot = function(t, e) {
return t.x * e.x + t.y * e.y + t.z * e.z + t.w * e.w;
};
E.lerp = function(t, e, i, n) {
var r = e.x, s = e.y, a = e.z, o = e.w;
t.x = r + n * (i.x - r);
t.y = s + n * (i.y - s);
t.z = a + n * (i.z - a);
t.w = o + n * (i.w - o);
return t;
};
E.random = function(t, e) {
e = e || 1;
t.x = o();
t.y = o();
t.z = o();
t.w = o();
E.normalize(t, t);
E.scale(t, t, e);
return t;
};
E.transformMat4 = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = e.w;
t.x = i.m00 * n + i.m04 * r + i.m08 * s + i.m12 * a;
t.y = i.m01 * n + i.m05 * r + i.m09 * s + i.m13 * a;
t.z = i.m02 * n + i.m06 * r + i.m10 * s + i.m14 * a;
t.w = i.m03 * n + i.m07 * r + i.m11 * s + i.m15 * a;
return t;
};
E.transformQuat = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = i.x, o = i.y, c = i.z, h = i.w, l = h * n + o * s - c * r, u = h * r + c * n - a * s, f = h * s + a * r - o * n, _ = -a * n - o * r - c * s;
t.x = l * h + _ * -a + u * -c - f * -o;
t.y = u * h + _ * -o + f * -a - l * -c;
t.z = f * h + _ * -c + l * -o - u * -a;
t.w = e.w;
return t;
};
E.forEach = (function() {
var t = E.create();
return function(e, i, n, r, s, a) {
var o, c;
i || (i = 4);
n || (n = 0);
c = r ? Math.min(r * i + n, e.length) : e.length;
for (o = n; o < c; o += i) {
t.x = e[o];
t.y = e[o + 1];
t.z = e[o + 2];
t.w = e[o + 3];
s(t, t, a);
e[o] = t.x;
e[o + 1] = t.y;
e[o + 2] = t.z;
e[o + 3] = t.w;
}
return e;
};
})();
E.str = function(t) {
return "vec4(" + t.x + ", " + t.y + ", " + t.z + ", " + t.w + ")";
};
E.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
t[2] = e.z;
t[3] = e.w;
return t;
};
E.exactEquals = function(t, e) {
return t.x === e.x && t.y === e.y && t.z === e.z && t.w === e.w;
};
E.equals = function(t, e) {
var i = t.x, n = t.y, r = t.z, a = t.w, o = e.x, c = e.y, h = e.z, l = e.w;
return Math.abs(i - o) <= s * Math.max(1, Math.abs(i), Math.abs(o)) && Math.abs(n - c) <= s * Math.max(1, Math.abs(n), Math.abs(c)) && Math.abs(r - h) <= s * Math.max(1, Math.abs(r), Math.abs(h)) && Math.abs(a - l) <= s * Math.max(1, Math.abs(a), Math.abs(l));
};
var C = new Array(9), A = function(t, e, i, n, r, s, a, o, c) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
this.m04 = r;
this.m05 = s;
this.m06 = a;
this.m07 = o;
this.m08 = c;
};
A.prototype.toJSON = function() {
C[0] = this.m00;
C[1] = this.m01;
C[2] = this.m02;
C[3] = this.m03;
C[4] = this.m04;
C[5] = this.m05;
C[6] = this.m06;
C[7] = this.m07;
C[8] = this.m08;
return C;
};
var b = {
create: function() {
return new A(1, 0, 0, 0, 1, 0, 0, 0, 1);
},
new: function(t, e, i, n, r, s, a, o, c) {
return new A(t, e, i, n, r, s, a, o, c);
},
clone: function(t) {
return new A(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m04 = e.m04;
t.m05 = e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m08 = e.m08;
return t;
},
set: function(t, e, i, n, r, s, a, o, c, h) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
t.m04 = s;
t.m05 = a;
t.m06 = o;
t.m07 = c;
t.m08 = h;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 1;
t.m05 = 0;
t.m06 = 0;
t.m07 = 0;
t.m08 = 1;
return t;
},
transpose: function(t, e) {
if (t === e) {
var i = e.m01, n = e.m02, r = e.m05;
t.m01 = e.m03;
t.m02 = e.m06;
t.m03 = i;
t.m05 = e.m07;
t.m06 = n;
t.m07 = r;
} else {
t.m00 = e.m00;
t.m01 = e.m03;
t.m02 = e.m06;
t.m03 = e.m01;
t.m04 = e.m04;
t.m05 = e.m07;
t.m06 = e.m02;
t.m07 = e.m05;
t.m08 = e.m08;
}
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, c = e.m06, h = e.m07, l = e.m08, u = l * a - o * h, f = -l * s + o * c, _ = h * s - a * c, d = i * u + n * f + r * _;
if (!d) return null;
d = 1 / d;
t.m00 = u * d;
t.m01 = (-l * n + r * h) * d;
t.m02 = (o * n - r * a) * d;
t.m03 = f * d;
t.m04 = (l * i - r * c) * d;
t.m05 = (-o * i + r * s) * d;
t.m06 = _ * d;
t.m07 = (-h * i + n * c) * d;
t.m08 = (a * i - n * s) * d;
return t;
},
adjoint: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, c = e.m06, h = e.m07, l = e.m08;
t.m00 = a * l - o * h;
t.m01 = r * h - n * l;
t.m02 = n * o - r * a;
t.m03 = o * c - s * l;
t.m04 = i * l - r * c;
t.m05 = r * s - i * o;
t.m06 = s * h - a * c;
t.m07 = n * c - i * h;
t.m08 = i * a - n * s;
return t;
},
determinant: function(t) {
var e = t.m00, i = t.m01, n = t.m02, r = t.m03, s = t.m04, a = t.m05, o = t.m06, c = t.m07, h = t.m08;
return e * (h * s - a * c) + i * (-h * r + a * o) + n * (c * r - s * o);
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = e.m06, l = e.m07, u = e.m08, f = i.m00, _ = i.m01, d = i.m02, p = i.m03, m = i.m04, g = i.m05, v = i.m06, y = i.m07, T = i.m08;
t.m00 = f * n + _ * a + d * h;
t.m01 = f * r + _ * o + d * l;
t.m02 = f * s + _ * c + d * u;
t.m03 = p * n + m * a + g * h;
t.m04 = p * r + m * o + g * l;
t.m05 = p * s + m * c + g * u;
t.m06 = v * n + y * a + T * h;
t.m07 = v * r + y * o + T * l;
t.m08 = v * s + y * c + T * u;
return t;
}
};
b.mul = b.multiply;
b.translate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = e.m06, l = e.m07, u = e.m08, f = i.x, _ = i.y;
t.m00 = n;
t.m01 = r;
t.m02 = s;
t.m03 = a;
t.m04 = o;
t.m05 = c;
t.m06 = f * n + _ * a + h;
t.m07 = f * r + _ * o + l;
t.m08 = f * s + _ * c + u;
return t;
};
b.rotate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = e.m06, l = e.m07, u = e.m08, f = Math.sin(i), _ = Math.cos(i);
t.m00 = _ * n + f * a;
t.m01 = _ * r + f * o;
t.m02 = _ * s + f * c;
t.m03 = _ * a - f * n;
t.m04 = _ * o - f * r;
t.m05 = _ * c - f * s;
t.m06 = h;
t.m07 = l;
t.m08 = u;
return t;
};
b.scale = function(t, e, i) {
var n = i.x, r = i.y;
t.m00 = n * e.m00;
t.m01 = n * e.m01;
t.m02 = n * e.m02;
t.m03 = r * e.m03;
t.m04 = r * e.m04;
t.m05 = r * e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m08 = e.m08;
return t;
};
b.fromMat4 = function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m04;
t.m04 = e.m05;
t.m05 = e.m06;
t.m06 = e.m08;
t.m07 = e.m09;
t.m08 = e.m10;
return t;
};
b.fromTranslation = function(t, e) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 1;
t.m05 = 0;
t.m06 = e.x;
t.m07 = e.y;
t.m08 = 1;
return t;
};
b.fromRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = 0;
t.m03 = -i;
t.m04 = n;
t.m05 = 0;
t.m06 = 0;
t.m07 = 0;
t.m08 = 1;
return t;
};
b.fromScaling = function(t, e) {
t.m00 = e.x;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = e.y;
t.m05 = 0;
t.m06 = 0;
t.m07 = 0;
t.m08 = 1;
return t;
};
b.fromMat2d = function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = 0;
t.m03 = e.m02;
t.m04 = e.m03;
t.m05 = 0;
t.m06 = e.m04;
t.m07 = e.m05;
t.m08 = 1;
return t;
};
b.fromQuat = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i + i, o = n + n, c = r + r, h = i * a, l = n * a, u = n * o, f = r * a, _ = r * o, d = r * c, p = s * a, m = s * o, g = s * c;
t.m00 = 1 - u - d;
t.m03 = l - g;
t.m06 = f + m;
t.m01 = l + g;
t.m04 = 1 - h - d;
t.m07 = _ - p;
t.m02 = f - m;
t.m05 = _ + p;
t.m08 = 1 - h - u;
return t;
};
b.fromViewUp = (function() {
var t = y.new(0, 1, 0), e = y.create(), i = y.create();
return function(n, r, a) {
if (y.sqrLen(r) < s * s) {
b.identity(n);
return n;
}
a = a || t;
y.cross(e, a, r);
if (y.sqrLen(e) < s * s) {
b.identity(n);
return n;
}
y.cross(i, r, e);
b.set(n, e.x, e.y, e.z, i.x, i.y, i.z, r.x, r.y, r.z);
return n;
};
})();
b.normalFromMat4 = function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, c = e.m06, h = e.m07, l = e.m08, u = e.m09, f = e.m10, _ = e.m11, d = e.m12, p = e.m13, m = e.m14, g = e.m15, v = i * o - n * a, y = i * c - r * a, T = i * h - s * a, x = n * c - r * o, E = n * h - s * o, C = r * h - s * c, A = l * p - u * d, b = l * m - f * d, S = l * g - _ * d, w = u * m - f * p, D = u * g - _ * p, I = f * g - _ * m, R = v * I - y * D + T * w + x * S - E * b + C * A;
if (!R) return null;
R = 1 / R;
t.m00 = (o * I - c * D + h * w) * R;
t.m01 = (c * S - a * I - h * b) * R;
t.m02 = (a * D - o * S + h * A) * R;
t.m03 = (r * D - n * I - s * w) * R;
t.m04 = (i * I - r * S + s * b) * R;
t.m05 = (n * S - i * D - s * A) * R;
t.m06 = (p * C - m * E + g * x) * R;
t.m07 = (m * T - d * C - g * y) * R;
t.m08 = (d * E - p * T + g * v) * R;
return t;
};
b.str = function(t) {
return "mat3(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ", " + t.m04 + ", " + t.m05 + ", " + t.m06 + ", " + t.m07 + ", " + t.m08 + ")";
};
b.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
t[6] = e.m06;
t[7] = e.m07;
t[8] = e.m08;
return t;
};
b.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2) + Math.pow(t.m04, 2) + Math.pow(t.m05, 2) + Math.pow(t.m06, 2) + Math.pow(t.m07, 2) + Math.pow(t.m08, 2));
};
b.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
t.m04 = e.m04 + i.m04;
t.m05 = e.m05 + i.m05;
t.m06 = e.m06 + i.m06;
t.m07 = e.m07 + i.m07;
t.m08 = e.m08 + i.m08;
return t;
};
b.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
t.m04 = e.m04 - i.m04;
t.m05 = e.m05 - i.m05;
t.m06 = e.m06 - i.m06;
t.m07 = e.m07 - i.m07;
t.m08 = e.m08 - i.m08;
return t;
};
b.sub = b.subtract;
b.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
t.m04 = e.m04 * i;
t.m05 = e.m05 * i;
t.m06 = e.m06 * i;
t.m07 = e.m07 * i;
t.m08 = e.m08 * i;
return t;
};
b.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
t.m04 = e.m04 + i.m04 * n;
t.m05 = e.m05 + i.m05 * n;
t.m06 = e.m06 + i.m06 * n;
t.m07 = e.m07 + i.m07 * n;
t.m08 = e.m08 + i.m08 * n;
return t;
};
b.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03 && t.m04 === e.m04 && t.m05 === e.m05 && t.m06 === e.m06 && t.m07 === e.m07 && t.m08 === e.m08;
};
b.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = t.m04, c = t.m05, h = t.m06, l = t.m07, u = t.m08, f = e.m00, _ = e.m01, d = e.m02, p = e.m03, m = e.m04, g = e.m05, v = e.m06, y = e.m07, T = e.m08;
return Math.abs(i - f) <= s * Math.max(1, Math.abs(i), Math.abs(f)) && Math.abs(n - _) <= s * Math.max(1, Math.abs(n), Math.abs(_)) && Math.abs(r - d) <= s * Math.max(1, Math.abs(r), Math.abs(d)) && Math.abs(a - p) <= s * Math.max(1, Math.abs(a), Math.abs(p)) && Math.abs(o - m) <= s * Math.max(1, Math.abs(o), Math.abs(m)) && Math.abs(c - g) <= s * Math.max(1, Math.abs(c), Math.abs(g)) && Math.abs(h - v) <= s * Math.max(1, Math.abs(h), Math.abs(v)) && Math.abs(l - y) <= s * Math.max(1, Math.abs(l), Math.abs(y)) && Math.abs(u - T) <= s * Math.max(1, Math.abs(u), Math.abs(T));
};
var S = new Array(4), w = function(t, e, i, n) {
this.x = t;
this.y = e;
this.z = i;
this.w = n;
};
w.prototype.toJSON = function() {
S[0] = this.x;
S[1] = this.y;
S[2] = this.z;
S[3] = this.w;
return S;
};
var D = {
create: function() {
return new w(0, 0, 0, 1);
},
new: function(t, e, i, n) {
return new w(t, e, i, n);
},
clone: function(t) {
return new w(t.x, t.y, t.z, t.w);
}
};
D.copy = E.copy;
D.set = E.set;
D.identity = function(t) {
t.x = 0;
t.y = 0;
t.z = 0;
t.w = 1;
return t;
};
D.rotationTo = (function() {
var t = y.create(), e = y.new(1, 0, 0), i = y.new(0, 1, 0);
return function(n, r, s) {
var a = y.dot(r, s);
if (a < -.999999) {
y.cross(t, e, r);
y.length(t) < 1e-6 && y.cross(t, i, r);
y.normalize(t, t);
D.fromAxisAngle(n, t, Math.PI);
return n;
}
if (a > .999999) {
n.x = 0;
n.y = 0;
n.z = 0;
n.w = 1;
return n;
}
y.cross(t, r, s);
n.x = t.x;
n.y = t.y;
n.z = t.z;
n.w = 1 + a;
return D.normalize(n, n);
};
})();
D.getAxisAngle = function(t, e) {
var i = 2 * Math.acos(e.w), n = Math.sin(i / 2);
if (0 != n) {
t.x = e.x / n;
t.y = e.y / n;
t.z = e.z / n;
} else {
t.x = 1;
t.y = 0;
t.z = 0;
}
return i;
};
D.multiply = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = e.w, o = i.x, c = i.y, h = i.z, l = i.w;
t.x = n * l + a * o + r * h - s * c;
t.y = r * l + a * c + s * o - n * h;
t.z = s * l + a * h + n * c - r * o;
t.w = a * l - n * o - r * c - s * h;
return t;
};
D.mul = D.multiply;
D.scale = E.scale;
D.rotateX = function(t, e, i) {
i *= .5;
var n = e.x, r = e.y, s = e.z, a = e.w, o = Math.sin(i), c = Math.cos(i);
t.x = n * c + a * o;
t.y = r * c + s * o;
t.z = s * c - r * o;
t.w = a * c - n * o;
return t;
};
D.rotateY = function(t, e, i) {
i *= .5;
var n = e.x, r = e.y, s = e.z, a = e.w, o = Math.sin(i), c = Math.cos(i);
t.x = n * c - s * o;
t.y = r * c + a * o;
t.z = s * c + n * o;
t.w = a * c - r * o;
return t;
};
D.rotateZ = function(t, e, i) {
i *= .5;
var n = e.x, r = e.y, s = e.z, a = e.w, o = Math.sin(i), c = Math.cos(i);
t.x = n * c + r * o;
t.y = r * c - n * o;
t.z = s * c + a * o;
t.w = a * c - s * o;
return t;
};
D.rotateAround = (function() {
var t = y.create(), e = D.create();
return function(i, n, r, s) {
D.invert(e, n);
y.transformQuat(t, r, e);
D.fromAxisAngle(e, t, s);
D.mul(i, n, e);
return i;
};
})();
D.rotateAroundLocal = (function() {
var t = D.create();
return function(e, i, n, r) {
D.fromAxisAngle(t, n, r);
D.mul(e, i, t);
return e;
};
})();
D.calculateW = function(t, e) {
var i = e.x, n = e.y, r = e.z;
t.x = i;
t.y = n;
t.z = r;
t.w = Math.sqrt(Math.abs(1 - i * i - n * n - r * r));
return t;
};
D.dot = E.dot;
D.lerp = E.lerp;
D.slerp = function(t, e, i, n) {
var r, s, a, o, c, h = e.x, l = e.y, u = e.z, f = e.w, _ = i.x, d = i.y, p = i.z, m = i.w;
if ((s = h * _ + l * d + u * p + f * m) < 0) {
s = -s;
_ = -_;
d = -d;
p = -p;
m = -m;
}
if (1 - s > 1e-6) {
r = Math.acos(s);
a = Math.sin(r);
o = Math.sin((1 - n) * r) / a;
c = Math.sin(n * r) / a;
} else {
o = 1 - n;
c = n;
}
t.x = o * h + c * _;
t.y = o * l + c * d;
t.z = o * u + c * p;
t.w = o * f + c * m;
return t;
};
D.sqlerp = (function() {
var t = D.create(), e = D.create();
return function(i, n, r, s, a, o) {
D.slerp(t, n, a, o);
D.slerp(e, r, s, o);
D.slerp(i, t, e, 2 * o * (1 - o));
return i;
};
})();
D.invert = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i * i + n * n + r * r + s * s, o = a ? 1 / a : 0;
t.x = -i * o;
t.y = -n * o;
t.z = -r * o;
t.w = s * o;
return t;
};
D.conjugate = function(t, e) {
t.x = -e.x;
t.y = -e.y;
t.z = -e.z;
t.w = e.w;
return t;
};
D.length = E.length;
D.len = D.length;
D.squaredLength = E.squaredLength;
D.sqrLen = D.squaredLength;
D.normalize = E.normalize;
D.fromAxes = (function() {
var t = b.create();
return function(e, i, n, r) {
b.set(t, i.x, i.y, i.z, n.x, n.y, n.z, r.x, r.y, r.z);
return D.normalize(e, D.fromMat3(e, t));
};
})();
D.fromViewUp = (function() {
var t = b.create();
return function(e, i, n) {
b.fromViewUp(t, i, n);
return t ? D.normalize(e, D.fromMat3(e, t)) : null;
};
})();
D.fromAxisAngle = function(t, e, i) {
i *= .5;
var n = Math.sin(i);
t.x = n * e.x;
t.y = n * e.y;
t.z = n * e.z;
t.w = Math.cos(i);
return t;
};
D.fromMat3 = function(t, e) {
var i = e.m00, n = e.m03, r = e.m06, s = e.m01, a = e.m04, o = e.m07, c = e.m02, h = e.m05, l = e.m08, u = i + a + l;
if (u > 0) {
var f = .5 / Math.sqrt(u + 1);
t.w = .25 / f;
t.x = (h - o) * f;
t.y = (r - c) * f;
t.z = (s - n) * f;
} else if (i > a && i > l) {
var _ = 2 * Math.sqrt(1 + i - a - l);
t.w = (h - o) / _;
t.x = .25 * _;
t.y = (n + s) / _;
t.z = (r + c) / _;
} else if (a > l) {
var d = 2 * Math.sqrt(1 + a - i - l);
t.w = (r - c) / d;
t.x = (n + s) / d;
t.y = .25 * d;
t.z = (o + h) / d;
} else {
var p = 2 * Math.sqrt(1 + l - i - a);
t.w = (s - n) / p;
t.x = (r + c) / p;
t.y = (o + h) / p;
t.z = .25 * p;
}
return t;
};
D.fromEuler = function(t, e, i, n) {
var r = .5 * Math.PI / 180;
e *= r;
i *= r;
n *= r;
var s = Math.sin(e), a = Math.cos(e), o = Math.sin(i), c = Math.cos(i), h = Math.sin(n), l = Math.cos(n);
t.x = s * c * l - a * o * h;
t.y = a * o * l + s * c * h;
t.z = a * c * h - s * o * l;
t.w = a * c * l + s * o * h;
return t;
};
D.str = function(t) {
return "quat(" + t.x + ", " + t.y + ", " + t.z + ", " + t.w + ")";
};
D.array = function(t, e) {
t[0] = e.x;
t[1] = e.y;
t[2] = e.z;
t[3] = e.w;
return t;
};
D.exactEquals = E.exactEquals;
D.equals = E.equals;
var I = new Array(4), R = function(t, e, i, n) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
};
R.prototype.toJSON = function() {
I[0] = this.m00;
I[1] = this.m01;
I[2] = this.m02;
I[3] = this.m03;
return I;
};
var M = {
create: function() {
return new R(1, 0, 0, 1);
},
new: function(t, e, i, n) {
return new R(t, e, i, n);
},
clone: function(t) {
return new R(t.m00, t.m01, t.m02, t.m03);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 1;
return t;
},
set: function(t, e, i, n, r) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
return t;
},
transpose: function(t, e) {
if (t === e) {
var i = e.m01;
t.m01 = e.m02;
t.m02 = i;
} else {
t.m00 = e.m00;
t.m01 = e.m02;
t.m02 = e.m01;
t.m03 = e.m03;
}
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = i * s - r * n;
if (!a) return null;
a = 1 / a;
t.m00 = s * a;
t.m01 = -n * a;
t.m02 = -r * a;
t.m03 = i * a;
return t;
},
adjoint: function(t, e) {
var i = e.m00;
t.m00 = e.m03;
t.m01 = -e.m01;
t.m02 = -e.m02;
t.m03 = i;
return t;
},
determinant: function(t) {
return t.m00 * t.m03 - t.m02 * t.m01;
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = i.m00, c = i.m01, h = i.m02, l = i.m03;
t.m00 = n * o + s * c;
t.m01 = r * o + a * c;
t.m02 = n * h + s * l;
t.m03 = r * h + a * l;
return t;
}
};
M.mul = M.multiply;
M.rotate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = Math.sin(i), c = Math.cos(i);
t.m00 = n * c + s * o;
t.m01 = r * c + a * o;
t.m02 = n * -o + s * c;
t.m03 = r * -o + a * c;
return t;
};
M.scale = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = i.x, c = i.y;
t.m00 = n * o;
t.m01 = r * o;
t.m02 = s * c;
t.m03 = a * c;
return t;
};
M.fromRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = -i;
t.m03 = n;
return t;
};
M.fromScaling = function(t, e) {
t.m00 = e.x;
t.m01 = 0;
t.m02 = 0;
t.m03 = e.y;
return t;
};
M.str = function(t) {
return "mat2(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ")";
};
M.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
return t;
};
M.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2));
};
M.LDU = function(t, e, i, n) {
t.m02 = n.m02 / n.m00;
i.m00 = n.m00;
i.m01 = n.m01;
i.m03 = n.m03 - t.m02 * i.m01;
};
M.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
return t;
};
M.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
return t;
};
M.sub = M.subtract;
M.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03;
};
M.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = e.m00, c = e.m01, h = e.m02, l = e.m03;
return Math.abs(i - o) <= s * Math.max(1, Math.abs(i), Math.abs(o)) && Math.abs(n - c) <= s * Math.max(1, Math.abs(n), Math.abs(c)) && Math.abs(r - h) <= s * Math.max(1, Math.abs(r), Math.abs(h)) && Math.abs(a - l) <= s * Math.max(1, Math.abs(a), Math.abs(l));
};
M.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
return t;
};
M.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
return t;
};
var L = new Array(6), O = function(t, e, i, n, r, s) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
this.m04 = r;
this.m05 = s;
};
O.prototype.toJSON = function() {
L[0] = this.m00;
L[1] = this.m01;
L[2] = this.m02;
L[3] = this.m03;
L[4] = this.m04;
L[5] = this.m05;
return L;
};
var P = {
create: function() {
return new O(1, 0, 0, 1, 0, 0);
},
new: function(t, e, i, n, r, s) {
return new O(t, e, i, n, r, s);
},
clone: function(t) {
return new O(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m04 = e.m04;
t.m05 = e.m05;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 1;
t.m04 = 0;
t.m05 = 0;
return t;
},
set: function(t, e, i, n, r, s, a) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
t.m04 = s;
t.m05 = a;
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, c = i * s - n * r;
if (!c) return null;
c = 1 / c;
t.m00 = s * c;
t.m01 = -n * c;
t.m02 = -r * c;
t.m03 = i * c;
t.m04 = (r * o - s * a) * c;
t.m05 = (n * a - i * o) * c;
return t;
},
determinant: function(t) {
return t.m00 * t.m03 - t.m01 * t.m02;
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = i.m00, l = i.m01, u = i.m02, f = i.m03, _ = i.m04, d = i.m05;
t.m00 = n * h + s * l;
t.m01 = r * h + a * l;
t.m02 = n * u + s * f;
t.m03 = r * u + a * f;
t.m04 = n * _ + s * d + o;
t.m05 = r * _ + a * d + c;
return t;
}
};
P.mul = P.multiply;
P.rotate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = Math.sin(i), l = Math.cos(i);
t.m00 = n * l + s * h;
t.m01 = r * l + a * h;
t.m02 = n * -h + s * l;
t.m03 = r * -h + a * l;
t.m04 = o;
t.m05 = c;
return t;
};
P.scale = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = i.x, l = i.y;
t.m00 = n * h;
t.m01 = r * h;
t.m02 = s * l;
t.m03 = a * l;
t.m04 = o;
t.m05 = c;
return t;
};
P.translate = function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = i.x, l = i.y;
t.m00 = n;
t.m01 = r;
t.m02 = s;
t.m03 = a;
t.m04 = n * h + s * l + o;
t.m05 = r * h + a * l + c;
return t;
};
P.fromRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = -i;
t.m03 = n;
t.m04 = 0;
t.m05 = 0;
return t;
};
P.fromScaling = function(t, e) {
t.m00 = e.m00;
t.m01 = 0;
t.m02 = 0;
t.m03 = e.m01;
t.m04 = 0;
t.m05 = 0;
return t;
};
P.fromTranslation = function(t, e) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 1;
t.m04 = e.x;
t.m05 = e.y;
return t;
};
P.str = function(t) {
return "mat23(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ", " + t.m04 + ", " + t.m05 + ")";
};
P.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
return t;
};
P.array4x4 = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = 0;
t[3] = 0;
t[4] = e.m02;
t[5] = e.m03;
t[6] = 0;
t[7] = 0;
t[8] = 0;
t[9] = 0;
t[10] = 1;
t[11] = 0;
t[12] = e.m04;
t[13] = e.m05;
t[14] = 0;
t[15] = 1;
return t;
};
P.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2) + Math.pow(t.m04, 2) + Math.pow(t.m05, 2) + 1);
};
P.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
t.m04 = e.m04 + i.m04;
t.m05 = e.m05 + i.m05;
return t;
};
P.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
t.m04 = e.m04 - i.m04;
t.m05 = e.m05 - i.m05;
return t;
};
P.sub = P.subtract;
P.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
t.m04 = e.m04 * i;
t.m05 = e.m05 * i;
return t;
};
P.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
t.m04 = e.m04 + i.m04 * n;
t.m05 = e.m05 + i.m05 * n;
return t;
};
P.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03 && t.m04 === e.m04 && t.m05 === e.m05;
};
P.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = t.m04, c = t.m05, h = e.m00, l = e.m01, u = e.m02, f = e.m03, _ = e.m04, d = e.m05;
return Math.abs(i - h) <= s * Math.max(1, Math.abs(i), Math.abs(h)) && Math.abs(n - l) <= s * Math.max(1, Math.abs(n), Math.abs(l)) && Math.abs(r - u) <= s * Math.max(1, Math.abs(r), Math.abs(u)) && Math.abs(a - f) <= s * Math.max(1, Math.abs(a), Math.abs(f)) && Math.abs(o - _) <= s * Math.max(1, Math.abs(o), Math.abs(_)) && Math.abs(c - d) <= s * Math.max(1, Math.abs(c), Math.abs(d));
};
var F = new Array(16), N = function(t, e, i, n, r, s, a, o, c, h, l, u, f, _, d, p) {
this.m00 = t;
this.m01 = e;
this.m02 = i;
this.m03 = n;
this.m04 = r;
this.m05 = s;
this.m06 = a;
this.m07 = o;
this.m08 = c;
this.m09 = h;
this.m10 = l;
this.m11 = u;
this.m12 = f;
this.m13 = _;
this.m14 = d;
this.m15 = p;
};
N.prototype.toJSON = function() {
F[0] = this.m00;
F[1] = this.m01;
F[2] = this.m02;
F[3] = this.m03;
F[4] = this.m04;
F[5] = this.m05;
F[6] = this.m06;
F[7] = this.m07;
F[8] = this.m08;
F[9] = this.m09;
F[10] = this.m10;
F[11] = this.m11;
F[12] = this.m12;
F[13] = this.m13;
F[14] = this.m14;
F[15] = this.m15;
return F;
};
var B = {
create: function() {
return new N(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
},
new: function(t, e, i, n, r, s, a, o, c, h, l, u, f, _, d, p) {
return new N(t, e, i, n, r, s, a, o, c, h, l, u, f, _, d, p);
},
clone: function(t) {
return new N(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08, t.m09, t.m10, t.m11, t.m12, t.m13, t.m14, t.m15);
},
copy: function(t, e) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m04 = e.m04;
t.m05 = e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m08 = e.m08;
t.m09 = e.m09;
t.m10 = e.m10;
t.m11 = e.m11;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
return t;
},
set: function(t, e, i, n, r, s, a, o, c, h, l, u, f, _, d, p, m) {
t.m00 = e;
t.m01 = i;
t.m02 = n;
t.m03 = r;
t.m04 = s;
t.m05 = a;
t.m06 = o;
t.m07 = c;
t.m08 = h;
t.m09 = l;
t.m10 = u;
t.m11 = f;
t.m12 = _;
t.m13 = d;
t.m14 = p;
t.m15 = m;
return t;
},
identity: function(t) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = 1;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 1;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
},
transpose: function(t, e) {
if (t === e) {
var i = e.m01, n = e.m02, r = e.m03, s = e.m06, a = e.m07, o = e.m11;
t.m01 = e.m04;
t.m02 = e.m08;
t.m03 = e.m12;
t.m04 = i;
t.m06 = e.m09;
t.m07 = e.m13;
t.m08 = n;
t.m09 = s;
t.m11 = e.m14;
t.m12 = r;
t.m13 = a;
t.m14 = o;
} else {
t.m00 = e.m00;
t.m01 = e.m04;
t.m02 = e.m08;
t.m03 = e.m12;
t.m04 = e.m01;
t.m05 = e.m05;
t.m06 = e.m09;
t.m07 = e.m13;
t.m08 = e.m02;
t.m09 = e.m06;
t.m10 = e.m10;
t.m11 = e.m14;
t.m12 = e.m03;
t.m13 = e.m07;
t.m14 = e.m11;
t.m15 = e.m15;
}
return t;
},
invert: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, c = e.m06, h = e.m07, l = e.m08, u = e.m09, f = e.m10, _ = e.m11, d = e.m12, p = e.m13, m = e.m14, g = e.m15, v = i * o - n * a, y = i * c - r * a, T = i * h - s * a, x = n * c - r * o, E = n * h - s * o, C = r * h - s * c, A = l * p - u * d, b = l * m - f * d, S = l * g - _ * d, w = u * m - f * p, D = u * g - _ * p, I = f * g - _ * m, R = v * I - y * D + T * w + x * S - E * b + C * A;
if (!R) return null;
R = 1 / R;
t.m00 = (o * I - c * D + h * w) * R;
t.m01 = (r * D - n * I - s * w) * R;
t.m02 = (p * C - m * E + g * x) * R;
t.m03 = (f * E - u * C - _ * x) * R;
t.m04 = (c * S - a * I - h * b) * R;
t.m05 = (i * I - r * S + s * b) * R;
t.m06 = (m * T - d * C - g * y) * R;
t.m07 = (l * C - f * T + _ * y) * R;
t.m08 = (a * D - o * S + h * A) * R;
t.m09 = (n * S - i * D - s * A) * R;
t.m10 = (d * E - p * T + g * v) * R;
t.m11 = (u * T - l * E - _ * v) * R;
t.m12 = (o * b - a * w - c * A) * R;
t.m13 = (i * w - n * b + r * A) * R;
t.m14 = (p * y - d * x - m * v) * R;
t.m15 = (l * x - u * y + f * v) * R;
return t;
},
adjoint: function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m03, a = e.m04, o = e.m05, c = e.m06, h = e.m07, l = e.m08, u = e.m09, f = e.m10, _ = e.m11, d = e.m12, p = e.m13, m = e.m14, g = e.m15;
t.m00 = o * (f * g - _ * m) - u * (c * g - h * m) + p * (c * _ - h * f);
t.m01 = -(n * (f * g - _ * m) - u * (r * g - s * m) + p * (r * _ - s * f));
t.m02 = n * (c * g - h * m) - o * (r * g - s * m) + p * (r * h - s * c);
t.m03 = -(n * (c * _ - h * f) - o * (r * _ - s * f) + u * (r * h - s * c));
t.m04 = -(a * (f * g - _ * m) - l * (c * g - h * m) + d * (c * _ - h * f));
t.m05 = i * (f * g - _ * m) - l * (r * g - s * m) + d * (r * _ - s * f);
t.m06 = -(i * (c * g - h * m) - a * (r * g - s * m) + d * (r * h - s * c));
t.m07 = i * (c * _ - h * f) - a * (r * _ - s * f) + l * (r * h - s * c);
t.m08 = a * (u * g - _ * p) - l * (o * g - h * p) + d * (o * _ - h * u);
t.m09 = -(i * (u * g - _ * p) - l * (n * g - s * p) + d * (n * _ - s * u));
t.m10 = i * (o * g - h * p) - a * (n * g - s * p) + d * (n * h - s * o);
t.m11 = -(i * (o * _ - h * u) - a * (n * _ - s * u) + l * (n * h - s * o));
t.m12 = -(a * (u * m - f * p) - l * (o * m - c * p) + d * (o * f - c * u));
t.m13 = i * (u * m - f * p) - l * (n * m - r * p) + d * (n * f - r * u);
t.m14 = -(i * (o * m - c * p) - a * (n * m - r * p) + d * (n * c - r * o));
t.m15 = i * (o * f - c * u) - a * (n * f - r * u) + l * (n * c - r * o);
return t;
},
determinant: function(t) {
var e = t.m00, i = t.m01, n = t.m02, r = t.m03, s = t.m04, a = t.m05, o = t.m06, c = t.m07, h = t.m08, l = t.m09, u = t.m10, f = t.m11, _ = t.m12, d = t.m13, p = t.m14, m = t.m15;
return (e * a - i * s) * (u * m - f * p) - (e * o - n * s) * (l * m - f * d) + (e * c - r * s) * (l * p - u * d) + (i * o - n * a) * (h * m - f * _) - (i * c - r * a) * (h * p - u * _) + (n * c - r * o) * (h * d - l * _);
},
multiply: function(t, e, i) {
var n = e.m00, r = e.m01, s = e.m02, a = e.m03, o = e.m04, c = e.m05, h = e.m06, l = e.m07, u = e.m08, f = e.m09, _ = e.m10, d = e.m11, p = e.m12, m = e.m13, g = e.m14, v = e.m15, y = i.m00, T = i.m01, x = i.m02, E = i.m03;
t.m00 = y * n + T * o + x * u + E * p;
t.m01 = y * r + T * c + x * f + E * m;
t.m02 = y * s + T * h + x * _ + E * g;
t.m03 = y * a + T * l + x * d + E * v;
y = i.m04;
T = i.m05;
x = i.m06;
E = i.m07;
t.m04 = y * n + T * o + x * u + E * p;
t.m05 = y * r + T * c + x * f + E * m;
t.m06 = y * s + T * h + x * _ + E * g;
t.m07 = y * a + T * l + x * d + E * v;
y = i.m08;
T = i.m09;
x = i.m10;
E = i.m11;
t.m08 = y * n + T * o + x * u + E * p;
t.m09 = y * r + T * c + x * f + E * m;
t.m10 = y * s + T * h + x * _ + E * g;
t.m11 = y * a + T * l + x * d + E * v;
y = i.m12;
T = i.m13;
x = i.m14;
E = i.m15;
t.m12 = y * n + T * o + x * u + E * p;
t.m13 = y * r + T * c + x * f + E * m;
t.m14 = y * s + T * h + x * _ + E * g;
t.m15 = y * a + T * l + x * d + E * v;
return t;
}
};
B.mul = B.multiply;
B.translate = function(t, e, i) {
var n, r, s, a, o, c, h, l, u, f, _, d, p = i.x, m = i.y, g = i.z;
if (e === t) {
t.m12 = e.m00 * p + e.m04 * m + e.m08 * g + e.m12;
t.m13 = e.m01 * p + e.m05 * m + e.m09 * g + e.m13;
t.m14 = e.m02 * p + e.m06 * m + e.m10 * g + e.m14;
t.m15 = e.m03 * p + e.m07 * m + e.m11 * g + e.m15;
} else {
n = e.m00;
r = e.m01;
s = e.m02;
a = e.m03;
o = e.m04;
c = e.m05;
h = e.m06;
l = e.m07;
u = e.m08;
f = e.m09;
_ = e.m10;
d = e.m11;
t.m00 = n;
t.m01 = r;
t.m02 = s;
t.m03 = a;
t.m04 = o;
t.m05 = c;
t.m06 = h;
t.m07 = l;
t.m08 = u;
t.m09 = f;
t.m10 = _;
t.m11 = d;
t.m12 = n * p + o * m + u * g + e.m12;
t.m13 = r * p + c * m + f * g + e.m13;
t.m14 = s * p + h * m + _ * g + e.m14;
t.m15 = a * p + l * m + d * g + e.m15;
}
return t;
};
B.scale = function(t, e, i) {
var n = i.x, r = i.y, s = i.z;
t.m00 = e.m00 * n;
t.m01 = e.m01 * n;
t.m02 = e.m02 * n;
t.m03 = e.m03 * n;
t.m04 = e.m04 * r;
t.m05 = e.m05 * r;
t.m06 = e.m06 * r;
t.m07 = e.m07 * r;
t.m08 = e.m08 * s;
t.m09 = e.m09 * s;
t.m10 = e.m10 * s;
t.m11 = e.m11 * s;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
return t;
};
B.rotate = function(t, e, i, n) {
var r, a, o, c, h, l, u, f, _, d, p, m, g, v, y, T, x, E, C, A, b, S, w, D, I = n.x, R = n.y, M = n.z, L = Math.sqrt(I * I + R * R + M * M);
if (Math.abs(L) < s) return null;
I *= L = 1 / L;
R *= L;
M *= L;
r = Math.sin(i);
o = 1 - (a = Math.cos(i));
c = e.m00;
h = e.m01;
l = e.m02;
u = e.m03;
f = e.m04;
_ = e.m05;
d = e.m06;
p = e.m07;
m = e.m08;
g = e.m09;
v = e.m10;
y = e.m11;
T = I * I * o + a;
x = R * I * o + M * r;
E = M * I * o - R * r;
C = I * R * o - M * r;
A = R * R * o + a;
b = M * R * o + I * r;
S = I * M * o + R * r;
w = R * M * o - I * r;
D = M * M * o + a;
t.m00 = c * T + f * x + m * E;
t.m01 = h * T + _ * x + g * E;
t.m02 = l * T + d * x + v * E;
t.m03 = u * T + p * x + y * E;
t.m04 = c * C + f * A + m * b;
t.m05 = h * C + _ * A + g * b;
t.m06 = l * C + d * A + v * b;
t.m07 = u * C + p * A + y * b;
t.m08 = c * S + f * w + m * D;
t.m09 = h * S + _ * w + g * D;
t.m10 = l * S + d * w + v * D;
t.m11 = u * S + p * w + y * D;
if (e !== t) {
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
return t;
};
B.rotateX = function(t, e, i) {
var n = Math.sin(i), r = Math.cos(i), s = e.m04, a = e.m05, o = e.m06, c = e.m07, h = e.m08, l = e.m09, u = e.m10, f = e.m11;
if (e !== t) {
t.m00 = e.m00;
t.m01 = e.m01;
t.m02 = e.m02;
t.m03 = e.m03;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
t.m04 = s * r + h * n;
t.m05 = a * r + l * n;
t.m06 = o * r + u * n;
t.m07 = c * r + f * n;
t.m08 = h * r - s * n;
t.m09 = l * r - a * n;
t.m10 = u * r - o * n;
t.m11 = f * r - c * n;
return t;
};
B.rotateY = function(t, e, i) {
var n = Math.sin(i), r = Math.cos(i), s = e.m00, a = e.m01, o = e.m02, c = e.m03, h = e.m08, l = e.m09, u = e.m10, f = e.m11;
if (e !== t) {
t.m04 = e.m04;
t.m05 = e.m05;
t.m06 = e.m06;
t.m07 = e.m07;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
t.m00 = s * r - h * n;
t.m01 = a * r - l * n;
t.m02 = o * r - u * n;
t.m03 = c * r - f * n;
t.m08 = s * n + h * r;
t.m09 = a * n + l * r;
t.m10 = o * n + u * r;
t.m11 = c * n + f * r;
return t;
};
B.rotateZ = function(t, e, i) {
var n = Math.sin(i), r = Math.cos(i), s = e.m00, a = e.m01, o = e.m02, c = e.m03, h = e.m04, l = e.m05, u = e.m06, f = e.m07;
if (e !== t) {
t.m08 = e.m08;
t.m09 = e.m09;
t.m10 = e.m10;
t.m11 = e.m11;
t.m12 = e.m12;
t.m13 = e.m13;
t.m14 = e.m14;
t.m15 = e.m15;
}
t.m00 = s * r + h * n;
t.m01 = a * r + l * n;
t.m02 = o * r + u * n;
t.m03 = c * r + f * n;
t.m04 = h * r - s * n;
t.m05 = l * r - a * n;
t.m06 = u * r - o * n;
t.m07 = f * r - c * n;
return t;
};
B.fromTranslation = function(t, e) {
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = 1;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 1;
t.m11 = 0;
t.m12 = e.x;
t.m13 = e.y;
t.m14 = e.z;
t.m15 = 1;
return t;
};
B.fromScaling = function(t, e) {
t.m00 = e.x;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = e.y;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = e.z;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
B.fromRotation = function(t, e, i) {
var n, r, a, o = i.x, c = i.y, h = i.z, l = Math.sqrt(o * o + c * c + h * h);
if (Math.abs(l) < s) return null;
o *= l = 1 / l;
c *= l;
h *= l;
n = Math.sin(e);
a = 1 - (r = Math.cos(e));
t.m00 = o * o * a + r;
t.m01 = c * o * a + h * n;
t.m02 = h * o * a - c * n;
t.m03 = 0;
t.m04 = o * c * a - h * n;
t.m05 = c * c * a + r;
t.m06 = h * c * a + o * n;
t.m07 = 0;
t.m08 = o * h * a + c * n;
t.m09 = c * h * a - o * n;
t.m10 = h * h * a + r;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
B.fromXRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = 1;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = n;
t.m06 = i;
t.m07 = 0;
t.m08 = 0;
t.m09 = -i;
t.m10 = n;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
B.fromYRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = 0;
t.m02 = -i;
t.m03 = 0;
t.m04 = 0;
t.m05 = 1;
t.m06 = 0;
t.m07 = 0;
t.m08 = i;
t.m09 = 0;
t.m10 = n;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
B.fromZRotation = function(t, e) {
var i = Math.sin(e), n = Math.cos(e);
t.m00 = n;
t.m01 = i;
t.m02 = 0;
t.m03 = 0;
t.m04 = -i;
t.m05 = n;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 1;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
B.fromRT = function(t, e, i) {
var n = e.x, r = e.y, s = e.z, a = e.w, o = n + n, c = r + r, h = s + s, l = n * o, u = n * c, f = n * h, _ = r * c, d = r * h, p = s * h, m = a * o, g = a * c, v = a * h;
t.m00 = 1 - (_ + p);
t.m01 = u + v;
t.m02 = f - g;
t.m03 = 0;
t.m04 = u - v;
t.m05 = 1 - (l + p);
t.m06 = d + m;
t.m07 = 0;
t.m08 = f + g;
t.m09 = d - m;
t.m10 = 1 - (l + _);
t.m11 = 0;
t.m12 = i.x;
t.m13 = i.y;
t.m14 = i.z;
t.m15 = 1;
return t;
};
B.getTranslation = function(t, e) {
t.x = e.m12;
t.y = e.m13;
t.z = e.m14;
return t;
};
B.getScaling = function(t, e) {
var i = e.m00, n = e.m01, r = e.m02, s = e.m04, a = e.m05, o = e.m06, c = e.m08, h = e.m09, l = e.m10;
t.x = Math.sqrt(i * i + n * n + r * r);
t.y = Math.sqrt(s * s + a * a + o * o);
t.z = Math.sqrt(c * c + h * h + l * l);
return t;
};
B.getRotation = function(t, e) {
var i = e.m00 + e.m05 + e.m10, n = 0;
if (i > 0) {
n = 2 * Math.sqrt(i + 1);
t.w = .25 * n;
t.x = (e.m06 - e.m09) / n;
t.y = (e.m08 - e.m02) / n;
t.z = (e.m01 - e.m04) / n;
} else if (e.m00 > e.m05 & e.m00 > e.m10) {
n = 2 * Math.sqrt(1 + e.m00 - e.m05 - e.m10);
t.w = (e.m06 - e.m09) / n;
t.x = .25 * n;
t.y = (e.m01 + e.m04) / n;
t.z = (e.m08 + e.m02) / n;
} else if (e.m05 > e.m10) {
n = 2 * Math.sqrt(1 + e.m05 - e.m00 - e.m10);
t.w = (e.m08 - e.m02) / n;
t.x = (e.m01 + e.m04) / n;
t.y = .25 * n;
t.z = (e.m06 + e.m09) / n;
} else {
n = 2 * Math.sqrt(1 + e.m10 - e.m00 - e.m05);
t.w = (e.m01 - e.m04) / n;
t.x = (e.m08 + e.m02) / n;
t.y = (e.m06 + e.m09) / n;
t.z = .25 * n;
}
return t;
};
B.fromRTS = function(t, e, i, n) {
var r = e.x, s = e.y, a = e.z, o = e.w, c = r + r, h = s + s, l = a + a, u = r * c, f = r * h, _ = r * l, d = s * h, p = s * l, m = a * l, g = o * c, v = o * h, y = o * l, T = n.x, x = n.y, E = n.z;
t.m00 = (1 - (d + m)) * T;
t.m01 = (f + y) * T;
t.m02 = (_ - v) * T;
t.m03 = 0;
t.m04 = (f - y) * x;
t.m05 = (1 - (u + m)) * x;
t.m06 = (p + g) * x;
t.m07 = 0;
t.m08 = (_ + v) * E;
t.m09 = (p - g) * E;
t.m10 = (1 - (u + d)) * E;
t.m11 = 0;
t.m12 = i.x;
t.m13 = i.y;
t.m14 = i.z;
t.m15 = 1;
return t;
};
B.fromRTSOrigin = function(t, e, i, n, r) {
var s = e.x, a = e.y, o = e.z, c = e.w, h = s + s, l = a + a, u = o + o, f = s * h, _ = s * l, d = s * u, p = a * l, m = a * u, g = o * u, v = c * h, y = c * l, T = c * u, x = n.x, E = n.y, C = n.z, A = r.x, b = r.y, S = r.z;
t.m00 = (1 - (p + g)) * x;
t.m01 = (_ + T) * x;
t.m02 = (d - y) * x;
t.m03 = 0;
t.m04 = (_ - T) * E;
t.m05 = (1 - (f + g)) * E;
t.m06 = (m + v) * E;
t.m07 = 0;
t.m08 = (d + y) * C;
t.m09 = (m - v) * C;
t.m10 = (1 - (f + p)) * C;
t.m11 = 0;
t.m12 = i.x + A - (t.m00 * A + t.m04 * b + t.m08 * S);
t.m13 = i.y + b - (t.m01 * A + t.m05 * b + t.m09 * S);
t.m14 = i.z + S - (t.m02 * A + t.m06 * b + t.m10 * S);
t.m15 = 1;
return t;
};
B.fromQuat = function(t, e) {
var i = e.x, n = e.y, r = e.z, s = e.w, a = i + i, o = n + n, c = r + r, h = i * a, l = n * a, u = n * o, f = r * a, _ = r * o, d = r * c, p = s * a, m = s * o, g = s * c;
t.m00 = 1 - u - d;
t.m01 = l + g;
t.m02 = f - m;
t.m03 = 0;
t.m04 = l - g;
t.m05 = 1 - h - d;
t.m06 = _ + p;
t.m07 = 0;
t.m08 = f + m;
t.m09 = _ - p;
t.m10 = 1 - h - u;
t.m11 = 0;
t.m12 = 0;
t.m13 = 0;
t.m14 = 0;
t.m15 = 1;
return t;
};
B.frustum = function(t, e, i, n, r, s, a) {
var o = 1 / (i - e), c = 1 / (r - n), h = 1 / (s - a);
t.m00 = 2 * s * o;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = 2 * s * c;
t.m06 = 0;
t.m07 = 0;
t.m08 = (i + e) * o;
t.m09 = (r + n) * c;
t.m10 = (a + s) * h;
t.m11 = -1;
t.m12 = 0;
t.m13 = 0;
t.m14 = a * s * 2 * h;
t.m15 = 0;
return t;
};
B.perspective = function(t, e, i, n, r) {
var s = 1 / Math.tan(e / 2), a = 1 / (n - r);
t.m00 = s / i;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = s;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = (r + n) * a;
t.m11 = -1;
t.m12 = 0;
t.m13 = 0;
t.m14 = 2 * r * n * a;
t.m15 = 0;
return t;
};
B.perspectiveFromFieldOfView = function(t, e, i, n) {
var r = Math.tan(e.upDegrees * Math.PI / 180), s = Math.tan(e.downDegrees * Math.PI / 180), a = Math.tan(e.leftDegrees * Math.PI / 180), o = Math.tan(e.rightDegrees * Math.PI / 180), c = 2 / (a + o), h = 2 / (r + s);
t.m00 = c;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = h;
t.m06 = 0;
t.m07 = 0;
t.m08 = -(a - o) * c * .5;
t.m09 = (r - s) * h * .5;
t.m10 = n / (i - n);
t.m11 = -1;
t.m12 = 0;
t.m13 = 0;
t.m14 = n * i / (i - n);
t.m15 = 0;
return t;
};
B.ortho = function(t, e, i, n, r, s, a) {
var o = 1 / (e - i), c = 1 / (n - r), h = 1 / (s - a);
t.m00 = -2 * o;
t.m01 = 0;
t.m02 = 0;
t.m03 = 0;
t.m04 = 0;
t.m05 = -2 * c;
t.m06 = 0;
t.m07 = 0;
t.m08 = 0;
t.m09 = 0;
t.m10 = 2 * h;
t.m11 = 0;
t.m12 = (e + i) * o;
t.m13 = (r + n) * c;
t.m14 = (a + s) * h;
t.m15 = 1;
return t;
};
B.lookAt = function(t, e, i, n) {
var r, a, o, c, h, l, u, f, _, d, p = e.x, m = e.y, g = e.z, v = n.x, y = n.y, T = n.z, x = i.x, E = i.y, C = i.z;
if (Math.abs(p - x) < s && Math.abs(m - E) < s && Math.abs(g - C) < s) return B.identity(t);
u = p - x;
f = m - E;
_ = g - C;
r = y * (_ *= d = 1 / Math.sqrt(u * u + f * f + _ * _)) - T * (f *= d);
a = T * (u *= d) - v * _;
o = v * f - y * u;
if (d = Math.sqrt(r * r + a * a + o * o)) {
r *= d = 1 / d;
a *= d;
o *= d;
} else {
r = 0;
a = 0;
o = 0;
}
c = f * o - _ * a;
h = _ * r - u * o;
l = u * a - f * r;
if (d = Math.sqrt(c * c + h * h + l * l)) {
c *= d = 1 / d;
h *= d;
l *= d;
} else {
c = 0;
h = 0;
l = 0;
}
t.m00 = r;
t.m01 = c;
t.m02 = u;
t.m03 = 0;
t.m04 = a;
t.m05 = h;
t.m06 = f;
t.m07 = 0;
t.m08 = o;
t.m09 = l;
t.m10 = _;
t.m11 = 0;
t.m12 = -(r * p + a * m + o * g);
t.m13 = -(c * p + h * m + l * g);
t.m14 = -(u * p + f * m + _ * g);
t.m15 = 1;
return t;
};
B.str = function(t) {
return "mat4(" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ", " + t.m04 + ", " + t.m05 + ", " + t.m06 + ", " + t.m07 + ", " + t.m08 + ", " + t.m09 + ", " + t.m10 + ", " + t.m11 + ", " + t.m12 + ", " + t.m13 + ", " + t.m14 + ", " + t.m15 + ")";
};
B.array = function(t, e) {
t[0] = e.m00;
t[1] = e.m01;
t[2] = e.m02;
t[3] = e.m03;
t[4] = e.m04;
t[5] = e.m05;
t[6] = e.m06;
t[7] = e.m07;
t[8] = e.m08;
t[9] = e.m09;
t[10] = e.m10;
t[11] = e.m11;
t[12] = e.m12;
t[13] = e.m13;
t[14] = e.m14;
t[15] = e.m15;
return t;
};
B.frob = function(t) {
return Math.sqrt(Math.pow(t.m00, 2) + Math.pow(t.m01, 2) + Math.pow(t.m02, 2) + Math.pow(t.m03, 2) + Math.pow(t.m04, 2) + Math.pow(t.m05, 2) + Math.pow(t.m06, 2) + Math.pow(t.m07, 2) + Math.pow(t.m08, 2) + Math.pow(t.m09, 2) + Math.pow(t.m10, 2) + Math.pow(t.m11, 2) + Math.pow(t.m12, 2) + Math.pow(t.m13, 2) + Math.pow(t.m14, 2) + Math.pow(t.m15, 2));
};
B.add = function(t, e, i) {
t.m00 = e.m00 + i.m00;
t.m01 = e.m01 + i.m01;
t.m02 = e.m02 + i.m02;
t.m03 = e.m03 + i.m03;
t.m04 = e.m04 + i.m04;
t.m05 = e.m05 + i.m05;
t.m06 = e.m06 + i.m06;
t.m07 = e.m07 + i.m07;
t.m08 = e.m08 + i.m08;
t.m09 = e.m09 + i.m09;
t.m10 = e.m10 + i.m10;
t.m11 = e.m11 + i.m11;
t.m12 = e.m12 + i.m12;
t.m13 = e.m13 + i.m13;
t.m14 = e.m14 + i.m14;
t.m15 = e.m15 + i.m15;
return t;
};
B.subtract = function(t, e, i) {
t.m00 = e.m00 - i.m00;
t.m01 = e.m01 - i.m01;
t.m02 = e.m02 - i.m02;
t.m03 = e.m03 - i.m03;
t.m04 = e.m04 - i.m04;
t.m05 = e.m05 - i.m05;
t.m06 = e.m06 - i.m06;
t.m07 = e.m07 - i.m07;
t.m08 = e.m08 - i.m08;
t.m09 = e.m09 - i.m09;
t.m10 = e.m10 - i.m10;
t.m11 = e.m11 - i.m11;
t.m12 = e.m12 - i.m12;
t.m13 = e.m13 - i.m13;
t.m14 = e.m14 - i.m14;
t.m15 = e.m15 - i.m15;
return t;
};
B.sub = B.subtract;
B.multiplyScalar = function(t, e, i) {
t.m00 = e.m00 * i;
t.m01 = e.m01 * i;
t.m02 = e.m02 * i;
t.m03 = e.m03 * i;
t.m04 = e.m04 * i;
t.m05 = e.m05 * i;
t.m06 = e.m06 * i;
t.m07 = e.m07 * i;
t.m08 = e.m08 * i;
t.m09 = e.m09 * i;
t.m10 = e.m10 * i;
t.m11 = e.m11 * i;
t.m12 = e.m12 * i;
t.m13 = e.m13 * i;
t.m14 = e.m14 * i;
t.m15 = e.m15 * i;
return t;
};
B.multiplyScalarAndAdd = function(t, e, i, n) {
t.m00 = e.m00 + i.m00 * n;
t.m01 = e.m01 + i.m01 * n;
t.m02 = e.m02 + i.m02 * n;
t.m03 = e.m03 + i.m03 * n;
t.m04 = e.m04 + i.m04 * n;
t.m05 = e.m05 + i.m05 * n;
t.m06 = e.m06 + i.m06 * n;
t.m07 = e.m07 + i.m07 * n;
t.m08 = e.m08 + i.m08 * n;
t.m09 = e.m09 + i.m09 * n;
t.m10 = e.m10 + i.m10 * n;
t.m11 = e.m11 + i.m11 * n;
t.m12 = e.m12 + i.m12 * n;
t.m13 = e.m13 + i.m13 * n;
t.m14 = e.m14 + i.m14 * n;
t.m15 = e.m15 + i.m15 * n;
return t;
};
B.exactEquals = function(t, e) {
return t.m00 === e.m00 && t.m01 === e.m01 && t.m02 === e.m02 && t.m03 === e.m03 && t.m04 === e.m04 && t.m05 === e.m05 && t.m06 === e.m06 && t.m07 === e.m07 && t.m08 === e.m08 && t.m09 === e.m09 && t.m10 === e.m10 && t.m11 === e.m11 && t.m12 === e.m12 && t.m13 === e.m13 && t.m14 === e.m14 && t.m15 === e.m15;
};
B.equals = function(t, e) {
var i = t.m00, n = t.m01, r = t.m02, a = t.m03, o = t.m04, c = t.m05, h = t.m06, l = t.m07, u = t.m08, f = t.m09, _ = t.m10, d = t.m11, p = t.m12, m = t.m13, g = t.m14, v = t.m15, y = e.m00, T = e.m01, x = e.m02, E = e.m03, C = e.m04, A = e.m05, b = e.m06, S = e.m07, w = e.m08, D = e.m09, I = e.m10, R = e.m11, M = e.m12, L = e.m13, O = e.m14, P = e.m15;
return Math.abs(i - y) <= s * Math.max(1, Math.abs(i), Math.abs(y)) && Math.abs(n - T) <= s * Math.max(1, Math.abs(n), Math.abs(T)) && Math.abs(r - x) <= s * Math.max(1, Math.abs(r), Math.abs(x)) && Math.abs(a - E) <= s * Math.max(1, Math.abs(a), Math.abs(E)) && Math.abs(o - C) <= s * Math.max(1, Math.abs(o), Math.abs(C)) && Math.abs(c - A) <= s * Math.max(1, Math.abs(c), Math.abs(A)) && Math.abs(h - b) <= s * Math.max(1, Math.abs(h), Math.abs(b)) && Math.abs(l - S) <= s * Math.max(1, Math.abs(l), Math.abs(S)) && Math.abs(u - w) <= s * Math.max(1, Math.abs(u), Math.abs(w)) && Math.abs(f - D) <= s * Math.max(1, Math.abs(f), Math.abs(D)) && Math.abs(_ - I) <= s * Math.max(1, Math.abs(_), Math.abs(I)) && Math.abs(d - R) <= s * Math.max(1, Math.abs(d), Math.abs(R)) && Math.abs(p - M) <= s * Math.max(1, Math.abs(p), Math.abs(M)) && Math.abs(m - L) <= s * Math.max(1, Math.abs(m), Math.abs(L)) && Math.abs(g - O) <= s * Math.max(1, Math.abs(g), Math.abs(O)) && Math.abs(v - P) <= s * Math.max(1, Math.abs(v), Math.abs(P));
};
var k = new Array(3), z = function(t, e, i) {
this.r = t;
this.g = e;
this.b = i;
};
z.prototype.toJSON = function() {
k[0] = this.r;
k[1] = this.g;
k[2] = this.b;
return k;
};
var U = {
create: function() {
return new z(1, 1, 1);
},
new: function(t, e, i) {
return new z(t, e, i);
},
clone: function(t) {
return new z(t.r, t.g, t.b, t.a);
},
copy: function(t, e) {
t.r = e.r;
t.g = e.g;
t.b = e.b;
return t;
},
set: function(t, e, i, n) {
t.r = e;
t.g = i;
t.b = n;
return t;
},
fromHex: function(t, e) {
var i = (e >> 16) / 255, n = (e >> 8 & 255) / 255, r = (255 & e) / 255;
t.r = i;
t.g = n;
t.b = r;
return t;
},
add: function(t, e, i) {
t.r = e.r + i.r;
t.g = e.g + i.g;
t.b = e.b + i.b;
return t;
},
subtract: function(t, e, i) {
t.r = e.r - i.r;
t.g = e.g - i.g;
t.b = e.b - i.b;
return t;
}
};
U.sub = U.subtract;
U.multiply = function(t, e, i) {
t.r = e.r * i.r;
t.g = e.g * i.g;
t.b = e.b * i.b;
return t;
};
U.mul = U.multiply;
U.divide = function(t, e, i) {
t.r = e.r / i.r;
t.g = e.g / i.g;
t.b = e.b / i.b;
return t;
};
U.div = U.divide;
U.scale = function(t, e, i) {
t.r = e.r * i;
t.g = e.g * i;
t.b = e.b * i;
return t;
};
U.lerp = function(t, e, i, n) {
var r = e.r, s = e.g, a = e.b;
t.r = r + n * (i.r - r);
t.g = s + n * (i.g - s);
t.b = a + n * (i.b - a);
return t;
};
U.str = function(t) {
return "color3(" + t.r + ", " + t.g + ", " + t.b + ")";
};
U.array = function(t, e) {
t[0] = e.r;
t[1] = e.g;
t[2] = e.b;
return t;
};
U.exactEquals = function(t, e) {
return t.r === e.r && t.g === e.g && t.b === e.b;
};
U.equals = function(t, e) {
var i = t.r, n = t.g, r = t.b, a = e.r, o = e.g, c = e.b;
return Math.abs(i - a) <= s * Math.max(1, Math.abs(i), Math.abs(a)) && Math.abs(n - o) <= s * Math.max(1, Math.abs(n), Math.abs(o)) && Math.abs(r - c) <= s * Math.max(1, Math.abs(r), Math.abs(c));
};
U.hex = function(t) {
return 255 * t.r << 16 | 255 * t.g << 8 | 255 * t.b;
};
var H = new Array(4), V = function(t, e, i, n) {
this.r = t;
this.g = e;
this.b = i;
this.a = n;
};
V.prototype.toJSON = function() {
H[0] = this.r;
H[1] = this.g;
H[2] = this.b;
H[3] = this.a;
return H;
};
var W = {
create: function() {
return new V(1, 1, 1, 1);
},
new: function(t, e, i, n) {
return new V(t, e, i, n);
},
clone: function(t) {
return new V(t.r, t.g, t.b, t.a);
},
copy: function(t, e) {
t.r = e.r;
t.g = e.g;
t.b = e.b;
t.a = e.a;
return t;
},
set: function(t, e, i, n, r) {
t.r = e;
t.g = i;
t.b = n;
t.a = r;
return t;
},
fromHex: function(t, e) {
var i = (e >> 24) / 255, n = (e >> 16 & 255) / 255, r = (e >> 8 & 255) / 255, s = (255 & e) / 255;
t.r = i;
t.g = n;
t.b = r;
t.a = s;
return t;
},
add: function(t, e, i) {
t.r = e.r + i.r;
t.g = e.g + i.g;
t.b = e.b + i.b;
t.a = e.a + i.a;
return t;
},
subtract: function(t, e, i) {
t.r = e.r - i.r;
t.g = e.g - i.g;
t.b = e.b - i.b;
t.a = e.a - i.a;
return t;
}
};
W.sub = W.subtract;
W.multiply = function(t, e, i) {
t.r = e.r * i.r;
t.g = e.g * i.g;
t.b = e.b * i.b;
t.a = e.a * i.a;
return t;
};
W.mul = W.multiply;
W.divide = function(t, e, i) {
t.r = e.r / i.r;
t.g = e.g / i.g;
t.b = e.b / i.b;
t.a = e.a / i.a;
return t;
};
W.div = W.divide;
W.scale = function(t, e, i) {
t.r = e.r * i;
t.g = e.g * i;
t.b = e.b * i;
t.a = e.a * i;
return t;
};
W.lerp = function(t, e, i, n) {
var r = e.r, s = e.g, a = e.b, o = e.a;
t.r = r + n * (i.r - r);
t.g = s + n * (i.g - s);
t.b = a + n * (i.b - a);
t.a = o + n * (i.a - o);
return t;
};
W.str = function(t) {
return "color4(" + t.r + ", " + t.g + ", " + t.b + ", " + t.a + ")";
};
W.array = function(t, e) {
t[0] = e.r;
t[1] = e.g;
t[2] = e.b;
t[3] = e.a;
return t;
};
W.exactEquals = function(t, e) {
return t.r === e.r && t.g === e.g && t.b === e.b && t.a === e.a;
};
W.equals = function(t, e) {
var i = t.r, n = t.g, r = t.b, a = t.a, o = e.r, c = e.g, h = e.b, l = e.a;
return Math.abs(i - o) <= s * Math.max(1, Math.abs(i), Math.abs(o)) && Math.abs(n - c) <= s * Math.max(1, Math.abs(n), Math.abs(c)) && Math.abs(r - h) <= s * Math.max(1, Math.abs(r), Math.abs(h)) && Math.abs(a - l) <= s * Math.max(1, Math.abs(a), Math.abs(l));
};
W.hex = function(t) {
return (255 * t.r << 24 | 255 * t.g << 16 | 255 * t.b << 8 | 255 * t.a) >>> 0;
};
var G = _, j = Object.freeze({
bits: G,
vec2: m,
vec3: y,
vec4: E,
quat: D,
mat2: M,
mat23: P,
mat3: b,
mat4: B,
color3: U,
color4: W,
EPSILON: s,
equals: function(t, e) {
return Math.abs(t - e) <= s * Math.max(1, Math.abs(t), Math.abs(e));
},
approx: function(t, e, i) {
i = i || s;
return Math.abs(t - e) <= i;
},
clamp: function(t, e, i) {
return t < e ? e : t > i ? i : t;
},
clamp01: function(t) {
return t < 0 ? 0 : t > 1 ? 1 : t;
},
lerp: function(t, e, i) {
return t + (e - t) * i;
},
toRadian: a,
toDegree: function(t) {
return t * r;
},
random: o,
randomRange: c,
randomRangeInt: function(t, e) {
return Math.floor(c(t, e));
},
nextPow2: function(t) {
--t;
t |= t >> 1;
t |= t >> 2;
t |= t >> 4;
t |= t >> 8;
t |= t >> 16;
return ++t;
}
}), X = {
PROJ_PERSPECTIVE: 0,
PROJ_ORTHO: 1,
LIGHT_DIRECTIONAL: 0,
LIGHT_POINT: 1,
LIGHT_SPOT: 2,
SHADOW_NONE: 0,
SHADOW_HARD: 1,
SHADOW_SOFT: 2,
PARAM_INT: 0,
PARAM_INT2: 1,
PARAM_INT3: 2,
PARAM_INT4: 3,
PARAM_FLOAT: 4,
PARAM_FLOAT2: 5,
PARAM_FLOAT3: 6,
PARAM_FLOAT4: 7,
PARAM_COLOR3: 8,
PARAM_COLOR4: 9,
PARAM_MAT2: 10,
PARAM_MAT3: 11,
PARAM_MAT4: 12,
PARAM_TEXTURE_2D: 13,
PARAM_TEXTURE_CUBE: 14,
CLEAR_COLOR: 1,
CLEAR_DEPTH: 2,
CLEAR_STENCIL: 4
}, Y = [ [ 9728, 9984, 9986 ], [ 9729, 9985, 9987 ] ], q = [ {
format: 6407,
internalFormat: 33776,
pixelType: null
}, {
format: 6408,
internalFormat: 33777,
pixelType: null
}, {
format: 6408,
internalFormat: 33778,
pixelType: null
}, {
format: 6408,
internalFormat: 33779,
pixelType: null
}, {
format: 6407,
internalFormat: 36196,
pixelType: null
}, {
format: 6407,
internalFormat: 35841,
pixelType: null
}, {
format: 6408,
internalFormat: 35843,
pixelType: null
}, {
format: 6407,
internalFormat: 35840,
pixelType: null
}, {
format: 6408,
internalFormat: 35842,
pixelType: null
}, {
format: 6406,
internalFormat: 6406,
pixelType: 5121
}, {
format: 6409,
internalFormat: 6409,
pixelType: 5121
}, {
format: 6410,
internalFormat: 6410,
pixelType: 5121
}, {
format: 6407,
internalFormat: 6407,
pixelType: 33635
}, {
format: 6408,
internalFormat: 6408,
pixelType: 32820
}, {
format: 6408,
internalFormat: 6408,
pixelType: 32819
}, {
format: 6407,
internalFormat: 6407,
pixelType: 5121
}, {
format: 6408,
internalFormat: 6408,
pixelType: 5121
}, {
format: 6407,
internalFormat: 6407,
pixelType: 36193
}, {
format: 6408,
internalFormat: 6408,
pixelType: 36193
}, {
format: 6407,
internalFormat: 6407,
pixelType: 5126
}, {
format: 6408,
internalFormat: 6408,
pixelType: 5126
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: null,
internalFormat: null,
pixelType: null
}, {
format: 6402,
internalFormat: 6402,
pixelType: 5123
}, {
format: 6402,
internalFormat: 6402,
pixelType: 5125
}, {
format: null,
internalFormat: null,
pixelType: null
} ], Z = {
USAGE_STATIC: 35044,
USAGE_DYNAMIC: 35048,
USAGE_STREAM: 35040,
INDEX_FMT_UINT8: 5121,
INDEX_FMT_UINT16: 5123,
INDEX_FMT_UINT32: 5125,
ATTR_POSITION: "a_position",
ATTR_NORMAL: "a_normal",
ATTR_TANGENT: "a_tangent",
ATTR_BITANGENT: "a_bitangent",
ATTR_WEIGHTS: "a_weights",
ATTR_JOINTS: "a_joints",
ATTR_COLOR: "a_color",
ATTR_COLOR0: "a_color0",
ATTR_COLOR1: "a_color1",
ATTR_UV: "a_uv",
ATTR_UV0: "a_uv0",
ATTR_UV1: "a_uv1",
ATTR_UV2: "a_uv2",
ATTR_UV3: "a_uv3",
ATTR_UV4: "a_uv4",
ATTR_UV5: "a_uv5",
ATTR_UV6: "a_uv6",
ATTR_UV7: "a_uv7",
ATTR_TYPE_INT8: 5120,
ATTR_TYPE_UINT8: 5121,
ATTR_TYPE_INT16: 5122,
ATTR_TYPE_UINT16: 5123,
ATTR_TYPE_INT32: 5124,
ATTR_TYPE_UINT32: 5125,
ATTR_TYPE_FLOAT32: 5126,
FILTER_NEAREST: 0,
FILTER_LINEAR: 1,
WRAP_REPEAT: 10497,
WRAP_CLAMP: 33071,
WRAP_MIRROR: 33648,
TEXTURE_FMT_RGB_DXT1: 0,
TEXTURE_FMT_RGBA_DXT1: 1,
TEXTURE_FMT_RGBA_DXT3: 2,
TEXTURE_FMT_RGBA_DXT5: 3,
TEXTURE_FMT_RGB_ETC1: 4,
TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
TEXTURE_FMT_A8: 9,
TEXTURE_FMT_L8: 10,
TEXTURE_FMT_L8_A8: 11,
TEXTURE_FMT_R5_G6_B5: 12,
TEXTURE_FMT_R5_G5_B5_A1: 13,
TEXTURE_FMT_R4_G4_B4_A4: 14,
TEXTURE_FMT_RGB8: 15,
TEXTURE_FMT_RGBA8: 16,
TEXTURE_FMT_RGB16F: 17,
TEXTURE_FMT_RGBA16F: 18,
TEXTURE_FMT_RGB32F: 19,
TEXTURE_FMT_RGBA32F: 20,
TEXTURE_FMT_R32F: 21,
TEXTURE_FMT_111110F: 22,
TEXTURE_FMT_SRGB: 23,
TEXTURE_FMT_SRGBA: 24,
TEXTURE_FMT_D16: 25,
TEXTURE_FMT_D32: 26,
TEXTURE_FMT_D24S8: 27,
DS_FUNC_NEVER: 512,
DS_FUNC_LESS: 513,
DS_FUNC_EQUAL: 514,
DS_FUNC_LEQUAL: 515,
DS_FUNC_GREATER: 516,
DS_FUNC_NOTEQUAL: 517,
DS_FUNC_GEQUAL: 518,
DS_FUNC_ALWAYS: 519,
RB_FMT_RGBA4: 32854,
RB_FMT_RGB5_A1: 32855,
RB_FMT_RGB565: 36194,
RB_FMT_D16: 33189,
RB_FMT_S8: 36168,
RB_FMT_D24S8: 34041,
BLEND_FUNC_ADD: 32774,
BLEND_FUNC_SUBTRACT: 32778,
BLEND_FUNC_REVERSE_SUBTRACT: 32779,
BLEND_ZERO: 0,
BLEND_ONE: 1,
BLEND_SRC_COLOR: 768,
BLEND_ONE_MINUS_SRC_COLOR: 769,
BLEND_DST_COLOR: 774,
BLEND_ONE_MINUS_DST_COLOR: 775,
BLEND_SRC_ALPHA: 770,
BLEND_ONE_MINUS_SRC_ALPHA: 771,
BLEND_DST_ALPHA: 772,
BLEND_ONE_MINUS_DST_ALPHA: 773,
BLEND_CONSTANT_COLOR: 32769,
BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
BLEND_CONSTANT_ALPHA: 32771,
BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
BLEND_SRC_ALPHA_SATURATE: 776,
STENCIL_OP_KEEP: 7680,
STENCIL_OP_ZERO: 0,
STENCIL_OP_REPLACE: 7681,
STENCIL_OP_INCR: 7682,
STENCIL_OP_INCR_WRAP: 34055,
STENCIL_OP_DECR: 7683,
STENCIL_OP_DECR_WRAP: 34056,
STENCIL_OP_INVERT: 5386,
CULL_NONE: 0,
CULL_FRONT: 1028,
CULL_BACK: 1029,
CULL_FRONT_AND_BACK: 1032,
PT_POINTS: 0,
PT_LINES: 1,
PT_LINE_LOOP: 2,
PT_LINE_STRIP: 3,
PT_TRIANGLES: 4,
PT_TRIANGLE_STRIP: 5,
PT_TRIANGLE_FAN: 6
};
function K(t) {
if (t === Z.ATTR_TYPE_INT8) return 1;
if (t === Z.ATTR_TYPE_UINT8) return 1;
if (t === Z.ATTR_TYPE_INT16) return 2;
if (t === Z.ATTR_TYPE_UINT16) return 2;
if (t === Z.ATTR_TYPE_INT32) return 4;
if (t === Z.ATTR_TYPE_UINT32) return 4;
if (t === Z.ATTR_TYPE_FLOAT32) return 4;
console.warn("Unknown ATTR_TYPE: " + t);
return 0;
}
function J(t, e, i) {
void 0 === i && (i = -1);
var n = Y[e][i + 1];
if (void 0 === n) {
console.warn("Unknown FILTER: " + e);
return -1 === i ? t.LINEAR : t.LINEAR_MIPMAP_LINEAR;
}
return n;
}
function Q(t) {
var e = q[t];
if (void 0 === e) {
console.warn("Unknown TEXTURE_FMT: " + t);
return q[Z.TEXTURE_FMT_RGBA8];
}
return e;
}
var $ = function(t) {
this._attr2el = {};
this._elements = [];
this._bytes = 0;
for (var e = 0, i = 0, n = t.length; i < n; ++i) {
var r = t[i], s = {
name: r.name,
offset: e,
stride: 0,
stream: -1,
type: r.type,
num: r.num,
normalize: void 0 !== r.normalize && r.normalize,
bytes: r.num * K(r.type)
};
this._attr2el[s.name] = s;
this._elements.push(s);
this._bytes += s.bytes;
e += s.bytes;
}
for (var a = 0, o = this._elements.length; a < o; ++a) {
this._elements[a].stride = this._bytes;
}
};
$.prototype.element = function(t) {
return this._attr2el[t];
};
var tt = function(t, e, i, n, r) {
this._device = t;
this._format = e;
this._usage = i;
this._numIndices = r;
this._bytesPerIndex = 0;
e === Z.INDEX_FMT_UINT8 ? this._bytesPerIndex = 1 : e === Z.INDEX_FMT_UINT16 ? this._bytesPerIndex = 2 : e === Z.INDEX_FMT_UINT32 && (this._bytesPerIndex = 4);
this._bytes = this._bytesPerIndex * r;
this._glID = t._gl.createBuffer();
this.update(0, n);
t._stats.ib += this._bytes;
}, et = {
count: {
configurable: !0
}
};
tt.prototype.destroy = function() {
if (-1 !== this._glID) {
this._device._gl.deleteBuffer(this._glID);
this._device._stats.ib -= this.bytes;
this._glID = -1;
} else console.error("The buffer already destroyed");
};
tt.prototype.update = function(t, e) {
if (-1 !== this._glID) if (e && e.byteLength + t > this._bytes) console.error("Failed to update data, bytes exceed."); else {
var i = this._device._gl, n = this._usage;
i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, this._glID);
e ? t ? i.bufferSubData(i.ELEMENT_ARRAY_BUFFER, t, e) : i.bufferData(i.ELEMENT_ARRAY_BUFFER, e, n) : this._bytes ? i.bufferData(i.ELEMENT_ARRAY_BUFFER, this._bytes, n) : console.warn("bufferData should not submit 0 bytes data");
this._device._restoreIndexBuffer();
} else console.error("The buffer is destroyed");
};
et.count.get = function() {
return this._numIndices;
};
Object.defineProperties(tt.prototype, et);
var it = function(t, e, i, n, r) {
this._device = t;
this._format = e;
this._usage = i;
this._numVertices = r;
this._bytes = this._format._bytes * r;
this._glID = t._gl.createBuffer();
this.update(0, n);
t._stats.vb += this._bytes;
}, nt = {
count: {
configurable: !0
}
};
it.prototype.destroy = function() {
if (-1 !== this._glID) {
this._device._gl.deleteBuffer(this._glID);
this._device._stats.vb -= this.bytes;
this._glID = -1;
} else console.error("The buffer already destroyed");
};
it.prototype.update = function(t, e) {
if (-1 !== this._glID) if (e && e.byteLength + t > this._bytes) console.error("Failed to update data, bytes exceed."); else {
var i = this._device._gl, n = this._usage;
i.bindBuffer(i.ARRAY_BUFFER, this._glID);
e ? t ? i.bufferSubData(i.ARRAY_BUFFER, t, e) : i.bufferData(i.ARRAY_BUFFER, e, n) : this._bytes ? i.bufferData(i.ARRAY_BUFFER, this._bytes, n) : console.warn("bufferData should not submit 0 bytes data");
i.bindBuffer(i.ARRAY_BUFFER, null);
} else console.error("The buffer is destroyed");
};
nt.count.get = function() {
return this._numVertices;
};
Object.defineProperties(it.prototype, nt);
var rt = 0;
function st(t, e, i) {
i.split("\n").forEach((function(i) {
if (!(i.length < 5)) {
var n = /^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(i);
n ? t.push({
type: e,
fileID: 0 | n[1],
line: 0 | n[2],
message: n[3].trim()
}) : i.length > 0 && t.push({
type: e,
fileID: -1,
line: 0,
message: i
});
}
}));
}
var at = function(t, e) {
this._device = t;
this._attributes = [];
this._uniforms = [];
this._samplers = [];
this._errors = [];
this._linked = !1;
this._vertSource = e.vert;
this._fragSource = e.frag;
this._glID = null;
this._id = rt++;
}, ot = {
id: {
configurable: !0
}
};
ot.id.get = function() {
return this._id;
};
at.prototype.link = function() {
if (!this._linked) {
var t = this._device._gl, e = ct(t, t.VERTEX_SHADER, this._vertSource), i = ct(t, t.FRAGMENT_SHADER, this._fragSource), n = t.createProgram();
t.attachShader(n, e);
t.attachShader(n, i);
t.linkProgram(n);
var r = !1, s = this._errors;
if (!t.getShaderParameter(e, t.COMPILE_STATUS)) {
st(s, "vs", t.getShaderInfoLog(e));
r = !0;
}
if (!t.getShaderParameter(i, t.COMPILE_STATUS)) {
st(s, "fs", t.getShaderInfoLog(i));
r = !0;
}
t.deleteShader(e);
t.deleteShader(i);
if (r) s.forEach((function(t) {
console.error("Failed to compile " + t.type + " " + t.fileID + " (ln " + t.line + "): " + t.message);
})); else {
if (!t.getProgramParameter(n, t.LINK_STATUS)) {
console.error("Failed to link shader program: " + t.getProgramInfoLog(n));
r = !0;
}
if (!r) {
this._glID = n;
for (var a = t.getProgramParameter(n, t.ACTIVE_ATTRIBUTES), o = 0; o < a; ++o) {
var c = t.getActiveAttrib(n, o), h = t.getAttribLocation(n, c.name);
this._attributes.push({
name: c.name,
location: h,
type: c.type
});
}
for (var l = t.getProgramParameter(n, t.ACTIVE_UNIFORMS), u = 0; u < l; ++u) {
var f = t.getActiveUniform(n, u), _ = f.name, d = t.getUniformLocation(n, _), p = "[0]" === _.substr(_.length - 3);
p && (_ = _.substr(0, _.length - 3));
this._uniforms.push({
name: _,
location: d,
type: f.type,
size: p ? f.size : void 0
});
}
this._linked = !0;
}
}
}
};
at.prototype.destroy = function() {
this._device._gl.deleteProgram(this._glID);
this._linked = !1;
this._glID = null;
this._attributes = [];
this._uniforms = [];
this._samplers = [];
};
Object.defineProperties(at.prototype, ot);
function ct(t, e, i) {
var n = t.createShader(e);
t.shaderSource(n, i);
t.compileShader(n);
return n;
}
var ht = function(t) {
this._device = t;
this._width = 4;
this._height = 4;
this._hasMipmap = !1;
this._compressed = !1;
this._anisotropy = 1;
this._minFilter = Z.FILTER_LINEAR;
this._magFilter = Z.FILTER_LINEAR;
this._mipFilter = Z.FILTER_LINEAR;
this._wrapS = Z.WRAP_REPEAT;
this._wrapT = Z.WRAP_REPEAT;
this._format = Z.TEXTURE_FMT_RGBA8;
this._target = -1;
};
ht.prototype.destroy = function() {
if (-1 !== this._glID) {
this._device._gl.deleteTexture(this._glID);
this._device._stats.tex -= this.bytes;
this._glID = -1;
} else console.error("The texture already destroyed");
};
function lt(t) {
return !(t & t - 1 || !t);
}
var ut = (function(t) {
function e(e, i) {
t.call(this, e);
var n = this._device._gl;
this._target = n.TEXTURE_2D;
this._glID = n.createTexture();
i.images = i.images || [ null ];
this.update(i);
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.update = function(t) {
var e = this._device._gl, i = this._hasMipmap;
if (t) {
void 0 !== t.width && (this._width = t.width);
void 0 !== t.height && (this._height = t.height);
void 0 !== t.anisotropy && (this._anisotropy = t.anisotropy);
void 0 !== t.minFilter && (this._minFilter = t.minFilter);
void 0 !== t.magFilter && (this._magFilter = t.magFilter);
void 0 !== t.mipFilter && (this._mipFilter = t.mipFilter);
void 0 !== t.wrapS && (this._wrapS = t.wrapS);
void 0 !== t.wrapT && (this._wrapT = t.wrapT);
if (void 0 !== t.format) {
this._format = t.format;
this._compressed = this._format >= Z.TEXTURE_FMT_RGB_DXT1 && this._format <= Z.TEXTURE_FMT_RGBA_PVRTC_4BPPV1;
}
if (void 0 !== t.mipmap) {
this._hasMipmap = t.mipmap;
i = t.mipmap;
}
if (void 0 !== t.images && t.images.length > 1) {
i = !1;
(t.width > t.height ? t.width : t.height) >> t.images.length - 1 != 1 && console.error("texture-2d mipmap is invalid, should have a 1x1 mipmap.");
}
}
lt(this._width) && lt(this._height) || (i = !1);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_2D, this._glID);
void 0 !== t.images && t.images.length > 0 && this._setMipmap(t.images, t.flipY, t.premultiplyAlpha);
this._setTexInfo();
if (i) {
e.hint(e.GENERATE_MIPMAP_HINT, e.NICEST);
e.generateMipmap(e.TEXTURE_2D);
}
this._device._restoreTexture(0);
};
e.prototype.updateSubImage = function(t) {
var e = this._device._gl, i = Q(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_2D, this._glID);
this._setSubImage(i, t);
this._device._restoreTexture(0);
};
e.prototype.updateImage = function(t) {
var e = this._device._gl, i = Q(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_2D, this._glID);
this._setImage(i, t);
this._device._restoreTexture(0);
};
e.prototype._setSubImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.image;
if (!s || ArrayBuffer.isView(s) || s instanceof ArrayBuffer) {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
this._compressed ? i.compressedTexSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, e.width, e.height, t.format, s) : i.texSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, e.width, e.height, t.format, t.pixelType, s);
} else {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !0) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
i.texSubImage2D(i.TEXTURE_2D, e.level, e.x, e.y, t.format, t.pixelType, s);
}
};
e.prototype._setImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.image;
if (!s || ArrayBuffer.isView(s) || s instanceof ArrayBuffer) {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
this._compressed ? i.compressedTexImage2D(i.TEXTURE_2D, e.level, t.internalFormat, e.width, e.height, 0, s) : i.texImage2D(i.TEXTURE_2D, e.level, t.internalFormat, e.width, e.height, 0, t.format, t.pixelType, s);
} else {
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !0) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
i.texImage2D(i.TEXTURE_2D, e.level, t.internalFormat, t.format, t.pixelType, s);
}
};
e.prototype._setMipmap = function(t, e, i) {
for (var n = Q(this._format), r = {
width: this._width,
height: this._height,
flipY: e,
premultiplyAlpha: i,
level: 0,
image: null
}, s = 0; s < t.length; ++s) {
r.level = s;
r.width = this._width >> s;
r.height = this._height >> s;
r.image = t[s];
this._setImage(n, r);
}
};
e.prototype._setTexInfo = function() {
var t = this._device._gl, e = lt(this._width) && lt(this._height);
if (!e && (this._wrapS !== Z.WRAP_CLAMP || this._wrapT !== Z.WRAP_CLAMP)) {
console.warn("WebGL1 doesn't support all wrap modes with NPOT textures");
this._wrapS = Z.WRAP_CLAMP;
this._wrapT = Z.WRAP_CLAMP;
}
var i = this._hasMipmap ? this._mipFilter : -1;
if (!e && -1 !== i) {
console.warn("NPOT textures do not support mipmap filter");
i = -1;
}
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, J(t, this._minFilter, i));
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, J(t, this._magFilter, -1));
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, this._wrapS);
t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, this._wrapT);
var n = this._device.ext("EXT_texture_filter_anisotropic");
n && n.TEXTURE_MAX_ANISOTROPY_EXT && t.texParameteri(t.TEXTURE_2D, n.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
};
return e;
})(ht), ft = (function(t) {
function e(e, i) {
t.call(this, e);
var n = this._device._gl;
this._target = n.TEXTURE_CUBE_MAP;
this._glID = n.createTexture();
this.update(i);
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.update = function(t) {
var e = this._device._gl, i = this._hasMipmap;
if (t) {
void 0 !== t.width && (this._width = t.width);
void 0 !== t.height && (this._height = t.height);
void 0 !== t.anisotropy && (this._anisotropy = t.anisotropy);
void 0 !== t.minFilter && (this._minFilter = t.minFilter);
void 0 !== t.magFilter && (this._magFilter = t.magFilter);
void 0 !== t.mipFilter && (this._mipFilter = t.mipFilter);
void 0 !== t.wrapS && (this._wrapS = t.wrapS);
void 0 !== t.wrapT && (this._wrapT = t.wrapT);
if (void 0 !== t.format) {
this._format = t.format;
this._compressed = this._format >= Z.TEXTURE_FMT_RGB_DXT1 && this._format <= Z.TEXTURE_FMT_RGBA_PVRTC_4BPPV1;
}
if (void 0 !== t.mipmap) {
this._hasMipmap = t.mipmap;
i = t.mipmap;
}
if (void 0 !== t.images && t.images.length > 1) {
i = !1;
t.width !== t.height && console.warn("texture-cube width and height should be identical.");
t.width >> t.images.length - 1 != 1 && console.error("texture-cube mipmap is invalid. please set mipmap as 1x1, 2x2, 4x4 ... nxn");
}
}
lt(this._width) && lt(this._height) || (i = !1);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
void 0 !== t.images && t.images.length > 0 && this._setMipmap(t.images, t.flipY, t.premultiplyAlpha);
this._setTexInfo();
if (i) {
e.hint(e.GENERATE_MIPMAP_HINT, e.NICEST);
e.generateMipmap(e.TEXTURE_CUBE_MAP);
}
this._device._restoreTexture(0);
};
e.prototype.updateSubImage = function(t) {
var e = this._device._gl, i = Q(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
this._setSubImage(i, t);
this._device._restoreTexture(0);
};
e.prototype.updateImage = function(t) {
var e = this._device._gl, i = Q(this._format);
e.activeTexture(e.TEXTURE0);
e.bindTexture(e.TEXTURE_CUBE_MAP, this._glID);
this._setImage(i, t);
this._device._restoreTexture(0);
};
e.prototype._setSubImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.faceIndex, a = e.image;
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
!a || ArrayBuffer.isView(a) || a instanceof ArrayBuffer ? this._compressed ? i.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, e.width, e.height, t.format, a) : i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, e.width, e.height, t.format, t.pixelType, a) : i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, e.x, e.y, t.format, t.pixelType, a);
};
e.prototype._setImage = function(t, e) {
var i = this._device._gl, n = e.flipY, r = e.premultiplyAlpha, s = e.faceIndex, a = e.image;
void 0 === n ? i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, !1) : i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL, n);
void 0 === r ? i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1) : i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r);
!a || ArrayBuffer.isView(a) || a instanceof ArrayBuffer ? this._compressed ? i.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, e.width, e.height, 0, a) : i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, e.width, e.height, 0, t.format, t.pixelType, a) : i.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X + s, e.level, t.internalFormat, t.format, t.pixelType, a);
};
e.prototype._setMipmap = function(t, e, i) {
for (var n = Q(this._format), r = {
width: this._width,
height: this._height,
faceIndex: 0,
flipY: e,
premultiplyAlpha: i,
level: 0,
image: null
}, s = 0; s < t.length; ++s) {
var a = t[s];
r.level = s;
r.width = this._width >> s;
r.height = this._height >> s;
for (var o = 0; o < 6; ++o) {
r.faceIndex = o;
r.image = a[o];
this._setImage(n, r);
}
}
};
e.prototype._setTexInfo = function() {
var t = this._device._gl, e = lt(this._width) && lt(this._height);
if (!e && (this._wrapS !== Z.WRAP_CLAMP || this._wrapT !== Z.WRAP_CLAMP)) {
console.warn("WebGL1 doesn't support all wrap modes with NPOT textures");
this._wrapS = Z.WRAP_CLAMP;
this._wrapT = Z.WRAP_CLAMP;
}
var i = this._hasMipmap ? this._mipFilter : -1;
if (!e && -1 !== i) {
console.warn("NPOT textures do not support mipmap filter");
i = -1;
}
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_MIN_FILTER, J(t, this._minFilter, i));
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_MAG_FILTER, J(t, this._magFilter, -1));
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_WRAP_S, this._wrapS);
t.texParameteri(t.TEXTURE_CUBE_MAP, t.TEXTURE_WRAP_T, this._wrapT);
var n = this._device.ext("EXT_texture_filter_anisotropic");
n && n.TEXTURE_MAX_ANISOTROPY_EXT && t.texParameteri(t.TEXTURE_CUBE_MAP, n.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
};
return e;
})(ht), _t = function(t, e, i, n) {
this._device = t;
this._format = e;
this._width = i;
this._height = n;
var r = t._gl;
this._glID = r.createRenderbuffer();
r.bindRenderbuffer(r.RENDERBUFFER, this._glID);
r.renderbufferStorage(r.RENDERBUFFER, e, i, n);
r.bindRenderbuffer(r.RENDERBUFFER, null);
};
_t.prototype.destroy = function() {
if (null !== this._glID) {
var t = this._device._gl;
t.bindRenderbuffer(t.RENDERBUFFER, null);
t.deleteRenderbuffer(this._glID);
this._glID = null;
} else console.error("The render-buffer already destroyed");
};
var dt = function(t, e, i, n) {
this._device = t;
this._width = e;
this._height = i;
this._colors = n.colors || [];
this._depth = n.depth || null;
this._stencil = n.stencil || null;
this._depthStencil = n.depthStencil || null;
this._glID = t._gl.createFramebuffer();
};
dt.prototype.destroy = function() {
if (null !== this._glID) {
this._device._gl.deleteFramebuffer(this._glID);
this._glID = null;
} else console.error("The frame-buffer already destroyed");
};
var pt = {
blend: !1,
blendSep: !1,
blendColor: 4294967295,
blendEq: Z.BLEND_FUNC_ADD,
blendAlphaEq: Z.BLEND_FUNC_ADD,
blendSrc: Z.BLEND_ONE,
blendDst: Z.BLEND_ZERO,
blendSrcAlpha: Z.BLEND_ONE,
blendDstAlpha: Z.BLEND_ZERO,
depthTest: !1,
depthWrite: !1,
depthFunc: Z.DS_FUNC_LESS,
stencilTest: !1,
stencilSep: !1,
stencilFuncFront: Z.DS_FUNC_ALWAYS,
stencilRefFront: 0,
stencilMaskFront: 255,
stencilFailOpFront: Z.STENCIL_OP_KEEP,
stencilZFailOpFront: Z.STENCIL_OP_KEEP,
stencilZPassOpFront: Z.STENCIL_OP_KEEP,
stencilWriteMaskFront: 255,
stencilFuncBack: Z.DS_FUNC_ALWAYS,
stencilRefBack: 0,
stencilMaskBack: 255,
stencilFailOpBack: Z.STENCIL_OP_KEEP,
stencilZFailOpBack: Z.STENCIL_OP_KEEP,
stencilZPassOpBack: Z.STENCIL_OP_KEEP,
stencilWriteMaskBack: 255,
cullMode: Z.CULL_BACK,
primitiveType: Z.PT_TRIANGLES,
maxStream: -1,
vertexBuffers: [],
vertexBufferOffsets: [],
indexBuffer: null,
maxTextureSlot: -1,
textureUnits: [],
program: null
}, mt = function(t) {
this.vertexBuffers = new Array(t._caps.maxVertexStreams);
this.vertexBufferOffsets = new Array(t._caps.maxVertexStreams);
this.textureUnits = new Array(t._caps.maxTextureUnits);
this.set(pt);
};
mt.initDefault = function(t) {
pt.vertexBuffers = new Array(t._caps.maxVertexStreams);
pt.vertexBufferOffsets = new Array(t._caps.maxVertexStreams);
pt.textureUnits = new Array(t._caps.maxTextureUnits);
};
mt.prototype.reset = function() {
this.set(pt);
};
mt.prototype.set = function(t) {
this.blend = t.blend;
this.blendSep = t.blendSep;
this.blendColor = t.blendColor;
this.blendEq = t.blendEq;
this.blendAlphaEq = t.blendAlphaEq;
this.blendSrc = t.blendSrc;
this.blendDst = t.blendDst;
this.blendSrcAlpha = t.blendSrcAlpha;
this.blendDstAlpha = t.blendDstAlpha;
this.depthTest = t.depthTest;
this.depthWrite = t.depthWrite;
this.depthFunc = t.depthFunc;
this.stencilTest = t.stencilTest;
this.stencilSep = t.stencilSep;
this.stencilFuncFront = t.stencilFuncFront;
this.stencilRefFront = t.stencilRefFront;
this.stencilMaskFront = t.stencilMaskFront;
this.stencilFailOpFront = t.stencilFailOpFront;
this.stencilZFailOpFront = t.stencilZFailOpFront;
this.stencilZPassOpFront = t.stencilZPassOpFront;
this.stencilWriteMaskFront = t.stencilWriteMaskFront;
this.stencilFuncBack = t.stencilFuncBack;
this.stencilRefBack = t.stencilRefBack;
this.stencilMaskBack = t.stencilMaskBack;
this.stencilFailOpBack = t.stencilFailOpBack;
this.stencilZFailOpBack = t.stencilZFailOpBack;
this.stencilZPassOpBack = t.stencilZPassOpBack;
this.stencilWriteMaskBack = t.stencilWriteMaskBack;
this.cullMode = t.cullMode;
this.primitiveType = t.primitiveType;
this.maxStream = t.maxStream;
for (var e = 0; e < t.vertexBuffers.length; ++e) this.vertexBuffers[e] = t.vertexBuffers[e];
for (var i = 0; i < t.vertexBufferOffsets.length; ++i) this.vertexBufferOffsets[i] = t.vertexBufferOffsets[i];
this.indexBuffer = t.indexBuffer;
this.maxTextureSlot = t.maxTextureSlot;
for (var n = 0; n < t.textureUnits.length; ++n) this.textureUnits[n] = t.textureUnits[n];
this.program = t.program;
};
var gt = {
5124: function(t, e, i) {
t.uniform1i(e, i);
},
5126: function(t, e, i) {
t.uniform1f(e, i);
},
35664: function(t, e, i) {
t.uniform2fv(e, i);
},
35665: function(t, e, i) {
t.uniform3fv(e, i);
},
35666: function(t, e, i) {
t.uniform4fv(e, i);
},
35667: function(t, e, i) {
t.uniform2iv(e, i);
},
35668: function(t, e, i) {
t.uniform3iv(e, i);
},
35669: function(t, e, i) {
t.uniform4iv(e, i);
},
35670: function(t, e, i) {
t.uniform1i(e, i);
},
35671: function(t, e, i) {
t.uniform2iv(e, i);
},
35672: function(t, e, i) {
t.uniform3iv(e, i);
},
35673: function(t, e, i) {
t.uniform4iv(e, i);
},
35674: function(t, e, i) {
t.uniformMatrix2fv(e, !1, i);
},
35675: function(t, e, i) {
t.uniformMatrix3fv(e, !1, i);
},
35676: function(t, e, i) {
t.uniformMatrix4fv(e, !1, i);
},
35678: function(t, e, i) {
t.uniform1i(e, i);
},
35680: function(t, e, i) {
t.uniform1i(e, i);
}
}, vt = {
5124: function(t, e, i) {
t.uniform1iv(e, i);
},
5126: function(t, e, i) {
t.uniform1fv(e, i);
},
35664: function(t, e, i) {
t.uniform2fv(e, i);
},
35665: function(t, e, i) {
t.uniform3fv(e, i);
},
35666: function(t, e, i) {
t.uniform4fv(e, i);
},
35667: function(t, e, i) {
t.uniform2iv(e, i);
},
35668: function(t, e, i) {
t.uniform3iv(e, i);
},
35669: function(t, e, i) {
t.uniform4iv(e, i);
},
35670: function(t, e, i) {
t.uniform1iv(e, i);
},
35671: function(t, e, i) {
t.uniform2iv(e, i);
},
35672: function(t, e, i) {
t.uniform3iv(e, i);
},
35673: function(t, e, i) {
t.uniform4iv(e, i);
},
35674: function(t, e, i) {
t.uniformMatrix2fv(e, !1, i);
},
35675: function(t, e, i) {
t.uniformMatrix3fv(e, !1, i);
},
35676: function(t, e, i) {
t.uniformMatrix4fv(e, !1, i);
},
35678: function(t, e, i) {
t.uniform1iv(e, i);
},
35680: function(t, e, i) {
t.uniform1iv(e, i);
}
};
function yt(t, e, i) {
if (e.blend === i.blend) {
if (!1 !== i.blend) {
e.blendColor !== i.blendColor && t.blendColor((i.blendColor >> 24) / 255, (i.blendColor >> 16 & 255) / 255, (i.blendColor >> 8 & 255) / 255, (255 & i.blendColor) / 255);
if (e.blendSep === i.blendSep) if (i.blendSep) {
e.blendSrc === i.blendSrc && e.blendDst === i.blendDst && e.blendSrcAlpha === i.blendSrcAlpha && e.blendDstAlpha === i.blendDstAlpha || t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
e.blendEq === i.blendEq && e.blendAlphaEq === i.blendAlphaEq || t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
} else {
e.blendSrc === i.blendSrc && e.blendDst === i.blendDst || t.blendFunc(i.blendSrc, i.blendDst);
e.blendEq !== i.blendEq && t.blendEquation(i.blendEq);
} else if (i.blendSep) {
t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
} else {
t.blendFunc(i.blendSrc, i.blendDst);
t.blendEquation(i.blendEq);
}
}
} else {
if (!i.blend) {
t.disable(t.BLEND);
return;
}
t.enable(t.BLEND);
i.blendSrc !== Z.BLEND_CONSTANT_COLOR && i.blendSrc !== Z.BLEND_ONE_MINUS_CONSTANT_COLOR && i.blendDst !== Z.BLEND_CONSTANT_COLOR && i.blendDst !== Z.BLEND_ONE_MINUS_CONSTANT_COLOR || t.blendColor((i.blendColor >> 24) / 255, (i.blendColor >> 16 & 255) / 255, (i.blendColor >> 8 & 255) / 255, (255 & i.blendColor) / 255);
if (i.blendSep) {
t.blendFuncSeparate(i.blendSrc, i.blendDst, i.blendSrcAlpha, i.blendDstAlpha);
t.blendEquationSeparate(i.blendEq, i.blendAlphaEq);
} else {
t.blendFunc(i.blendSrc, i.blendDst);
t.blendEquation(i.blendEq);
}
}
}
function Tt(t, e, i) {
if (e.depthTest === i.depthTest) {
e.depthWrite !== i.depthWrite && t.depthMask(i.depthWrite);
if (!1 !== i.depthTest) e.depthFunc !== i.depthFunc && t.depthFunc(i.depthFunc); else if (i.depthWrite) {
i.depthTest = !0;
i.depthFunc = Z.DS_FUNC_ALWAYS;
t.enable(t.DEPTH_TEST);
t.depthFunc(i.depthFunc);
}
} else {
if (!i.depthTest) {
t.disable(t.DEPTH_TEST);
return;
}
t.enable(t.DEPTH_TEST);
t.depthFunc(i.depthFunc);
t.depthMask(i.depthWrite);
}
}
function xt(t, e, i) {
if (i.stencilTest === e.stencilTest) {
if (i.stencilTest) if (e.stencilSep === i.stencilSep) if (i.stencilSep) {
e.stencilFuncFront === i.stencilFuncFront && e.stencilRefFront === i.stencilRefFront && e.stencilMaskFront === i.stencilMaskFront || t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
e.stencilWriteMaskFront !== i.stencilWriteMaskFront && t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront);
e.stencilFailOpFront === i.stencilFailOpFront && e.stencilZFailOpFront === i.stencilZFailOpFront && e.stencilZPassOpFront === i.stencilZPassOpFront || t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
e.stencilFuncBack === i.stencilFuncBack && e.stencilRefBack === i.stencilRefBack && e.stencilMaskBack === i.stencilMaskBack || t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack);
e.stencilWriteMaskBack !== i.stencilWriteMaskBack && t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack);
e.stencilFailOpBack === i.stencilFailOpBack && e.stencilZFailOpBack === i.stencilZFailOpBack && e.stencilZPassOpBack === i.stencilZPassOpBack || t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack);
} else {
e.stencilFuncFront === i.stencilFuncFront && e.stencilRefFront === i.stencilRefFront && e.stencilMaskFront === i.stencilMaskFront || t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
e.stencilWriteMaskFront !== i.stencilWriteMaskFront && t.stencilMask(i.stencilWriteMaskFront);
e.stencilFailOpFront === i.stencilFailOpFront && e.stencilZFailOpFront === i.stencilZFailOpFront && e.stencilZPassOpFront === i.stencilZPassOpFront || t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
} else if (i.stencilSep) {
t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront);
t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack);
t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack);
t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack);
} else {
t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMask(i.stencilWriteMaskFront);
t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
}
} else {
if (!i.stencilTest) {
t.disable(t.STENCIL_TEST);
return;
}
t.enable(t.STENCIL_TEST);
if (i.stencilSep) {
t.stencilFuncSeparate(t.FRONT, i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMaskSeparate(t.FRONT, i.stencilWriteMaskFront);
t.stencilOpSeparate(t.FRONT, i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
t.stencilFuncSeparate(t.BACK, i.stencilFuncBack, i.stencilRefBack, i.stencilMaskBack);
t.stencilMaskSeparate(t.BACK, i.stencilWriteMaskBack);
t.stencilOpSeparate(t.BACK, i.stencilFailOpBack, i.stencilZFailOpBack, i.stencilZPassOpBack);
} else {
t.stencilFunc(i.stencilFuncFront, i.stencilRefFront, i.stencilMaskFront);
t.stencilMask(i.stencilWriteMaskFront);
t.stencilOp(i.stencilFailOpFront, i.stencilZFailOpFront, i.stencilZPassOpFront);
}
}
}
function Et(t, e, i) {
if (e.cullMode !== i.cullMode) if (i.cullMode !== Z.CULL_NONE) {
t.enable(t.CULL_FACE);
t.cullFace(i.cullMode);
} else t.disable(t.CULL_FACE);
}
function Ct(t, e, i, n) {
var r = !1;
if (-1 !== n.maxStream) {
if (i.maxStream !== n.maxStream) r = !0; else if (i.program !== n.program) r = !0; else for (var s = 0; s < n.maxStream + 1; ++s) if (i.vertexBuffers[s] !== n.vertexBuffers[s] || i.vertexBufferOffsets[s] !== n.vertexBufferOffsets[s]) {
r = !0;
break;
}
if (r) {
for (var a = 0; a < t._caps.maxVertexAttribs; ++a) t._newAttributes[a] = 0;
for (var o = 0; o < n.maxStream + 1; ++o) {
var c = n.vertexBuffers[o], h = n.vertexBufferOffsets[o];
if (c && -1 !== c._glID) {
e.bindBuffer(e.ARRAY_BUFFER, c._glID);
for (var l = 0; l < n.program._attributes.length; ++l) {
var u = n.program._attributes[l], f = c._format.element(u.name);
if (f) {
if (0 === t._enabledAttributes[u.location]) {
e.enableVertexAttribArray(u.location);
t._enabledAttributes[u.location] = 1;
}
t._newAttributes[u.location] = 1;
e.vertexAttribPointer(u.location, f.num, f.type, f.normalize, f.stride, f.offset + h * f.stride);
} else console.warn("Can not find vertex attribute: " + u.name);
}
}
}
for (var _ = 0; _ < t._caps.maxVertexAttribs; ++_) if (t._enabledAttributes[_] !== t._newAttributes[_]) {
e.disableVertexAttribArray(_);
t._enabledAttributes[_] = 0;
}
}
} else console.warn("VertexBuffer not assigned, please call setVertexBuffer before every draw.");
}
function At(t, e, i) {
for (var n = 0; n < i.maxTextureSlot + 1; ++n) if (e.textureUnits[n] !== i.textureUnits[n]) {
var r = i.textureUnits[n];
if (r && -1 !== r._glID) {
t.activeTexture(t.TEXTURE0 + n);
t.bindTexture(r._target, r._glID);
}
}
}
function bt(t, e, i, n) {
void 0 === n && (n = 0);
i instanceof ut ? t.framebufferTexture2D(t.FRAMEBUFFER, e, t.TEXTURE_2D, i._glID, 0) : i instanceof ft ? t.framebufferTexture2D(t.FRAMEBUFFER, e, t.TEXTURE_CUBE_MAP_POSITIVE_X + n, i._glID, 0) : t.framebufferRenderbuffer(t.FRAMEBUFFER, e, t.RENDERBUFFER, i._glID);
}
var St = function(t, e) {
var i;
void 0 === (e = e || {}).alpha && (e.alpha = !1);
void 0 === e.stencil && (e.stencil = !0);
void 0 === e.depth && (e.depth = !0);
void 0 === e.antialias && (e.antialias = !1);
void 0 === e.preserveDrawingBuffer && (e.preserveDrawingBuffer = !1);
try {
i = t.getContext("webgl", e) || t.getContext("experimental-webgl", e) || t.getContext("webkit-3d", e) || t.getContext("moz-webgl", e);
} catch (t) {
console.error(t);
return;
}
this._gl = i;
this._extensions = {};
this._caps = {};
this._stats = {
texture: 0,
vb: 0,
ib: 0,
drawcalls: 0
};
this._initExtensions([ "EXT_texture_filter_anisotropic", "EXT_shader_texture_lod", "OES_standard_derivatives", "OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "WEBGL_draw_buffers" ]);
this._initCaps();
this._initStates();
mt.initDefault(this);
this._current = new mt(this);
this._next = new mt(this);
this._uniforms = {};
this._vx = this._vy = this._vw = this._vh = 0;
this._sx = this._sy = this._sw = this._sh = 0;
this._framebuffer = null;
this._enabledAttributes = new Array(this._caps.maxVertexAttribs);
this._newAttributes = new Array(this._caps.maxVertexAttribs);
for (var n = 0; n < this._caps.maxVertexAttribs; ++n) {
this._enabledAttributes[n] = 0;
this._newAttributes[n] = 0;
}
};
St.prototype._initExtensions = function(t) {
for (var e = this._gl, i = 0; i < t.length; ++i) for (var n = t[i], r = [ "", "WEBKIT_", "MOZ_" ], s = 0; s < r.length; s++) try {
var a = e.getExtension(r[s] + n);
a && (this._extensions[n] = a);
} catch (t) {
console.error(t);
}
};
St.prototype._initCaps = function() {
var t = this._gl, e = this.ext("WEBGL_draw_buffers");
this._caps.maxVertexStreams = 4;
this._caps.maxVertexTextures = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
this._caps.maxFragUniforms = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS);
this._caps.maxTextureUnits = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
this._caps.maxVertexAttribs = t.getParameter(t.MAX_VERTEX_ATTRIBS);
this._caps.maxDrawBuffers = e ? t.getParameter(e.MAX_DRAW_BUFFERS_WEBGL) : 1;
this._caps.maxColorAttachments = e ? t.getParameter(e.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
};
St.prototype._initStates = function() {
var t = this._gl;
t.disable(t.BLEND);
t.blendFunc(t.ONE, t.ZERO);
t.blendEquation(t.FUNC_ADD);
t.blendColor(1, 1, 1, 1);
t.colorMask(!0, !0, !0, !0);
t.enable(t.CULL_FACE);
t.cullFace(t.BACK);
t.disable(t.DEPTH_TEST);
t.depthFunc(t.LESS);
t.depthMask(!1);
t.disable(t.POLYGON_OFFSET_FILL);
t.depthRange(0, 1);
t.disable(t.STENCIL_TEST);
t.stencilFunc(t.ALWAYS, 0, 255);
t.stencilMask(255);
t.stencilOp(t.KEEP, t.KEEP, t.KEEP);
t.clearDepth(1);
t.clearColor(0, 0, 0, 0);
t.clearStencil(0);
t.disable(t.SCISSOR_TEST);
};
St.prototype._restoreTexture = function(t) {
var e = this._gl, i = this._current.textureUnits[t];
i && -1 !== i._glID ? e.bindTexture(i._target, i._glID) : e.bindTexture(e.TEXTURE_2D, null);
};
St.prototype._restoreIndexBuffer = function() {
var t = this._gl, e = this._current.indexBuffer;
e && -1 !== e._glID ? t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, e._glID) : t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null);
};
St.prototype.ext = function(t) {
return this._extensions[t];
};
St.prototype.setFrameBuffer = function(t) {
if (this._framebuffer !== t) {
this._framebuffer = t;
var e = this._gl;
if (null !== t) {
e.bindFramebuffer(e.FRAMEBUFFER, t._glID);
for (var i = this._framebuffer._colors.length, n = 0; n < i; ++n) {
var r = this._framebuffer._colors[n];
bt(e, e.COLOR_ATTACHMENT0 + n, r);
}
for (var s = i; s < this._caps.maxColorAttachments; ++s) e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0 + s, e.TEXTURE_2D, null, 0);
this._framebuffer._depth && bt(e, e.DEPTH_ATTACHMENT, this._framebuffer._depth);
this._framebuffer._stencil && bt(e, e.STENCIL_ATTACHMENT, t._stencil);
this._framebuffer._depthStencil && bt(e, e.DEPTH_STENCIL_ATTACHMENT, t._depthStencil);
} else e.bindFramebuffer(e.FRAMEBUFFER, null);
}
};
St.prototype.setViewport = function(t, e, i, n) {
if (this._vx !== t || this._vy !== e || this._vw !== i || this._vh !== n) {
this._gl.viewport(t, e, i, n);
this._vx = t;
this._vy = e;
this._vw = i;
this._vh = n;
}
};
St.prototype.setScissor = function(t, e, i, n) {
if (this._sx !== t || this._sy !== e || this._sw !== i || this._sh !== n) {
this._gl.scissor(t, e, i, n);
this._sx = t;
this._sy = e;
this._sw = i;
this._sh = n;
}
};
St.prototype.clear = function(t) {
if (void 0 !== t.color || void 0 !== t.depth || void 0 !== t.stencil) {
var e = this._gl, i = 0;
if (void 0 !== t.color) {
i |= e.COLOR_BUFFER_BIT;
e.clearColor(t.color[0], t.color[1], t.color[2], t.color[3]);
}
if (void 0 !== t.depth) {
i |= e.DEPTH_BUFFER_BIT;
e.clearDepth(t.depth);
e.enable(e.DEPTH_TEST);
e.depthMask(!0);
e.depthFunc(e.ALWAYS);
}
if (void 0 !== t.stencil) {
i |= e.STENCIL_BUFFER_BIT;
e.clearStencil(t.stencil);
}
e.clear(i);
if (void 0 !== t.depth) if (!1 === this._current.depthTest) e.disable(e.DEPTH_TEST); else {
!1 === this._current.depthWrite && e.depthMask(!1);
this._current.depthFunc !== Z.DS_FUNC_ALWAYS && e.depthFunc(this._current.depthFunc);
}
}
};
St.prototype.enableBlend = function() {
this._next.blend = !0;
};
St.prototype.enableDepthTest = function() {
this._next.depthTest = !0;
};
St.prototype.enableDepthWrite = function() {
this._next.depthWrite = !0;
};
St.prototype.enableStencilTest = function() {
this._next.stencilTest = !0;
};
St.prototype.setStencilFunc = function(t, e, i) {
this._next.stencilSep = !1;
this._next.stencilFuncFront = this._next.stencilFuncBack = t;
this._next.stencilRefFront = this._next.stencilRefBack = e;
this._next.stencilMaskFront = this._next.stencilMaskBack = i;
};
St.prototype.setStencilFuncFront = function(t, e, i) {
this._next.stencilSep = !0;
this._next.stencilFuncFront = t;
this._next.stencilRefFront = e;
this._next.stencilMaskFront = i;
};
St.prototype.setStencilFuncBack = function(t, e, i) {
this._next.stencilSep = !0;
this._next.stencilFuncBack = t;
this._next.stencilRefBack = e;
this._next.stencilMaskBack = i;
};
St.prototype.setStencilOp = function(t, e, i, n) {
this._next.stencilFailOpFront = this._next.stencilFailOpBack = t;
this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = e;
this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = i;
this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = n;
};
St.prototype.setStencilOpFront = function(t, e, i, n) {
this._next.stencilSep = !0;
this._next.stencilFailOpFront = t;
this._next.stencilZFailOpFront = e;
this._next.stencilZPassOpFront = i;
this._next.stencilWriteMaskFront = n;
};
St.prototype.setStencilOpBack = function(t, e, i, n) {
this._next.stencilSep = !0;
this._next.stencilFailOpBack = t;
this._next.stencilZFailOpBack = e;
this._next.stencilZPassOpBack = i;
this._next.stencilWriteMaskBack = n;
};
St.prototype.setDepthFunc = function(t) {
this._next.depthFunc = t;
};
St.prototype.setBlendColor32 = function(t) {
this._next.blendColor = t;
};
St.prototype.setBlendColor = function(t, e, i, n) {
this._next.blendColor = (255 * t << 24 | 255 * e << 16 | 255 * i << 8 | 255 * n) >>> 0;
};
St.prototype.setBlendFunc = function(t, e) {
this._next.blendSep = !1;
this._next.blendSrc = t;
this._next.blendDst = e;
};
St.prototype.setBlendFuncSep = function(t, e, i, n) {
this._next.blendSep = !0;
this._next.blendSrc = t;
this._next.blendDst = e;
this._next.blendSrcAlpha = i;
this._next.blendDstAlpha = n;
};
St.prototype.setBlendEq = function(t) {
this._next.blendSep = !1;
this._next.blendEq = t;
};
St.prototype.setBlendEqSep = function(t, e) {
this._next.blendSep = !0;
this._next.blendEq = t;
this._next.blendAlphaEq = e;
};
St.prototype.setCullMode = function(t) {
this._next.cullMode = t;
};
St.prototype.setVertexBuffer = function(t, e, i) {
void 0 === i && (i = 0);
this._next.vertexBuffers[t] = e;
this._next.vertexBufferOffsets[t] = i;
this._next.maxStream < t && (this._next.maxStream = t);
};
St.prototype.setIndexBuffer = function(t) {
this._next.indexBuffer = t;
};
St.prototype.setProgram = function(t) {
this._next.program = t;
};
St.prototype.setTexture = function(t, e, i) {
if (i >= this._caps.maxTextureUnits) console.warn("Can not set texture " + t + " at stage " + i + ", max texture exceed: " + this._caps.maxTextureUnits); else {
this._next.textureUnits[i] = e;
this.setUniform(t, i);
this._next.maxTextureSlot < i && (this._next.maxTextureSlot = i);
}
};
St.prototype.setTextureArray = function(t, e, i) {
var n = e.length;
if (n >= this._caps.maxTextureUnits) console.warn("Can not set " + n + " textures for " + t + ", max texture exceed: " + this._caps.maxTextureUnits); else {
for (var r = 0; r < n; ++r) {
var s = i[r];
this._next.textureUnits[s] = e[r];
}
this.setUniform(t, i);
}
};
St.prototype.setUniform = function(t, e) {
var i = this._uniforms[t], n = !1;
do {
if (!i) break;
if (i.isArray !== Array.isArray(e)) break;
if (i.isArray && i.value.length !== e.length) break;
n = !0;
} while (0);
if (n) {
var r = i.value, s = !1;
if (i.isArray) {
for (var a = 0, o = r.length; a < o; a++) if (r[a] !== e[a]) {
s = !0;
r[a] = e[a];
}
} else if (r !== e) {
s = !0;
i.value = e;
}
s && (i.dirty = !0);
} else {
var c = e, h = !1;
if (e instanceof Float32Array || Array.isArray(e)) {
c = new Float32Array(e);
h = !0;
} else if (e instanceof Int32Array) {
c = new Int32Array(e);
h = !0;
}
i = {
dirty: !0,
value: c,
isArray: h
};
}
this._uniforms[t] = i;
};
St.prototype.setPrimitiveType = function(t) {
this._next.primitiveType = t;
};
St.prototype.draw = function(t, e) {
var i = this._gl, n = this._current, r = this._next;
yt(i, n, r);
Tt(i, n, r);
xt(i, n, r);
Et(i, n, r);
Ct(this, i, n, r);
n.indexBuffer !== r.indexBuffer && i.bindBuffer(i.ELEMENT_ARRAY_BUFFER, r.indexBuffer && -1 !== r.indexBuffer._glID ? r.indexBuffer._glID : null);
var s = !1;
if (n.program !== r.program) {
r.program._linked ? i.useProgram(r.program._glID) : console.warn("Failed to use program: has not linked yet.");
s = !0;
}
At(i, n, r);
for (var a = 0; a < r.program._uniforms.length; ++a) {
var o = r.program._uniforms[a], c = this._uniforms[o.name];
if (c && (s || c.dirty)) {
c.dirty = !1;
var h = void 0 === o.size ? gt[o.type] : vt[o.type];
h ? h(i, o.location, c.value) : console.warn("Can not find commit function for uniform " + o.name);
}
}
r.indexBuffer ? i.drawElements(this._next.primitiveType, e, r.indexBuffer._format, t * r.indexBuffer._bytesPerIndex) : i.drawArrays(this._next.primitiveType, t, e);
this._stats.drawcalls += 1;
n.set(r);
r.reset();
};
var wt = {
VertexFormat: $,
IndexBuffer: tt,
VertexBuffer: it,
Program: at,
Texture: ht,
Texture2D: ut,
TextureCube: ft,
RenderBuffer: _t,
FrameBuffer: dt,
Device: St,
attrTypeBytes: K,
glFilter: J,
glTextureFmt: Q
};
Object.assign(wt, Z);
var Dt = function(t, e, i) {
void 0 === i && (i = wt.PT_TRIANGLES);
this._vertexBuffer = t;
this._indexBuffer = e;
this._primitiveType = i;
this._start = 0;
this._count = -1;
};
Dt.prototype.getPrimitiveCount = function() {
return -1 !== this._count ? this._count : this._indexBuffer ? this._indexBuffer.count : this._vertexBuffer.count;
};
var It = function(t) {
this._programName = t;
this._cullMode = wt.CULL_BACK;
this._blend = !1;
this._blendEq = wt.BLEND_FUNC_ADD;
this._blendAlphaEq = wt.BLEND_FUNC_ADD;
this._blendSrc = wt.BLEND_ONE;
this._blendDst = wt.BLEND_ZERO;
this._blendSrcAlpha = wt.BLEND_ONE;
this._blendDstAlpha = wt.BLEND_ZERO;
this._blendColor = 4294967295;
this._depthTest = !1;
this._depthWrite = !1;
this._depthFunc = wt.DS_FUNC_LESS;
this._stencilTest = !1;
this._stencilFuncFront = wt.DS_FUNC_ALWAYS;
this._stencilRefFront = 0;
this._stencilMaskFront = 255;
this._stencilFailOpFront = wt.STENCIL_OP_KEEP;
this._stencilZFailOpFront = wt.STENCIL_OP_KEEP;
this._stencilZPassOpFront = wt.STENCIL_OP_KEEP;
this._stencilWriteMaskFront = 255;
this._stencilFuncBack = wt.DS_FUNC_ALWAYS;
this._stencilRefBack = 0;
this._stencilMaskBack = 255;
this._stencilFailOpBack = wt.STENCIL_OP_KEEP;
this._stencilZFailOpBack = wt.STENCIL_OP_KEEP;
this._stencilZPassOpBack = wt.STENCIL_OP_KEEP;
this._stencilWriteMaskBack = 255;
};
It.prototype.copy = function(t) {
this._programName = t._programName;
this._cullMode = t._cullMode;
this._blend = t._blend;
this._blendEq = t._blendEq;
this._blendAlphaEq = t._blendAlphaEq;
this._blendSrc = t._blendSrc;
this._blendDst = t._blendDst;
this._blendSrcAlpha = t._blendSrcAlpha;
this._blendDstAlpha = t._blendDstAlpha;
this._blendColor = t._blendColor;
this._depthTest = t._depthTest;
this._depthWrite = t._depthWrite;
this._depthFunc = t._depthFunc;
this._stencilTest = t._stencilTest;
this._stencilFuncFront = t._stencilFuncFront;
this._stencilRefFront = t._stencilRefFront;
this._stencilMaskFront = t._stencilMaskFront;
this._stencilFailOpFront = t._stencilFailOpFront;
this._stencilZFailOpFront = t._stencilZFailOpFront;
this._stencilZPassOpFront = t._stencilZPassOpFront;
this._stencilWriteMaskFront = t._stencilWriteMaskFront;
this._stencilFuncBack = t._stencilFuncBack;
this._stencilRefBack = t._stencilRefBack;
this._stencilMaskBack = t._stencilMaskBack;
this._stencilFailOpBack = t._stencilFailOpBack;
this._stencilZFailOpBack = t._stencilZFailOpBack;
this._stencilZPassOpBack = t._stencilZPassOpBack;
this._stencilWriteMaskBack = t._stencilWriteMaskBack;
};
It.prototype.setCullMode = function(t) {
this._cullMode = t;
};
It.prototype.setBlend = function(t, e, i, n, r, s, a) {
void 0 === t && (t = wt.BLEND_FUNC_ADD);
void 0 === e && (e = wt.BLEND_ONE);
void 0 === i && (i = wt.BLEND_ZERO);
void 0 === n && (n = wt.BLEND_FUNC_ADD);
void 0 === r && (r = wt.BLEND_ONE);
void 0 === s && (s = wt.BLEND_ZERO);
void 0 === a && (a = 4294967295);
this._blend = !0;
this._blendEq = t;
this._blendSrc = e;
this._blendDst = i;
this._blendAlphaEq = n;
this._blendSrcAlpha = r;
this._blendDstAlpha = s;
this._blendColor = a;
};
It.prototype.setDepth = function(t, e, i) {
void 0 === t && (t = !1);
void 0 === e && (e = !1);
void 0 === i && (i = wt.DS_FUNC_LESS);
this._depthTest = t;
this._depthWrite = e;
this._depthFunc = i;
};
It.prototype.setStencilFront = function(t, e, i, n, r, s, a) {
void 0 === t && (t = wt.DS_FUNC_ALWAYS);
void 0 === e && (e = 0);
void 0 === i && (i = 255);
void 0 === n && (n = wt.STENCIL_OP_KEEP);
void 0 === r && (r = wt.STENCIL_OP_KEEP);
void 0 === s && (s = wt.STENCIL_OP_KEEP);
void 0 === a && (a = 255);
this._stencilTest = !0;
this._stencilFuncFront = t;
this._stencilRefFront = e;
this._stencilMaskFront = i;
this._stencilFailOpFront = n;
this._stencilZFailOpFront = r;
this._stencilZPassOpFront = s;
this._stencilWriteMaskFront = a;
};
It.prototype.setStencilBack = function(t, e, i, n, r, s, a) {
void 0 === t && (t = wt.DS_FUNC_ALWAYS);
void 0 === e && (e = 0);
void 0 === i && (i = 255);
void 0 === n && (n = wt.STENCIL_OP_KEEP);
void 0 === r && (r = wt.STENCIL_OP_KEEP);
void 0 === s && (s = wt.STENCIL_OP_KEEP);
void 0 === a && (a = 255);
this._stencilTest = !0;
this._stencilFuncBack = t;
this._stencilRefBack = e;
this._stencilMaskBack = i;
this._stencilFailOpBack = n;
this._stencilZFailOpBack = r;
this._stencilZPassOpBack = s;
this._stencilWriteMaskBack = a;
};
It.prototype.disableStencilTest = function() {
this._stencilTest = !1;
};
var Rt = 0, Mt = {}, Lt = {
addStage: function(t) {
if (void 0 === Mt[t]) {
var e = 1 << Rt;
Mt[t] = e;
Rt += 1;
}
},
stageID: function(t) {
var e = Mt[t];
return void 0 === e ? -1 : e;
},
stageIDs: function(t) {
for (var e = 0, i = 0; i < t.length; ++i) {
var n = Mt[t[i]];
void 0 !== n && (e |= n);
}
return e;
}
}, Ot = 0, Pt = function(t, e, i, n) {
void 0 === n && (n = 0);
this._id = Ot++;
this._stageIDs = Lt.stageIDs(t);
this._parameters = e;
this._passes = i;
this._layer = n;
}, Ft = {
passes: {
configurable: !0
},
stageIDs: {
configurable: !0
}
};
Pt.prototype.copy = function(t) {
this._id = t._id;
this._stageIDs = t._stageIDs;
this._parameters = [];
for (var e = 0; e < t._parameters.length; ++e) {
var i = t._parameters[e];
this._parameters.push({
name: i.name,
type: i.type
});
}
for (var n = 0; n < t._passes.length; ++n) {
var r = this._passes[n];
if (!r) {
r = new Xe.Pass();
this._passes.push(r);
}
r.copy(t._passes[n]);
}
this._passes.length = t._passes.length;
this._layer = t._layer;
};
Pt.prototype.setStages = function(t) {
this._stageIDs = Lt.stageIDs(t);
};
Ft.passes.get = function() {
return this._passes;
};
Ft.stageIDs.get = function() {
return this._stageIDs;
};
Object.defineProperties(Pt.prototype, Ft);
var Nt = function(t, e, i) {
void 0 === e && (e = {});
void 0 === i && (i = []);
this._techniques = t;
this._properties = e;
this._defines = i;
};
Nt.prototype.clear = function() {
this._techniques.length = 0;
this._properties = null;
this._defines.length = 0;
};
Nt.prototype.getTechnique = function(t) {
for (var e = Lt.stageID(t), i = 0; i < this._techniques.length; ++i) {
var n = this._techniques[i];
if (n.stageIDs & e) return n;
}
return null;
};
Nt.prototype.getProperty = function(t) {
return this._properties[t];
};
Nt.prototype.setProperty = function(t, e) {
this._properties[t] = e;
};
Nt.prototype.getDefine = function(t) {
for (var e = 0; e < this._defines.length; ++e) {
var i = this._defines[e];
if (i.name === t) return i.value;
}
console.warn("Failed to get define " + t + ", define not found.");
return null;
};
Nt.prototype.define = function(t, e) {
for (var i = 0; i < this._defines.length; ++i) {
var n = this._defines[i];
if (n.name === t) {
n.value = e;
return;
}
}
console.warn("Failed to set define " + t + ", define not found.");
};
Nt.prototype.extractDefines = function(t) {
void 0 === t && (t = {});
for (var e = 0; e < this._defines.length; ++e) {
var i = this._defines[e];
t[i.name] = i.value;
}
return t;
};
var Bt = B.create(), kt = 0, zt = function() {
this._id = kt++;
this._rect = {
x: 0,
y: 0,
w: 1,
h: 1
};
this._color = W.new(.3, .3, .3, 1);
this._depth = 1;
this._stencil = 0;
this._clearFlags = X.CLEAR_COLOR | X.CLEAR_DEPTH;
this._matView = B.create();
this._matProj = B.create();
this._matViewProj = B.create();
this._matInvViewProj = B.create();
this._stages = [];
this._cullingMask = 1;
this._framebuffer = null;
this._shadowLight = null;
};
zt.prototype.getForward = function(t) {
return y.set(t, -this._matView.m02, -this._matView.m06, -this._matView.m10);
};
zt.prototype.getPosition = function(t) {
B.invert(Bt, this._matView);
return B.getTranslation(t, Bt);
};
var Ut = y.new(0, 0, -1), Ht = B.create(), Vt = b.create(), Wt = y.create();
function Gt(t, e, i) {
t._node.getWorldRT(e);
B.invert(e, e);
B.perspective(i, t._spotAngle * t._spotAngleScale, 1, t._shadowMinDepth, t._shadowMaxDepth);
}
function jt(t, e, i) {
t._node.getWorldRT(e);
B.invert(e, e);
var n = t._shadowFustumSize / 2;
B.ortho(i, -n, n, -n, n, t._shadowMinDepth, t._shadowMaxDepth);
}
var Xt = function() {
this._poolID = -1;
this._node = null;
this._type = X.LIGHT_DIRECTIONAL;
this._color = U.new(1, 1, 1);
this._intensity = 1;
this._range = 1;
this._spotAngle = a(60);
this._spotExp = 1;
this._directionUniform = new Float32Array(3);
this._positionUniform = new Float32Array(3);
this._colorUniform = new Float32Array([ this._color.r * this._intensity, this._color.g * this._intensity, this._color.b * this._intensity ]);
this._spotUniform = new Float32Array([ Math.cos(.5 * this._spotAngle), this._spotExp ]);
this._shadowType = X.SHADOW_NONE;
this._shadowFrameBuffer = null;
this._shadowMap = null;
this._shadowMapDirty = !1;
this._shadowDepthBuffer = null;
this._shadowResolution = 1024;
this._shadowBias = 5e-5;
this._shadowDarkness = 1;
this._shadowMinDepth = 1;
this._shadowMaxDepth = 1e3;
this._shadowDepthScale = 50;
this._frustumEdgeFalloff = 0;
this._viewProjMatrix = B.create();
this._spotAngleScale = 1;
this._shadowFustumSize = 80;
}, Yt = {
color: {
configurable: !0
},
intensity: {
configurable: !0
},
type: {
configurable: !0
},
spotAngle: {
configurable: !0
},
spotExp: {
configurable: !0
},
range: {
configurable: !0
},
shadowType: {
configurable: !0
},
shadowMap: {
configurable: !0
},
viewProjMatrix: {
configurable: !0
},
shadowResolution: {
configurable: !0
},
shadowBias: {
configurable: !0
},
shadowDarkness: {
configurable: !0
},
shadowMinDepth: {
configurable: !0
},
shadowMaxDepth: {
configurable: !0
},
shadowDepthScale: {
configurable: !0
},
frustumEdgeFalloff: {
configurable: !0
}
};
Xt.prototype.setNode = function(t) {
this._node = t;
};
Xt.prototype.setColor = function(t, e, i) {
U.set(this._color, t, e, i);
this._colorUniform[0] = t * this._intensity;
this._colorUniform[1] = e * this._intensity;
this._colorUniform[2] = i * this._intensity;
};
Yt.color.get = function() {
return this._color;
};
Xt.prototype.setIntensity = function(t) {
this._intensity = t;
this._colorUniform[0] = t * this._color.r;
this._colorUniform[1] = t * this._color.g;
this._colorUniform[2] = t * this._color.b;
};
Yt.intensity.get = function() {
return this._intensity;
};
Xt.prototype.setType = function(t) {
this._type = t;
};
Yt.type.get = function() {
return this._type;
};
Xt.prototype.setSpotAngle = function(t) {
this._spotAngle = t;
this._spotUniform[0] = Math.cos(.5 * this._spotAngle);
};
Yt.spotAngle.get = function() {
return this._spotAngle;
};
Xt.prototype.setSpotExp = function(t) {
this._spotExp = t;
this._spotUniform[1] = t;
};
Yt.spotExp.get = function() {
return this._spotExp;
};
Xt.prototype.setRange = function(t) {
this._range = t;
};
Yt.range.get = function() {
return this._range;
};
Xt.prototype.setShadowType = function(t) {
this._shadowType === X.SHADOW_NONE && t !== X.SHADOW_NONE && (this._shadowMapDirty = !0);
this._shadowType = t;
};
Yt.shadowType.get = function() {
return this._shadowType;
};
Yt.shadowMap.get = function() {
return this._shadowMap;
};
Yt.viewProjMatrix.get = function() {
return this._viewProjMatrix;
};
Xt.prototype.setShadowResolution = function(t) {
this._shadowResolution !== t && (this._shadowMapDirty = !0);
this._shadowResolution = t;
};
Yt.shadowResolution.get = function() {
return this._shadowResolution;
};
Xt.prototype.setShadowBias = function(t) {
this._shadowBias = t;
};
Yt.shadowBias.get = function() {
return this._shadowBias;
};
Xt.prototype.setShadowDarkness = function(t) {
this._shadowDarkness = t;
};
Yt.shadowDarkness.get = function() {
return this._shadowDarkness;
};
Xt.prototype.setShadowMinDepth = function(t) {
this._shadowMinDepth = t;
};
Yt.shadowMinDepth.get = function() {
return this._type === X.LIGHT_DIRECTIONAL ? 1 : this._shadowMinDepth;
};
Xt.prototype.setShadowMaxDepth = function(t) {
this._shadowMaxDepth = t;
};
Yt.shadowMaxDepth.get = function() {
return this._type === X.LIGHT_DIRECTIONAL ? 1 : this._shadowMaxDepth;
};
Xt.prototype.setShadowDepthScale = function(t) {
this._shadowDepthScale = t;
};
Yt.shadowDepthScale.get = function() {
return this._shadowDepthScale;
};
Xt.prototype.setFrustumEdgeFalloff = function(t) {
this._frustumEdgeFalloff = t;
};
Yt.frustumEdgeFalloff.get = function() {
return this._frustumEdgeFalloff;
};
Xt.prototype.extractView = function(t, e) {
t._shadowLight = this;
t._rect.x = 0;
t._rect.y = 0;
t._rect.w = this._shadowResolution;
t._rect.h = this._shadowResolution;
W.set(t._color, 1, 1, 1, 1);
t._depth = 1;
t._stencil = 0;
t._clearFlags = X.CLEAR_COLOR | X.CLEAR_DEPTH;
t._stages = e;
t._framebuffer = this._shadowFrameBuffer;
switch (this._type) {
case X.LIGHT_SPOT:
Gt(this, t._matView, t._matProj);
break;

case X.LIGHT_DIRECTIONAL:
jt(this, t._matView, t._matProj);
break;

case X.LIGHT_POINT:
t._matView, t._matProj;
break;

default:
console.warn("shadow of this light type is not supported");
}
B.mul(t._matViewProj, t._matProj, t._matView);
this._viewProjMatrix = t._matViewProj;
B.invert(t._matInvViewProj, t._matViewProj);
};
Xt.prototype._updateLightPositionAndDirection = function() {
this._node.getWorldMatrix(Ht);
b.fromMat4(Vt, Ht);
y.transformMat3(Wt, Ut, Vt);
y.array(this._directionUniform, Wt);
var t = this._positionUniform;
t[0] = Ht.m12;
t[1] = Ht.m13;
t[2] = Ht.m14;
};
Xt.prototype._generateShadowMap = function(t) {
this._shadowMap = new wt.Texture2D(t, {
width: this._shadowResolution,
height: this._shadowResolution,
format: wt.TEXTURE_FMT_RGBA8,
wrapS: wt.WRAP_CLAMP,
wrapT: wt.WRAP_CLAMP
});
this._shadowDepthBuffer = new wt.RenderBuffer(t, wt.RB_FMT_D16, this._shadowResolution, this._shadowResolution);
this._shadowFrameBuffer = new wt.FrameBuffer(t, this._shadowResolution, this._shadowResolution, {
colors: [ this._shadowMap ],
depth: this._shadowDepthBuffer
});
};
Xt.prototype._destroyShadowMap = function() {
if (this._shadowMap) {
this._shadowMap.destroy();
this._shadowDepthBuffer.destroy();
this._shadowFrameBuffer.destroy();
this._shadowMap = null;
this._shadowDepthBuffer = null;
this._shadowFrameBuffer = null;
}
};
Xt.prototype.update = function(t) {
this._updateLightPositionAndDirection();
if (this._shadowType === X.SHADOW_NONE) this._destroyShadowMap(); else if (this._shadowMapDirty) {
this._destroyShadowMap();
this._generateShadowMap(t);
this._shadowMapDirty = !1;
}
};
Object.defineProperties(Xt.prototype, Yt);
var qt = B.create(), Zt = B.create(), Kt = B.create(), Jt = B.create(), Qt = y.create(), $t = function() {
this._poolID = -1;
this._node = null;
this._projection = X.PROJ_PERSPECTIVE;
this._priority = 0;
this._color = W.new(.2, .3, .47, 1);
this._depth = 1;
this._stencil = 0;
this._clearFlags = X.CLEAR_COLOR | X.CLEAR_DEPTH;
this._cullingMask = 1;
this._stages = [];
this._framebuffer = null;
this._near = .01;
this._far = 1e3;
this._fov = Math.PI / 4;
this._rect = {
x: 0,
y: 0,
w: 1,
h: 1
};
this._orthoHeight = 10;
}, te = {
cullingMask: {
configurable: !0
}
};
te.cullingMask.get = function() {
return this._cullingMask;
};
te.cullingMask.set = function(t) {
this._cullingMask = t;
};
$t.prototype.getNode = function() {
return this._node;
};
$t.prototype.setNode = function(t) {
this._node = t;
};
$t.prototype.getType = function() {
return this._projection;
};
$t.prototype.setType = function(t) {
this._projection = t;
};
$t.prototype.getOrthoHeight = function() {
return this._orthoHeight;
};
$t.prototype.setOrthoHeight = function(t) {
this._orthoHeight = t;
};
$t.prototype.getFov = function() {
return this._fov;
};
$t.prototype.setFov = function(t) {
this._fov = t;
};
$t.prototype.getNear = function() {
return this._near;
};
$t.prototype.setNear = function(t) {
this._near = t;
};
$t.prototype.getFar = function() {
return this._far;
};
$t.prototype.setFar = function(t) {
this._far = t;
};
$t.prototype.getColor = function(t) {
return W.copy(t, this._color);
};
$t.prototype.setColor = function(t, e, i, n) {
W.set(this._color, t, e, i, n);
};
$t.prototype.getDepth = function() {
return this._depth;
};
$t.prototype.setDepth = function(t) {
this._depth = t;
};
$t.prototype.getStencil = function() {
return this._stencil;
};
$t.prototype.setStencil = function(t) {
this._stencil = t;
};
$t.prototype.getClearFlags = function() {
return this._clearFlags;
};
$t.prototype.setClearFlags = function(t) {
this._clearFlags = t;
};
$t.prototype.getRect = function(t) {
t.x = this._rect.x;
t.y = this._rect.y;
t.w = this._rect.w;
t.h = this._rect.h;
return t;
};
$t.prototype.setRect = function(t, e, i, n) {
this._rect.x = t;
this._rect.y = e;
this._rect.w = i;
this._rect.h = n;
};
$t.prototype.getStages = function() {
return this._stages;
};
$t.prototype.setStages = function(t) {
this._stages = t;
};
$t.prototype.getFramebuffer = function() {
return this._framebuffer;
};
$t.prototype.setFramebuffer = function(t) {
this._framebuffer = t;
};
$t.prototype.extractView = function(t, e, i) {
t._rect.x = this._rect.x * e;
t._rect.y = this._rect.y * i;
t._rect.w = this._rect.w * e;
t._rect.h = this._rect.h * i;
t._color = this._color;
t._depth = this._depth;
t._stencil = this._stencil;
t._clearFlags = this._clearFlags;
t._cullingMask = this._cullingMask;
t._stages = this._stages;
t._framebuffer = this._framebuffer;
this._node.getWorldRT(t._matView);
B.invert(t._matView, t._matView);
var n = e / i;
if (this._projection === X.PROJ_PERSPECTIVE) B.perspective(t._matProj, this._fov, n, this._near, this._far); else {
var r = this._orthoHeight * n, s = this._orthoHeight;
B.ortho(t._matProj, -r, r, -s, s, this._near, this._far);
}
B.mul(t._matViewProj, t._matProj, t._matView);
B.invert(t._matInvViewProj, t._matViewProj);
};
$t.prototype.screenToWorld = function(t, e, i, n) {
var r = i / n, s = this._rect.x * i, a = this._rect.y * n, o = this._rect.w * i, c = this._rect.h * n;
this._node.getWorldRT(qt);
B.invert(qt, qt);
if (this._projection === X.PROJ_PERSPECTIVE) B.perspective(Zt, this._fov, r, this._near, this._far); else {
var h = this._orthoHeight * r, l = this._orthoHeight;
B.ortho(Zt, -h, h, -l, l, this._near, this._far);
}
B.mul(Kt, Zt, qt);
B.invert(Jt, Kt);
if (this._projection === X.PROJ_PERSPECTIVE) {
y.set(t, 2 * (e.x - s) / o - 1, 2 * (e.y - a) / c - 1, 1);
y.transformMat4(t, t, Jt);
this._node.getWorldPos(Qt);
y.lerp(t, Qt, t, e.z / this._far);
} else {
var u = this._farClip - this._nearClip;
y.set(t, 2 * (e.x - s) / o - 1, 2 * (e.y - a) / c - 1, (this._far - e.z) / u * 2 - 1);
y.transformMat4(t, t, Jt);
}
return t;
};
$t.prototype.worldToScreen = function(t, e, i, n) {
var r = i / n, s = this._rect.x * i, a = this._rect.y * n, o = this._rect.w * i, c = this._rect.h * n;
this._node.getWorldRT(qt);
B.invert(qt, qt);
if (this._projection === X.PROJ_PERSPECTIVE) B.perspective(Zt, this._fov, r, this._near, this._far); else {
var h = this._orthoHeight * r, l = this._orthoHeight;
B.ortho(Zt, -h, h, -l, l, this._near, this._far);
}
B.mul(Kt, Zt, qt);
var u = e.x * Kt.m03 + e.y * Kt.m07 + e.z * Kt.m11 + Kt.m15;
y.transformMat4(t, e, Kt);
t.x = s + .5 * (t.x / u + 1) * o;
t.y = a + .5 * (t.y / u + 1) * c;
return t;
};
Object.defineProperties($t.prototype, te);
var ee = function() {
this._poolID = -1;
this._node = null;
this._inputAssemblers = [];
this._effects = [];
this._defines = [];
this._dynamicIA = !1;
this._cullingMask = -1;
}, ie = {
inputAssemblerCount: {
configurable: !0
},
dynamicIA: {
configurable: !0
},
drawItemCount: {
configurable: !0
},
cullingMask: {
configurable: !0
}
};
ie.inputAssemblerCount.get = function() {
return this._inputAssemblers.length;
};
ie.dynamicIA.get = function() {
return this._dynamicIA;
};
ie.drawItemCount.get = function() {
return this._dynamicIA ? 1 : this._inputAssemblers.length;
};
ie.cullingMask.get = function() {
return this._cullingMask;
};
ie.cullingMask.set = function(t) {
this._cullingMask = t;
};
ee.prototype.setNode = function(t) {
this._node = t;
};
ee.prototype.setDynamicIA = function(t) {
this._dynamicIA = t;
};
ee.prototype.addInputAssembler = function(t) {
-1 === this._inputAssemblers.indexOf(t) && this._inputAssemblers.push(t);
};
ee.prototype.clearInputAssemblers = function() {
this._inputAssemblers.length = 0;
};
ee.prototype.addEffect = function(t) {
if (-1 === this._effects.indexOf(t)) {
this._effects.push(t);
var e = Object.create(null);
t.extractDefines(e);
this._defines.push(e);
}
};
ee.prototype.clearEffects = function() {
this._effects.length = 0;
this._defines.length = 0;
};
ee.prototype.extractDrawItem = function(t, e) {
if (this._dynamicIA) {
t.model = this;
t.node = this._node;
t.ia = null;
t.effect = this._effects[0];
t.defines = t.effect.extractDefines(this._defines[0]);
} else if (e >= this._inputAssemblers.length) {
t.model = null;
t.node = null;
t.ia = null;
t.effect = null;
t.defines = null;
} else {
t.model = this;
t.node = this._node;
t.ia = this._inputAssemblers[e];
var i, n;
if (e < this._effects.length) {
i = this._effects[e];
n = this._defines[e];
} else {
i = this._effects[this._effects.length - 1];
n = this._defines[this._effects.length - 1];
}
t.effect = i;
t.defines = i.extractDefines(n);
}
};
Object.defineProperties(ee.prototype, ie);
var ne = 32, re = [ 1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9 ];
function se(t) {
return t < 1e5 ? t < 100 ? t < 10 ? 0 : 1 : t < 1e4 ? t < 1e3 ? 2 : 3 : 4 : t < 1e7 ? t < 1e6 ? 5 : 6 : t < 1e9 ? t < 1e8 ? 7 : 8 : 9;
}
function ae(t, e) {
if (t === e) return 0;
if (~~t === t && ~~e === e) {
if (0 === t || 0 === e) return t < e ? -1 : 1;
if (t < 0 || e < 0) {
if (e >= 0) return -1;
if (t >= 0) return 1;
t = -t;
e = -e;
}
var i = se(t), n = se(e), r = 0;
if (i < n) {
t *= re[n - i - 1];
e /= 10;
r = -1;
} else if (i > n) {
e *= re[i - n - 1];
t /= 10;
r = 1;
}
return t === e ? r : t < e ? -1 : 1;
}
var s = String(t), a = String(e);
return s === a ? 0 : s < a ? -1 : 1;
}
function oe(t) {
for (var e = 0; t >= ne; ) {
e |= 1 & t;
t >>= 1;
}
return t + e;
}
function ce(t, e, i, n) {
var r = e + 1;
if (r === i) return 1;
if (n(t[r++], t[e]) < 0) {
for (;r < i && n(t[r], t[r - 1]) < 0; ) r++;
he(t, e, r);
} else for (;r < i && n(t[r], t[r - 1]) >= 0; ) r++;
return r - e;
}
function he(t, e, i) {
i--;
for (;e < i; ) {
var n = t[e];
t[e++] = t[i];
t[i--] = n;
}
}
function le(t, e, i, n, r) {
n === e && n++;
for (;n < i; n++) {
for (var s = t[n], a = e, o = n; a < o; ) {
var c = a + o >>> 1;
r(s, t[c]) < 0 ? o = c : a = c + 1;
}
var h = n - a;
switch (h) {
case 3:
t[a + 3] = t[a + 2];

case 2:
t[a + 2] = t[a + 1];

case 1:
t[a + 1] = t[a];
break;

default:
for (;h > 0; ) {
t[a + h] = t[a + h - 1];
h--;
}
}
t[a] = s;
}
}
function ue(t, e, i, n, r, s) {
var a = 0, o = 0, c = 1;
if (s(t, e[i + r]) > 0) {
o = n - r;
for (;c < o && s(t, e[i + r + c]) > 0; ) {
a = c;
(c = 1 + (c << 1)) <= 0 && (c = o);
}
c > o && (c = o);
a += r;
c += r;
} else {
o = r + 1;
for (;c < o && s(t, e[i + r - c]) <= 0; ) {
a = c;
(c = 1 + (c << 1)) <= 0 && (c = o);
}
c > o && (c = o);
var h = a;
a = r - c;
c = r - h;
}
a++;
for (;a < c; ) {
var l = a + (c - a >>> 1);
s(t, e[i + l]) > 0 ? a = l + 1 : c = l;
}
return c;
}
function fe(t, e, i, n, r, s) {
var a = 0, o = 0, c = 1;
if (s(t, e[i + r]) < 0) {
o = r + 1;
for (;c < o && s(t, e[i + r - c]) < 0; ) {
a = c;
(c = 1 + (c << 1)) <= 0 && (c = o);
}
c > o && (c = o);
var h = a;
a = r - c;
c = r - h;
} else {
o = n - r;
for (;c < o && s(t, e[i + r + c]) >= 0; ) {
a = c;
(c = 1 + (c << 1)) <= 0 && (c = o);
}
c > o && (c = o);
a += r;
c += r;
}
a++;
for (;a < c; ) {
var l = a + (c - a >>> 1);
s(t, e[i + l]) < 0 ? c = l : a = l + 1;
}
return c;
}
var _e = function(t, e) {
this.array = t;
this.compare = e;
this.minGallop = 7;
this.length = t.length;
this.tmpStorageLength = 256;
this.length < 512 && (this.tmpStorageLength = this.length >>> 1);
this.tmp = new Array(this.tmpStorageLength);
this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
this.runStart = new Array(this.stackLength);
this.runLength = new Array(this.stackLength);
this.stackSize = 0;
};
_e.prototype.pushRun = function(t, e) {
this.runStart[this.stackSize] = t;
this.runLength[this.stackSize] = e;
this.stackSize += 1;
};
_e.prototype.mergeRuns = function() {
for (;this.stackSize > 1; ) {
var t = this.stackSize - 2;
if (t >= 1 && this.runLength[t - 1] <= this.runLength[t] + this.runLength[t + 1] || t >= 2 && this.runLength[t - 2] <= this.runLength[t] + this.runLength[t - 1]) this.runLength[t - 1] < this.runLength[t + 1] && t--; else if (this.runLength[t] > this.runLength[t + 1]) break;
this.mergeAt(t);
}
};
_e.prototype.forceMergeRuns = function() {
for (;this.stackSize > 1; ) {
var t = this.stackSize - 2;
t > 0 && this.runLength[t - 1] < this.runLength[t + 1] && t--;
this.mergeAt(t);
}
};
_e.prototype.mergeAt = function(t) {
var e = this.compare, i = this.array, n = this.runStart[t], r = this.runLength[t], s = this.runStart[t + 1], a = this.runLength[t + 1];
this.runLength[t] = r + a;
if (t === this.stackSize - 3) {
this.runStart[t + 1] = this.runStart[t + 2];
this.runLength[t + 1] = this.runLength[t + 2];
}
this.stackSize--;
var o = fe(i[s], i, n, r, 0, e);
n += o;
0 !== (r -= o) && 0 !== (a = ue(i[n + r - 1], i, s, a, a - 1, e)) && (r <= a ? this.mergeLow(n, r, s, a) : this.mergeHigh(n, r, s, a));
};
_e.prototype.mergeLow = function(t, e, i, n) {
var r = this.compare, s = this.array, a = this.tmp, o = 0;
for (o = 0; o < e; o++) a[o] = s[t + o];
var c = 0, h = i, l = t;
s[l++] = s[h++];
if (0 != --n) if (1 !== e) {
for (var u = this.minGallop; ;) {
var f = 0, _ = 0, d = !1;
do {
if (r(s[h], a[c]) < 0) {
s[l++] = s[h++];
_++;
f = 0;
if (0 == --n) {
d = !0;
break;
}
} else {
s[l++] = a[c++];
f++;
_ = 0;
if (1 == --e) {
d = !0;
break;
}
}
} while ((f | _) < u);
if (d) break;
do {
if (0 !== (f = fe(s[h], a, c, e, 0, r))) {
for (o = 0; o < f; o++) s[l + o] = a[c + o];
l += f;
c += f;
if ((e -= f) <= 1) {
d = !0;
break;
}
}
s[l++] = s[h++];
if (0 == --n) {
d = !0;
break;
}
if (0 !== (_ = ue(a[c], s, h, n, 0, r))) {
for (o = 0; o < _; o++) s[l + o] = s[h + o];
l += _;
h += _;
if (0 === (n -= _)) {
d = !0;
break;
}
}
s[l++] = a[c++];
if (1 == --e) {
d = !0;
break;
}
u--;
} while (f >= 7 || _ >= 7);
if (d) break;
u < 0 && (u = 0);
u += 2;
}
this.minGallop = u;
u < 1 && (this.minGallop = 1);
if (1 === e) {
for (o = 0; o < n; o++) s[l + o] = s[h + o];
s[l + n] = a[c];
} else {
if (0 === e) throw new Error("mergeLow preconditions were not respected");
for (o = 0; o < e; o++) s[l + o] = a[c + o];
}
} else {
for (o = 0; o < n; o++) s[l + o] = s[h + o];
s[l + n] = a[c];
} else for (o = 0; o < e; o++) s[l + o] = a[c + o];
};
_e.prototype.mergeHigh = function(t, e, i, n) {
var r = this.compare, s = this.array, a = this.tmp, o = 0;
for (o = 0; o < n; o++) a[o] = s[i + o];
var c = t + e - 1, h = n - 1, l = i + n - 1, u = 0, f = 0;
s[l--] = s[c--];
if (0 != --e) if (1 !== n) {
for (var _ = this.minGallop; ;) {
var d = 0, p = 0, m = !1;
do {
if (r(a[h], s[c]) < 0) {
s[l--] = s[c--];
d++;
p = 0;
if (0 == --e) {
m = !0;
break;
}
} else {
s[l--] = a[h--];
p++;
d = 0;
if (1 == --n) {
m = !0;
break;
}
}
} while ((d | p) < _);
if (m) break;
do {
if (0 !== (d = e - fe(a[h], s, t, e, e - 1, r))) {
e -= d;
f = (l -= d) + 1;
u = (c -= d) + 1;
for (o = d - 1; o >= 0; o--) s[f + o] = s[u + o];
if (0 === e) {
m = !0;
break;
}
}
s[l--] = a[h--];
if (1 == --n) {
m = !0;
break;
}
if (0 !== (p = n - ue(s[c], a, 0, n, n - 1, r))) {
n -= p;
f = (l -= p) + 1;
u = (h -= p) + 1;
for (o = 0; o < p; o++) s[f + o] = a[u + o];
if (n <= 1) {
m = !0;
break;
}
}
s[l--] = s[c--];
if (0 == --e) {
m = !0;
break;
}
_--;
} while (d >= 7 || p >= 7);
if (m) break;
_ < 0 && (_ = 0);
_ += 2;
}
this.minGallop = _;
_ < 1 && (this.minGallop = 1);
if (1 === n) {
f = (l -= e) + 1;
u = (c -= e) + 1;
for (o = e - 1; o >= 0; o--) s[f + o] = s[u + o];
s[l] = a[h];
} else {
if (0 === n) throw new Error("mergeHigh preconditions were not respected");
u = l - (n - 1);
for (o = 0; o < n; o++) s[u + o] = a[o];
}
} else {
f = (l -= e) + 1;
u = (c -= e) + 1;
for (o = e - 1; o >= 0; o--) s[f + o] = s[u + o];
s[l] = a[h];
} else {
u = l - (n - 1);
for (o = 0; o < n; o++) s[u + o] = a[o];
}
};
function de(t, e, i, n) {
if (!Array.isArray(t)) throw new TypeError("Can only sort arrays");
void 0 === e && (e = 0);
void 0 === i && (i = t.length);
void 0 === n && (n = ae);
var r = i - e;
if (!(r < 2)) {
var s = 0;
if (r < ne) le(t, e, i, e + (s = ce(t, e, i, n)), n); else {
var a = new _e(t, n), o = oe(r);
do {
if ((s = ce(t, e, i, n)) < o) {
var c = r;
c > o && (c = o);
le(t, e, e + c, e + s, n);
s = c;
}
a.pushRun(e, s);
a.mergeRuns();
r -= s;
e += s;
} while (0 !== r);
a.forceMergeRuns();
}
}
}
var pe = function(t) {
this._count = 0;
this._data = new Array(t);
}, me = {
length: {
configurable: !0
},
data: {
configurable: !0
}
};
pe.prototype._resize = function(t) {
if (t > this._data.length) for (var e = this._data.length; e < t; ++e) this._data[e] = void 0;
};
me.length.get = function() {
return this._count;
};
me.data.get = function() {
return this._data;
};
pe.prototype.reset = function() {
for (var t = 0; t < this._count; ++t) this._data[t] = void 0;
this._count = 0;
};
pe.prototype.push = function(t) {
this._count >= this._data.length && this._resize(2 * this._data.length);
this._data[this._count] = t;
++this._count;
};
pe.prototype.pop = function() {
--this._count;
this._count < 0 && (this._count = 0);
var t = this._data[this._count];
this._data[this._count] = void 0;
return t;
};
pe.prototype.fastRemove = function(t) {
if (!(t >= this._count)) {
var e = this._count - 1;
this._data[t] = this._data[e];
this._data[e] = void 0;
this._count -= 1;
}
};
pe.prototype.indexOf = function(t) {
var e = this._data.indexOf(t);
return e >= this._count ? -1 : e;
};
pe.prototype.sort = function(t) {
return de(this._data, 0, this._count, t);
};
Object.defineProperties(pe.prototype, me);
var ge = function(t, e) {
this._fn = t;
this._idx = e - 1;
this._frees = new Array(e);
for (var i = 0; i < e; ++i) this._frees[i] = t();
};
ge.prototype._expand = function(t) {
var e = this._frees;
this._frees = new Array(t);
for (var i = t - e.length, n = 0; n < i; ++n) this._frees[n] = this._fn();
for (var r = i, s = 0; r < t; ++r, ++s) this._frees[r] = e[s];
this._idx += i;
};
ge.prototype.alloc = function() {
this._idx < 0 && this._expand(Math.round(1.2 * this._frees.length) + 1);
var t = this._frees[this._idx];
this._frees[this._idx] = null;
--this._idx;
return t;
};
ge.prototype.free = function(t) {
++this._idx;
this._frees[this._idx] = t;
};
var ve = function(t, e) {
this._fn = t;
this._count = 0;
this._head = null;
this._tail = null;
this._pool = new ge(t, e);
}, ye = {
head: {
configurable: !0
},
tail: {
configurable: !0
},
length: {
configurable: !0
}
};
ye.head.get = function() {
return this._head;
};
ye.tail.get = function() {
return this._tail;
};
ye.length.get = function() {
return this._count;
};
ve.prototype.add = function() {
var t = this._pool.alloc();
if (this._tail) {
this._tail._next = t;
t._prev = this._tail;
} else this._head = t;
this._tail = t;
this._count += 1;
return t;
};
ve.prototype.remove = function(t) {
t._prev ? t._prev._next = t._next : this._head = t._next;
t._next ? t._next._prev = t._prev : this._tail = t._prev;
t._next = null;
t._prev = null;
this._pool.free(t);
this._count -= 1;
};
ve.prototype.forEach = function(t, e) {
var i = this._head;
if (i) {
e && (t = t.bind(e));
for (var n = 0, r = i; i; ) {
r = i._next;
t(i, n, this);
i = r;
++n;
}
}
};
Object.defineProperties(ve.prototype, ye);
var Te = function(t, e) {
this._fn = t;
this._count = 0;
this._data = new Array(e);
for (var i = 0; i < e; ++i) this._data[i] = t();
}, xe = {
length: {
configurable: !0
},
data: {
configurable: !0
}
};
xe.length.get = function() {
return this._count;
};
xe.data.get = function() {
return this._data;
};
Te.prototype.reset = function() {
this._count = 0;
};
Te.prototype.resize = function(t) {
if (t > this._data.length) for (var e = this._data.length; e < t; ++e) this._data[e] = this._fn();
};
Te.prototype.add = function() {
this._count >= this._data.length && this.resize(2 * this._data.length);
return this._data[this._count++];
};
Te.prototype.remove = function(t) {
if (!(t >= this._count)) {
var e = this._count - 1, i = this._data[t];
this._data[t] = this._data[e];
this._data[e] = i;
this._count -= 1;
}
};
Te.prototype.sort = function(t) {
return de(this._data, 0, this._count, t);
};
Object.defineProperties(Te.prototype, xe);
for (var Ee = Array(8), Ce = 0; Ce < 8; ++Ce) Ee[Ce] = [];
var Ae = function() {
this._lights = new pe(16);
this._models = new pe(16);
this._cameras = new pe(16);
this._debugCamera = null;
this._views = [];
};
Ae.prototype._add = function(t, e) {
if (-1 === e._poolID) {
t.push(e);
e._poolID = t.length - 1;
}
};
Ae.prototype._remove = function(t, e) {
if (-1 !== e._poolID) {
t.data[t.length - 1]._poolID = e._poolID;
t.fastRemove(e._poolID);
e._poolID = -1;
}
};
Ae.prototype.reset = function() {
for (var t = 0; t < this._models.length; ++t) {
this._models.data[t]._cullingMask = -1;
}
};
Ae.prototype.setDebugCamera = function(t) {
this._debugCamera = t;
};
Ae.prototype.getCameraCount = function() {
return this._cameras.length;
};
Ae.prototype.getCamera = function(t) {
return this._cameras.data[t];
};
Ae.prototype.addCamera = function(t) {
this._add(this._cameras, t);
};
Ae.prototype.removeCamera = function(t) {
this._remove(this._cameras, t);
};
Ae.prototype.getModelCount = function() {
return this._models.length;
};
Ae.prototype.getModel = function(t) {
return this._models.data[t];
};
Ae.prototype.addModel = function(t) {
this._add(this._models, t);
};
Ae.prototype.removeModel = function(t) {
this._remove(this._models, t);
};
Ae.prototype.getLightCount = function() {
return this._lights.length;
};
Ae.prototype.getLight = function(t) {
return this._lights.data[t];
};
Ae.prototype.addLight = function(t) {
this._add(this._lights, t);
};
Ae.prototype.removeLight = function(t) {
this._remove(this._lights, t);
};
Ae.prototype.addView = function(t) {
-1 === this._views.indexOf(t) && this._views.push(t);
};
Ae.prototype.removeView = function(t) {
var e = this._views.indexOf(t);
-1 !== e && this._views.splice(e, 1);
};
var be = 0;
function Se(t) {
var e = [];
for (var i in t) !0 === t[i] && e.push("#define " + i);
return e.join("\n");
}
function we(t, e) {
var i = {}, n = t;
for (var r in e) Number.isInteger(e[r]) && (i[r] = e[r]);
for (var s in i) {
var a = new RegExp(s, "g");
n = n.replace(a, i[s]);
}
return n;
}
function De(t) {
return t.replace(/#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g, (function(t, e, i, n, r) {
var s = "", a = parseInt(i), o = parseInt(n);
(a.isNaN || o.isNaN) && console.error("Unroll For Loops Error: begin and end of range must be an int num.");
for (var c = a; c < o; ++c) s += r.replace(new RegExp("{" + e + "}", "g"), c);
return s;
}));
}
var Ie = function(t, e, i) {
void 0 === e && (e = []);
void 0 === i && (i = {});
this._device = t;
this._precision = "precision highp float;\n";
this._templates = {};
for (var n = 0; n < e.length; ++n) {
var r = e[n];
this.define(r.name, r.vert, r.frag, r.defines);
}
this._chunks = {};
Object.assign(this._chunks, i);
this._cache = {};
};
Ie.prototype.define = function(t, e, i, n) {
if (this._templates[t]) console.warn("Failed to define shader " + t + ": already exists."); else {
for (var r = ++be, s = 0, a = function(t) {
var e = n[t];
e._offset = s;
var i = 1;
if (void 0 !== e.min && void 0 !== e.max) {
i = Math.ceil(.5 * (e.max - e.min));
e._map = function(t) {
return t - this._min << e._offset;
}.bind(e);
} else e._map = function(t) {
return t ? 1 << e._offset : 0;
}.bind(e);
s += i;
e._offset = s;
}, o = 0; o < n.length; ++o) a(o);
e = this._precision + e;
i = this._precision + i;
this._templates[t] = {
id: r,
name: t,
vert: e,
frag: i,
defines: n
};
}
};
Ie.prototype.getKey = function(t, e) {
for (var i = this._templates[t], n = 0, r = 0; r < i.defines.length; ++r) {
var s = i.defines[r], a = e[s.name];
void 0 !== a && (n |= s._map(a));
}
return n << 8 | i.id;
};
Ie.prototype.getProgram = function(t, e) {
var i = this.getKey(t, e), n = this._cache[i];
if (n) return n;
var r = this._templates[t], s = Se(e) + "\n", a = we(r.vert, e);
a = s + De(a);
var o = we(r.frag, e);
o = s + De(o);
(n = new wt.Program(this._device, {
vert: a,
frag: o
})).link();
this._cache[i] = n;
return n;
};
var Re = b.create(), Me = B.create(), Le = new Te(function() {
return {
stage: null,
items: null
};
}, 8), Oe = new Te(function() {
return new Float32Array(2);
}, 8), Pe = new Te(function() {
return new Float32Array(3);
}, 8), Fe = new Te(function() {
return new Float32Array(4);
}, 8), Ne = new Te(function() {
return new Float32Array(9);
}, 8), Be = new Te(function() {
return new Float32Array(16);
}, 8), ke = new Te(function() {
return new Float32Array(64);
}, 8), ze = new Te(function() {
return new Int32Array(2);
}, 8), Ue = new Te(function() {
return new Int32Array(3);
}, 8), He = new Te(function() {
return new Int32Array(4);
}, 8), Ve = new Te(function() {
return new Int32Array(64);
}, 8), We = {};
We[X.PARAM_INT] = function(t) {
return t;
};
We[X.PARAM_INT2] = function(t) {
return m.array(ze.add(), t);
};
We[X.PARAM_INT3] = function(t) {
return y.array(Ue.add(), t);
};
We[X.PARAM_INT4] = function(t) {
return E.array(He.add(), t);
};
We[X.PARAM_FLOAT] = function(t) {
return t;
};
We[X.PARAM_FLOAT2] = function(t) {
return m.array(Oe.add(), t);
};
We[X.PARAM_FLOAT3] = function(t) {
return y.array(Pe.add(), t);
};
We[X.PARAM_FLOAT4] = function(t) {
return E.array(Fe.add(), t);
};
We[X.PARAM_COLOR3] = function(t) {
return U.array(Pe.add(), t);
};
We[X.PARAM_COLOR4] = function(t) {
return W.array(Fe.add(), t);
};
We[X.PARAM_MAT2] = function(t) {
return M.array(Fe.add(), t);
};
We[X.PARAM_MAT3] = function(t) {
return b.array(Ne.add(), t);
};
We[X.PARAM_MAT4] = function(t) {
return B.array(Be.add(), t);
};
var Ge = {};
Ge[X.PARAM_INT] = {
func: function(t) {
for (var e = Ve.add(), i = 0; i < t.length; ++i) e[i] = t[i];
return e;
},
size: 1
};
Ge[X.PARAM_INT2] = {
func: function(t) {
for (var e = Ve.add(), i = 0; i < t.length; ++i) {
e[2 * i] = t[i].x;
e[2 * i + 1] = t[i].y;
}
return e;
},
size: 2
};
Ge[X.PARAM_INT3] = {
func: void 0,
size: 3
};
Ge[X.PARAM_INT4] = {
func: function(t) {
for (var e = Ve.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.x;
e[4 * i + 1] = n.y;
e[4 * i + 2] = n.z;
e[4 * i + 3] = n.w;
}
return e;
},
size: 4
};
Ge[X.PARAM_FLOAT] = {
func: function(t) {
for (var e = ke.add(), i = 0; i < t.length; ++i) e[i] = t[i];
return e;
},
size: 1
};
Ge[X.PARAM_FLOAT2] = {
func: function(t) {
for (var e = ke.add(), i = 0; i < t.length; ++i) {
e[2 * i] = t[i].x;
e[2 * i + 1] = t[i].y;
}
return e;
},
size: 2
};
Ge[X.PARAM_FLOAT3] = {
func: void 0,
size: 3
};
Ge[X.PARAM_FLOAT4] = {
func: function(t) {
for (var e = ke.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.x;
e[4 * i + 1] = n.y;
e[4 * i + 2] = n.z;
e[4 * i + 3] = n.w;
}
return e;
},
size: 4
};
Ge[X.PARAM_COLOR3] = {
func: void 0,
size: 3
};
Ge[X.PARAM_COLOR4] = {
func: function(t) {
for (var e = ke.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.r;
e[4 * i + 1] = n.g;
e[4 * i + 2] = n.b;
e[4 * i + 3] = n.a;
}
return e;
},
size: 4
};
Ge[X.PARAM_MAT2] = {
func: function(t) {
for (var e = ke.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[4 * i] = n.m00;
e[4 * i + 1] = n.m01;
e[4 * i + 2] = n.m02;
e[4 * i + 3] = n.m03;
}
return e;
},
size: 4
};
Ge[X.PARAM_MAT3] = {
func: void 0,
size: 9
};
Ge[X.PARAM_MAT4] = {
func: function(t) {
for (var e = ke.add(), i = 0; i < t.length; ++i) {
var n = t[i];
e[16 * i] = n.m00;
e[16 * i + 1] = n.m01;
e[16 * i + 2] = n.m02;
e[16 * i + 3] = n.m03;
e[16 * i + 4] = n.m04;
e[16 * i + 5] = n.m05;
e[16 * i + 6] = n.m06;
e[16 * i + 7] = n.m07;
e[16 * i + 8] = n.m08;
e[16 * i + 9] = n.m09;
e[16 * i + 10] = n.m10;
e[16 * i + 11] = n.m11;
e[16 * i + 12] = n.m12;
e[16 * i + 13] = n.m13;
e[16 * i + 14] = n.m14;
e[16 * i + 15] = n.m15;
}
return e;
},
size: 16
};
var je = function(t, e) {
var i;
this._device = t;
this._programLib = new Ie(t, e.programTemplates, e.programChunks);
this._opts = e;
this._type2defaultValue = ((i = {})[X.PARAM_INT] = 0, i[X.PARAM_INT2] = m.new(0, 0), 
i[X.PARAM_INT3] = y.new(0, 0, 0), i[X.PARAM_INT4] = E.new(0, 0, 0, 0), i[X.PARAM_FLOAT] = 0, 
i[X.PARAM_FLOAT2] = m.new(0, 0), i[X.PARAM_FLOAT3] = y.new(0, 0, 0), i[X.PARAM_FLOAT4] = E.new(0, 0, 0, 0), 
i[X.PARAM_COLOR3] = U.new(0, 0, 0), i[X.PARAM_COLOR4] = W.new(0, 0, 0, 1), i[X.PARAM_MAT2] = M.create(), 
i[X.PARAM_MAT3] = b.create(), i[X.PARAM_MAT4] = B.create(), i[X.PARAM_TEXTURE_2D] = e.defaultTexture, 
i[X.PARAM_TEXTURE_CUBE] = e.defaultTextureCube, i);
this._stage2fn = {};
this._usedTextureUnits = 0;
this._viewPools = new Te(function() {
return new zt();
}, 8);
this._drawItemsPools = new Te(function() {
return {
model: null,
node: null,
ia: null,
effect: null,
defines: null
};
}, 100);
this._stageItemsPools = new Te(function() {
return new Te(function() {
return {
model: null,
node: null,
ia: null,
effect: null,
defines: null,
technique: null,
sortKey: -1
};
}, 100);
}, 16);
};
je.prototype._resetTextuerUnit = function() {
this._usedTextureUnits = 0;
};
je.prototype._allocTextuerUnit = function() {
var t = this._device, e = this._usedTextureUnits;
e >= t._caps.maxTextureUnits && console.warn("Trying to use " + e + " texture units while this GPU supports only " + t._caps.maxTextureUnits);
this._usedTextureUnits += 1;
return e;
};
je.prototype._registerStage = function(t, e) {
this._stage2fn[t] = e;
};
je.prototype._reset = function() {
this._viewPools.reset();
this._stageItemsPools.reset();
};
je.prototype._requestView = function() {
return this._viewPools.add();
};
je.prototype._render = function(t, e) {
var i = this._device;
i.setFrameBuffer(t._framebuffer);
i.setViewport(t._rect.x, t._rect.y, t._rect.w, t._rect.h);
var n = {};
t._clearFlags & X.CLEAR_COLOR && (n.color = [ t._color.r, t._color.g, t._color.b, t._color.a ]);
t._clearFlags & X.CLEAR_DEPTH && (n.depth = t._depth);
t._clearFlags & X.CLEAR_STENCIL && (n.stencil = t._stencil);
i.clear(n);
this._drawItemsPools.reset();
for (var r = 0; r < e._models.length; ++r) {
var s = e._models.data[r];
if (0 != (s._cullingMask & t._cullingMask)) for (var a = 0; a < s.drawItemCount; ++a) {
var o = this._drawItemsPools.add();
s.extractDrawItem(o, a);
}
}
Le.reset();
for (var c = 0; c < t._stages.length; ++c) {
var h = t._stages[c], l = this._stageItemsPools.add();
l.reset();
for (var u = 0; u < this._drawItemsPools.length; ++u) {
var f = this._drawItemsPools.data[u], _ = f.effect.getTechnique(h);
if (_) {
var d = l.add();
d.model = f.model;
d.node = f.node;
d.ia = f.ia;
d.effect = f.effect;
d.defines = f.defines;
d.technique = _;
d.sortKey = -1;
}
}
var p = Le.add();
p.stage = h;
p.items = l;
}
for (var m = 0; m < Le.length; ++m) {
var g = Le.data[m];
(0, this._stage2fn[g.stage])(t, g.items);
}
};
je.prototype._draw = function(t) {
var e = this._device, i = this._programLib, n = t.node, r = t.ia, s = t.effect, a = t.technique, o = t.defines;
Oe.reset();
Pe.reset();
Fe.reset();
Ne.reset();
Be.reset();
ke.reset();
ze.reset();
Ue.reset();
He.reset();
Ve.reset();
n.getWorldMatrix(Me);
e.setUniform("model", B.array(Be.add(), Me));
var c = b.invert(Re, b.fromMat4(Re, Me));
if (c) {
b.transpose(Re, c);
e.setUniform("normalMatrix", b.array(Ne.add(), Re));
}
for (var h = 0; h < a._parameters.length; ++h) {
var l = a._parameters[h], u = s.getProperty(l.name);
void 0 === u && (u = l.val);
void 0 === u && (u = this._type2defaultValue[l.type]);
if (void 0 !== u) if (l.type === X.PARAM_TEXTURE_2D || l.type === X.PARAM_TEXTURE_CUBE) if (void 0 !== l.size) {
if (l.size !== u.length) {
console.error("The length of texture array (" + u.length + ") is not corrent(expect " + l.size + ").");
continue;
}
for (var f = Ve.add(), _ = 0; _ < u.length; ++_) f[_] = this._allocTextuerUnit();
e.setTextureArray(l.name, u, f);
} else e.setTexture(l.name, u, this._allocTextuerUnit()); else {
var d = void 0;
if (void 0 !== l.size) {
var p = Ge[l.type];
if (void 0 === p.func) {
console.error("Uniform array of color3/int3/float3/mat3 can not be supportted!");
continue;
}
if (l.size * p.size > 64) {
console.error("Uniform array is too long!");
continue;
}
d = p.func(u);
} else {
d = (0, We[l.type])(u);
}
e.setUniform(l.name, d);
} else console.warn("Failed to set technique property " + l.name + ", value not found.");
}
for (var m = 0; m < a._passes.length; ++m) {
var g = a._passes[m], v = r.getPrimitiveCount();
e.setVertexBuffer(0, r._vertexBuffer);
r._indexBuffer && e.setIndexBuffer(r._indexBuffer);
e.setPrimitiveType(r._primitiveType);
var y = i.getProgram(g._programName, o);
e.setProgram(y);
e.setCullMode(g._cullMode);
if (g._blend) {
e.enableBlend();
e.setBlendFuncSep(g._blendSrc, g._blendDst, g._blendSrcAlpha, g._blendDstAlpha);
e.setBlendEqSep(g._blendEq, g._blendAlphaEq);
e.setBlendColor32(g._blendColor);
}
if (g._depthTest) {
e.enableDepthTest();
e.setDepthFunc(g._depthFunc);
}
g._depthWrite && e.enableDepthWrite();
if (g._stencilTest) {
e.enableStencilTest();
e.setStencilFuncFront(g._stencilFuncFront, g._stencilRefFront, g._stencilMaskFront);
e.setStencilOpFront(g._stencilFailOpFront, g._stencilZFailOpFront, g._stencilZPassOpFront, g._stencilWriteMaskFront);
e.setStencilFuncBack(g._stencilFuncBack, g._stencilRefBack, g._stencilMaskBack);
e.setStencilOpBack(g._stencilFailOpBack, g._stencilZFailOpBack, g._stencilZPassOpBack, g._stencilWriteMaskBack);
}
e.draw(r._start, v);
this._resetTextuerUnit();
}
};
var Xe = {
addStage: Lt.addStage,
createIA: function(t, e) {
if (!e.positions) {
console.error("The data must have positions field");
return null;
}
for (var i = [], n = e.positions.length / 3, r = 0; r < n; ++r) {
i.push(e.positions[3 * r], e.positions[3 * r + 1], e.positions[3 * r + 2]);
e.normals && i.push(e.normals[3 * r], e.normals[3 * r + 1], e.normals[3 * r + 2]);
e.uvs && i.push(e.uvs[2 * r], e.uvs[2 * r + 1]);
}
var s = [];
s.push({
name: wt.ATTR_POSITION,
type: wt.ATTR_TYPE_FLOAT32,
num: 3
});
e.normals && s.push({
name: wt.ATTR_NORMAL,
type: wt.ATTR_TYPE_FLOAT32,
num: 3
});
e.uvs && s.push({
name: wt.ATTR_UV0,
type: wt.ATTR_TYPE_FLOAT32,
num: 2
});
var a = new wt.VertexBuffer(t, new wt.VertexFormat(s), wt.USAGE_STATIC, new Float32Array(i), n), o = null;
e.indices && (o = new wt.IndexBuffer(t, wt.INDEX_FMT_UINT16, wt.USAGE_STATIC, new Uint16Array(e.indices), e.indices.length));
return new Dt(a, o);
},
Pass: It,
Technique: Pt,
Effect: Nt,
InputAssembler: Dt,
View: zt,
Light: Xt,
Camera: $t,
Model: ee,
Scene: Ae,
Base: je,
ProgramLib: Ie
};
Object.assign(Xe, X);
var Ye, qe = new Float32Array(16), Ze = new Float32Array(16), Ke = new Float32Array(16), Je = (function(t) {
function e(e, i) {
t.call(this, e, i);
this._registerStage("transparent", this._transparentStage.bind(this));
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.reset = function() {
this._reset();
};
e.prototype.render = function(t) {
this._reset();
t._cameras.sort((function(t, e) {
return t._priority > e._priority ? 1 : t._priority < e._priority ? -1 : 0;
}));
for (var e = 0; e < t._cameras.length; ++e) {
var i = t._cameras.data[e];
i._poolID = e;
this.renderCamera(i, t);
}
};
e.prototype.renderCamera = function(t, e) {
var i = this._device._gl.canvas, n = t.view, r = t.dirty;
if (!n) {
n = this._requestView();
r = !0;
}
if (r) {
var s = i.width, a = i.height;
if (t._framebuffer) {
s = t._framebuffer._width;
a = t._framebuffer._height;
}
t.extractView(n, s, a);
}
this._render(n, e);
};
e.prototype._transparentStage = function(t, e) {
this._device.setUniform("view", B.array(qe, t._matView));
this._device.setUniform("proj", B.array(Ze, t._matProj));
this._device.setUniform("viewProj", B.array(Ke, t._matViewProj));
for (var i = 0; i < e.length; ++i) {
var n = e.data[i];
this._draw(n);
}
};
return e;
})(Xe.Base), Qe = {
chunks: {},
templates: [ {
name: "gray_sprite",
vert: "\n \nuniform mat4 viewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 uv0;\n#ifndef useColor\nattribute lowp vec4 a_color;\nvarying lowp vec4 v_fragmentColor;\n#endif\nvoid main () {\n  vec4 pos = viewProj * vec4(a_position, 1);\n  gl_Position = pos;\n  uv0 = a_uv0;\n #ifndef useColor\n  v_fragmentColor = a_color;\n #endif\n}",
frag: "\n \nuniform sampler2D texture;\nvarying mediump vec2 uv0;\n#ifdef useColor\n  uniform lowp vec4 color;\n#else\n  varying lowp vec4 v_fragmentColor;\n#endif\nvoid main () {\n  #ifdef useColor\n    vec4 o = color;\n  #else\n    vec4 o = v_fragmentColor;\n  #endif\n  vec4 c = o * texture2D(texture, uv0);\n  float gray = 0.2126*c.r + 0.7152*c.g + 0.0722*c.b;\n  gl_FragColor = vec4(gray, gray, gray, c.a);\n}",
defines: [ {
name: "useColor"
} ]
}, {
name: "sprite",
vert: "\n \nuniform mat4 viewProj;\n#ifdef use2DPos\nattribute vec2 a_position;\n#else\nattribute vec3 a_position;\n#endif\nattribute lowp vec4 a_color;\n#ifdef useModel\n  uniform mat4 model;\n#endif\n#ifdef useTexture\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 uv0;\n#endif\n#ifndef useColor\nvarying lowp vec4 v_fragmentColor;\n#endif\nvoid main () {\n  mat4 mvp;\n  #ifdef useModel\n    mvp = viewProj * model;\n  #else\n    mvp = viewProj;\n  #endif\n  #ifdef use2DPos\n  vec4 pos = mvp * vec4(a_position, 0, 1);\n  #else\n  vec4 pos = mvp * vec4(a_position, 1);\n  #endif\n  #ifndef useColor\n  v_fragmentColor = a_color;\n  #endif\n  #ifdef useTexture\n    uv0 = a_uv0;\n  #endif\n  gl_Position = pos;\n}",
frag: "\n \n#ifdef useTexture\n  uniform sampler2D texture;\n  varying mediump vec2 uv0;\n#endif\n#ifdef alphaTest\n  uniform lowp float alphaThreshold;\n#endif\n#ifdef useColor\n  uniform lowp vec4 color;\n#else\n  varying lowp vec4 v_fragmentColor;\n#endif\nvoid main () {\n  #ifdef useColor\n    vec4 o = color;\n  #else\n    vec4 o = v_fragmentColor;\n  #endif\n  #ifdef useTexture\n    o *= texture2D(texture, uv0);\n  #endif\n  #ifdef alphaTest\n    if (o.a <= alphaThreshold)\n      discard;\n  #endif\n  gl_FragColor = o;\n}",
defines: [ {
name: "useTexture"
}, {
name: "useModel"
}, {
name: "alphaTest"
}, {
name: "use2DPos"
}, {
name: "useColor"
} ]
}, {
name: "spine",
vert: "\n \nuniform mat4 viewProj;\n\n#ifdef use2DPos\n  attribute vec2 a_position;\n#else\n  attribute vec3 a_position;\n#endif\n\nattribute lowp vec4 a_color;\n#ifdef useTint\n  attribute lowp vec4 a_color0;\n#endif\n\n#ifdef useModel\n  uniform mat4 model;\n#endif\n\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 uv0;\n\nvarying lowp vec4 v_light;\n#ifdef useTint\n  varying lowp vec4 v_dark;\n#endif\n\nvoid main () {\n  mat4 mvp;\n  #ifdef useModel\n    mvp = viewProj * model;\n  #else\n    mvp = viewProj;\n  #endif\n\n  #ifdef use2DPos\n  vec4 pos = mvp * vec4(a_position, 0, 1);\n  #else\n  vec4 pos = mvp * vec4(a_position, 1);\n  #endif\n\n  v_light = a_color;\n  #ifdef useTint\n    v_dark = a_color0;\n  #endif\n\n  uv0 = a_uv0;\n\n  gl_Position = pos;\n}",
frag: "\n \nuniform sampler2D texture;\nvarying mediump vec2 uv0;\n\n#ifdef alphaTest\n  uniform lowp float alphaThreshold;\n#endif\n\nvarying lowp vec4 v_light;\n#ifdef useTint\n  varying lowp vec4 v_dark;\n#endif\n\nvoid main () {\n  vec4 texColor = texture2D(texture, uv0);\n  vec4 finalColor;\n\n  #ifdef useTint\n    finalColor.a = v_light.a * texColor.a;\n    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    finalColor = texColor * v_light;\n  #endif\n\n  #ifdef alphaTest\n    if (finalColor.a <= alphaThreshold)\n      discard;\n  #endif\n\n  gl_FragColor = finalColor;\n}",
defines: [ {
name: "useModel"
}, {
name: "alphaTest"
}, {
name: "use2DPos"
}, {
name: "useTint"
} ]
} ]
}, $e = function() {
this.material = null;
this.vertexCount = 0;
this.indiceCount = 0;
}, ti = new ge(function() {
return {
x: 0,
y: 0,
u: 0,
v: 0,
color: 0
};
}, 128), ei = (function(t) {
function e() {
t.call(this);
this._data = [];
this._indices = [];
this._pivotX = 0;
this._pivotY = 0;
this._width = 0;
this._height = 0;
this.uvDirty = !0;
this.vertDirty = !0;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
type: {
configurable: !0
},
dataLength: {
configurable: !0
}
};
i.type.get = function() {
return e.type;
};
i.dataLength.get = function() {
return this._data.length;
};
i.dataLength.set = function(t) {
var e = this._data;
if (e.length !== t) {
for (var i = t; i < e.length; i++) ti.free(e[i]);
for (var n = e.length; n < t; n++) e[n] = ti.alloc();
e.length = t;
}
};
e.prototype.updateSizeNPivot = function(t, e, i, n) {
if (t !== this._width || e !== this._height || i !== this._pivotX || n !== this._pivotY) {
this._width = t;
this._height = e;
this._pivotX = i;
this._pivotY = n;
this.vertDirty = !0;
}
};
e.alloc = function() {
return Ye.alloc();
};
e.free = function(t) {
if (t instanceof e) {
for (var i = t.length - 1; i > 0; i--) ti.free(t._data[i]);
t._data.length = 0;
t._indices.length = 0;
t.material = null;
t.uvDirty = !0;
t.vertDirty = !0;
t.vertexCount = 0;
t.indiceCount = 0;
Ye.free(t);
}
};
Object.defineProperties(e.prototype, i);
return e;
})($e);
ei.type = "RenderData";
Ye = new ge(function() {
return new ei();
}, 32);
var ii = (function(t) {
function e() {
t.call(this);
this.ia = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
type: {
configurable: !0
}
};
i.type.get = function() {
return e.type;
};
Object.defineProperties(e.prototype, i);
return e;
})($e);
ii.type = "IARenderData";
var ni = function(t) {
void 0 === t && (t = !0);
this._loaded = !1;
this._persist = t;
};
ni.prototype.unload = function() {
this._loaded = !1;
};
ni.prototype.reload = function() {};
var ri = (function(t) {
function e(e) {
void 0 === e && (e = !0);
t.call(this, e);
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
e.prototype.getImpl = function() {
return this._texture;
};
e.prototype.getId = function() {};
e.prototype.destroy = function() {
this._texture && this._texture.destroy();
};
return e;
})(ni);
function si(t, e) {
for (var i, n = t.length, r = e ^ n, s = 0; n >= 4; ) {
i = 1540483477 * (65535 & (i = 255 & t.charCodeAt(s) | (255 & t.charCodeAt(++s)) << 8 | (255 & t.charCodeAt(++s)) << 16 | (255 & t.charCodeAt(++s)) << 24)) + ((1540483477 * (i >>> 16) & 65535) << 16);
r = 1540483477 * (65535 & r) + ((1540483477 * (r >>> 16) & 65535) << 16) ^ (i = 1540483477 * (65535 & (i ^= i >>> 24)) + ((1540483477 * (i >>> 16) & 65535) << 16));
n -= 4;
++s;
}
switch (n) {
case 3:
r ^= (255 & t.charCodeAt(s + 2)) << 16;

case 2:
r ^= (255 & t.charCodeAt(s + 1)) << 8;

case 1:
r = 1540483477 * (65535 & (r ^= 255 & t.charCodeAt(s))) + ((1540483477 * (r >>> 16) & 65535) << 16);
}
r = 1540483477 * (65535 & (r ^= r >>> 13)) + ((1540483477 * (r >>> 16) & 65535) << 16);
return (r ^= r >>> 15) >>> 0;
}
function ai(t) {
for (var e = "", i = 0; i < t.length; i++) e += t[i].name + t[i].value;
return e;
}
function oi(t) {
var e = t._programName + t._cullMode;
t._blend && (e += t._blendEq + t._blendAlphaEq + t._blendSrc + t._blendDst + t._blendSrcAlpha + t._blendDstAlpha + t._blendColor);
t._depthTest && (e += t._depthWrite + t._depthFunc);
t._stencilTest && (e += t._stencilFuncFront + t._stencilRefFront + t._stencilMaskFront + t._stencilFailOpFront + t._stencilZFailOpFront + t._stencilZPassOpFront + t._stencilWriteMaskFront + t._stencilFuncBack + t._stencilRefBack + t._stencilMaskBack + t._stencilFailOpBack + t._stencilZFailOpBack + t._stencilZPassOpBack + t._stencilWriteMaskBack);
return e;
}
function ci(t) {
var e = t._effect, i = "";
if (e) {
var n, r, s, a, o, c;
i += ai(e._defines);
for (n = 0; n < e._techniques.length; n++) {
i += (s = e._techniques[n]).stageIDs;
for (r = 0; r < s.passes.length; r++) i += oi(s.passes[r]);
for (r = 0; r < s._parameters.length; r++) {
c = (a = s._parameters[r]).name;
if (o = e._properties[c]) switch (a.type) {
case Xe.PARAM_INT:
case Xe.PARAM_FLOAT:
i += o + ";";
break;

case Xe.PARAM_INT2:
case Xe.PARAM_FLOAT2:
i += o.x + "," + o.y + ";";
break;

case Xe.PARAM_INT4:
case Xe.PARAM_FLOAT4:
i += o.x + "," + o.y + "," + o.z + "," + o.w + ";";
break;

case Xe.PARAM_COLOR4:
i += o.r + "," + o.g + "," + o.b + "," + o.a + ";";
break;

case Xe.PARAM_MAT2:
i += o.m00 + "," + o.m01 + "," + o.m02 + "," + o.m03 + ";";
break;

case Xe.PARAM_TEXTURE_2D:
case Xe.PARAM_TEXTURE_CUBE:
i += t._texIds[c] + ";";
break;

case Xe.PARAM_INT3:
case Xe.PARAM_FLOAT3:
case Xe.PARAM_COLOR3:
case Xe.PARAM_MAT3:
case Xe.PARAM_MAT4:
i += JSON.stringify(o) + ";";
}
}
}
}
return i ? si(i, 666) : i;
}
var hi = (function(t) {
function e(e) {
void 0 === e && (e = !1);
t.call(this, e);
this._effect = null;
this._texIds = {};
this._hash = "";
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
hash: {
configurable: !0
}
};
i.hash.get = function() {
return this._hash;
};
e.prototype.updateHash = function(t) {
this._hash = t || ci(this);
};
Object.defineProperties(e.prototype, i);
return e;
})(ni), li = (function(t) {
function e() {
t.call(this, !1);
var e = new Xe.Pass("sprite");
e.setDepth(!1, !1);
e.setCullMode(wt.CULL_NONE);
e.setBlend(wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA, wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA);
var i = new Xe.Technique([ "transparent" ], [ {
name: "texture",
type: Xe.PARAM_TEXTURE_2D
}, {
name: "color",
type: Xe.PARAM_COLOR4
} ], [ e ]);
this._color = {
r: 1,
g: 1,
b: 1,
a: 1
};
this._effect = new Xe.Effect([ i ], {
color: this._color
}, [ {
name: "useTexture",
value: !0
}, {
name: "useModel",
value: !1
}, {
name: "alphaTest",
value: !1
}, {
name: "use2DPos",
value: !0
}, {
name: "useColor",
value: !0
} ]);
this._mainTech = i;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
useTexture: {
configurable: !0
},
useModel: {
configurable: !0
},
use2DPos: {
configurable: !0
},
useColor: {
configurable: !0
},
texture: {
configurable: !0
},
color: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.useTexture.get = function() {
return this._effect.getDefine("useTexture");
};
i.useTexture.set = function(t) {
this._effect.define("useTexture", t);
};
i.useModel.get = function() {
return this._effect.getDefine("useModel");
};
i.useModel.set = function(t) {
this._effect.define("useModel", t);
};
i.use2DPos.get = function() {
return this._effect.getDefine("use2DPos");
};
i.use2DPos.set = function(t) {
this._effect.define("use2DPos", t);
};
i.useColor.get = function() {
return this._effect.getDefine("useColor");
};
i.useColor.set = function(t) {
this._effect.define("useColor", t);
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
i.color.get = function() {
return this._color;
};
i.color.set = function(t) {
var e = this._color;
e.r = t.r / 255;
e.g = t.g / 255;
e.b = t.b / 255;
e.a = t.a / 255;
this._effect.setProperty("color", e);
};
e.prototype.clone = function() {
var t = new e();
t._mainTech.copy(this._mainTech);
t.texture = this.texture;
t.useTexture = this.useTexture;
t.useModel = this.useModel;
t.use2DPos = this.use2DPos;
t.useColor = this.useColor;
t.updateHash();
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(hi), ui = (function(t) {
function e() {
t.call(this, !1);
var e = new Xe.Pass("spine");
e.setDepth(!1, !1);
e.setCullMode(wt.CULL_NONE);
e.setBlend(wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA, wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA);
var i = new Xe.Technique([ "transparent" ], [ {
name: "texture",
type: Xe.PARAM_TEXTURE_2D
} ], [ e ]);
this._effect = new Xe.Effect([ i ], {}, [ {
name: "useModel",
value: !0
}, {
name: "alphaTest",
value: !1
}, {
name: "use2DPos",
value: !0
}, {
name: "useTint",
value: !1
} ]);
this._mainTech = i;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
useModel: {
configurable: !0
},
use2DPos: {
configurable: !0
},
useTint: {
configurable: !1
},
texture: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.useModel.get = function() {
return this._effect.getDefine("useModel");
};
i.useModel.set = function(t) {
this._effect.define("useModel", t);
};
i.use2DPos.get = function() {
return this._effect.getDefine("use2DPos");
};
i.use2DPos.set = function(t) {
this._effect.define("use2DPos", t);
};
i.useTint.get = function() {
return this._effect.getDefine("useTint");
};
i.useTint.set = function(t) {
this._effect.define("useTint", t);
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
e.prototype.clone = function() {
var t = new e();
t._mainTech.copy(this._mainTech);
t.texture = this.texture;
t.useModel = this.useModel;
t.use2DPos = this.use2DPos;
t.useTint = this.useTint;
t._hash = this._hash;
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(hi), fi = (function(t) {
function e() {
t.call(this, !1);
var e = new Xe.Pass("gray_sprite");
e.setDepth(!1, !1);
e.setCullMode(wt.CULL_NONE);
e.setBlend(wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA, wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA);
var i = new Xe.Technique([ "transparent" ], [ {
name: "texture",
type: Xe.PARAM_TEXTURE_2D
}, {
name: "color",
type: Xe.PARAM_COLOR4
} ], [ e ]);
this._color = {
r: 1,
g: 1,
b: 1,
a: 1
};
this._effect = new Xe.Effect([ i ], {
color: this._color
}, [ {
name: "useColor",
value: !1
} ]);
this._mainTech = i;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
texture: {
configurable: !0
},
color: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
i.color.get = function() {
return this._color;
};
i.color.set = function(t) {
var e = this._color;
e.r = t.r / 255;
e.g = t.g / 255;
e.b = t.b / 255;
e.a = t.a / 255;
this._effect.setProperty("color", e);
};
e.prototype.clone = function() {
var t = new e();
t._mainTech.copy(this._mainTech);
t.texture = this.texture;
t.color = this.color;
t.updateHash();
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(hi), _i = (function(t) {
function e() {
t.call(this, !1);
this._pass = new Xe.Pass("sprite");
this._pass.setDepth(!1, !1);
this._pass.setCullMode(wt.CULL_NONE);
this._pass.setBlend(wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA, wt.BLEND_FUNC_ADD, wt.BLEND_SRC_ALPHA, wt.BLEND_ONE_MINUS_SRC_ALPHA);
var e = new Xe.Technique([ "transparent" ], [ {
name: "texture",
type: Xe.PARAM_TEXTURE_2D
}, {
name: "alphaThreshold",
type: Xe.PARAM_FLOAT
}, {
name: "color",
type: Xe.PARAM_COLOR4
} ], [ this._pass ]);
this._effect = new Xe.Effect([ e ], {
color: {
r: 1,
g: 1,
b: 1,
a: 1
}
}, [ {
name: "useTexture",
value: !0
}, {
name: "useModel",
value: !1
}, {
name: "alphaTest",
value: !0
}, {
name: "use2DPos",
value: !0
}, {
name: "useColor",
value: !0
} ]);
this._mainTech = e;
this._texture = null;
}
t && (e.__proto__ = t);
e.prototype = Object.create(t && t.prototype);
e.prototype.constructor = e;
var i = {
effect: {
configurable: !0
},
useTexture: {
configurable: !0
},
useModel: {
configurable: !0
},
useColor: {
configurable: !0
},
texture: {
configurable: !0
},
alphaThreshold: {
configurable: !0
}
};
i.effect.get = function() {
return this._effect;
};
i.useTexture.get = function() {
this._effect.getDefine("useTexture");
};
i.useTexture.set = function(t) {
this._effect.define("useTexture", t);
};
i.useModel.get = function() {
this._effect.getDefine("useModel");
};
i.useModel.set = function(t) {
this._effect.define("useModel", t);
};
i.useColor.get = function() {
this._effect.getDefine("useColor");
};
i.useColor.set = function(t) {
this._effect.define("useColor", t);
};
i.texture.get = function() {
return this._texture;
};
i.texture.set = function(t) {
if (this._texture !== t) {
this._texture = t;
this._effect.setProperty("texture", t.getImpl());
this._texIds.texture = t.getId();
}
};
i.alphaThreshold.get = function() {
return this._effect.getProperty("alphaThreshold");
};
i.alphaThreshold.set = function(t) {
this._effect.setProperty("alphaThreshold", t);
};
e.prototype.clone = function() {
var t = new e();
t._mainTech.copy(this._mainTech);
t.useTexture = this.useTexture;
t.useModel = this.useModel;
t.useColor = this.useColor;
t.texture = this.texture;
t.alphaThreshold = this.alphaThreshold;
t.updateHash();
return t;
};
Object.defineProperties(e.prototype, i);
return e;
})(hi), di = function(t) {
var e;
try {
e = t.getContext("2d");
} catch (t) {
console.error(t);
return;
}
this._canvas = t;
this._ctx = e;
this._caps = {};
this._stats = {
drawcalls: 0
};
this._vx = this._vy = this._vw = this._vh = 0;
this._sx = this._sy = this._sw = this._sh = 0;
};
di.prototype._restoreTexture = function(t) {};
di.prototype.setViewport = function(t, e, i, n) {
if (this._vx !== t || this._vy !== e || this._vw !== i || this._vh !== n) {
this._vx = t;
this._vy = e;
this._vw = i;
this._vh = n;
}
};
di.prototype.setScissor = function(t, e, i, n) {
if (this._sx !== t || this._sy !== e || this._sw !== i || this._sh !== n) {
this._sx = t;
this._sy = e;
this._sw = i;
this._sh = n;
}
};
di.prototype.clear = function(t) {
var e = this._ctx;
e.clearRect(this._vx, this._vy, this._vw, this._vh);
if (t && (0 !== t[0] || 0 !== t[1] || 0 !== t[2])) {
e.fillStyle = "rgb(" + t[0] + "," + t[1] + "," + t[2] + ")";
e.globalAlpha = t[3];
e.fillRect(this._vx, this._vy, this._vw, this._vh);
}
};
var pi = function(t, e) {
this._device = t;
this._width = 4;
this._height = 4;
this._image = null;
if (e) {
void 0 !== e.width && (this._width = e.width);
void 0 !== e.height && (this._height = e.height);
this.updateImage(e);
}
};
pi.prototype.update = function(t) {
this.updateImage(t);
};
pi.prototype.updateImage = function(t) {
if (t.images && t.images[0]) {
var e = t.images[0];
e && e !== this._image && (this._image = e);
}
};
pi.prototype.destroy = function() {
this._image = null;
};
var mi = {
Device: di,
Texture2D: pi
}, gi = Xe.Scene, vi = Xe.Camera, yi = Xe.View, Ti = wt.Texture2D, xi = wt.Device, Ei = Xe.Model, Ci = Xe.InputAssembler;
Xe.addStage("transparent");
var Ai = {
Device: xi,
ForwardRenderer: Je,
Texture2D: Ti,
canvas: mi,
Scene: gi,
Camera: vi,
View: yi,
Model: Ei,
RenderData: ei,
IARenderData: ii,
InputAssembler: Ci,
Asset: ni,
TextureAsset: ri,
Material: hi,
SpineMaterial: ui,
SpriteMaterial: li,
GraySpriteMaterial: fi,
StencilMaterial: _i,
shaders: Qe,
RecyclePool: Te,
Pool: ge,
math: j,
renderer: Xe,
gfx: wt
};
e.exports = Ai;
}), {} ],
177: [ (function(t, e, i) {
var n = 0, r = 1, s = 2, a = r | s, o = 4, c = 8, h = 16, l = 32, u = 64, f = 128, _ = 256, d = 512, p = 1024, m = void 0, g = 0, v = t("../event-manager/CCEventManager");
function y() {
this._func = S;
this._next = null;
}
var T = y.prototype;
T._doNothing = function() {};
T._localTransform = function(t) {
t._updateLocalMatrix();
t._renderFlag &= ~r;
this._next._func(t);
};
function x(t, e, i) {
var n = e.m00, r = e.m01, s = e.m04, a = e.m05, o = e.m12, c = e.m13, h = i.m00, l = i.m01, u = i.m04, f = i.m05, _ = i.m12, d = i.m13;
if (0 !== l || 0 !== u) {
t.m00 = n * h + r * u;
t.m01 = n * l + r * f;
t.m04 = s * h + a * u;
t.m05 = s * l + a * f;
t.m12 = h * o + u * c + _;
t.m13 = l * o + f * c + d;
} else {
t.m00 = n * h;
t.m01 = r * f;
t.m04 = s * h;
t.m05 = a * f;
t.m12 = h * o + _;
t.m13 = f * c + d;
}
}
T._worldTransform = function(t) {
m.worldMatDirty++;
var e = t._matrix, i = t._position;
e.m12 = i.x;
e.m13 = i.y;
x(t._worldMatrix, e, t._parent._worldMatrix);
t._renderFlag &= ~s;
this._next._func(t);
m.worldMatDirty--;
};
T._color = function(t) {
var e = t._renderComponent;
e ? e._updateColor() : t._renderFlag &= ~h;
this._next._func(t);
};
T._opacity = function(t) {
m.parentOpacityDirty++;
t._renderFlag &= ~c;
this._next._func(t);
m.parentOpacityDirty--;
};
T._updateRenderData = function(t) {
var e = t._renderComponent;
e._assembler.updateRenderData(e);
t._renderFlag &= ~o;
this._next._func(t);
};
T._render = function(t) {
var e = t._renderComponent;
m._commitComp(e, e._assembler, t._cullingMask);
this._next._func(t);
};
T._customIARender = function(t) {
var e = t._renderComponent;
m._commitIA(e, e._assembler, t._cullingMask);
this._next._func(t);
};
T._children = function(t) {
for (var e = m, i = e.parentOpacity, n = e.parentOpacity *= t._opacity / 255, r = (e.worldMatDirty ? s : 0) | (e.parentOpacityDirty ? h : 0), a = t._children, o = 0, c = a.length; o < c; o++) {
var l = a[o];
v._updateRenderOrder(l, ++g);
l._renderFlag |= r;
if (l._activeInHierarchy && 0 !== l._opacity) {
var u = l._color._val;
l._color._fastSetA(l._opacity * n);
C[l._renderFlag]._func(l);
l._color._val = u;
}
}
e.parentOpacity = i;
this._next._func(t);
};
T._postUpdateRenderData = function(t) {
var e = t._renderComponent;
e._postAssembler && e._postAssembler.updateRenderData(e);
t._renderFlag &= ~_;
this._next._func(t);
};
T._postRender = function(t) {
var e = t._renderComponent;
m._commitComp(e, e._postAssembler, t._cullingMask);
this._next._func(t);
};
var E = new y();
E._func = E._doNothing;
E._next = E;
var C = {};
function A(t, e) {
var i = new y();
i._next = e || E;
switch (t) {
case n:
i._func = i._doNothing;
break;

case r:
i._func = i._localTransform;
break;

case s:
i._func = i._worldTransform;
break;

case h:
i._func = i._color;
break;

case c:
i._func = i._opacity;
break;

case o:
i._func = i._updateRenderData;
break;

case l:
i._func = i._render;
break;

case u:
i._func = i._customIARender;
break;

case f:
i._func = i._children;
break;

case _:
i._func = i._postUpdateRenderData;
break;

case d:
i._func = i._postRender;
}
return i;
}
function b(t) {
for (var e = null, i = p; i > 0; ) {
i & t && (e = A(i, e));
i >>= 1;
}
return e;
}
function S(t) {
var e = t._renderFlag;
(C[e] = b(e))._func(t);
}
y.flows = C;
y.createFlow = A;
y.visit = function(t) {
m.reset();
m.walking = !0;
1 << t.groupIndex;
g = 0;
if (t._renderFlag & s) {
m.worldMatDirty++;
t._calculWorldMatrix();
t._renderFlag &= ~s;
C[t._renderFlag]._func(t);
m.worldMatDirty--;
} else C[t._renderFlag]._func(t);
m.terminate();
};
y.init = function(t) {
m = t;
C[0] = E;
for (var e = 1; e < p; e++) C[e] = new y();
};
y.FLAG_DONOTHING = n;
y.FLAG_LOCAL_TRANSFORM = r;
y.FLAG_WORLD_TRANSFORM = s;
y.FLAG_TRANSFORM = a;
y.FLAG_COLOR = h;
y.FLAG_OPACITY = c;
y.FLAG_UPDATE_RENDER_DATA = o;
y.FLAG_RENDER = l;
y.FLAG_CUSTOM_IA_RENDER = u;
y.FLAG_CHILDREN = f;
y.FLAG_POST_UPDATE_RENDER_DATA = _;
y.FLAG_POST_RENDER = d;
y.FLAG_FINAL = p;
e.exports = cc.RenderFlow = y;
}), {
"../event-manager/CCEventManager": 98
} ],
178: [ (function(t, e, i) {
var n = t("../../../assets/CCRenderTexture"), r = 2;
function s(t, e) {
var i = new n();
i.initWithSize(t, e);
i.update();
this._texture = i;
this._x = r;
this._y = r;
this._nexty = r;
this._width = t;
this._height = e;
this._innerTextureInfos = {};
this._innerSpriteFrames = [];
}
s.DEFAULT_HASH = new n()._getHash();
cc.js.mixin(s.prototype, {
insertSpriteFrame: function(t) {
var e = t._rect, i = t._texture, n = this._innerTextureInfos[i._id], s = e.x, a = e.y;
if (n) {
s += n.x;
a += n.y;
} else {
var o = i.width, c = i.height;
if (this._x + o + r > this._width) {
this._x = r;
this._y = this._nexty;
}
this._y + c > this._nexty && (this._nexty = this._y + c + r);
if (this._nexty > this._height) return null;
this._texture.drawTextureAt(i, this._x - 1, this._y);
this._texture.drawTextureAt(i, this._x + 1, this._y);
this._texture.drawTextureAt(i, this._x, this._y - 1);
this._texture.drawTextureAt(i, this._x, this._y + 1);
this._texture.drawTextureAt(i, this._x, this._y);
this._innerTextureInfos[i._id] = {
x: this._x,
y: this._y,
texture: i
};
s += this._x;
a += this._y;
this._x += o + r;
this._dirty = !0;
}
var h = {
x: s,
y: a,
texture: this._texture
};
this._innerSpriteFrames.push(t);
return h;
},
update: function() {
if (this._dirty) {
this._texture.update();
this._dirty = !1;
}
},
reset: function() {
this._x = r;
this._y = r;
this._nexty = r;
for (var t = this._innerSpriteFrames, e = 0, i = t.length; e < i; e++) {
var n = t[e];
n.isValid && n._resetDynamicAtlasFrame();
}
this._innerSpriteFrames.length = 0;
this._innerTextureInfos = {};
},
destroy: function() {
this.reset();
this._texture.destroy();
}
});
e.exports = s;
}), {
"../../../assets/CCRenderTexture": 42
} ],
179: [ (function(t, e, i) {
var n = t("./atlas"), r = [], s = -1, a = 5, o = 2048, c = 512;
function h() {
var t = r[++s];
if (!t) {
t = new n(o, o);
r.push(t);
}
return t;
}
function l() {
f.reset();
}
var u = !1, f = {
get enabled() {
return u;
},
set enabled(t) {
if (u !== t) {
if (t) {
this.reset();
cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, l);
} else cc.director.off(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, l);
u = t;
}
},
get maxAtlasCount() {
return a;
},
set maxAtlasCount(t) {
a = t;
},
get textureSize() {
return o;
},
set textureSize(t) {
o = t;
},
get maxFrameSize() {
return c;
},
set maxFrameSize(t) {
c = t;
},
insertSpriteFrame: function(t) {
0;
if (!u || s === a || !t || t._original) return null;
var e = t._texture;
if (e instanceof cc.RenderTexture) return null;
var i = e.width, o = e.height;
if (i > c || o > c || i <= 8 || o <= 8 || e._getHash() !== n.DEFAULT_HASH) return null;
var l = r[s];
l || (l = h());
var f = l.insertSpriteFrame(t);
return f || s === a ? f : (l = h()).insertSpriteFrame(t);
},
reset: function() {
for (var t = 0, e = r.length; t < e; t++) r[t].destroy();
r.length = 0;
s = -1;
},
showDebug: !1,
update: function() {
if (this.enabled) for (var t = 0; t <= s; t++) r[t].update();
}
};
e.exports = cc.dynamicAtlasManager = f;
}), {
"./atlas": 178
} ],
180: [ (function(t, e, i) {
var n = t("../../../platform/CCMacro"), r = t("../../../components/CCLabel").Overflow, s = t("../../../utils/text-utils"), a = function() {
this._u = 0;
this._v = 0;
this._width = 0;
this._height = 0;
this._offsetX = 0;
this._offsetY = 0;
this._textureID = 0;
this._validDefinition = !1;
this._xAdvance = 0;
};
cc.FontAtlas = function(t) {
this._letterDefinitions = {};
};
cc.FontAtlas.prototype = {
constructor: cc.FontAtlas,
addLetterDefinitions: function(t, e) {
this._letterDefinitions[t] = e;
},
cloneLetterDefinition: function() {
var t = {};
for (var e in this._letterDefinitions) {
var i = new a();
cc.js.mixin(i, this._letterDefinitions[e]);
t[e] = i;
}
return t;
},
assignLetterDefinitions: function(t) {
for (var e in this._letterDefinitions) {
var i = t[e], n = this._letterDefinitions[e];
cc.js.mixin(n, i);
}
},
scaleFontLetterDefinition: function(t) {
for (var e in this._letterDefinitions) {
var i = this._letterDefinitions[e];
i._width *= t;
i._height *= t;
i._offsetX *= t;
i._offsetY *= t;
i._xAdvance *= t;
}
},
getLetterDefinitionForChar: function(t) {
return this._letterDefinitions.hasOwnProperty(t.charCodeAt(0)) ? this._letterDefinitions[t.charCodeAt(0)] : null;
}
};
var o = function() {
this._char = "";
this._valid = !0;
this._positionX = 0;
this._positionY = 0;
this._lineIndex = 0;
}, c = cc.rect(), h = null, l = [], u = [], f = [], _ = [], d = cc.size(), p = null, m = null, g = 0, v = 0, y = 0, T = 0, x = 0, E = 1, C = null, A = "", b = 0, S = 0, w = cc.size(), D = 0, I = 0, R = 0, M = 0, L = 0, O = !1, P = 0, F = 0, N = 0;
e.exports = {
updateRenderData: function(t) {
if (t._renderData.vertDirty && h !== t) {
h = t;
this._updateProperties();
this._updateContent();
h._actualFontSize = b;
h.node.setContentSize(w);
h._renderData.vertDirty = h._renderData.uvDirty = !1;
h = null;
this._resetProperties();
}
},
_updateFontScale: function() {
E = b / S;
},
_updateProperties: function() {
var t = h.font;
C = t.spriteFrame;
m = t._fntConfig;
if (!(p = h._fontAtlas)) {
p = new cc.FontAtlas(m);
var e = m.fontDefDictionary;
for (var i in e) {
var n = new a(), s = e[i].rect;
n._offsetX = e[i].xOffset;
n._offsetY = e[i].yOffset;
n._width = s.width;
n._height = s.height;
n._u = s.x;
n._v = s.y;
n._textureID = 0;
n._validDefinition = !0;
n._xAdvance = e[i].xAdvance;
p.addLetterDefinitions(i, n);
}
h._fontAtlas = p;
}
A = h.string.toString();
b = h.fontSize;
S = m.fontSize;
w.width = h.node._contentSize.width;
w.height = h.node._contentSize.height;
D = h.horizontalAlign;
I = h.verticalAlign;
R = h.spacingX;
L = h.overflow;
M = h._lineHeight;
O = L !== r.NONE && (L === r.RESIZE_HEIGHT || h.enableWrapText);
this._setupBMFontOverflowMetrics();
},
_resetProperties: function() {
p = null;
m = null;
C = null;
},
_updateContent: function() {
this._updateFontScale();
this._computeHorizontalKerningForText();
this._alignText();
},
_computeHorizontalKerningForText: function() {
for (var t = A, e = t.length, i = m.kerningDict, n = l, r = -1, s = 0; s < e; ++s) {
var a = t.charCodeAt(s), o = i[r << 16 | 65535 & a] || 0;
n[s] = s < e - 1 ? o : 0;
r = a;
}
},
_multilineTextWrap: function(t) {
var e = A.length, i = 0, n = 0, r = 0, a = 0, o = 0, c = 0, h = 0, u = null, _ = cc.v2(0, 0);
this._updateFontScale();
for (var d = p._letterDefinitions, y = 0; y < e; ) {
var C = A.charAt(y);
if ("\n" !== C) {
for (var b = t(A, y, e), S = c, D = h, I = o, L = n, B = !1, k = 0; k < b; ++k) {
var z = y + k;
if ("\r" !== (C = A.charAt(z))) if (u = p.getLetterDefinitionForChar(C)) {
var U = L + u._offsetX * E;
if (O && N > 0 && n > 0 && U + u._width * E > N && !s.isUnicodeSpace(C)) {
f.push(o);
o = 0;
i++;
n = 0;
r -= M * E + 0;
B = !0;
break;
}
_.x = U;
_.y = r - u._offsetY * E;
this._recordLetterInfo(d, _, C, z, i);
z + 1 < l.length && z < e - 1 && (L += l[z + 1]);
L += u._xAdvance * E + R;
I = _.x + u._width * E;
S < _.y && (S = _.y);
D > _.y - u._height * E && (D = _.y - u._height * E);
} else {
this._recordPlaceholderInfo(z, C);
console.log("Can't find letter definition in texture atlas " + m.atlasName + " for letter:" + C);
} else this._recordPlaceholderInfo(z, C);
}
if (!B) {
n = L;
o = I;
c < S && (c = S);
h > D && (h = D);
a < o && (a = o);
y += b;
}
} else {
f.push(o);
o = 0;
i++;
n = 0;
r -= M * E + 0;
this._recordPlaceholderInfo(y, C);
y++;
}
}
f.push(o);
v = (g = i + 1) * M * E;
g > 1 && (v += 0 * (g - 1));
w.width = P;
w.height = F;
P <= 0 && (w.width = parseFloat(a.toFixed(2)));
F <= 0 && (w.height = parseFloat(v.toFixed(2)));
T = w.height;
x = 0;
c > 0 && (T = w.height + c);
h < -v && (x = v + h);
return !0;
},
_getFirstCharLen: function() {
return 1;
},
_getFirstWordLen: function(t, e, i) {
var n = t.charAt(e);
if (s.isUnicodeCJK(n) || "\n" === n || s.isUnicodeSpace(n)) return 1;
var r = 1, a = p.getLetterDefinitionForChar(n);
if (!a) return r;
for (var o = a._xAdvance * E + R, c = e + 1; c < i; ++c) {
n = t.charAt(c);
if (!(a = p.getLetterDefinitionForChar(n))) break;
if (o + a._offsetX * E + a._width * E > N && !s.isUnicodeSpace(n) && N > 0) return r;
o += a._xAdvance * E + R;
if ("\n" === n || s.isUnicodeSpace(n) || s.isUnicodeCJK(n)) break;
r++;
}
return r;
},
_multilineTextWrapByWord: function() {
return this._multilineTextWrap(this._getFirstWordLen);
},
_multilineTextWrapByChar: function() {
return this._multilineTextWrap(this._getFirstCharLen);
},
_recordPlaceholderInfo: function(t, e) {
if (t >= u.length) {
var i = new o();
u.push(i);
}
u[t]._char = e;
u[t]._valid = !1;
},
_recordLetterInfo: function(t, e, i, n, r) {
if (n >= u.length) {
var s = new o();
u.push(s);
}
i = i.charCodeAt(0);
u[n]._lineIndex = r;
u[n]._char = i;
u[n]._valid = t[i]._validDefinition;
u[n]._positionX = e.x;
u[n]._positionY = e.y;
},
_alignText: function() {
v = 0;
f.length = 0;
this._multilineTextWrapByWord();
this._computeAlignmentOffset();
L === r.SHRINK && b > 0 && this._isVerticalClamp() && this._shrinkLabelToContentSize(this._isVerticalClamp);
this._updateQuads() || L === r.SHRINK && this._shrinkLabelToContentSize(this._isHorizontalClamp);
},
_scaleFontSizeDown: function(t) {
var e = !0;
if (!t) {
t = .1;
e = !1;
}
b = t;
e && this._updateContent();
},
_shrinkLabelToContentSize: function(t) {
for (var e = b, i = M, n = p, r = 0, s = n.cloneLetterDefinition(), a = !0; t(); ) {
var o = e - ++r;
a = !1;
if (o <= 0) break;
var c = o / e;
n.assignLetterDefinitions(s);
n.scaleFontLetterDefinition(c);
M = i * c;
this._multilineTextWrapByWord();
this._computeAlignmentOffset();
}
M = i;
n.assignLetterDefinitions(s);
a || e - r >= 0 && this._scaleFontSizeDown(e - r);
},
_isVerticalClamp: function() {
return v > w.height;
},
_isHorizontalClamp: function() {
for (var t = p._letterDefinitions, e = !1, i = 0, n = A.length; i < n; ++i) {
var r = u[i];
if (r._valid) {
var s = t[r._char], a = r._positionX + s._width * E, o = r._lineIndex;
if (P > 0) if (O) {
if (f[o] > w.width && (a > w.width || a < 0)) {
e = !0;
break;
}
} else if (a > w.width) {
e = !0;
break;
}
}
}
return e;
},
_isHorizontalClamped: function(t, e) {
var i = f[e], n = t > w.width || t < 0;
return O ? i > w.width && n : n;
},
_updateQuads: function() {
var t = p._letterDefinitions, e = C._texture, i = h.node, n = h._renderData;
n.dataLength = n.vertexCount = n.indiceCount = 0;
for (var s = w, a = i._anchorPoint.x * s.width, o = i._anchorPoint.y * s.height, l = !0, f = 0, d = A.length; f < d; ++f) {
var m = u[f];
if (m._valid) {
var g = t[m._char];
c.height = g._height;
c.width = g._width;
c.x = g._u;
c.y = g._v;
var v = m._positionY + y;
if (F > 0) {
if (v > T) {
var b = v - T;
c.y += b;
c.height -= b;
v -= b;
}
v - g._height * E < x && (c.height = v < x ? 0 : v - x);
}
var S = m._lineIndex, D = m._positionX + g._width / 2 * E + _[S];
if (P > 0 && this._isHorizontalClamped(D, S)) if (L === r.CLAMP) c.width = 0; else if (L === r.SHRINK) {
if (w.width > g._width) {
l = !1;
break;
}
c.width = 0;
}
if (c.height > 0 && c.width > 0) {
var I = C.isRotated(), R = C._originalSize, M = C._rect, O = C._offset, N = O.x + (R.width - M.width) / 2, B = O.y - (R.height - M.height) / 2;
if (I) {
var k = c.x;
c.x = M.x + M.height - c.y - c.height - B;
c.y = k + M.y - N;
c.y < 0 && (c.height = c.height + B);
} else {
c.x += M.x - N;
c.y += M.y + B;
}
var z = m._positionX + _[m._lineIndex];
this.appendQuad(n, e, c, I, z - a, v - o, E);
}
}
}
return l;
},
appendQuad: function(t, e, i, n, r, s, a) {},
_computeAlignmentOffset: function() {
_.length = 0;
switch (D) {
case n.TextAlignment.LEFT:
for (var t = 0; t < g; ++t) _.push(0);
break;

case n.TextAlignment.CENTER:
for (var e = 0, i = f.length; e < i; e++) _.push((w.width - f[e]) / 2);
break;

case n.TextAlignment.RIGHT:
for (var r = 0, s = f.length; r < s; r++) _.push(w.width - f[r]);
}
switch (I) {
case n.VerticalTextAlignment.TOP:
y = w.height;
break;

case n.VerticalTextAlignment.CENTER:
y = (w.height + v) / 2;
break;

case n.VerticalTextAlignment.BOTTOM:
y = v;
}
},
_setupBMFontOverflowMetrics: function() {
var t = w.width, e = w.height;
L === r.RESIZE_HEIGHT && (e = 0);
if (L === r.NONE) {
t = 0;
e = 0;
}
P = t;
F = e;
d.width = t;
d.height = e;
N = t;
}
};
}), {
"../../../components/CCLabel": 69,
"../../../platform/CCMacro": 139,
"../../../utils/text-utils": 223
} ],
181: [ (function(t, e, i) {
function n() {
this._rect = null;
this.uv = [];
this._texture = null;
this._original = null;
}
n.prototype = {
constructor: n,
getRect: function() {
return cc.rect(this._rect);
},
setRect: function(t) {
this._rect = t;
this._texture && this._calculateUV();
},
_setDynamicAtlasFrame: function(t) {
if (t) {
this._original = {
_texture: this._texture,
_x: this._rect.x,
_y: this._rect.y
};
this._texture = t.texture;
this._rect.x = t.x;
this._rect.y = t.y;
this._calculateUV();
}
},
_resetDynamicAtlasFrame: function() {
if (this._original) {
this._rect.x = this._original._x;
this._rect.y = this._original._y;
this._texture = this._original._texture;
this._original = null;
this._calculateUV();
}
},
_refreshTexture: function(t) {
this._texture = t;
this._rect = cc.rect(0, 0, t.width, t.height);
this._calculateUV();
},
_calculateUV: function() {
var t = this._rect, e = this._texture, i = this.uv, n = e.width, r = e.height, s = 0 === n ? 0 : t.x / n, a = 0 === n ? 0 : (t.x + t.width) / n, o = 0 === r ? 0 : (t.y + t.height) / r, c = 0 === r ? 0 : t.y / r;
i[0] = s;
i[1] = o;
i[2] = a;
i[3] = o;
i[4] = s;
i[5] = c;
i[6] = a;
i[7] = c;
}
};
e.exports = n;
}), {} ],
182: [ (function(t, e, i) {
var n = t("../../../platform/CCMacro"), r = t("../../../components/CCLabel"), s = t("../../../components/CCLabelOutline"), a = t("../../../utils/text-utils"), o = t("../../../components/CCComponent"), c = t("../../../assets/CCRenderTexture"), h = cc.js.isChildClassOf(s, o), l = r.Overflow, u = cc.Color.WHITE, f = 2, _ = function() {
this.char = "";
this.valid = !0;
this.x = 0;
this.y = 0;
this.line = 0;
this.hash = "";
}, d = function() {
this.u = 0;
this.v = 0;
this.w = 0;
this.h = 0;
this.texture = null;
this.offsetX = 0;
this.offsetY = 0;
this.valid = !1;
this.xAdvance = 0;
};
function p(t, e) {
this._texture = null;
this._labelInfo = e;
this._char = t;
this._hash = null;
this._data = null;
this._canvas = null;
this._context = null;
this._width = 0;
this._height = 0;
this._hash = t.charCodeAt(0) + e.hash;
}
p.prototype = {
constructor: p,
updateRenderData: function() {
this._updateProperties();
this._updateTexture();
},
_updateProperties: function() {
this._texture = new cc.Texture2D();
this._data = r._canvasPool.get();
this._canvas = this._data.canvas;
this._context = this._data.context;
this._context.font = this._labelInfo.fontDesc;
var t = a.safeMeasureText(this._context, this._char);
this._width = parseFloat(t.toFixed(2));
this._height = this._labelInfo.fontSize;
this._canvas.width !== this._width && (this._canvas.width = this._width);
this._canvas.height !== this._height && (this._canvas.height = this._height);
this._texture.initWithElement(this._canvas);
},
_updateTexture: function() {
var t = this._context, e = this._labelInfo, i = this._canvas.width, n = this._canvas.height;
t.textAlign = "center";
t.textBaseline = "middle";
t.clearRect(0, 0, i, n);
t.fillStyle = "rgba(255, 255, 255, 0.005)";
t.fillRect(0, 0, i, n);
t.font = e.fontDesc;
var r = i / 2, s = n / 2, a = e.color;
t.lineJoin = "round";
t.fillStyle = "rgba(" + a.r + ", " + a.g + ", " + a.b + ", 1)";
if (e.isOutlined) {
var o = e.out || u;
t.strokeStyle = "rgba(" + o.r + ", " + o.g + ", " + o.b + ", " + o.a / 255 + ")";
t.lineWidth = 2 * e.margin;
t.strokeText(this._char, r, s);
}
t.fillText(this._char, r, s);
this._texture.handleLoadedTexture();
},
destroy: function() {
this._texture.destroy();
this._texture = null;
r._canvasPool.put(this._data);
}
};
function m(t, e) {
var i = new c();
i.initWithSize(t, e);
i.update();
this._texture = i;
this._x = f;
this._y = f;
this._nexty = f;
this._width = t;
this._height = e;
this._letterDefinitions = {};
cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
}
cc.js.mixin(m.prototype, {
insertLetterTexture: function(t) {
var e = t._texture, i = e.width, n = e.height;
if (this._x + i + f > this._width) {
this._x = f;
this._y = this._nexty;
}
this._y + n > this._nexty && (this._nexty = this._y + n + f);
if (this._nexty > this._height) return null;
this._texture.drawTextureAt(e, this._x, this._y);
this._dirty = !0;
var r = new d();
r.u = this._x;
r.v = this._y;
r.texture = this._texture;
r.valid = !0;
r.w = t._width;
r.h = t._height;
r.xAdvance = t._width;
this._x += i + f;
this._letterDefinitions[t._hash] = r;
return r;
},
update: function() {
if (this._dirty) {
this._texture.update();
this._dirty = !1;
}
},
reset: function() {
this._x = f;
this._y = f;
this._nexty = f;
for (var t = this._letterDefinitions, e = 0, i = t.length; e < i; e++) {
var n = t[e];
n.isValid && n.destroy();
}
this._letterDefinitions = {};
},
destroy: function() {
this.reset();
this._texture.destroy();
},
beforeSceneLoad: function() {
this.destroy();
var t = new c();
t.initWithSize(this._width, this._height);
t.update();
this._texture = t;
},
getLetter: function(t) {
return this._letterDefinitions[t];
},
addLetterDefinitions: function(t, e) {
this._letterDefinitions[t] = e;
},
cloneLetterDefinition: function() {
var t = {};
for (var e in this._letterDefinitions) {
var i = new d();
cc.js.mixin(i, this._letterDefinitions[e]);
t[e] = i;
}
return t;
},
assignLetterDefinitions: function(t) {
for (var e in this._letterDefinitions) {
var i = t[e], n = this._letterDefinitions[e];
cc.js.mixin(n, i);
}
},
scaleFontLetterDefinition: function(t) {
for (var e in this._letterDefinitions) {
var i = this._letterDefinitions[e];
i.w *= t;
i.h *= t;
i.offsetX *= t;
i.offsetY *= t;
i.xAdvance *= t;
}
},
getLetterDefinitionForChar: function(t, e) {
var i = t.charCodeAt(0) + e.hash, n = this._letterDefinitions[i];
if (!n) {
var r = new p(t, e);
r.updateRenderData();
n = this.insertLetterTexture(r);
r.destroy();
}
return n;
}
});
var g = cc.rect(), v = null, y = [], T = [], x = [], E = [], C = cc.size(), A = null, b = 0, S = 0, w = 0, D = 0, I = 0, R = 1, M = "", L = 0, O = 0, P = cc.size(), F = 0, N = 0, B = 0, k = 0, z = 0, U = !1, H = 0, V = 0, W = 0, G = "", j = !1, X = {
fontSize: 0,
lineHeight: 0,
hash: "",
fontFamily: "",
fontDesc: "Arial",
hAlign: 0,
vAlign: 0,
color: u,
isOutlined: !1,
out: u,
margin: 0
};
e.exports = {
_getAssemblerData: function() {
A || (A = new m(2048, 2048));
return A._texture;
},
updateRenderData: function(t) {
if (t._renderData.vertDirty && v !== t) {
v = t;
this._updateFontFamily(t);
X.fontFamily = G;
this._updateProperties();
X.fontDesc = this._getFontDesc();
this._updateContent();
v._actualFontSize = L;
v.node.setContentSize(P);
v._renderData.vertDirty = v._renderData.uvDirty = !1;
v = null;
this._resetProperties();
}
},
_updateFontScale: function() {
R = L / O;
},
_updateProperties: function() {
M = v.string.toString();
L = v.fontSize;
O = L;
P.width = v.node._contentSize.width;
P.height = v.node._contentSize.height;
F = v.horizontalAlign;
N = v.verticalAlign;
B = v.spacingX;
z = v.overflow;
k = v._lineHeight;
j = v._isBold;
U = z !== l.NONE && (z === l.RESIZE_HEIGHT || v.enableWrapText);
var t = h && v.getComponent(s);
if (t && t.enabled) {
X.isOutlined = !0;
X.margin = t.width;
X.out = t.color;
X.out.a = t.color.a * v.node.color.a / 255;
} else {
X.isOutlined = !1;
X.margin = 0;
}
X.lineHeight = k;
X.fontSize = L;
X.fontFamily = G;
X.color = v.node.color;
X.hash = this._computeHash(X);
this._setupBMFontOverflowMetrics();
},
_updateFontFamily: function(t) {
t.useSystemFont ? G = t.fontFamily : t.font ? t.font._nativeAsset ? G = t.font._nativeAsset : (G = cc.loader.getRes(t.font.nativeUrl)) || cc.loader.load(t.font.nativeUrl, (function(e, i) {
G = i || "Arial";
t.font._nativeAsset = i;
t._updateRenderData(!0);
})) : G = "Arial";
},
_computeHash: function(t) {
var e = t.color.toHEX("#rrggbb"), i = "";
t.isOutlined && (i = t.out.toHEX("#rrggbb"));
return "" + t.fontSize + t.fontFamily + e + i;
},
_getFontDesc: function() {
var t = L.toString() + "px ";
t += G;
j && (t = "bold " + t);
return t;
},
_resetProperties: function() {},
_updateContent: function() {
this._updateFontScale();
this._alignText();
},
_computeHorizontalKerningForText: function() {
for (var t = M, e = t.length, i = null.kerningDict, n = y, r = -1, s = 0; s < e; ++s) {
var a = t.charCodeAt(s), o = i[r << 16 | 65535 & a] || 0;
n[s] = s < e - 1 ? o : 0;
r = a;
}
},
_multilineTextWrap: function(t) {
var e = M.length, i = 0, n = 0, r = 0, s = 0, o = 0, c = 0, h = 0, l = null, u = cc.v2(0, 0);
this._updateFontScale();
for (var f = 0; f < e; ) {
var _ = M.charAt(f);
if ("\n" !== _) {
for (var d = t(M, f, e), p = c, m = h, g = o, v = n, T = !1, E = 0; E < d; ++E) {
var C = f + E;
if ("\r" !== (_ = M.charAt(C))) if (l = A.getLetterDefinitionForChar(_, X)) {
var w = v + l.offsetX * R;
if (U && W > 0 && n > 0 && w + l.w * R > W && !a.isUnicodeSpace(_)) {
x.push(o);
o = 0;
i++;
n = 0;
r -= k * R + 0;
T = !0;
break;
}
u.x = w;
u.y = r - l.offsetY * R;
this._recordLetterInfo(u, _, C, i);
C + 1 < y.length && C < e - 1 && (v += y[C + 1]);
v += l.xAdvance * R + B;
g = u.x + l.w * R;
p < u.y && (p = u.y);
m > u.y - l.h * R && (m = u.y - l.h * R);
} else this._recordPlaceholderInfo(C, _); else this._recordPlaceholderInfo(C, _);
}
if (!T) {
n = v;
o = g;
c < p && (c = p);
h > m && (h = m);
s < o && (s = o);
f += d;
}
} else {
x.push(o);
o = 0;
i++;
n = 0;
r -= k * R + 0;
this._recordPlaceholderInfo(f, _);
f++;
}
}
x.push(o);
S = (b = i + 1) * k * R;
b > 1 && (S += 0 * (b - 1));
P.width = H;
P.height = V;
H <= 0 && (P.width = parseFloat(s.toFixed(2)));
V <= 0 && (P.height = parseFloat(S.toFixed(2)));
D = P.height;
I = 0;
c > 0 && (D = P.height + c);
h < -S && (I = S + h);
return !0;
},
_getFirstCharLen: function() {
return 1;
},
_getFirstWordLen: function(t, e, i) {
var n = t.charAt(e);
if (a.isUnicodeCJK(n) || "\n" === n || a.isUnicodeSpace(n)) return 1;
var r = 1, s = A.getLetterDefinitionForChar(n, X);
if (!s) return r;
for (var o = s.xAdvance * R + B, c = e + 1; c < i; ++c) {
n = t.charAt(c);
if (!(s = A.getLetterDefinitionForChar(n, X))) break;
if (o + s.offsetX * R + s.w * R > W && !a.isUnicodeSpace(n) && W > 0) return r;
o += s.xAdvance * R + B;
if ("\n" === n || a.isUnicodeSpace(n) || a.isUnicodeCJK(n)) break;
r++;
}
return r;
},
_multilineTextWrapByWord: function() {
return this._multilineTextWrap(this._getFirstWordLen);
},
_multilineTextWrapByChar: function() {
return this._multilineTextWrap(this._getFirstCharLen);
},
_recordPlaceholderInfo: function(t, e) {
if (t >= T.length) {
var i = new _();
T.push(i);
}
T[t].char = e;
T[t].hash = e.charCodeAt(0) + X.hash;
T[t].valid = !1;
},
_recordLetterInfo: function(t, e, i, n) {
if (i >= T.length) {
var r = new _();
T.push(r);
}
var s = e.charCodeAt(0) + X.hash;
T[i].line = n;
T[i].char = e;
T[i].hash = s;
T[i].valid = A.getLetter(s).valid;
T[i].x = t.x;
T[i].y = t.y;
},
_alignText: function() {
S = 0;
x.length = 0;
this._multilineTextWrapByWord();
this._computeAlignmentOffset();
this._updateQuads();
},
_scaleFontSizeDown: function(t) {
var e = !0;
if (!t) {
t = .1;
e = !1;
}
L = t;
e && this._updateContent();
},
_isVerticalClamp: function() {
return S > P.height;
},
_isHorizontalClamp: function() {
for (var t = !1, e = 0, i = M.length; e < i; ++e) {
var n = T[e];
if (n.valid) {
var r = A.getLetter(n.hash), s = n.x + r.w * R, a = n.line;
if (H > 0) if (U) {
if (x[a] > P.width && (s > P.width || s < 0)) {
t = !0;
break;
}
} else if (s > P.width) {
t = !0;
break;
}
}
}
return t;
},
_isHorizontalClamped: function(t, e) {
var i = x[e], n = t > P.width || t < 0;
return U ? i > P.width && n : n;
},
_updateQuads: function() {
var t = A._texture, e = v.node, i = v._renderData;
i.dataLength = i.vertexCount = i.indiceCount = 0;
for (var n = P, r = e._anchorPoint.x * n.width, s = e._anchorPoint.y * n.height, a = !0, o = 0, c = M.length; o < c; ++o) {
var h = T[o];
if (h.valid) {
var u = A.getLetter(h.hash);
g.height = u.h;
g.width = u.w;
g.x = u.u;
g.y = u.v;
var f = h.y + w;
if (V > 0) {
if (f > D) {
var _ = f - D;
g.y += _;
g.height -= _;
f -= _;
}
f - u.h * R < I && (g.height = f < I ? 0 : f - I);
}
var d = h.line, p = h.x + u.w / 2 * R + E[d];
if (H > 0 && this._isHorizontalClamped(p, d)) if (z === l.CLAMP) g.width = 0; else if (z === l.SHRINK) {
if (P.width > u.w) {
a = !1;
break;
}
g.width = 0;
}
if (g.height > 0 && g.width > 0) {
var m = h.x + E[h.line];
this.appendQuad(i, t, g, !1, m - r, f - s, R);
}
}
}
return a;
},
appendQuad: function(t, e, i, n, r, s, a) {},
_computeAlignmentOffset: function() {
E.length = 0;
switch (F) {
case n.TextAlignment.LEFT:
for (var t = 0; t < b; ++t) E.push(0);
break;

case n.TextAlignment.CENTER:
for (var e = 0, i = x.length; e < i; e++) E.push((P.width - x[e]) / 2);
break;

case n.TextAlignment.RIGHT:
for (var r = 0, s = x.length; r < s; r++) E.push(P.width - x[r]);
}
switch (N) {
case n.VerticalTextAlignment.TOP:
w = P.height;
break;

case n.VerticalTextAlignment.CENTER:
w = (P.height + S) / 2 - (k - L) / 2;
break;

case n.VerticalTextAlignment.BOTTOM:
w = (P.height + S) / 2 - (k - L);
}
},
_setupBMFontOverflowMetrics: function() {
var t = P.width, e = P.height;
z === l.RESIZE_HEIGHT && (e = 0);
if (z === l.NONE) {
t = 0;
e = 0;
}
H = t;
V = e;
C.width = t;
C.height = e;
W = t;
}
};
}), {
"../../../assets/CCRenderTexture": 42,
"../../../components/CCComponent": 67,
"../../../components/CCLabel": 69,
"../../../components/CCLabelOutline": 70,
"../../../platform/CCMacro": 139,
"../../../utils/text-utils": 223
} ],
183: [ (function(t, e, i) {
var n = t("../../../platform/CCMacro"), r = t("../../../utils/text-utils"), s = t("../../../components/CCComponent"), a = t("../../../components/CCLabel"), o = t("../../../components/CCLabelOutline"), c = a.Overflow, h = cc.Color.WHITE, l = cc.js.isChildClassOf(o, s), u = null, f = null, _ = null, d = "", p = "", m = 0, g = 0, v = [], y = cc.size(), T = 0, x = 0, E = 0, C = null, A = "", b = c.NONE, S = !1, w = (1 / 255).toFixed(3), D = !1, I = null, R = 0, M = 0, L = !1, O = !1, P = !1, F = void 0;
e.exports = {
_getAssemblerData: function() {
(F = a._canvasPool.get()).canvas.width = F.canvas.height = 1;
return F;
},
_resetAssemblerData: function(t) {
t && a._canvasPool.put(t);
},
updateRenderData: function(t) {
if (t._renderData.vertDirty) {
this._updateFontFamily(t);
this._updateProperties(t);
this._calculateLabelFont();
this._calculateSplitedStrings();
this._updateLabelDimensions();
this._calculateTextBaseline();
this._updateTexture(t);
this._calDynamicAtlas(t);
t._actualFontSize = m;
t.node.setContentSize(y);
this._updateVerts(t);
t._renderData.vertDirty = t._renderData.uvDirty = !1;
u = null;
f = null;
_ = null;
}
},
_updateVerts: function() {},
_updateFontFamily: function(t) {
t.useSystemFont ? A = t.fontFamily : t.font ? t.font._nativeAsset ? A = t.font._nativeAsset : (A = cc.loader.getRes(t.font.nativeUrl)) || cc.loader.load(t.font.nativeUrl, (function(e, i) {
A = i || "Arial";
t.font._nativeAsset = i;
t._updateRenderData(!0);
})) : A = "Arial";
},
_updateProperties: function(t) {
var e = t._assemblerData;
u = e.context;
f = e.canvas;
_ = t._frame._original ? t._frame._original._texture : t._frame._texture;
p = t.string.toString();
m = t._fontSize;
g = m;
b = t.overflow;
y.width = t.node.width;
y.height = t.node.height;
T = t._lineHeight;
x = t.horizontalAlign;
E = t.verticalAlign;
C = t.node.color;
L = t._isBold;
O = t._isItalic;
P = t._isUnderline;
S = b !== c.NONE && (b === c.RESIZE_HEIGHT || t.enableWrapText);
var i = l && t.getComponent(o);
if (i && i.enabled) {
D = !0;
M = R = i.width;
I = cc.color(i.color);
} else {
D = !1;
M = 0;
}
},
_calculateFillTextStartPosition: function() {
var t = this._getLineHeight(), e = v.length, i = void 0, r = void 0;
i = x === n.TextAlignment.RIGHT ? y.width - M : x === n.TextAlignment.CENTER ? y.width / 2 : 0 + M;
r = E === n.VerticalTextAlignment.TOP ? 0 : E === n.VerticalTextAlignment.CENTER ? y.height / 2 - t * (e - 1) / 2 : y.height - t * (e - 1);
return cc.v2(i, r);
},
_updateTexture: function(t) {
u.clearRect(0, 0, f.width, f.height);
u.fillStyle = "rgba(" + C.r + ", " + C.g + ", " + C.b + ", " + w + ")";
u.fillRect(0, 0, f.width, f.height);
u.font = d;
var e = this._calculateFillTextStartPosition(), i = this._getLineHeight();
u.lineJoin = "round";
u.fillStyle = "rgba(" + C.r + ", " + C.g + ", " + C.b + ", 1)";
for (var n = void 0, r = 0; r < v.length; ++r) {
if (D) {
var s = I || h;
u.strokeStyle = "rgba(" + s.r + ", " + s.g + ", " + s.b + ", " + s.a / 255 + ")";
u.lineWidth = 2 * R;
u.strokeText(v[r], e.x, e.y + r * i);
}
u.fillText(v[r], e.x, e.y + r * i);
if (P) {
n = this._calculateUnderlineStartPosition();
u.save();
u.beginPath();
u.lineWidth = m / 8;
u.strokeStyle = "rgba(" + C.r + ", " + C.g + ", " + C.b + ", 1)";
u.moveTo(n.x, n.y + r * i - 1);
u.lineTo(n.x + f.width, n.y + r * i - 1);
u.stroke();
u.restore();
}
}
_.handleLoadedTexture();
},
_calDynamicAtlas: function(t) {
if (t.cacheMode === a.CacheMode.BITMAP) {
t._frame._original || t._frame.setRect(cc.rect(0, 0, f.width, f.height));
t._calDynamicAtlas();
}
},
_calculateUnderlineStartPosition: function() {
var t, e = this._getLineHeight(), i = v.length, r = void 0;
t = 0 + M;
r = E === n.VerticalTextAlignment.TOP ? m : E === n.VerticalTextAlignment.CENTER ? y.height / 2 - e * (i - 1) / 2 + m / 2 : y.height - e * (i - 1);
return cc.v2(t, r);
},
_updateLabelDimensions: function() {
var t = p.split("\n");
if (b === c.RESIZE_HEIGHT) y.height = v.length * this._getLineHeight(); else if (b === c.NONE) {
v = t;
for (var e = 0, i = 0, n = 0; n < t.length; ++n) {
var s = r.safeMeasureText(u, t[n]);
e = e > s ? e : s;
}
i = v.length * this._getLineHeight();
y.width = parseFloat(e.toFixed(2)) + 2 * M;
y.height = parseFloat(i.toFixed(2));
O && (y.width += g * Math.tan(.20943951));
y.width = Math.min(y.width, 2048);
y.height = Math.min(y.height, 2048);
}
f.width !== y.width && (f.width = y.width);
f.height !== y.height && (f.height = y.height);
},
_calculateTextBaseline: function() {
this._node;
var t = void 0, e = void 0;
t = x === n.TextAlignment.RIGHT ? "right" : x === n.TextAlignment.CENTER ? "center" : "left";
u.textAlign = t;
e = E === n.VerticalTextAlignment.TOP ? "top" : E === n.VerticalTextAlignment.CENTER ? "middle" : "bottom";
u.textBaseline = e;
},
_calculateSplitedStrings: function() {
var t = p.split("\n");
if (S) {
v = [];
for (var e = y.width - 2 * M, i = 0; i < t.length; ++i) {
var n = r.safeMeasureText(u, t[i]), s = r.fragmentText(t[i], n, e, this._measureText(u));
v = v.concat(s);
}
} else v = t;
},
_getFontDesc: function() {
var t = m.toString() + "px ";
t += A;
L && (t = "bold " + t);
return t;
},
_getLineHeight: function() {
var t = T;
return 0 | (t = 0 === t ? m : t * m / g);
},
_calculateParagraphLength: function(t, e) {
for (var i = [], n = 0; n < t.length; ++n) {
var s = r.safeMeasureText(e, t[n]);
i.push(s);
}
return i;
},
_measureText: function(t) {
return function(e) {
return r.safeMeasureText(t, e);
};
},
_calculateLabelFont: function() {
d = this._getFontDesc();
u.font = d;
if (b === c.SHRINK) {
var t = p.split("\n"), e = this._calculateParagraphLength(t, u), i = 0, n = 0, s = 0;
if (S) {
var a = y.width - 2 * M, o = y.height - 2 * M;
if (a < 0 || o < 0) {
d = this._getFontDesc();
u.font = d;
return;
}
n = o + 1;
s = a + 1;
for (var h = m + 1, l = "", f = !0, _ = 0 | h; n > o || s > a; ) {
f ? h = _ / 2 | 0 : _ = h = _ - 1;
if (h <= 0) {
cc.logID(4003);
break;
}
m = h;
d = this._getFontDesc();
u.font = d;
n = 0;
for (i = 0; i < t.length; ++i) {
var v = 0, T = r.safeMeasureText(u, t[i]);
l = r.fragmentText(t[i], T, a, this._measureText(u));
for (;v < l.length; ) {
s = r.safeMeasureText(u, l[v]);
n += this._getLineHeight();
++v;
}
}
if (f) if (n > o) _ = 0 | h; else {
f = !1;
n = o + 1;
}
}
} else {
n = t.length * this._getLineHeight();
for (i = 0; i < t.length; ++i) s < e[i] && (s = e[i]);
var x = (y.width - 2 * M) / s, E = y.height / n;
m = g * Math.min(1, x, E) | 0;
d = this._getFontDesc();
u.font = d;
}
}
}
};
}), {
"../../../components/CCComponent": 67,
"../../../components/CCLabel": 69,
"../../../components/CCLabelOutline": 70,
"../../../platform/CCMacro": 139,
"../../../utils/text-utils": 223
} ],
184: [ (function(t, e, i) {
"use strict";
e.exports = n;
function n(t, e, i) {
i = i || 2;
var n, s, o, c, h, l, f, _ = e && e.length, d = _ ? e[0] * i : t.length, p = r(t, 0, d, i, !0), m = [];
if (!p) return m;
_ && (p = u(t, e, p, i));
if (t.length > 80 * i) {
n = o = t[0];
s = c = t[1];
for (var g = i; g < d; g += i) {
h = t[g];
l = t[g + 1];
h < n && (n = h);
l < s && (s = l);
h > o && (o = h);
l > c && (c = l);
}
f = Math.max(o - n, c - s);
}
a(p, m, i, n, s, f);
return m;
}
function r(t, e, i, n, r) {
var s, a;
if (r === M(t, e, i, n) > 0) for (s = e; s < i; s += n) a = D(s, t[s], t[s + 1], a); else for (s = i - n; s >= e; s -= n) a = D(s, t[s], t[s + 1], a);
if (a && E(a, a.next)) {
I(a);
a = a.next;
}
return a;
}
function s(t, e) {
if (!t) return t;
e || (e = t);
var i, n = t;
do {
i = !1;
if (n.steiner || !E(n, n.next) && 0 !== x(n.prev, n, n.next)) n = n.next; else {
I(n);
if ((n = e = n.prev) === n.next) return null;
i = !0;
}
} while (i || n !== e);
return e;
}
function a(t, e, i, n, r, u, f) {
if (t) {
!f && u && p(t, n, r, u);
for (var _, d, m = t; t.prev !== t.next; ) {
_ = t.prev;
d = t.next;
if (u ? c(t, n, r, u) : o(t)) {
e.push(_.i / i);
e.push(t.i / i);
e.push(d.i / i);
I(t);
t = d.next;
m = d.next;
} else if ((t = d) === m) {
f ? 1 === f ? a(t = h(t, e, i), e, i, n, r, u, 2) : 2 === f && l(t, e, i, n, r, u) : a(s(t), e, i, n, r, u, 1);
break;
}
}
}
}
function o(t) {
var e = t.prev, i = t, n = t.next;
if (x(e, i, n) >= 0) return !1;
for (var r = t.next.next; r !== t.prev; ) {
if (y(e.x, e.y, i.x, i.y, n.x, n.y, r.x, r.y) && x(r.prev, r, r.next) >= 0) return !1;
r = r.next;
}
return !0;
}
function c(t, e, i, n) {
var r = t.prev, s = t, a = t.next;
if (x(r, s, a) >= 0) return !1;
for (var o = r.x < s.x ? r.x < a.x ? r.x : a.x : s.x < a.x ? s.x : a.x, c = r.y < s.y ? r.y < a.y ? r.y : a.y : s.y < a.y ? s.y : a.y, h = r.x > s.x ? r.x > a.x ? r.x : a.x : s.x > a.x ? s.x : a.x, l = r.y > s.y ? r.y > a.y ? r.y : a.y : s.y > a.y ? s.y : a.y, u = g(o, c, e, i, n), f = g(h, l, e, i, n), _ = t.nextZ; _ && _.z <= f; ) {
if (_ !== t.prev && _ !== t.next && y(r.x, r.y, s.x, s.y, a.x, a.y, _.x, _.y) && x(_.prev, _, _.next) >= 0) return !1;
_ = _.nextZ;
}
_ = t.prevZ;
for (;_ && _.z >= u; ) {
if (_ !== t.prev && _ !== t.next && y(r.x, r.y, s.x, s.y, a.x, a.y, _.x, _.y) && x(_.prev, _, _.next) >= 0) return !1;
_ = _.prevZ;
}
return !0;
}
function h(t, e, i) {
var n = t;
do {
var r = n.prev, s = n.next.next;
if (!E(r, s) && C(r, n, n.next, s) && b(r, s) && b(s, r)) {
e.push(r.i / i);
e.push(n.i / i);
e.push(s.i / i);
I(n);
I(n.next);
n = t = s;
}
n = n.next;
} while (n !== t);
return n;
}
function l(t, e, i, n, r, o) {
var c = t;
do {
for (var h = c.next.next; h !== c.prev; ) {
if (c.i !== h.i && T(c, h)) {
var l = w(c, h);
c = s(c, c.next);
l = s(l, l.next);
a(c, e, i, n, r, o);
a(l, e, i, n, r, o);
return;
}
h = h.next;
}
c = c.next;
} while (c !== t);
}
function u(t, e, i, n) {
var a, o, c, h = [];
for (a = 0, o = e.length; a < o; a++) {
(c = r(t, e[a] * n, a < o - 1 ? e[a + 1] * n : t.length, n, !1)) === c.next && (c.steiner = !0);
h.push(v(c));
}
h.sort(f);
for (a = 0; a < h.length; a++) {
_(h[a], i);
i = s(i, i.next);
}
return i;
}
function f(t, e) {
return t.x - e.x;
}
function _(t, e) {
if (e = d(t, e)) {
var i = w(e, t);
s(i, i.next);
}
}
function d(t, e) {
var i, n = e, r = t.x, s = t.y, a = -Infinity;
do {
if (s <= n.y && s >= n.next.y) {
var o = n.x + (s - n.y) * (n.next.x - n.x) / (n.next.y - n.y);
if (o <= r && o > a) {
a = o;
if (o === r) {
if (s === n.y) return n;
if (s === n.next.y) return n.next;
}
i = n.x < n.next.x ? n : n.next;
}
}
n = n.next;
} while (n !== e);
if (!i) return null;
if (r === a) return i.prev;
var c, h = i, l = i.x, u = i.y, f = Infinity;
n = i.next;
for (;n !== h; ) {
if (r >= n.x && n.x >= l && y(s < u ? r : a, s, l, u, s < u ? a : r, s, n.x, n.y) && ((c = Math.abs(s - n.y) / (r - n.x)) < f || c === f && n.x > i.x) && b(n, t)) {
i = n;
f = c;
}
n = n.next;
}
return i;
}
function p(t, e, i, n) {
var r = t;
do {
null === r.z && (r.z = g(r.x, r.y, e, i, n));
r.prevZ = r.prev;
r.nextZ = r.next;
r = r.next;
} while (r !== t);
r.prevZ.nextZ = null;
r.prevZ = null;
m(r);
}
function m(t) {
var e, i, n, r, s, a, o, c, h = 1;
do {
i = t;
t = null;
s = null;
a = 0;
for (;i; ) {
a++;
n = i;
o = 0;
for (e = 0; e < h; e++) {
o++;
if (!(n = n.nextZ)) break;
}
c = h;
for (;o > 0 || c > 0 && n; ) {
if (0 === o) {
r = n;
n = n.nextZ;
c--;
} else if (0 !== c && n) if (i.z <= n.z) {
r = i;
i = i.nextZ;
o--;
} else {
r = n;
n = n.nextZ;
c--;
} else {
r = i;
i = i.nextZ;
o--;
}
s ? s.nextZ = r : t = r;
r.prevZ = s;
s = r;
}
i = n;
}
s.nextZ = null;
h *= 2;
} while (a > 1);
return t;
}
function g(t, e, i, n, r) {
return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - i) / r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - n) / r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1;
}
function v(t) {
var e = t, i = t;
do {
e.x < i.x && (i = e);
e = e.next;
} while (e !== t);
return i;
}
function y(t, e, i, n, r, s, a, o) {
return (r - a) * (e - o) - (t - a) * (s - o) >= 0 && (t - a) * (n - o) - (i - a) * (e - o) >= 0 && (i - a) * (s - o) - (r - a) * (n - o) >= 0;
}
function T(t, e) {
return t.next.i !== e.i && t.prev.i !== e.i && !A(t, e) && b(t, e) && b(e, t) && S(t, e);
}
function x(t, e, i) {
return (e.y - t.y) * (i.x - e.x) - (e.x - t.x) * (i.y - e.y);
}
function E(t, e) {
return t.x === e.x && t.y === e.y;
}
function C(t, e, i, n) {
return !!(E(t, e) && E(i, n) || E(t, n) && E(i, e)) || x(t, e, i) > 0 != x(t, e, n) > 0 && x(i, n, t) > 0 != x(i, n, e) > 0;
}
function A(t, e) {
var i = t;
do {
if (i.i !== t.i && i.next.i !== t.i && i.i !== e.i && i.next.i !== e.i && C(i, i.next, t, e)) return !0;
i = i.next;
} while (i !== t);
return !1;
}
function b(t, e) {
return x(t.prev, t, t.next) < 0 ? x(t, e, t.next) >= 0 && x(t, t.prev, e) >= 0 : x(t, e, t.prev) < 0 || x(t, t.next, e) < 0;
}
function S(t, e) {
var i = t, n = !1, r = (t.x + e.x) / 2, s = (t.y + e.y) / 2;
do {
i.y > s != i.next.y > s && r < (i.next.x - i.x) * (s - i.y) / (i.next.y - i.y) + i.x && (n = !n);
i = i.next;
} while (i !== t);
return n;
}
function w(t, e) {
var i = new R(t.i, t.x, t.y), n = new R(e.i, e.x, e.y), r = t.next, s = e.prev;
t.next = e;
e.prev = t;
i.next = r;
r.prev = i;
n.next = i;
i.prev = n;
s.next = n;
n.prev = s;
return n;
}
function D(t, e, i, n) {
var r = new R(t, e, i);
if (n) {
r.next = n.next;
r.prev = n;
n.next.prev = r;
n.next = r;
} else {
r.prev = r;
r.next = r;
}
return r;
}
function I(t) {
t.next.prev = t.prev;
t.prev.next = t.next;
t.prevZ && (t.prevZ.nextZ = t.nextZ);
t.nextZ && (t.nextZ.prevZ = t.prevZ);
}
function R(t, e, i) {
this.i = t;
this.x = e;
this.y = i;
this.prev = null;
this.next = null;
this.z = null;
this.prevZ = null;
this.nextZ = null;
this.steiner = !1;
}
n.deviation = function(t, e, i, n) {
var r = e && e.length, s = r ? e[0] * i : t.length, a = Math.abs(M(t, 0, s, i));
if (r) for (var o = 0, c = e.length; o < c; o++) {
var h = e[o] * i, l = o < c - 1 ? e[o + 1] * i : t.length;
a -= Math.abs(M(t, h, l, i));
}
var u = 0;
for (o = 0; o < n.length; o += 3) {
var f = n[o] * i, _ = n[o + 1] * i, d = n[o + 2] * i;
u += Math.abs((t[f] - t[d]) * (t[_ + 1] - t[f + 1]) - (t[f] - t[_]) * (t[d + 1] - t[f + 1]));
}
return 0 === a && 0 === u ? 0 : Math.abs((u - a) / a);
};
function M(t, e, i, n) {
for (var r = 0, s = e, a = i - n; s < i; s += n) {
r += (t[a] - t[s]) * (t[s + 1] + t[a + 1]);
a = s;
}
return r;
}
n.flatten = function(t) {
for (var e = t[0][0].length, i = {
vertices: [],
holes: [],
dimensions: e
}, n = 0, r = 0; r < t.length; r++) {
for (var s = 0; s < t[r].length; s++) for (var a = 0; a < e; a++) i.vertices.push(t[r][s][a]);
if (r > 0) {
n += t[r - 1].length;
i.holes.push(n);
}
}
return i;
};
}), {} ],
185: [ (function(t, e, i) {
var n = t("../../../../graphics/helper"), r = t("../../../../graphics/types").PointFlags, s = t("../../mesh-buffer"), a = t("../../vertex-format").vfmtPosColor, o = t("../../../index"), c = o.renderEngine, h = c.IARenderData, l = c.InputAssembler, u = cc.Class({
name: "cc.GraphicsPoint",
extends: cc.Vec2,
ctor: function(t, e) {
this.reset();
},
reset: function() {
this.dx = 0;
this.dy = 0;
this.dmx = 0;
this.dmy = 0;
this.flags = 0;
this.len = 0;
}
});
function f() {
this.reset();
}
cc.js.mixin(f.prototype, {
reset: function() {
this.closed = !1;
this.nbevel = 0;
this.complex = !0;
this.points ? this.points.length = 0 : this.points = [];
}
});
function _(t) {
this._tessTol = .25;
this._distTol = .01;
this._updatePathOffset = !1;
this._paths = null;
this._pathLength = 0;
this._pathOffset = 0;
this._points = null;
this._pointsOffset = 0;
this._commandx = 0;
this._commandy = 0;
this._paths = [];
this._points = [];
this._renderDatas = [];
this._dataOffset = 0;
}
cc.js.mixin(_.prototype, {
moveTo: function(t, e) {
if (this._updatePathOffset) {
this._pathOffset = this._pathLength;
this._updatePathOffset = !1;
}
this._addPath();
this._addPoint(t, e, r.PT_CORNER);
this._commandx = t;
this._commandy = e;
},
lineTo: function(t, e) {
this._addPoint(t, e, r.PT_CORNER);
this._commandx = t;
this._commandy = e;
},
bezierCurveTo: function(t, e, i, s, a, o) {
var c = this._curPath, h = c.points[c.points.length - 1];
if (h.x !== t || h.y !== e || i !== a || s !== o) {
n.tesselateBezier(this, h.x, h.y, t, e, i, s, a, o, 0, r.PT_CORNER);
this._commandx = a;
this._commandy = o;
} else this.lineTo(a, o);
},
quadraticCurveTo: function(t, e, i, n) {
var r = this._commandx, s = this._commandy;
this.bezierCurveTo(r + 2 / 3 * (t - r), s + 2 / 3 * (e - s), i + 2 / 3 * (t - i), n + 2 / 3 * (e - n), i, n);
},
arc: function(t, e, i, r, s, a) {
n.arc(this, t, e, i, r, s, a);
},
ellipse: function(t, e, i, r) {
n.ellipse(this, t, e, i, r);
this._curPath.complex = !1;
},
circle: function(t, e, i) {
n.ellipse(this, t, e, i, i);
this._curPath.complex = !1;
},
rect: function(t, e, i, n) {
this.moveTo(t, e);
this.lineTo(t, e + n);
this.lineTo(t + i, e + n);
this.lineTo(t + i, e);
this.close();
this._curPath.complex = !1;
},
roundRect: function(t, e, i, r, s) {
n.roundRect(this, t, e, i, r, s);
this._curPath.complex = !1;
},
clear: function(t, e) {
this._pathLength = 0;
this._pathOffset = 0;
this._pointsOffset = 0;
this._dataOffset = 0;
this._curPath = null;
var i = this._renderDatas;
if (e) {
this._paths.length = 0;
this._points.length = 0;
for (var n = 0, r = i.length; n < r; n++) {
var s = i[n];
s.meshbuffer.destroy();
s.meshbuffer = null;
}
i.length = 0;
} else for (var a = 0, o = i.length; a < o; a++) {
i[a].meshbuffer.reset();
}
},
close: function() {
this._curPath.closed = !0;
},
_addPath: function() {
var t = this._pathLength, e = this._paths[t];
if (e) e.reset(); else {
e = new f();
this._paths.push(e);
}
this._pathLength++;
this._curPath = e;
return e;
},
_addPoint: function(t, e, i) {
var n = this._curPath;
if (n) {
var r, s = this._points, a = n.points;
if (r = s[this._pointsOffset++]) {
r.x = t;
r.y = e;
} else {
r = new u(t, e);
s.push(r);
}
r.flags = i;
a.push(r);
}
},
requestRenderData: function() {
var t = new h(), e = new s(o._handle, a);
t.meshbuffer = e;
this._renderDatas.push(t);
var i = new l();
i._vertexBuffer = e._vb;
i._indexBuffer = e._ib;
i._start = 0;
t.ia = i;
return t;
},
getRenderDatas: function() {
0 === this._renderDatas.length && this.requestRenderData();
return this._renderDatas;
}
});
e.exports = _;
}), {
"../../../../graphics/helper": 107,
"../../../../graphics/types": 109,
"../../../index": 175,
"../../mesh-buffer": 201,
"../../vertex-format": 206
} ],
186: [ (function(t, e, i) {
var n = t("../../../../graphics/graphics"), r = t("../../../../graphics/types").PointFlags, s = n.LineJoin, a = n.LineCap, o = t("./earcut"), c = t("./impl"), h = Math.PI, l = Math.min, u = Math.max, f = Math.ceil, _ = Math.acos, d = Math.cos, p = Math.sin, m = Math.atan2, g = (Math.abs, 
null), v = null, y = 0;
function T(t, e, i) {
var n = 2 * _(t / (t + i));
return u(2, f(e / n));
}
function x(t, e, i) {
return t < e ? e : t > i ? i : t;
}
var E = {
useModel: !0,
createImpl: function(t) {
return new c(t);
},
updateRenderData: function(t) {
for (var e = t._impl.getRenderDatas(), i = 0, n = e.length; i < n; i++) e[i].material = t.getMaterial();
},
fillBuffers: function(t, e) {
e._flush();
var i = e.node;
e.node = t.node;
this.renderIA(t, e);
e.node = i;
},
renderIA: function(t, e) {
for (var i = t.node.color, n = (i.r, i.g, i.b, i.a, t._impl.getRenderDatas()), r = 0, s = n.length; r < s; r++) {
var a = n[r], o = a.meshbuffer;
a.ia._count = o.indiceStart;
e._flushIA(a);
o.uploadData();
}
},
genRenderData: function(t, e) {
var i = v.getRenderDatas(), n = i[v._dataOffset], r = n.meshbuffer, s = r.vertexStart + e;
if (s > 65535 || 3 * s > 131070) {
++v._dataOffset;
s = e;
if (v._dataOffset < i.length) n = i[v._dataOffset]; else {
n = v.requestRenderData(t);
i[v._dataOffset] = n;
}
n.material = t.getMaterial();
r = n.meshbuffer;
}
s > r.vertexOffset && r.requestStatic(e, 3 * e);
return n;
},
stroke: function(t) {
y = t._strokeColor._val;
this._flattenPaths(t._impl);
this._expandStroke(t);
t._impl._updatePathOffset = !0;
},
fill: function(t) {
y = t._fillColor._val;
this._expandFill(t);
t._impl._updatePathOffset = !0;
},
_expandStroke: function(t) {
var e = .5 * t.lineWidth, i = t.lineCap, n = t.lineJoin, o = t.miterLimit;
v = t._impl;
var c = T(e, h, v._tessTol);
this._calculateJoins(v, e, n, o);
for (var l = v._paths, u = 0, f = v._pathOffset, _ = v._pathLength; f < _; f++) {
var d = l[f], p = d.points.length;
n === s.ROUND ? u += 2 * (p + d.nbevel * (c + 2) + 1) : u += 2 * (p + 5 * d.nbevel + 1);
d.closed || (i === a.ROUND ? u += 2 * (2 * c + 2) : u += 12);
}
for (var m = (g = this.genRenderData(t, u)).meshbuffer, y = m._vData, x = m._iData, E = v._pathOffset, C = v._pathLength; E < C; E++) {
var A, b = l[E], S = b.points, w = S.length, D = m.vertexStart, I = void 0, R = void 0, M = void 0, L = void 0;
if (A = b.closed) {
I = S[w - 1];
R = S[0];
M = 0;
L = w;
} else {
I = S[0];
R = S[1];
M = 1;
L = w - 1;
}
if (!A) {
var O = R.sub(I);
O.normalizeSelf();
var P = O.x, F = O.y;
i === a.BUTT ? this._buttCap(I, P, F, e, 0) : i === a.SQUARE ? this._buttCap(I, P, F, e, e) : i === a.ROUND && this._roundCapStart(I, P, F, e, c);
}
for (var N = M; N < L; ++N) {
if (n === s.ROUND) this._roundJoin(I, R, e, e, c); else if (0 != (R.flags & (r.PT_BEVEL | r.PT_INNERBEVEL))) this._bevelJoin(I, R, e, e); else {
this._vset(R.x + R.dmx * e, R.y + R.dmy * e);
this._vset(R.x - R.dmx * e, R.y - R.dmy * e);
}
I = R;
R = S[N + 1];
}
if (A) {
var B = 3 * D;
this._vset(y[B], y[B + 1]);
this._vset(y[B + 3], y[B + 4]);
} else {
var k = R.sub(I);
k.normalizeSelf();
var z = k.x, U = k.y;
i === a.BUTT ? this._buttCap(R, z, U, e, 0) : i === a.BUTT || i === a.SQUARE ? this._buttCap(R, z, U, e, e) : i === a.ROUND && this._roundCapEnd(R, z, U, e, c);
}
for (var H = m.indiceStart, V = D + 2, W = m.vertexStart; V < W; V++) {
x[H++] = V - 2;
x[H++] = V - 1;
x[H++] = V;
}
m.indiceStart = H;
}
g = null;
v = null;
},
_expandFill: function(t) {
for (var e = (v = t._impl)._paths, i = 0, n = v._pathOffset, r = v._pathLength; n < r; n++) {
i += e[n].points.length;
}
for (var s = (g = this.genRenderData(t, i)).meshbuffer, a = s._vData, c = s._iData, h = v._pathOffset, l = v._pathLength; h < l; h++) {
var u = e[h], f = u.points, _ = f.length;
if (0 !== _) {
for (var d = s.vertexStart, p = 0; p < _; ++p) this._vset(f[p].x, f[p].y);
var m = s.indiceStart;
if (u.complex) {
for (var y = [], T = d, x = s.vertexStart; T < x; T++) {
var E = 3 * T;
y.push(a[E]);
y.push(a[E + 1]);
}
var C = o(y, null, 2);
if (!C || 0 === C.length) continue;
for (var A = 0, b = C.length; A < b; A++) c[m++] = C[A] + d;
} else for (var S = d, w = d + 2, D = s.vertexStart; w < D; w++) {
c[m++] = S;
c[m++] = w - 1;
c[m++] = w;
}
s.indiceStart = m;
}
}
g = null;
v = null;
},
_calculateJoins: function(t, e, i, n) {
var a = 0;
e > 0 && (a = 1 / e);
for (var o = t._paths, c = t._pathOffset, h = t._pathLength; c < h; c++) {
var f = o[c], _ = f.points, d = _.length, p = _[d - 1], m = _[0];
f.nbevel = 0;
for (var g = 0; g < d; g++) {
var v, y, T = p.dy, x = -p.dx, E = m.dy, C = -m.dx;
m.dmx = .5 * (T + E);
m.dmy = .5 * (x + C);
if ((v = m.dmx * m.dmx + m.dmy * m.dmy) > 1e-6) {
var A = 1 / v;
A > 600 && (A = 600);
m.dmx *= A;
m.dmy *= A;
}
if (m.dx * p.dy - p.dx * m.dy > 0) {
0;
m.flags |= r.PT_LEFT;
}
v * (y = u(11, l(p.len, m.len) * a)) * y < 1 && (m.flags |= r.PT_INNERBEVEL);
m.flags & r.PT_CORNER && (v * n * n < 1 || i === s.BEVEL || i === s.ROUND) && (m.flags |= r.PT_BEVEL);
0 != (m.flags & (r.PT_BEVEL | r.PT_INNERBEVEL)) && f.nbevel++;
p = m;
m = _[g + 1];
}
}
},
_flattenPaths: function(t) {
for (var e = t._paths, i = t._pathOffset, n = t._pathLength; i < n; i++) {
var r = e[i], s = r.points, a = s[s.length - 1], o = s[0];
if (a.equals(o)) {
r.closed = !0;
s.pop();
a = s[s.length - 1];
}
for (var c = 0, h = s.length; c < h; c++) {
var l = o.sub(a);
a.len = l.mag();
(l.x || l.y) && l.normalizeSelf();
a.dx = l.x;
a.dy = l.y;
a = o;
o = s[c + 1];
}
}
},
_chooseBevel: function(t, e, i, n) {
var r = i.x, s = i.y, a = void 0, o = void 0, c = void 0, h = void 0;
if (0 !== t) {
a = r + e.dy * n;
o = s - e.dx * n;
c = r + i.dy * n;
h = s - i.dx * n;
} else {
a = c = r + i.dmx * n;
o = h = s + i.dmy * n;
}
return [ a, o, c, h ];
},
_buttCap: function(t, e, i, n, r) {
var s = t.x - e * r, a = t.y - i * r, o = i, c = -e;
this._vset(s + o * n, a + c * n);
this._vset(s - o * n, a - c * n);
},
_roundCapStart: function(t, e, i, n, r) {
for (var s = t.x, a = t.y, o = i, c = -e, l = 0; l < r; l++) {
var u = l / (r - 1) * h, f = d(u) * n, _ = p(u) * n;
this._vset(s - o * f - e * _, a - c * f - i * _);
this._vset(s, a);
}
this._vset(s + o * n, a + c * n);
this._vset(s - o * n, a - c * n);
},
_roundCapEnd: function(t, e, i, n, r) {
var s = t.x, a = t.y, o = i, c = -e;
this._vset(s + o * n, a + c * n);
this._vset(s - o * n, a - c * n);
for (var l = 0; l < r; l++) {
var u = l / (r - 1) * h, f = d(u) * n, _ = p(u) * n;
this._vset(s, a);
this._vset(s - o * f + e * _, a - c * f + i * _);
}
},
_roundJoin: function(t, e, i, n, s) {
var a = t.dy, o = -t.dx, c = e.dy, l = -e.dx, u = e.x, _ = e.y;
if (0 != (e.flags & r.PT_LEFT)) {
var g = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, i), v = g[0], y = g[1], T = g[2], E = g[3], C = m(-o, -a), A = m(-l, -c);
A > C && (A -= 2 * h);
this._vset(v, y);
this._vset(u - a * n, e.y - o * n);
for (var b = x(f((C - A) / h) * s, 2, s), S = 0; S < b; S++) {
var w = C + S / (b - 1) * (A - C), D = u + d(w) * n, I = _ + p(w) * n;
this._vset(u, _);
this._vset(D, I);
}
this._vset(T, E);
this._vset(u - c * n, _ - l * n);
} else {
var R = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, -n), M = R[0], L = R[1], O = R[2], P = R[3], F = m(o, a), N = m(l, c);
N < F && (N += 2 * h);
this._vset(u + a * n, _ + o * n);
this._vset(M, L);
for (var B = x(f((N - F) / h) * s, 2, s), k = 0; k < B; k++) {
var z = F + k / (B - 1) * (N - F), U = u + d(z) * i, H = _ + p(z) * i;
this._vset(U, H);
this._vset(u, _);
}
this._vset(u + c * n, _ + l * n);
this._vset(O, P);
}
},
_bevelJoin: function(t, e, i, n) {
var s = void 0, a = void 0, o = void 0, c = void 0, h = void 0, l = void 0, u = void 0, f = void 0, _ = t.dy, d = -t.dx, p = e.dy, m = -e.dx;
if (e.flags & r.PT_LEFT) {
var g = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, i);
h = g[0];
l = g[1];
u = g[2];
f = g[3];
this._vset(h, l);
this._vset(e.x - _ * n, e.y - d * n);
this._vset(u, f);
this._vset(e.x - p * n, e.y - m * n);
} else {
var v = this._chooseBevel(e.flags & r.PT_INNERBEVEL, t, e, -n);
s = v[0];
a = v[1];
o = v[2];
c = v[3];
this._vset(e.x + _ * i, e.y + d * i);
this._vset(s, a);
this._vset(e.x + p * i, e.y + m * i);
this._vset(o, c);
}
},
_vset: function(t, e) {
var i = g.meshbuffer, n = 3 * i.vertexStart, r = i._vData, s = i._uintVData;
r[n] = t;
r[n + 1] = e;
s[n + 2] = y;
i.vertexStart++;
i._dirty = !0;
}
};
n._assembler = E;
e.exports = E;
}), {
"../../../../graphics/graphics": 106,
"../../../../graphics/types": 109,
"./earcut": 184,
"./impl": 185
} ],
187: [ (function(t, e, i) {
t("./sprite");
t("./mask-assembler");
t("./graphics");
t("./label");
t("./motion-streak");
}), {
"./graphics": 186,
"./label": 189,
"./mask-assembler": 192,
"./motion-streak": 193,
"./sprite": 195
} ],
188: [ (function(t, e, i) {
var n = t("../../../../platform/js"), r = t("../../../utils/label/bmfont");
e.exports = n.addon({
createData: function(t) {
return t.requestRenderData();
},
fillBuffers: function(t, e) {
for (var i = t.node, n = t._renderData, r = n._data, s = i.color._val, a = i._worldMatrix, o = a.m00, c = a.m01, h = a.m04, l = a.m05, u = a.m12, f = a.m13, _ = e._meshBuffer, d = n.vertexCount, p = _.request(d, n.indiceCount), m = p.indiceOffset, g = p.byteOffset >> 2, v = p.vertexOffset, y = _._vData, T = _._uintVData, x = _._iData, E = 0; E < d; E++) {
var C = r[E];
y[g++] = C.x * o + C.y * h + u;
y[g++] = C.x * c + C.y * l + f;
y[g++] = C.u;
y[g++] = C.v;
T[g++] = s;
}
for (var A = 0, b = d / 4; A < b; A++) {
var S = v + 4 * A;
x[m++] = S;
x[m++] = S + 1;
x[m++] = S + 2;
x[m++] = S + 1;
x[m++] = S + 3;
x[m++] = S + 2;
}
},
appendQuad: function(t, e, i, n, r, s, a) {
var o = t.dataLength;
t.dataLength += 4;
t.vertexCount = t.dataLength;
t.indiceCount = t.dataLength / 2 * 3;
var c = t._data, h = e.width, l = e.height, u = i.width, f = i.height, _ = void 0, d = void 0, p = void 0, m = void 0;
if (n) {
_ = i.x / h;
p = (i.x + f) / h;
d = (i.y + u) / l;
m = i.y / l;
c[o].u = _;
c[o].v = m;
c[o + 1].u = _;
c[o + 1].v = d;
c[o + 2].u = p;
c[o + 2].v = m;
c[o + 3].u = p;
c[o + 3].v = d;
} else {
_ = i.x / h;
p = (i.x + u) / h;
d = (i.y + f) / l;
m = i.y / l;
c[o].u = _;
c[o].v = d;
c[o + 1].u = p;
c[o + 1].v = d;
c[o + 2].u = _;
c[o + 2].v = m;
c[o + 3].u = p;
c[o + 3].v = m;
}
c[o].x = r;
c[o].y = s - f * a;
c[o + 1].x = r + u * a;
c[o + 1].y = s - f * a;
c[o + 2].x = r;
c[o + 2].y = s;
c[o + 3].x = r + u * a;
c[o + 3].y = s;
}
}, r);
}), {
"../../../../platform/js": 154,
"../../../utils/label/bmfont": 180
} ],
189: [ (function(t, e, i) {
var n = t("../../../../components/CCLabel"), r = t("./ttf"), s = t("./bmfont"), a = t("./letter-font"), o = {
pool: [],
get: function() {
var t = this.pool.pop();
if (!t) {
var e = document.createElement("canvas");
t = {
canvas: e,
context: e.getContext("2d")
};
}
return t;
},
put: function(t) {
this.pool.length >= 32 || this.pool.push(t);
}
}, c = {
getAssembler: function(t) {
var e = r;
t.font instanceof cc.BitmapFont ? e = s : t.cacheMode === n.CacheMode.CHAR && (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB ? cc.warn("sorry, subdomain does not support CHAR mode currently!") : e = a);
return e;
},
updateRenderData: function(t) {
return t.__allocedDatas;
}
};
n._assembler = c;
n._canvasPool = o;
e.exports = c;
}), {
"../../../../components/CCLabel": 69,
"./bmfont": 188,
"./letter-font": 190,
"./ttf": 191
} ],
190: [ (function(t, e, i) {
var n = t("../../../../platform/js"), r = t("../../../utils/label/letter-font"), s = cc.color(255, 255, 255, 255);
e.exports = n.addon({
createData: function(t) {
return t.requestRenderData();
},
fillBuffers: function(t, e) {
var i = t.node, n = t._renderData, r = n._data, a = i._worldMatrix, o = a.m00, c = a.m01, h = a.m04, l = a.m05, u = a.m12, f = a.m13;
s._fastSetA(i.color.a);
for (var _ = s._val, d = e._meshBuffer, p = n.vertexCount, m = d.request(p, n.indiceCount), g = m.indiceOffset, v = m.byteOffset >> 2, y = m.vertexOffset, T = d._vData, x = d._uintVData, E = d._iData, C = 0; C < p; C++) {
var A = r[C];
T[v++] = A.x * o + A.y * h + u;
T[v++] = A.x * c + A.y * l + f;
T[v++] = A.u;
T[v++] = A.v;
x[v++] = _;
}
for (var b = 0, S = p / 4; b < S; b++) {
var w = y + 4 * b;
E[g++] = w;
E[g++] = w + 1;
E[g++] = w + 2;
E[g++] = w + 1;
E[g++] = w + 3;
E[g++] = w + 2;
}
},
appendQuad: function(t, e, i, n, r, s, a) {
var o = t.dataLength;
t.dataLength += 4;
t.vertexCount = t.dataLength;
t.indiceCount = t.dataLength / 2 * 3;
var c = t._data, h = e.width, l = e.height, u = i.width, f = i.height, _ = void 0, d = void 0, p = void 0, m = void 0;
if (n) {
_ = i.x / h;
p = (i.x + f) / h;
d = (i.y + u) / l;
m = i.y / l;
c[o].u = _;
c[o].v = m;
c[o + 1].u = _;
c[o + 1].v = d;
c[o + 2].u = p;
c[o + 2].v = m;
c[o + 3].u = p;
c[o + 3].v = d;
} else {
_ = i.x / h;
p = (i.x + u) / h;
d = (i.y + f) / l;
m = i.y / l;
c[o].u = _;
c[o].v = d;
c[o + 1].u = p;
c[o + 1].v = d;
c[o + 2].u = _;
c[o + 2].v = m;
c[o + 3].u = p;
c[o + 3].v = m;
}
c[o].x = r;
c[o].y = s - f * a;
c[o + 1].x = r + u * a;
c[o + 1].y = s - f * a;
c[o + 2].x = r;
c[o + 2].y = s;
c[o + 3].x = r + u * a;
c[o + 3].y = s;
}
}, r);
}), {
"../../../../platform/js": 154,
"../../../utils/label/letter-font": 182
} ],
191: [ (function(t, e, i) {
var n = t("../../../../platform/js"), r = t("../../../utils/label/ttf"), s = cc.color(255, 255, 255, 255);
e.exports = n.addon({
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 4;
e.vertexCount = 4;
e.indiceCount = 6;
return e;
},
fillBuffers: function(t, e) {
var i = t._renderData._data, n = t.node, r = n._worldMatrix, a = r.m00, o = r.m01, c = r.m04, h = r.m05, l = r.m12, u = r.m13;
s._fastSetA(n.color.a);
for (var f = s._val, _ = e._meshBuffer, d = _.request(4, 6), p = d.indiceOffset, m = d.byteOffset >> 2, g = d.vertexOffset, v = _._vData, y = _._uintVData, T = _._iData, x = 0; x < 4; x++) {
var E = i[x];
v[m++] = E.x * a + E.y * c + l;
v[m++] = E.x * o + E.y * h + u;
v[m++] = E.u;
v[m++] = E.v;
y[m++] = f;
}
T[p++] = g;
T[p++] = g + 1;
T[p++] = g + 2;
T[p++] = g + 1;
T[p++] = g + 3;
T[p++] = g + 2;
},
_updateVerts: function(t) {
var e = t._renderData, i = t._frame.uv, n = t.node, r = n.width, s = n.height, a = n.anchorX * r, o = n.anchorY * s, c = e._data;
c[0].x = -a;
c[0].y = -o;
c[1].x = r - a;
c[1].y = -o;
c[2].x = -a;
c[2].y = s - o;
c[3].x = r - a;
c[3].y = s - o;
c[0].u = i[0];
c[0].v = i[1];
c[1].u = i[2];
c[1].v = i[3];
c[2].u = i[4];
c[2].v = i[5];
c[3].u = i[6];
c[3].v = i[7];
}
}, r);
}), {
"../../../../platform/js": 154,
"../../../utils/label/ttf": 183
} ],
192: [ (function(t, e, i) {
var n = t("../stencil-manager"), r = t("../../../components/CCMask"), s = t("../../render-flow"), a = t("./sprite/simple"), o = t("./graphics"), c = n.sharedManager, h = {
updateRenderData: function(t) {
if (!t._renderData) {
o.updateRenderData(t._clearGraphics);
t._type === r.Type.IMAGE_STENCIL ? t._renderData = a.createData(t) : t._renderData = t.requestRenderData();
}
var e = t._renderData;
if (t._type === r.Type.IMAGE_STENCIL) if (t.spriteFrame) {
var i = t.node._contentSize, n = t.node._anchorPoint;
e.updateSizeNPivot(i.width, i.height, n.x, n.y);
e.dataLength = 4;
a.updateRenderData(t);
e.material = t._material;
} else t._material = null; else {
t._graphics._material = t._material;
o.updateRenderData(t._graphics);
}
},
fillBuffers: function(t, e) {
if (t._type !== r.Type.IMAGE_STENCIL || t.spriteFrame) {
c.pushMask(t);
c.clear();
o.fillBuffers(t._clearGraphics, e);
c.enterLevel();
e.node = t.node;
e.material = t._material;
if (t._type === r.Type.IMAGE_STENCIL) {
a.fillBuffers(t, e);
e._flush();
} else o.fillBuffers(t._graphics, e);
c.enableMask();
}
t.node._renderFlag |= s.FLAG_UPDATE_RENDER_DATA;
}
}, l = {
fillBuffers: function(t, e) {
(t._type !== r.Type.IMAGE_STENCIL || t.spriteFrame) && c.exitMask();
t.node._renderFlag |= s.FLAG_UPDATE_RENDER_DATA;
}
};
r._assembler = h;
r._postAssembler = l;
e.exports = {
front: h,
end: l
};
}), {
"../../../components/CCMask": 72,
"../../render-flow": 177,
"../stencil-manager": 205,
"./graphics": 186,
"./sprite/simple": 198
} ],
193: [ (function(t, e, i) {
var n = t("../../../components/CCMotionStreak"), r = t("../../render-flow");
function s(t, e) {
this.point = t || cc.v2();
this.dir = e || cc.v2();
this.distance = 0;
this.time = 0;
}
s.prototype.setPoint = function(t, e) {
this.point.x = t;
this.point.y = e;
};
s.prototype.setDir = function(t, e) {
this.dir.x = t;
this.dir.y = e;
};
cc.v2(), cc.v2();
var a = cc.v2(), o = cc.v2();
function c(t, e) {
t.x = -e.y;
t.y = e.x;
return t;
}
var h = {
updateRenderData: function(t) {
var e = cc.director.getDeltaTime();
this.update(t, e);
var i = t._renderData, n = t.node._contentSize, r = t.node._anchorPoint;
i.updateSizeNPivot(n.width, n.height, r.x, r.y);
i.material = t.getMaterial();
},
update: function(t, e) {
var i = t._renderData;
i || (i = t._renderData = t.requestRenderData());
0;
var n = t._stroke / 2, r = t.node._worldMatrix, h = (r.m00, r.m01, r.m04, r.m05, 
r.m12), l = r.m13, u = t._points, f = void 0;
if (u.length > 1) {
var _ = u[0].point.x - h, d = u[0].point.y - l;
_ * _ + d * d < t.minSeg && (f = u[0]);
}
if (!f) {
f = new s();
u.splice(0, 0, f);
}
f.setPoint(h, l);
f.time = t._fadeTime + e;
i.dataLength = 0;
if (!(u.length < 2)) {
var p = i._data, m = t._color, g = m.r, v = m.g, y = m.b, T = m.a, x = u[1];
x.distance = f.point.sub(x.point, o).mag();
o.normalizeSelf();
x.setDir(o.x, o.y);
f.setDir(o.x, o.y);
for (var E = t._fadeTime, C = !1, A = u.length - 1; A >= 0; A--) {
var b = u[A], S = b.point, w = b.dir;
b.time -= e;
if (b.time < 0) u.splice(A, 1); else {
var D = b.time / E, I = u[A - 1];
if (!C) {
if (!I) {
u.splice(A, 1);
continue;
}
S.x = I.point.x - w.x * D;
S.y = I.point.y - w.y * D;
}
C = !0;
c(a, w);
i.dataLength += 2;
var R = (D * T << 24 >>> 0) + (y << 16) + (v << 8) + g, M = p.length - 1;
p[M].x = S.x - a.x * n;
p[M].y = S.y - a.y * n;
p[M].u = 0;
p[M].v = D;
p[M].color = R;
p[--M].x = S.x + a.x * n;
p[M].y = S.y + a.y * n;
p[M].u = 1;
p[M].v = D;
p[M].color = R;
}
}
i.vertexCount = i.dataLength;
i.indiceCount = i.vertexCount < 2 ? 0 : 3 * (i.vertexCount - 2);
}
},
fillBuffers: function(t, e) {
t.node;
for (var i = t._renderData, n = i._data, s = e._meshBuffer, a = i.vertexCount, o = s.request(a, i.indiceCount), c = o.indiceOffset, h = o.byteOffset >> 2, l = o.vertexOffset, u = s._vData, f = s._uintVData, _ = s._iData, d = void 0, p = 0, m = i.vertexCount; p < m; p++) {
d = n[p];
u[h++] = d.x;
u[h++] = d.y;
u[h++] = d.u;
u[h++] = d.v;
f[h++] = d.color;
}
for (var g = 0, v = i.vertexCount; g < v; g += 2) {
var y = l + g;
_[c++] = y;
_[c++] = y + 2;
_[c++] = y + 1;
_[c++] = y + 1;
_[c++] = y + 2;
_[c++] = y + 3;
}
t.node._renderFlag |= r.FLAG_UPDATE_RENDER_DATA;
}
};
e.exports = n._assembler = h;
}), {
"../../../components/CCMotionStreak": 73,
"../../render-flow": 177
} ],
194: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite").FillType;
e.exports = {
useModel: !1,
updateRenderData: function(t) {
var e = t.spriteFrame;
t._calDynamicAtlas();
var i = t._renderData;
if (i && e) {
var n = i.uvDirty, r = i.vertDirty;
if (!n && !r) return t.__allocedDatas;
var s = t._fillStart, a = t._fillRange;
if (a < 0) {
s += a;
a = -a;
}
a = s + a;
s = (s = s > 1 ? 1 : s) < 0 ? 0 : s;
a = (a = a > 1 ? 1 : a) < 0 ? 0 : a;
var o = s + (a = (a -= s) < 0 ? 0 : a);
o = o > 1 ? 1 : o;
n && this.updateUVs(t, s, o);
if (r) {
this.updateVerts(t, s, o);
this.updateWorldVerts(t);
}
}
},
updateUVs: function(t, e, i) {
var r = t._spriteFrame, s = t._renderData, a = s._data, o = r._texture.width, c = r._texture.height, h = r._rect, l = void 0, u = void 0, f = void 0, _ = void 0, d = void 0, p = void 0, m = void 0, g = void 0, v = void 0, y = void 0, T = void 0, x = void 0;
if (r._rotated) {
l = h.x / o;
u = (h.y + h.width) / c;
f = (h.x + h.height) / o;
_ = h.y / c;
d = m = l;
v = T = f;
g = x = u;
p = y = _;
} else {
l = h.x / o;
u = (h.y + h.height) / c;
f = (h.x + h.width) / o;
_ = h.y / c;
d = v = l;
m = T = f;
p = g = u;
y = x = _;
}
switch (t._fillType) {
case n.HORIZONTAL:
a[0].u = d + (m - d) * e;
a[0].v = p + (g - p) * e;
a[1].u = d + (m - d) * i;
a[1].v = p + (g - p) * i;
a[2].u = v + (T - v) * e;
a[2].v = y + (x - y) * e;
a[3].u = v + (T - v) * i;
a[3].v = y + (x - y) * i;
break;

case n.VERTICAL:
a[0].u = d + (v - d) * e;
a[0].v = p + (y - p) * e;
a[1].u = m + (T - m) * e;
a[1].v = g + (x - g) * e;
a[2].u = d + (v - d) * i;
a[2].v = p + (y - p) * i;
a[3].u = m + (T - m) * i;
a[3].v = g + (x - g) * i;
break;

default:
cc.errorID(2626);
}
s.uvDirty = !1;
},
updateVerts: function(t, e, i) {
var r = t._renderData, s = r._data, a = t.node, o = a.width, c = a.height, h = a.anchorX * o, l = a.anchorY * c, u = -h, f = -l, _ = o - h, d = c - l, p = void 0;
switch (t._fillType) {
case n.HORIZONTAL:
p = u + (_ - u) * i;
u = u + (_ - u) * e;
_ = p;
break;

case n.VERTICAL:
p = f + (d - f) * i;
f = f + (d - f) * e;
d = p;
break;

default:
cc.errorID(2626);
}
s[4].x = u;
s[4].y = f;
s[5].x = _;
s[5].y = f;
s[6].x = u;
s[6].y = d;
s[7].x = _;
s[7].y = d;
r.vertDirty = !1;
},
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 8;
e.vertexCount = 4;
e.indiceCount = 6;
return e;
},
updateWorldVerts: function(t) {
for (var e = t.node, i = t._renderData._data, n = e._worldMatrix, r = n.m00, s = n.m01, a = n.m04, o = n.m05, c = n.m12, h = n.m13, l = 0; l < 4; l++) {
var u = i[l + 4], f = i[l];
f.x = u.x * r + u.y * a + c;
f.y = u.x * s + u.y * o + h;
}
},
fillBuffers: function(t, e) {
e.worldMatDirty && this.updateWorldVerts(t);
for (var i = t._renderData._data, n = t.node, r = n._color._val, s = n._worldMatrix, a = (s.m00, 
s.m01, s.m04, s.m05, s.m12, s.m13, e._meshBuffer), o = a.request(4, 6), c = o.indiceOffset, h = o.byteOffset >> 2, l = o.vertexOffset, u = a._vData, f = a._uintVData, _ = 0; _ < 4; _++) {
var d = i[_];
u[h++] = d.x;
u[h++] = d.y;
u[h++] = d.u;
u[h++] = d.v;
f[h++] = r;
}
var p = a._iData;
p[c++] = l;
p[c++] = l + 1;
p[c++] = l + 2;
p[c++] = l + 1;
p[c++] = l + 3;
p[c++] = l + 2;
}
};
}), {
"../../../../components/CCSprite": 82
} ],
195: [ (function(t, e, i) {
var n = t("../../../../components/CCSprite"), r = n.Type, s = n.FillType, a = t("./simple"), o = t("./sliced"), c = t("./tiled"), h = t("./radial-filled"), l = t("./bar-filled"), u = t("./mesh"), f = {
getAssembler: function(t) {
var e = a;
switch (t.type) {
case r.SLICED:
e = o;
break;

case r.TILED:
e = c;
break;

case r.FILLED:
e = t._fillType === s.RADIAL ? h : l;
break;

case r.MESH:
e = u;
}
return e;
},
updateRenderData: function(t) {
return t.__allocedDatas;
}
};
n._assembler = f;
e.exports = f;
}), {
"../../../../components/CCSprite": 82,
"./bar-filled": 194,
"./mesh": 196,
"./radial-filled": 197,
"./simple": 198,
"./sliced": 199,
"./tiled": 200
} ],
196: [ (function(t, e, i) {
e.exports = {
useModel: !1,
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
var e = t.spriteFrame;
t._calDynamicAtlas();
var i = t._renderData;
if (i && e) {
var n = e.vertices;
if (n) {
if (i.vertexCount !== n.x.length) {
i.vertexCount = n.x.length;
i.indiceCount = n.triangles.length;
i.dataLength = 2 * i.vertexCount;
i.uvDirty = i.vertDirty = !0;
}
i.uvDirty && this.updateUVs(t);
if (i.vertDirty) {
this.updateVerts(t);
this.updateWorldVerts(t);
}
}
}
},
updateUVs: function(t) {
for (var e = t.getMaterial().effect.getProperty("texture"), i = (e._width, e._height, 
t.spriteFrame.vertices), n = i.nu, r = i.nv, s = t._renderData, a = s._data, o = 0, c = n.length; o < c; o++) {
var h = a[o];
h.u = n[o];
h.v = r[o];
}
s.uvDirty = !1;
},
updateVerts: function(t) {
var e = t.node, i = Math.abs(e.width), n = Math.abs(e.height), r = e.anchorX * i, s = e.anchorY * n, a = t.spriteFrame, o = a.vertices, c = o.x, h = o.y, l = a._originalSize.width, u = a._originalSize.height, f = a._rect.width, _ = a._rect.height, d = a._offset.x + (l - f) / 2, p = a._offset.y + (u - _) / 2, m = i / (t.trim ? f : l), g = n / (t.trim ? _ : u), v = t._renderData, y = v._data;
if (t.trim) for (var T = 0, x = c.length; T < x; T++) {
var E = y[T + x];
E.x = (c[T] - d) * m - r;
E.y = (u - h[T] - p) * g - s;
} else for (var C = 0, A = c.length; C < A; C++) {
var b = y[C + A];
b.x = c[C] * m - r;
b.y = (u - h[C]) * g - s;
}
v.vertDirty = !1;
},
updateWorldVerts: function(t) {
for (var e = t.node, i = t._renderData, n = i._data, r = e._worldMatrix, s = r.m00, a = r.m01, o = r.m04, c = r.m05, h = r.m12, l = r.m13, u = 0, f = i.vertexCount; u < f; u++) {
var _ = n[u + f], d = n[u];
d.x = _.x * s + _.y * o + h;
d.y = _.x * a + _.y * c + l;
}
},
fillBuffers: function(t, e) {
var i = t.node._color._val, n = t._renderData, r = n._data, s = t.spriteFrame.vertices;
if (s) {
e.worldMatDirty && this.updateWorldVerts(t);
for (var a = e._meshBuffer, o = a.request(n.vertexCount, n.indiceCount), c = o.indiceOffset, h = o.byteOffset >> 2, l = o.vertexOffset, u = a._vData, f = a._uintVData, _ = a._iData, d = 0, p = n.vertexCount; d < p; d++) {
var m = r[d];
u[h++] = m.x;
u[h++] = m.y;
u[h++] = m.u;
u[h++] = m.v;
f[h++] = i;
}
for (var g = s.triangles, v = 0, y = g.length; v < y; v++) _[c++] = l + g[v];
}
}
};
}), {} ],
197: [ (function(t, e, i) {
var n = 2 * Math.PI;
e.exports = {
useModel: !1,
_vertPos: [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ],
_vertices: [ 0, 0, 0, 0 ],
_uvs: [ 0, 0, 0, 0, 0, 0, 0, 0 ],
_intersectPoint_1: [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ],
_intersectPoint_2: [ cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0) ],
_center: cc.v2(0, 0),
_triangles: [],
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
var e = t.spriteFrame;
t._calDynamicAtlas();
var i = t._renderData;
if (i && e && (i.vertDirty || i.uvDirty)) {
var r = i._data, s = t._fillStart, a = t._fillRange;
if (a < 0) {
s += a;
a = -a;
}
for (;s >= 1; ) s -= 1;
for (;s < 0; ) s += 1;
var o = (s *= n) + (a *= n);
this._calculateVertices(t);
this._calculateUVs(e);
var c = this._center, h = this._vertPos, l = this._vertices, u = this._triangles;
this._calcInsectedPoints(l[0], l[2], l[1], l[3], c, s, this._intersectPoint_1);
this._calcInsectedPoints(l[0], l[2], l[1], l[3], c, s + a, this._intersectPoint_2);
for (var f = 0, _ = 0; _ < 4; ++_) {
var d = u[_];
if (d) if (a >= n) {
i.dataLength = f + 3;
this._generateTriangle(r, f, c, h[d[0]], h[d[1]]);
f += 3;
} else {
var p = this._getVertAngle(c, h[d[0]]), m = this._getVertAngle(c, h[d[1]]);
m < p && (m += n);
p -= n;
m -= n;
for (var g = 0; g < 3; ++g) {
if (p >= o) ; else if (p >= s) {
i.dataLength = f + 3;
m >= o ? this._generateTriangle(r, f, c, h[d[0]], this._intersectPoint_2[_]) : this._generateTriangle(r, f, c, h[d[0]], h[d[1]]);
f += 3;
} else if (m <= s) ; else if (m <= o) {
i.dataLength = f + 3;
this._generateTriangle(r, f, c, this._intersectPoint_1[_], h[d[1]]);
f += 3;
} else {
i.dataLength = f + 3;
this._generateTriangle(r, f, c, this._intersectPoint_1[_], this._intersectPoint_2[_]);
f += 3;
}
p += n;
m += n;
}
}
}
i.indiceCount = i.vertexCount = f;
i.vertDirty = i.uvDirty = !1;
}
},
_getVertAngle: function(t, e) {
var i, n;
i = e.x - t.x;
n = e.y - t.y;
if (0 !== i || 0 !== n) {
if (0 === i) return n > 0 ? .5 * Math.PI : 1.5 * Math.PI;
var r = Math.atan(n / i);
i < 0 && (r += Math.PI);
return r;
}
},
_generateTriangle: function(t, e, i, n, r) {
var s = this._vertices, a = s[0], o = s[1], c = s[2], h = s[3];
t[e].x = i.x;
t[e].y = i.y;
t[e + 1].x = n.x;
t[e + 1].y = n.y;
t[e + 2].x = r.x;
t[e + 2].y = r.y;
var l = void 0, u = void 0;
l = (i.x - a) / (c - a);
u = (i.y - o) / (h - o);
this._generateUV(l, u, t, e);
l = (n.x - a) / (c - a);
u = (n.y - o) / (h - o);
this._generateUV(l, u, t, e + 1);
l = (r.x - a) / (c - a);
u = (r.y - o) / (h - o);
this._generateUV(l, u, t, e + 2);
},
_generateUV: function(t, e, i, n) {
var r = this._uvs, s = r[0] + (r[2] - r[0]) * t, a = r[4] + (r[6] - r[4]) * t, o = r[1] + (r[3] - r[1]) * t, c = r[5] + (r[7] - r[5]) * t, h = i[n];
h.u = s + (a - s) * e;
h.v = o + (c - o) * e;
},
_calcInsectedPoints: function(t, e, i, n, r, s, a) {
var o = Math.sin(s), c = Math.cos(s), h = void 0, l = void 0;
if (0 !== Math.cos(s)) {
h = o / c;
if ((t - r.x) * c > 0) {
var u = r.y + h * (t - r.x);
a[0].x = t;
a[0].y = u;
}
if ((e - r.x) * c > 0) {
var f = r.y + h * (e - r.x);
a[2].x = e;
a[2].y = f;
}
}
if (0 !== Math.sin(s)) {
l = c / o;
if ((n - r.y) * o > 0) {
var _ = r.x + l * (n - r.y);
a[3].x = _;
a[3].y = n;
}
if ((i - r.y) * o > 0) {
var d = r.x + l * (i - r.y);
a[1].x = d;
a[1].y = i;
}
}
},
_calculateVertices: function(t) {
var e = t.node, i = e.width, n = e.height, r = e.anchorX * i, s = e.anchorY * n, a = -r, o = -s, c = i - r, h = n - s, l = this._vertices;
l[0] = a;
l[1] = o;
l[2] = c;
l[3] = h;
var u = this._center, f = t._fillCenter, _ = u.x = Math.min(Math.max(0, f.x), 1) * (c - a) + a, d = u.y = Math.min(Math.max(0, f.y), 1) * (h - o) + o, p = this._vertPos;
p[0].x = p[3].x = a;
p[1].x = p[2].x = c;
p[0].y = p[1].y = o;
p[2].y = p[3].y = h;
var m = this._triangles;
m.length = 0;
_ !== l[0] && (m[0] = [ 3, 0 ]);
_ !== l[2] && (m[2] = [ 1, 2 ]);
d !== l[1] && (m[1] = [ 0, 1 ]);
d !== l[3] && (m[3] = [ 2, 3 ]);
},
_calculateUVs: function(t) {
var e = t._texture.width, i = t._texture.height, n = t._rect, r = void 0, s = void 0, a = void 0, o = void 0, c = this._uvs;
if (t._rotated) {
r = n.x / e;
s = (n.x + n.height) / e;
a = n.y / i;
o = (n.y + n.width) / i;
c[0] = c[2] = r;
c[4] = c[6] = s;
c[3] = c[7] = o;
c[1] = c[5] = a;
} else {
r = n.x / e;
s = (n.x + n.width) / e;
a = n.y / i;
o = (n.y + n.height) / i;
c[0] = c[4] = r;
c[2] = c[6] = s;
c[1] = c[3] = o;
c[5] = c[7] = a;
}
},
fillBuffers: function(t, e) {
for (var i = t._renderData, n = i._data, r = t.node, s = r._color._val, a = r._worldMatrix, o = a.m00, c = a.m01, h = a.m04, l = a.m05, u = a.m12, f = a.m13, _ = e._meshBuffer, d = _.request(i.vertexCount, i.indiceCount), p = d.indiceOffset, m = d.byteOffset >> 2, g = d.vertexOffset, v = _._iData, y = _._vData, T = _._uintVData, x = n.length, E = 0; E < x; E++) {
var C = n[E];
y[m++] = C.x * o + C.y * h + u;
y[m++] = C.x * c + C.y * l + f;
y[m++] = C.u;
y[m++] = C.v;
T[m++] = s;
}
for (var A = 0; A < x; A++) v[p + A] = g + A;
}
};
}), {} ],
198: [ (function(t, e, i) {
e.exports = {
useModel: !1,
updateRenderData: function(t) {
var e = t._spriteFrame;
t._calDynamicAtlas();
var i = t._renderData;
i && e && i.vertDirty && this.updateVerts(t);
},
fillBuffers: function(t, e) {
var i = t._renderData._data, n = t.node, r = n._color._val, s = n._worldMatrix, a = s.m00, o = s.m01, c = s.m04, h = s.m05, l = s.m12, u = s.m13, f = e._meshBuffer, _ = f.request(4, 6), d = _.indiceOffset, p = _.byteOffset >> 2, m = _.vertexOffset, g = f._vData, v = f._uintVData, y = f._iData, T = t._spriteFrame.uv;
g[p + 2] = T[0];
g[p + 3] = T[1];
g[p + 7] = T[2];
g[p + 8] = T[3];
g[p + 12] = T[4];
g[p + 13] = T[5];
g[p + 17] = T[6];
g[p + 18] = T[7];
var x = i[0], E = i[3], C = x.x, A = E.x, b = x.y, S = E.y, w = a * C, D = a * A, I = o * C, R = o * A, M = c * b, L = c * S, O = h * b, P = h * S;
g[p] = w + M + l;
g[p + 1] = I + O + u;
g[p + 5] = D + M + l;
g[p + 6] = R + O + u;
g[p + 10] = w + L + l;
g[p + 11] = I + P + u;
g[p + 15] = D + L + l;
g[p + 16] = R + P + u;
v[p + 4] = r;
v[p + 9] = r;
v[p + 14] = r;
v[p + 19] = r;
y[d++] = m;
y[d++] = m + 1;
y[d++] = m + 2;
y[d++] = m + 1;
y[d++] = m + 3;
y[d++] = m + 2;
},
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 4;
e.vertexCount = 4;
e.indiceCount = 6;
return e;
},
updateVerts: function(t) {
var e = t._renderData, i = t.node, n = e._data, r = i.width, s = i.height, a = i.anchorX * r, o = i.anchorY * s, c = void 0, h = void 0, l = void 0, u = void 0;
if (t.trim) {
c = -a;
h = -o;
l = r - a;
u = s - o;
} else {
var f = t.spriteFrame, _ = f._originalSize.width, d = f._originalSize.height, p = f._rect.width, m = f._rect.height, g = f._offset, v = r / _, y = s / d, T = g.x + (_ - p) / 2, x = g.x - (_ - p) / 2, E = g.y + (d - m) / 2, C = g.y - (d - m) / 2;
c = T * v - a;
h = E * y - o;
l = r + x * v - a;
u = s + C * y - o;
}
n[0].x = c;
n[0].y = h;
n[3].x = l;
n[3].y = u;
e.vertDirty = !1;
}
};
}), {} ],
199: [ (function(t, e, i) {
e.exports = {
useModel: !1,
createData: function(t) {
var e = t.requestRenderData();
e.dataLength = 20;
e.vertexCount = 16;
e.indiceCount = 54;
return e;
},
updateRenderData: function(t, e) {
var i = t.spriteFrame;
t._calDynamicAtlas();
var n = t._renderData;
if (n && i) {
if (n.vertDirty) {
this.updateVerts(t);
this.updateWorldVerts(t);
}
}
},
updateVerts: function(t) {
var e = t._renderData, i = e._data, n = t.node, r = n.width, s = n.height, a = n.anchorX * r, o = n.anchorY * s, c = t.spriteFrame, h = c.insetLeft, l = c.insetRight, u = c.insetTop, f = c.insetBottom, _ = r - h - l, d = s - u - f, p = r / (h + l), m = s / (u + f);
p = isNaN(p) || p > 1 ? 1 : p;
m = isNaN(m) || m > 1 ? 1 : m;
_ = _ < 0 ? 0 : _;
d = d < 0 ? 0 : d;
i[0].x = -a;
i[0].y = -o;
i[1].x = h * p - a;
i[1].y = f * m - o;
i[2].x = i[1].x + _;
i[2].y = i[1].y + d;
i[3].x = r - a;
i[3].y = s - o;
e.vertDirty = !1;
},
fillBuffers: function(t, e) {
e.worldMatDirty && this.updateWorldVerts(t);
for (var i = t._renderData, n = t.node._color._val, r = i._data, s = e._meshBuffer, a = i.vertexCount, o = t.spriteFrame.uvSliced, c = s.request(a, i.indiceCount), h = c.indiceOffset, l = c.byteOffset >> 2, u = c.vertexOffset, f = s._vData, _ = s._uintVData, d = s._iData, p = 4; p < 20; ++p) {
var m = r[p], g = o[p - 4];
f[l++] = m.x;
f[l++] = m.y;
f[l++] = g.u;
f[l++] = g.v;
_[l++] = n;
}
for (var v = 0; v < 3; ++v) for (var y = 0; y < 3; ++y) {
var T = u + 4 * v + y;
d[h++] = T;
d[h++] = T + 1;
d[h++] = T + 4;
d[h++] = T + 1;
d[h++] = T + 5;
d[h++] = T + 4;
}
},
updateWorldVerts: function(t) {
for (var e = t.node, i = t._renderData._data, n = e._worldMatrix, r = n.m00, s = n.m01, a = n.m04, o = n.m05, c = n.m12, h = n.m13, l = 0; l < 4; ++l) for (var u = i[l], f = 0; f < 4; ++f) {
var _ = i[f], d = i[4 + 4 * l + f];
d.x = _.x * r + u.y * a + c;
d.y = _.x * s + u.y * o + h;
}
}
};
}), {} ],
200: [ (function(t, e, i) {
e.exports = {
useModel: !1,
createData: function(t) {
return t.requestRenderData();
},
updateRenderData: function(t) {
var e = t.spriteFrame;
t._calDynamicAtlas();
var i = t._renderData;
if (e && i && (i.uvDirty || i.vertDirty)) {
var n = e._texture, r = (n.width, n.height, e._rect), s = t.node, a = Math.abs(s.width), o = Math.abs(s.height), c = s.anchorX * a, h = s.anchorY * o, l = r.width, u = r.height, f = a / l, _ = o / u, d = Math.ceil(_), p = Math.ceil(f), m = i._data;
i.dataLength = Math.max(8, d + 1, p + 1);
for (var g = 0; g <= p; ++g) m[g].x = Math.min(l * g, a) - c;
for (var v = 0; v <= d; ++v) m[v].y = Math.min(u * v, o) - h;
i.vertexCount = d * p * 4;
i.indiceCount = d * p * 6;
i.uvDirty = !1;
i.vertDirty = !1;
}
},
fillBuffers: function(t, e) {
for (var i = t.node, n = i._color._val, r = t._renderData, s = r._data, a = e._meshBuffer, o = a.request(r.vertexCount, r.indiceCount), c = o.indiceOffset, h = o.byteOffset >> 2, l = o.vertexOffset, u = a._vData, f = a._uintVData, _ = a._iData, d = t.spriteFrame._rotated, p = t.spriteFrame.uv, m = t.spriteFrame._rect, g = Math.abs(i.width), v = Math.abs(i.height), y = g / m.width, T = v / m.height, x = Math.ceil(T), E = Math.ceil(y), C = i._worldMatrix, A = C.m00, b = C.m01, S = C.m04, w = C.m05, D = C.m12, I = C.m13, R = void 0, M = void 0, L = void 0, O = void 0, P = void 0, F = void 0, N = 0, B = x; N < B; ++N) {
L = s[N].y;
O = s[N + 1].y;
F = Math.min(1, T - N);
for (var k = 0, z = E; k < z; ++k) {
P = Math.min(1, y - k);
R = s[k].x;
M = s[k + 1].x;
u[h] = R * A + L * S + D;
u[h + 1] = R * b + L * w + I;
u[h + 5] = M * A + L * S + D;
u[h + 6] = M * b + L * w + I;
u[h + 10] = R * A + O * S + D;
u[h + 11] = R * b + O * w + I;
u[h + 15] = M * A + O * S + D;
u[h + 16] = M * b + O * w + I;
if (d) {
u[h + 2] = p[0];
u[h + 3] = p[1];
u[h + 7] = p[0];
u[h + 8] = p[1] + (p[7] - p[1]) * P;
u[h + 12] = p[0] + (p[6] - p[0]) * F;
u[h + 13] = p[1];
u[h + 17] = u[h + 12];
u[h + 18] = u[h + 8];
} else {
u[h + 2] = p[0];
u[h + 3] = p[1];
u[h + 7] = p[0] + (p[6] - p[0]) * P;
u[h + 8] = p[1];
u[h + 12] = p[0];
u[h + 13] = p[1] + (p[7] - p[1]) * F;
u[h + 17] = u[h + 7];
u[h + 18] = u[h + 13];
}
f[h + 4] = n;
f[h + 9] = n;
f[h + 14] = n;
f[h + 19] = n;
h += 20;
}
}
for (var U = r.indiceCount, H = 0; H < U; H += 6) {
_[c++] = l;
_[c++] = l + 1;
_[c++] = l + 2;
_[c++] = l + 1;
_[c++] = l + 3;
_[c++] = l + 2;
l += 4;
}
}
};
}), {} ],
201: [ (function(t, e, i) {
var n = t("../render-engine").gfx, r = cc.Class({
name: "cc.MeshBuffer",
ctor: function(t, e) {
this.byteStart = 0;
this.byteOffset = 0;
this.indiceStart = 0;
this.indiceOffset = 0;
this.vertexStart = 0;
this.vertexOffset = 0;
this._vertexFormat = e;
this._vertexBytes = this._vertexFormat._bytes;
this._arrOffset = 0;
this._vbArr = [];
this._vb = new n.VertexBuffer(t._device, e, n.USAGE_DYNAMIC, new ArrayBuffer(), 0);
this._vbArr[0] = this._vb;
this._ibArr = [];
this._ib = new n.IndexBuffer(t._device, n.INDEX_FMT_UINT16, n.USAGE_STATIC, new ArrayBuffer(), 0);
this._ibArr[0] = this._ib;
this._vData = null;
this._uintVData = null;
this._iData = null;
this._batcher = t;
this._initVDataCount = 256 * e._bytes;
this._initIDataCount = 1536;
this._offsetInfo = {
byteOffset: 0,
vertexOffset: 0,
indiceOffset: 0
};
this._reallocBuffer();
},
uploadData: function() {
if (0 !== this.byteOffset && this._dirty) {
var t = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2), e = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
this._vb.update(0, t);
this._ib.update(0, e);
this._dirty = !1;
}
},
switchBuffer: function() {
var t = ++this._arrOffset;
this.byteStart = 0;
this.byteOffset = 0;
this.vertexStart = 0;
this.vertexOffset = 0;
this.indiceStart = 0;
this.indiceOffset = 0;
if (t < this._vbArr.length) {
this._vb = this._vbArr[t];
this._ib = this._ibArr[t];
} else {
this._vb = new n.VertexBuffer(this._batcher._device, this._vertexFormat, n.USAGE_DYNAMIC, new ArrayBuffer(), 0);
this._vbArr[t] = this._vb;
this._vb._bytes = this._vData.byteLength;
this._ib = new n.IndexBuffer(this._batcher._device, n.INDEX_FMT_UINT16, n.USAGE_STATIC, new ArrayBuffer(), 0);
this._ibArr[t] = this._ib;
this._ib._bytes = this._iData.byteLength;
}
},
checkAndSwitchBuffer: function(t) {
if (this.vertexOffset + t > 65535) {
this.uploadData();
this._batcher._flush();
this.switchBuffer();
}
},
requestStatic: function(t, e) {
this.checkAndSwitchBuffer(t);
var i = this.byteOffset + t * this._vertexBytes, n = this.indiceOffset + e, r = this._vData.byteLength, s = this._iData.length;
if (i > r || n > s) {
for (;r < i || s < n; ) {
this._initVDataCount *= 2;
this._initIDataCount *= 2;
r = 4 * this._initVDataCount;
s = this._initIDataCount;
}
this._reallocBuffer();
}
var a = this._offsetInfo;
a.vertexOffset = this.vertexOffset;
this.vertexOffset += t;
a.indiceOffset = this.indiceOffset;
this.indiceOffset += e;
a.byteOffset = this.byteOffset;
this.byteOffset = i;
this._dirty = !0;
},
request: function(t, e) {
if (this._batcher._buffer !== this) {
this._batcher._flush();
this._batcher._buffer = this;
}
this.requestStatic(t, e);
return this._offsetInfo;
},
_reallocBuffer: function() {
this._reallocVData(!0);
this._reallocIData(!0);
},
_reallocVData: function(t) {
var e = void 0;
this._vData && (e = new Uint8Array(this._vData.buffer));
this._vData = new Float32Array(this._initVDataCount);
this._uintVData = new Uint32Array(this._vData.buffer);
var i = new Uint8Array(this._uintVData.buffer);
if (e && t) for (var n = 0, r = e.length; n < r; n++) i[n] = e[n];
this._vb._bytes = this._vData.byteLength;
},
_reallocIData: function(t) {
var e = this._iData;
this._iData = new Uint16Array(this._initIDataCount);
if (e && t) for (var i = this._iData, n = 0, r = e.length; n < r; n++) i[n] = e[n];
this._ib._bytes = this._iData.byteLength;
},
reset: function() {
this._arrOffset = 0;
this._vb = this._vbArr[0];
this._ib = this._ibArr[0];
this.byteStart = 0;
this.byteOffset = 0;
this.indiceStart = 0;
this.indiceOffset = 0;
this.vertexStart = 0;
this.vertexOffset = 0;
this._dirty = !1;
},
destroy: function() {
for (var t = 0; t < this._vbArr.length; t++) {
this._vbArr[t].destroy();
}
this._vbArr = null;
for (var e = 0; e < this._ibArr.length; e++) {
this._ibArr[e].destroy();
}
this._ibArr = null;
this._ib = null;
this._vb = null;
}
});
cc.MeshBuffer = e.exports = r;
}), {
"../render-engine": 176
} ],
202: [ (function(t, e, i) {
var n = t("../render-engine"), r = t("./vertex-format").vfmtPosUvColor, s = t("./stencil-manager"), a = t("./quad-buffer"), o = t("./mesh-buffer"), c = t("./spine-buffer"), h = new (t("../../platform/id-generater"))("VertextFormat"), l = n.RecyclePool, u = n.InputAssembler, f = {}, _ = new n.Material();
_.updateHash();
var d = function(t, e) {
this._renderScene = e;
this._device = t;
this._stencilMgr = s.sharedManager;
this.walking = !1;
this.material = _;
this.cullingMask = 1;
this._iaPool = new l(function() {
return new u();
}, 16);
this._modelPool = new l(function() {
return new n.Model();
}, 16);
this._quadBuffer = this.getBuffer("quad", r);
this._meshBuffer = this.getBuffer("mesh", r);
this._buffer = this._quadBuffer;
this._batchedModels = [];
this._dummyNode = new cc.Node();
this._sortKey = 0;
this.node = this._dummyNode;
this.parentOpacity = 1;
this.parentOpacityDirty = 0;
this.worldMatDirty = 0;
};
d.prototype = {
constructor: d,
reset: function() {
this._iaPool.reset();
for (var t = this._renderScene, e = this._batchedModels, i = 0; i < e.length; ++i) {
e[i].clearInputAssemblers();
e[i].clearEffects();
t.removeModel(e[i]);
}
this._modelPool.reset();
e.length = 0;
this._sortKey = 0;
for (var n in f) f[n].reset();
this._buffer = this._quadBuffer;
this.node = this._dummyNode;
this.material = _;
this.cullingMask = 1;
this.parentOpacity = 1;
this.parentOpacityDirty = 0;
this.worldMatDirty = 0;
this._stencilMgr.reset();
},
_flush: function() {
var t = this.material, e = this._buffer, i = e.indiceStart, n = e.indiceOffset - i;
if (this.walking && t && !(n <= 0)) {
var r = t.effect, s = this._iaPool.add();
s._vertexBuffer = e._vb;
s._indexBuffer = e._ib;
s._start = i;
s._count = n;
this._stencilMgr.handleEffect(r);
var a = this._modelPool.add();
this._batchedModels.push(a);
a.sortKey = this._sortKey++;
a._cullingMask = this.cullingMask;
a.setNode(this.node);
a.addEffect(r);
a.addInputAssembler(s);
this._renderScene.addModel(a);
e.byteStart = e.byteOffset;
e.indiceStart = e.indiceOffset;
e.vertexStart = e.vertexOffset;
}
},
_flushIA: function(t) {
var e = t.material;
if (t.ia && e) {
this.material = e;
var i = this._stencilMgr.handleEffect(e.effect), n = this._modelPool.add();
this._batchedModels.push(n);
n.sortKey = this._sortKey++;
n._cullingMask = this.cullingMask;
n.setNode(this.node);
n.addEffect(i);
n.addInputAssembler(t.ia);
this._renderScene.addModel(n);
}
},
_commitComp: function(t, e, i) {
if (this.material._hash !== t._material._hash || this.cullingMask !== i) {
this._flush();
this.node = e.useModel ? t.node : this._dummyNode;
this.material = t._material;
this.cullingMask = i;
}
e.fillBuffers(t, this);
},
_commitIA: function(t, e, i) {
this._flush();
this.cullingMask = i;
this.material = t._material;
this.node = e.useModel ? t.node : this._dummyNode;
e.renderIA(t, this);
},
terminate: function() {
cc.dynamicAtlasManager && cc.dynamicAtlasManager.enabled && cc.dynamicAtlasManager.update();
this._flush();
for (var t in f) f[t].uploadData();
this.walking = !1;
},
getBuffer: function(t, e) {
e.name || (e.name = h.getNewId());
var i = t + e.name, n = f[i];
if (!n) {
if ("mesh" === t) n = new o(this, e); else if ("quad" === t) n = new a(this, e); else {
if ("spine" !== t) {
cc.error("Not support buffer type [" + t + "]");
return null;
}
n = new c(this, e);
}
f[i] = n;
}
return n;
}
};
e.exports = d;
}), {
"../../platform/id-generater": 150,
"../render-engine": 176,
"./mesh-buffer": 201,
"./quad-buffer": 203,
"./spine-buffer": 204,
"./stencil-manager": 205,
"./vertex-format": 206
} ],
203: [ (function(t, e, i) {
var n = t("./mesh-buffer"), r = cc.Class({
name: "cc.QuadBuffer",
extends: n,
_fillQuadBuffer: function() {
for (var t = this._initIDataCount / 6, e = this._iData, i = 0, n = 0; i < t; i++) {
var r = 4 * i;
e[n++] = r;
e[n++] = r + 1;
e[n++] = r + 2;
e[n++] = r + 1;
e[n++] = r + 3;
e[n++] = r + 2;
}
var s = new Uint16Array(this._iData.buffer, 0, 6 * t);
this._ib.update(0, s);
},
uploadData: function() {
if (0 !== this.byteOffset && this._dirty) {
var t = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
this._vb.update(0, t);
this._dirty = !1;
}
},
switchBuffer: function() {
this._super();
if (this.indiceOffset > 0) {
var t = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
this._ib.update(0, t);
}
},
_reallocBuffer: function() {
this._reallocVData(!0);
this._reallocIData();
this._fillQuadBuffer();
}
});
cc.QuadBuffer = e.exports = r;
}), {
"./mesh-buffer": 201
} ],
204: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.SpineBuffer",
extends: t("./mesh-buffer"),
requestStatic: function(t, e) {
this.checkAndSwitchBuffer(t);
var i = this.byteOffset + t * this._vertexBytes, n = this.indiceOffset + e, r = this._vData.byteLength, s = this._iData.length;
if (i > r || n > s) {
for (;r < i || s < n; ) {
this._initVDataCount *= 2;
this._initIDataCount *= 2;
r = 4 * this._initVDataCount;
s = this._initIDataCount;
}
this._reallocBuffer();
}
var a = this._offsetInfo;
a.vertexOffset = this.vertexOffset;
a.indiceOffset = this.indiceOffset;
a.byteOffset = this.byteOffset;
},
adjust: function(t, e) {
this.vertexOffset += t;
this.indiceOffset += e;
this.byteOffset = this.byteOffset + t * this._vertexBytes;
this._dirty = !0;
}
});
cc.SpineBuffer = e.exports = n;
}), {
"./mesh-buffer": 201
} ],
205: [ (function(t, e, i) {
var n = t("../render-engine").gfx, r = cc.Enum({
DISABLED: 0,
CLEAR: 1,
ENTER_LEVEL: 2,
ENABLED: 3,
EXIT_LEVEL: 4
});
function s() {
this._maxLevel = 8;
this._maskStack = [];
this.stage = r.DISABLED;
}
s.prototype = {
constructor: s,
reset: function() {
this._maskStack.length = 0;
this.stage = r.DISABLED;
},
handleEffect: function(t) {
var e = t.getTechnique("transparent").passes;
if (this.stage === r.DISABLED) {
this.stage = r.DISABLED;
for (var i = 0; i < e.length; ++i) {
var s = e[i];
s._stencilTest && s.disableStencilTest();
}
return t;
}
var a = void 0, o = void 0, c = void 0, h = void 0, l = void 0, u = void 0, f = n.STENCIL_OP_KEEP, _ = n.STENCIL_OP_KEEP;
if (this.stage === r.ENABLED) {
a = this._maskStack[this._maskStack.length - 1];
o = n.DS_FUNC_EQUAL;
u = n.STENCIL_OP_KEEP;
h = c = this.getStencilRef();
l = this.getWriteMask();
} else if (this.stage === r.CLEAR) {
a = this._maskStack[this._maskStack.length - 1];
o = n.DS_FUNC_NEVER;
u = a.inverted ? n.STENCIL_OP_REPLACE : n.STENCIL_OP_ZERO;
h = c = this.getWriteMask();
l = c;
} else if (this.stage === r.ENTER_LEVEL) {
a = this._maskStack[this._maskStack.length - 1];
o = n.DS_FUNC_NEVER;
u = a.inverted ? n.STENCIL_OP_ZERO : n.STENCIL_OP_REPLACE;
h = c = this.getWriteMask();
l = c;
}
for (var d = 0; d < e.length; ++d) {
var p = e[d];
p.setStencilFront(o, c, h, u, f, _, l);
p.setStencilBack(o, c, h, u, f, _, l);
}
return t;
},
pushMask: function(t) {
this._maskStack.length + 1 > this._maxLevel && cc.errorID(9e3, this._maxLevel);
this._maskStack.push(t);
},
clear: function() {
this.stage = r.CLEAR;
},
enterLevel: function() {
this.stage = r.ENTER_LEVEL;
},
enableMask: function() {
this.stage = r.ENABLED;
},
exitMask: function() {
0 === this._maskStack.length && cc.errorID(9001);
this._maskStack.pop();
0 === this._maskStack.length ? this.stage = r.DISABLED : this.stage = r.ENABLED;
},
getWriteMask: function() {
return 1 << this._maskStack.length - 1;
},
getExitWriteMask: function() {
return 1 << this._maskStack.length;
},
getStencilRef: function() {
for (var t = 0, e = 0; e < this._maskStack.length; ++e) t += 1 << e;
return t;
},
getInvertedRef: function() {
for (var t = 0, e = 0; e < this._maskStack.length - 1; ++e) t += 1 << e;
return t;
}
};
s.sharedManager = new s();
s.Stage = r;
e.exports = cc.StencilManager = s;
}), {
"../render-engine": 176
} ],
206: [ (function(t, e, i) {
var n = t("../render-engine").gfx, r = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 3
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_COLOR,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
} ]);
r.name = "vfmt3D";
n.VertexFormat.XYZ_UV_Color = r;
var s = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_COLOR,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
} ]);
s.name = "vfmtPosUvColor";
n.VertexFormat.XY_UV_Color = s;
var a = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_COLOR,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
}, {
name: n.ATTR_COLOR0,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
} ]);
a.name = "vfmtPosUvTwoColor";
n.VertexFormat.XY_UV_Two_Color = a;
var o = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_UV0,
type: n.ATTR_TYPE_FLOAT32,
num: 2
} ]);
o.name = "vfmtPosUv";
n.VertexFormat.XY_UV = o;
var c = new n.VertexFormat([ {
name: n.ATTR_POSITION,
type: n.ATTR_TYPE_FLOAT32,
num: 2
}, {
name: n.ATTR_COLOR,
type: n.ATTR_TYPE_UINT8,
num: 4,
normalize: !0
} ]);
c.name = "vfmtPosColor";
n.VertexFormat.XY_Color = c;
e.exports = {
vfmt3D: r,
vfmtPosUvColor: s,
vfmtPosUvTwoColor: a,
vfmtPosUv: o,
vfmtPosColor: c
};
}), {
"../render-engine": 176
} ],
207: [ (function(t, e, i) {
t("../platform/CCSys");
var n = /(\.[^\.\/\?\\]*)(\?.*)?$/, r = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/, s = /[^\.\/]+\/\.\.\//;
cc.path = {
join: function() {
for (var t = arguments.length, e = "", i = 0; i < t; i++) e = (e + ("" === e ? "" : "/") + arguments[i]).replace(/(\/|\\\\)$/, "");
return e;
},
extname: function(t) {
var e = n.exec(t);
return e ? e[1] : "";
},
mainFileName: function(t) {
if (t) {
var e = t.lastIndexOf(".");
if (-1 !== e) return t.substring(0, e);
}
return t;
},
basename: function(t, e) {
var i = t.indexOf("?");
i > 0 && (t = t.substring(0, i));
var n = /(\/|\\)([^\/\\]+)$/g.exec(t.replace(/(\/|\\)$/, ""));
if (!n) return null;
var r = n[2];
return e && t.substring(t.length - e.length).toLowerCase() === e.toLowerCase() ? r.substring(0, r.length - e.length) : r;
},
dirname: function(t) {
var e = r.exec(t);
return e ? e[2] : "";
},
changeExtname: function(t, e) {
e = e || "";
var i = t.indexOf("?"), n = "";
if (i > 0) {
n = t.substring(i);
t = t.substring(0, i);
}
return (i = t.lastIndexOf(".")) < 0 ? t + e + n : t.substring(0, i) + e + n;
},
changeBasename: function(t, e, i) {
if (0 === e.indexOf(".")) return this.changeExtname(t, e);
var n = t.indexOf("?"), r = "", s = i ? this.extname(t) : "";
if (n > 0) {
r = t.substring(n);
t = t.substring(0, n);
}
n = (n = t.lastIndexOf("/")) <= 0 ? 0 : n + 1;
return t.substring(0, n) + e + s + r;
},
_normalize: function(t) {
var e = t = String(t);
do {
e = t;
t = t.replace(s, "");
} while (e.length !== t.length);
return t;
},
sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
stripSep: function(t) {
return t.replace(/[\/\\]$/, "");
}
};
e.exports = cc.path;
}), {
"../platform/CCSys": 143
} ],
208: [ (function(t, e, i) {
var n = function(t, e, i, n, r, s) {
this.a = t;
this.b = e;
this.c = i;
this.d = n;
this.tx = r;
this.ty = s;
};
n.create = function(t, e, i, n, r, s) {
return {
a: t,
b: e,
c: i,
d: n,
tx: r,
ty: s
};
};
n.identity = function() {
return {
a: 1,
b: 0,
c: 0,
d: 1,
tx: 0,
ty: 0
};
};
n.clone = function(t) {
return {
a: t.a,
b: t.b,
c: t.c,
d: t.d,
tx: t.tx,
ty: t.ty
};
};
n.concat = function(t, e, i) {
var n = e.a, r = e.b, s = e.c, a = e.d, o = e.tx, c = e.ty;
t.a = n * i.a + r * i.c;
t.b = n * i.b + r * i.d;
t.c = s * i.a + a * i.c;
t.d = s * i.b + a * i.d;
t.tx = o * i.a + c * i.c + i.tx;
t.ty = o * i.b + c * i.d + i.ty;
return t;
};
n.invert = function(t, e) {
var i = e.a, n = e.b, r = e.c, s = e.d, a = 1 / (i * s - n * r), o = e.tx, c = e.ty;
t.a = a * s;
t.b = -a * n;
t.c = -a * r;
t.d = a * i;
t.tx = a * (r * c - s * o);
t.ty = a * (n * o - i * c);
return t;
};
n.fromMat4 = function(t, e) {
t.a = e.m00;
t.b = e.m01;
t.c = e.m04;
t.d = e.m05;
t.tx = e.m12;
t.ty = e.m13;
return t;
};
n.transformVec2 = function(t, e, i, n) {
var r, s;
if (void 0 === n) {
n = i;
r = e.x;
s = e.y;
} else {
r = e;
s = i;
}
t.x = n.a * r + n.c * s + n.tx;
t.y = n.b * r + n.d * s + n.ty;
return t;
};
n.transformSize = function(t, e, i) {
t.width = i.a * e.width + i.c * e.height;
t.height = i.b * e.width + i.d * e.height;
return t;
};
n.transformRect = function(t, e, i) {
var n = e.x, r = e.y, s = n + e.width, a = r + e.height, o = i.a * n + i.c * r + i.tx, c = i.b * n + i.d * r + i.ty, h = i.a * s + i.c * r + i.tx, l = i.b * s + i.d * r + i.ty, u = i.a * n + i.c * a + i.tx, f = i.b * n + i.d * a + i.ty, _ = i.a * s + i.c * a + i.tx, d = i.b * s + i.d * a + i.ty, p = Math.min(o, h, u, _), m = Math.max(o, h, u, _), g = Math.min(c, l, f, d), v = Math.max(c, l, f, d);
t.x = p;
t.y = g;
t.width = m - p;
t.height = v - g;
return t;
};
n.transformObb = function(t, e, i, n, r, s) {
var a = r.x, o = r.y, c = r.width, h = r.height, l = s.a * a + s.c * o + s.tx, u = s.b * a + s.d * o + s.ty, f = s.a * c, _ = s.b * c, d = s.c * h, p = s.d * h;
e.x = l;
e.y = u;
i.x = f + l;
i.y = _ + u;
t.x = d + l;
t.y = p + u;
n.x = f + d + l;
n.y = _ + p + u;
};
cc.AffineTransform = e.exports = n;
}), {} ],
209: [ (function(i, n, r) {
var s = i("../platform/CCObject").Flags, a = i("./misc"), o = i("../platform/js"), c = i("../platform/id-generater"), h = i("../event-manager"), l = i("../renderer/render-flow"), u = s.Destroying, f = s.DontDestroy, _ = s.Deactivating, d = new c("Node");
function p(i) {
if (!i) {
cc.errorID(3804);
return null;
}
return "string" === ("object" === (e = typeof i) ? t(i) : e) ? o.getClassByName(i) : i;
}
function m(t, e) {
if (e._sealed) for (var i = 0; i < t._components.length; ++i) {
var n = t._components[i];
if (n.constructor === e) return n;
} else for (var r = 0; r < t._components.length; ++r) {
var s = t._components[r];
if (s instanceof e) return s;
}
return null;
}
function g(t, e, i) {
if (e._sealed) for (var n = 0; n < t._components.length; ++n) {
var r = t._components[n];
r.constructor === e && i.push(r);
} else for (var s = 0; s < t._components.length; ++s) {
var a = t._components[s];
a instanceof e && i.push(a);
}
}
function v(t, e) {
for (var i = 0; i < t.length; ++i) {
var n = t[i], r = m(n, e);
if (r) return r;
if (n._children.length > 0 && (r = v(n._children, e))) return r;
}
return null;
}
function y(t, e, i) {
for (var n = 0; n < t.length; ++n) {
var r = t[n];
g(r, e, i);
r._children.length > 0 && y(r._children, e, i);
}
}
var T = cc.Class({
name: "cc._BaseNode",
extends: cc.Object,
properties: {
_parent: null,
_children: [],
_active: !0,
_level: 0,
_components: [],
_prefab: null,
_persistNode: {
get: function() {
return (this._objFlags & f) > 0;
},
set: function(t) {
t ? this._objFlags |= f : this._objFlags &= ~f;
}
},
name: {
get: function() {
return this._name;
},
set: function(t) {
0;
this._name = t;
}
},
uuid: {
get: function() {
return this._id;
}
},
children: {
get: function() {
return this._children;
}
},
childrenCount: {
get: function() {
return this._children.length;
}
},
active: {
get: function() {
return this._active;
},
set: function(t) {
t = !!t;
if (this._active !== t) {
this._active = t;
var e = this._parent;
if (e) {
e._activeInHierarchy && cc.director._nodeActivator.activateNode(this, t);
}
}
}
},
activeInHierarchy: {
get: function() {
return this._activeInHierarchy;
}
}
},
ctor: function(t) {
this._name = void 0 !== t ? t : "New Node";
this._activeInHierarchy = !1;
this._id = d.getNewId();
cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
this.__eventTargets = [];
this._renderFlag = l.FLAG_TRANSFORM;
},
getParent: function() {
return this._parent;
},
setParent: function(t) {
if (this._parent !== t) {
0;
var e = this._parent;
0;
this._parent = t || null;
this._onSetParent(t);
if (t) {
0;
this._level = t._level + 1;
h._setDirtyForNode(this);
t._children.push(this);
t.emit && t.emit("child-added", this);
t._renderFlag |= l.FLAG_CHILDREN;
}
if (e) {
if (!(e._objFlags & u)) {
var i = e._children.indexOf(this);
0;
e._children.splice(i, 1);
e.emit && e.emit("child-removed", this);
this._onHierarchyChanged(e);
0 === e._children.length && (e._renderFlag &= ~l.FLAG_CHILDREN);
}
} else t && this._onHierarchyChanged(null);
}
},
attr: function(t) {
o.mixin(this, t);
},
getChildByUuid: function(t) {
if (!t) {
cc.log("Invalid uuid");
return null;
}
for (var e = this._children, i = 0, n = e.length; i < n; i++) if (e[i]._id === t) return e[i];
return null;
},
getChildByName: function(t) {
if (!t) {
cc.log("Invalid name");
return null;
}
for (var e = this._children, i = 0, n = e.length; i < n; i++) if (e[i]._name === t) return e[i];
return null;
},
addChild: function(t) {
0;
cc.assertID(t, 1606);
cc.assertID(null === t._parent, 1605);
t.setParent(this);
},
insertChild: function(t, e) {
t.parent = this;
t.setSiblingIndex(e);
},
getSiblingIndex: function() {
return this._parent ? this._parent._children.indexOf(this) : 0;
},
setSiblingIndex: function(t) {
if (this._parent) if (this._parent._objFlags & _) cc.errorID(3821); else {
var e = this._parent._children;
t = -1 !== t ? t : e.length - 1;
var i = e.indexOf(this);
if (t !== i) {
e.splice(i, 1);
t < e.length ? e.splice(t, 0, this) : e.push(this);
this._onSiblingIndexChanged && this._onSiblingIndexChanged(t);
}
}
},
walk: function(t, e) {
var i, n, r, s, a = cc._BaseNode, o = 1, c = a._stacks[a._stackId];
if (!c) {
c = [];
a._stacks.push(c);
}
a._stackId++;
c.length = 0;
c[0] = this;
var h = null;
s = !1;
for (;o; ) if (n = c[--o]) {
!s && t ? t(n) : s && e && e(n);
c[o] = null;
if (s) {
s = !1;
if (i) if (i[++r]) {
c[o] = i[r];
o++;
} else if (h) {
c[o] = h;
o++;
s = !0;
if (h._parent) {
r = (i = h._parent._children).indexOf(h);
h = h._parent;
} else {
h = null;
i = null;
}
if (r < 0) break;
}
} else if (n._children.length > 0) {
h = n;
i = n._children;
r = 0;
c[o] = i[r];
o++;
} else {
c[o] = n;
o++;
s = !0;
}
}
c.length = 0;
a._stackId--;
},
cleanup: function() {},
removeFromParent: function(t) {
if (this._parent) {
void 0 === t && (t = !0);
this._parent.removeChild(this, t);
}
},
removeChild: function(t, e) {
if (this._children.indexOf(t) > -1) {
(e || void 0 === e) && t.cleanup();
t.parent = null;
}
},
removeAllChildren: function(t) {
var e = this._children;
void 0 === t && (t = !0);
for (var i = e.length - 1; i >= 0; i--) {
var n = e[i];
if (n) {
t && n.cleanup();
n.parent = null;
}
}
this._children.length = 0;
},
isChildOf: function(t) {
var e = this;
do {
if (e === t) return !0;
e = e._parent;
} while (e);
return !1;
},
getComponent: function(t) {
var e = p(t);
return e ? m(this, e) : null;
},
getComponents: function(t) {
var e = p(t), i = [];
e && g(this, e, i);
return i;
},
getComponentInChildren: function(t) {
var e = p(t);
return e ? v(this._children, e) : null;
},
getComponentsInChildren: function(t) {
var e = p(t), i = [];
if (e) {
g(this, e, i);
y(this._children, e, i);
}
return i;
},
_checkMultipleComp: !1,
addComponent: function(i) {
0;
var n;
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
if (!(n = o.getClassByName(i))) {
cc.errorID(3807, i);
cc._RFpeek() && cc.errorID(3808, i);
return null;
}
} else {
if (!i) {
cc.errorID(3804);
return null;
}
n = i;
}
if ("function" !== ("object" === (e = typeof n) ? t(n) : e)) {
cc.errorID(3809);
return null;
}
if (!o.isChildClassOf(n, cc.Component)) {
cc.errorID(3810);
return null;
}
0;
var r = n._requireComponent;
if (r && !this.getComponent(r)) {
if (!this.addComponent(r)) return null;
}
var s = new n();
s.node = this;
this._components.push(s);
0;
this._activeInHierarchy && cc.director._nodeActivator.activateComp(s);
return s;
},
_addComponentAt: !1,
removeComponent: function(t) {
if (t) {
t instanceof cc.Component || (t = this.getComponent(t));
t && t.destroy();
} else cc.errorID(3813);
},
_getDependComponent: !1,
_removeComponent: function(t) {
if (t) {
if (!(this._objFlags & u)) {
var e = this._components.indexOf(t);
if (-1 !== e) {
this._components.splice(e, 1);
0;
} else t.node !== this && cc.errorID(3815);
}
} else cc.errorID(3814);
},
destroy: function() {
cc.Object.prototype.destroy.call(this) && (this.active = !1);
},
destroyAllChildren: function() {
for (var t = this._children, e = 0; e < t.length; ++e) t[e].destroy();
},
_onSetParent: function(t) {},
_onPostActivated: function() {},
_onBatchRestored: function() {},
_onBatchCreated: function() {},
_onHierarchyChanged: function(t) {
var e = this._parent;
if (this._persistNode && !(e instanceof cc.Scene)) {
cc.game.removePersistRootNode(this);
0;
}
var i = this._active && !(!e || !e._activeInHierarchy);
this._activeInHierarchy !== i && cc.director._nodeActivator.activateNode(this, i);
},
_instantiate: function(t) {
t || (t = cc.instantiate._clone(this, this));
var e = this._prefab;
e && this === e.root && e.sync;
t._parent = null;
t._onBatchRestored();
return t;
},
_registerIfAttached: !1,
_onPreDestroy: function() {
var t, e;
this._objFlags |= u;
var i = this._parent, n = i && i._objFlags & u;
0;
var r = this._children;
for (t = 0, e = r.length; t < e; ++t) r[t]._destroyImmediate();
for (t = 0, e = this._components.length; t < e; ++t) {
this._components[t]._destroyImmediate();
}
var s = this.__eventTargets;
for (t = 0, e = s.length; t < e; ++t) {
var a = s[t];
a && a.targetOff(this);
}
s.length = 0;
this._persistNode && cc.game.removePersistRootNode(this);
if (!n && i) {
var o = i._children.indexOf(this);
i._children.splice(o, 1);
i.emit && i.emit("child-removed", this);
}
return n;
},
onRestore: !1
});
T.idGenerater = d;
T._stacks = [ [] ];
T._stackId = 0;
T.prototype._onPreDestroyBase = T.prototype._onPreDestroy;
0;
T.prototype._onHierarchyChangedBase = T.prototype._onHierarchyChanged;
0;
a.propertyDefine(T, [ "parent", "name", "children", "childrenCount" ], {});
0;
cc._BaseNode = n.exports = T;
}), {
"../event-manager": 100,
"../platform/CCObject": 140,
"../platform/id-generater": 150,
"../platform/js": 154,
"../renderer/render-flow": 177,
"./misc": 216
} ],
210: [ (function(t, e, i) {
var n = 1e-6;
e.exports = {
binarySearchEpsilon: function(t, e) {
for (var i = 0, r = t.length - 1, s = r >>> 1; i <= r; s = i + r >>> 1) {
var a = t[s];
if (a > e + n) r = s - 1; else {
if (!(a < e - n)) return s;
i = s + 1;
}
}
return ~i;
}
};
}), {} ],
211: [ (function(t, e, i) {
var n = t("./misc").BASE64_VALUES, r = "0123456789abcdef".split(""), s = [ "", "", "", "" ], a = s.concat(s, "-", s, "-", s, "-", s, "-", s, s, s), o = a.map((function(t, e) {
return "-" === t ? NaN : e;
})).filter(isFinite);
e.exports = function(t) {
if (22 !== t.length) return t;
a[0] = t[0];
a[1] = t[1];
for (var e = 2, i = 2; e < 22; e += 2) {
var s = n[t.charCodeAt(e)], c = n[t.charCodeAt(e + 1)];
a[o[i++]] = r[s >> 2];
a[o[i++]] = r[(3 & s) << 2 | c >> 4];
a[o[i++]] = r[15 & c];
}
return a.join("");
};
0;
}), {
"./misc": 216
} ],
212: [ (function(t, e, i) {
cc.find = e.exports = function(t, e) {
if (null == t) {
cc.errorID(5600);
return null;
}
if (e) 0; else {
var i = cc.director.getScene();
if (!i) {
0;
return null;
}
0;
e = i;
}
for (var n = e, r = "/" !== t[0] ? 0 : 1, s = t.split("/"), a = r; a < s.length; a++) {
var o = s[a], c = n._children;
n = null;
for (var h = 0, l = c.length; h < l; ++h) {
var u = c[h];
if (u.name === o) {
n = u;
break;
}
}
if (!n) return null;
}
return n;
};
}), {} ],
213: [ (function(t, e, i) {
var n = /^(click)(\s)*=|(param)(\s)*=/, r = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/, s = function() {
this._parsedObject = {};
this._specialSymbolArray = [];
this._specialSymbolArray.push([ /&lt;/g, "<" ]);
this._specialSymbolArray.push([ /&gt;/g, ">" ]);
this._specialSymbolArray.push([ /&amp;/g, "&" ]);
this._specialSymbolArray.push([ /&quot;/g, '"' ]);
this._specialSymbolArray.push([ /&apos;/g, "'" ]);
};
s.prototype = {
constructor: s,
parse: function(t) {
this._resultObjectArray = [];
this._stack = [];
for (var e = 0, i = t.length; e < i; ) {
var n = t.indexOf("<", e);
if (n < 0) {
this._stack.pop();
this._processResult(t.substring(e));
e = i;
} else {
this._processResult(t.substring(e, n));
var r = t.indexOf(">", e);
-1 === r ? r = n : "/" === t.charAt(n + 1) ? this._stack.pop() : this._addToStack(t.substring(n + 1, r));
e = r + 1;
}
}
return this._resultObjectArray;
},
_attributeToObject: function(t) {
var e, i, n, s, a = {}, o = (t = t.trim()).match(/^(color|size)(\s)*=/);
if (o) {
e = o[0];
if ("" === (t = t.substring(e.length).trim())) return a;
i = t.indexOf(" ");
switch (e[0]) {
case "c":
a.color = i > -1 ? t.substring(0, i).trim() : t;
break;

case "s":
a.size = parseInt(t);
}
if (i > -1) {
s = t.substring(i + 1).trim();
n = this._processEventHandler(s);
a.event = n;
}
return a;
}
if ((o = t.match(/^(br(\s)*\/)/)) && o[0].length > 0 && (e = o[0].trim()).startsWith("br") && "/" === e[e.length - 1]) {
a.isNewLine = !0;
this._resultObjectArray.push({
text: "",
style: {
newline: !0
}
});
return a;
}
if ((o = t.match(/^(img(\s)*src(\s)*=[^>]+\/)/)) && o[0].length > 0 && (e = o[0].trim()).startsWith("img") && "/" === e[e.length - 1]) {
o = t.match(r);
for (var c, h = !1; o; ) {
e = (t = t.substring(t.indexOf(o[0]))).substr(0, o[0].length);
u = (i = (c = t.substring(e.length).trim()).indexOf(" ")) > -1 ? c.substr(0, i) : c;
e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
t = c.substring(i).trim();
if ("src" === e) {
a.isImage = !0;
u.endsWith("/") && (u = u.substring(0, u.length - 1));
if (0 === u.indexOf("'")) {
h = !0;
u = u.substring(1, u.length - 1);
} else if (0 === u.indexOf('"')) {
h = !0;
u = u.substring(1, u.length - 1);
}
a.src = u;
} else "height" === e ? a.imageHeight = parseInt(u) : "width" === e ? a.imageWidth = parseInt(u) : "click" === e && (a.event = this._processEventHandler(e + "=" + u));
a.event && "param" === e && (a.event.param = u.replace(/^\"|\"$/g, ""));
o = t.match(r);
}
h && a.isImage && this._resultObjectArray.push({
text: "",
style: a
});
return {};
}
if (o = t.match(/^(outline(\s)*[^>]*)/)) {
var l = {
color: "#ffffff",
width: 1
};
if (t = o[0].substring("outline".length).trim()) {
var u, f = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
o = t.match(f);
for (;o; ) {
e = (t = t.substring(t.indexOf(o[0]))).substr(0, o[0].length);
u = (i = (c = t.substring(e.length).trim()).indexOf(" ")) > -1 ? c.substr(0, i) : c;
e = (e = e.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
t = c.substring(i).trim();
"click" === e ? a.event = this._processEventHandler(e + "=" + u) : "color" === e ? l.color = u : "width" === e && (l.width = parseInt(u));
a.event && "param" === e && (a.event.param = u.replace(/^\"|\"$/g, ""));
o = t.match(f);
}
}
a.outline = l;
}
if ((o = t.match(/^(on|u|b|i)(\s)*/)) && o[0].length > 0) {
e = o[0];
t = t.substring(e.length).trim();
switch (e[0]) {
case "u":
a.underline = !0;
break;

case "i":
a.italic = !0;
break;

case "b":
a.bold = !0;
}
if ("" === t) return a;
n = this._processEventHandler(t);
a.event = n;
}
return a;
},
_processEventHandler: function(t) {
for (var e = 0, i = {}, r = t.match(n), s = !1; r; ) {
var a = r[0], o = "";
s = !1;
if ('"' === (t = t.substring(a.length).trim()).charAt(0)) {
if ((e = t.indexOf('"', 1)) > -1) {
o = t.substring(1, e).trim();
s = !0;
}
e++;
} else if ("'" === t.charAt(0)) {
if ((e = t.indexOf("'", 1)) > -1) {
o = t.substring(1, e).trim();
s = !0;
}
e++;
} else {
var c = t.match(/(\S)+/);
e = (o = c ? c[0] : "").length;
}
s && (i[a = a.substring(0, a.length - 1).trim()] = o);
r = (t = t.substring(e).trim()).match(n);
}
return i;
},
_addToStack: function(t) {
var e = this._attributeToObject(t);
if (0 === this._stack.length) this._stack.push(e); else {
if (e.isNewLine || e.isImage) return;
var i = this._stack[this._stack.length - 1];
for (var n in i) e[n] || (e[n] = i[n]);
this._stack.push(e);
}
},
_processResult: function(t) {
if ("" !== t) {
t = this._escapeSpecialSymbol(t);
this._stack.length > 0 ? this._resultObjectArray.push({
text: t,
style: this._stack[this._stack.length - 1]
}) : this._resultObjectArray.push({
text: t
});
}
},
_escapeSpecialSymbol: function(t) {
for (var e = 0; e < this._specialSymbolArray.length; ++e) {
var i = this._specialSymbolArray[e][0], n = this._specialSymbolArray[e][1];
t = t.replace(i, n);
}
return t;
}
};
0;
e.exports = s;
}), {} ],
214: [ (function(t, e, i) {
t("./CCPath");
t("./profiler/CCProfiler");
t("./find");
t("./mutable-forward-iterator");
}), {
"./CCPath": 207,
"./find": 212,
"./mutable-forward-iterator": 217,
"./profiler/CCProfiler": 220
} ],
215: [ (function(t, e, i) {
var n = t("../platform/js"), r = t("../renderer/render-engine").math, s = new n.Pool(128);
s.get = function() {
var t = this._get();
t ? r.mat4.identity(t) : t = r.mat4.create();
return t;
};
var a = new n.Pool(64);
a.get = function() {
var t = this._get();
if (t) {
t.x = t.y = t.z = 0;
t.w = 1;
} else t = r.quat.create();
return t;
};
e.exports = {
mat4: s,
quat: a
};
}), {
"../platform/js": 154,
"../renderer/render-engine": 176
} ],
216: [ (function(t, e, i) {
var n = t("../platform/js"), r = {
propertyDefine: function(t, e, i) {
function r(t, e, i, r) {
var s = Object.getOwnPropertyDescriptor(t, e);
if (s) {
s.get && (t[i] = s.get);
s.set && r && (t[r] = s.set);
} else {
var a = t[i];
n.getset(t, e, a, t[r]);
}
}
for (var s, a = t.prototype, o = 0; o < e.length; o++) {
var c = (s = e[o])[0].toUpperCase() + s.slice(1);
r(a, s, "get" + c, "set" + c);
}
for (s in i) {
var h = i[s];
r(a, s, h[0], h[1]);
}
},
NextPOT: function(t) {
t -= 1;
t |= t >> 1;
t |= t >> 2;
t |= t >> 4;
t |= t >> 8;
return (t |= t >> 16) + 1;
}
};
0;
r.BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
for (var s = new Array(123), a = 0; a < 123; ++a) s[a] = 64;
for (var o = 0; o < 64; ++o) s["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(o)] = o;
r.BASE64_VALUES = s;
r.pushToMap = function(t, e, i, n) {
var r = t[e];
if (r) if (Array.isArray(r)) if (n) {
r.push(r[0]);
r[0] = i;
} else r.push(i); else t[e] = n ? [ i, r ] : [ r, i ]; else t[e] = i;
};
r.clampf = function(t, e, i) {
if (e > i) {
var n = e;
e = i;
i = n;
}
return t < e ? e : t < i ? t : i;
};
r.clamp01 = function(t) {
return t < 0 ? 0 : t < 1 ? t : 1;
};
r.lerp = function(t, e, i) {
return t + (e - t) * i;
};
r.degreesToRadians = function(t) {
return t * cc.macro.RAD;
};
r.radiansToDegrees = function(t) {
return t * cc.macro.DEG;
};
cc.misc = e.exports = r;
}), {
"../platform/js": 154
} ],
217: [ (function(t, e, i) {
function n(t) {
this.i = 0;
this.array = t;
}
var r = n.prototype;
r.remove = function(t) {
var e = this.array.indexOf(t);
e >= 0 && this.removeAt(e);
};
r.removeAt = function(t) {
this.array.splice(t, 1);
t <= this.i && --this.i;
};
r.fastRemove = function(t) {
var e = this.array.indexOf(t);
e >= 0 && this.fastRemoveAt(e);
};
r.fastRemoveAt = function(t) {
var e = this.array;
e[t] = e[e.length - 1];
--e.length;
t <= this.i && --this.i;
};
r.push = function(t) {
this.array.push(t);
};
e.exports = n;
}), {} ],
218: [ (function(i, n, r) {
var s = i("../CCNode"), a = s.EventType, o = s._LocalDirtyFlag, c = i("../renderer/render-engine").math, h = i("../renderer/render-flow"), l = Math.PI / 180, u = 1, f = 2, _ = 4, d = null, p = null;
function m() {
if (this._localMatDirty) {
var t = this._matrix;
c.mat4.fromRTS(t, this._quat, this._position, this._scale);
if (this._skewX || this._skewY) {
var e = t.m00, i = t.m01, n = t.m04, r = t.m05, s = Math.tan(this._skewX * l), a = Math.tan(this._skewY * l);
Infinity === s && (s = 99999999);
Infinity === a && (a = 99999999);
t.m00 = e + n * a;
t.m01 = i + r * a;
t.m04 = n + e * s;
t.m05 = r + i * s;
}
this._localMatDirty = 0;
this._worldMatDirty = !0;
}
}
function g() {
this._localMatDirty && this._updateLocalMatrix();
if (this._parent) {
var t = this._parent._worldMatrix;
c.mat4.mul(this._worldMatrix, t, this._matrix);
} else c.mat4.copy(this._worldMatrix, this._matrix);
this._worldMatDirty = !1;
}
function v() {
return new cc.Vec3(this._position);
}
function y(t, e, i) {
var n = void 0;
if (void 0 === e) {
n = t.x;
e = t.y;
i = t.z || 0;
} else {
n = t;
i = i || 0;
}
var r = this._position;
if (r.x !== n || r.y !== e || r.z !== i) {
r.x = n;
r.y = e;
r.z = i;
this.setLocalDirty(o.POSITION);
this._renderFlag |= h.FLAG_WORLD_TRANSFORM;
this._eventMask & u && this.emit(a.POSITION_CHANGED);
}
}
function T() {
return c.quat.clone(this._quat);
}
function x(t, e, i, n) {
var r = void 0;
if (void 0 === e) {
r = t.x;
e = t.y;
i = t.z;
n = t.w;
}
var s = this._quat;
if (s.x !== r || s.y !== e || s.z !== i || s.w !== n) {
s.x = r;
s.y = e;
s.z = i;
s.w = n;
this.setLocalDirty(o.ROTATION);
this._renderFlag |= h.FLAG_TRANSFORM;
this._eventMask & _ && this.emit(a.ROTATION_CHANGED);
}
}
function E() {
return cc.v3(this._scale);
}
function C(i, n, r) {
if (i && "number" !== ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
r = i.z || 1;
i = i.x;
} else if (void 0 !== i && void 0 === n) {
n = i;
r = i;
} else void 0 === r && (r = 1);
if (this._scale.x !== i || this._scale.y !== n || this._scale.z !== r) {
this._scale.x = i;
this._scale.y = n;
this._scale.z = r;
this.setLocalDirty(o.SCALE);
this._renderFlag |= h.FLAG_TRANSFORM;
this._eventMask & f && this.emit(a.SCALE_CHANGED);
}
}
cc._polyfill3D = n.exports = {
enabled: !1,
enable: function() {
var t = cc.Node.prototype;
if (!d) {
d = t._updateLocalMatrix;
p = t._calculWorldMatrix;
}
if (!this.enabled) {
t._updateLocalMatrix = m;
t._calculWorldMatrix = g;
t.getPosition = v;
t.setPosition = y;
t.getScale = E;
t.setScale = C;
t.getQuat = T;
t.setQuat = x;
this.enabled = !0;
}
},
disable: function() {
if (this.enabled) {
cc.Node.prototype._updateLocalMatrix = d;
cc.Node.prototype._calculWorldMatrix = p;
this.enabled = !1;
}
}
};
}), {
"../CCNode": 29,
"../renderer/render-engine": 176,
"../renderer/render-flow": 177
} ],
219: [ (function(t, e, i) {
var n = t("../renderer").renderEngine.math;
cc._PrefabInfo = cc.Class({
name: "cc.PrefabInfo",
properties: {
root: null,
asset: null,
fileId: "",
sync: !1,
_synced: {
default: !1,
serializable: !1
}
}
});
e.exports = {
syncWithPrefab: function(t) {
var e = t._prefab;
e._synced = !0;
if (e.asset) {
var i = t._objFlags, r = t._parent, s = t._id, a = t._name, o = t._active, c = t._position.x, h = t._position.y, l = t._quat, u = t._localZOrder, f = t._globalZOrder;
cc.game._isCloning = !0;
e.asset._doInstantiate(t);
cc.game._isCloning = !1;
t._objFlags = i;
t._parent = r;
t._id = s;
t._prefab = e;
t._name = a;
t._active = o;
t._position.x = c;
t._position.y = h;
n.quat.copy(t._quat, l);
t._localZOrder = u;
t._globalZOrder = f;
} else {
cc.errorID(3701, t.name);
t._prefab = null;
}
}
};
}), {
"../renderer": 175
} ],
220: [ (function(t, e, i) {
var n = t("../../platform/CCMacro"), r = t("./perf-counter"), s = !1, a = 15, o = null, c = null, h = null, l = null;
function u() {
if (!o) {
var t = document.createElement("canvas");
t.style.width = t.width = 256;
t.style.height = t.height = 256;
var e = t.getContext("2d");
e.font = a + "px Arial";
e.textBaseline = "top";
e.textAlign = "left";
e.fillStyle = "#fff";
var i = 2, n = 2, r = a;
(o = new cc.LabelAtlas())._fntConfig = {
atlasName: "profiler-arial",
commonHeight: r,
fontSize: a,
kerningDict: {},
fontDefDictionary: {}
};
o._name = "profiler-arial";
o.fontSize = a;
for (var s = o._fntConfig.fontDefDictionary, c = 32; c <= 126; c++) {
var h = String.fromCharCode(c), l = e.measureText(h).width;
if (i + l >= 256) {
i = 2;
n += r + 2;
}
e.fillText(h, i, n);
s[c] = {
xAdvance: l,
xOffset: 0,
yOffset: 0,
rect: {
x: i,
y: n,
width: l,
height: r
}
};
i += l + 2;
}
var u = new cc.Texture2D();
u.initWithElement(t);
var f = new cc.SpriteFrame();
f.setTexture(u);
o.spriteFrame = f;
}
}
function f() {
if (!c) {
c = {
frame: {
desc: "Frame time (ms)",
min: 0,
max: 50,
average: 500
},
fps: {
desc: "Framerate (FPS)",
below: 30,
average: 500
},
draws: {
desc: "Draw call"
},
logic: {
desc: "Game Logic (ms)",
min: 0,
max: 50,
average: 500,
color: "#080"
},
render: {
desc: "Renderer (ms)",
min: 0,
max: 50,
average: 500,
color: "#f90"
},
mode: {
desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
min: 1
}
};
var t = performance.now();
for (var e in c) c[e]._counter = new r(e, c[e], t);
}
}
function _() {
if (!h || !h.isValid) {
(h = new cc.Node("PROFILER-NODE")).x = h.y = 10;
h.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
cc.Camera._setupDebugCamera();
h.zIndex = n.MAX_ZINDEX;
cc.game.addPersistRootNode(h);
var t = new cc.Node("LEFT-PANEL");
t.anchorX = t.anchorY = 0;
t.parent = h;
var e = t.addComponent(cc.Label);
e.font = o;
e.fontSize = a;
e.lineHeight = a;
var i = new cc.Node("RIGHT-PANEL");
i.anchorX = 1;
i.anchorY = 0;
i.x = 200;
i.parent = h;
var r = i.addComponent(cc.Label);
r.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
r.font = o;
r.fontSize = a;
r.lineHeight = a;
l = {
left: e,
right: r
};
}
}
function d() {
_();
var t = cc.director._lastUpdate;
c.frame._counter.start(t);
c.logic._counter.start(t);
}
function p() {
var t = performance.now();
cc.director.isPaused() ? c.frame._counter.start(t) : c.logic._counter.end(t);
c.render._counter.start(t);
}
function m() {
var t = performance.now();
c.render._counter.end(t);
c.draws._counter.value = cc.renderer.drawCalls;
c.frame._counter.end(t);
c.fps._counter.frame(t);
var e = "", i = "";
for (var n in c) {
var r = c[n];
r._counter.sample(t);
e += r.desc + "\n";
i += r._counter.human() + "\n";
}
l.left.string = e;
l.right.string = i;
}
cc.profiler = e.exports = {
isShowingStats: function() {
return s;
},
hideStats: function() {
if (s) {
h && (h.active = !1);
cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, d);
cc.director.off(cc.Director.EVENT_AFTER_UPDATE, p);
cc.director.off(cc.Director.EVENT_AFTER_DRAW, m);
s = !1;
}
},
showStats: function() {
if (!s) {
u();
f();
h && (h.active = !0);
cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, d);
cc.director.on(cc.Director.EVENT_AFTER_UPDATE, p);
cc.director.on(cc.Director.EVENT_AFTER_DRAW, m);
s = !0;
}
}
};
}), {
"../../platform/CCMacro": 139,
"./perf-counter": 222
} ],
221: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.Counter",
ctor: function(t, e, i) {
this._id = t;
this._opts = e || {};
this._value = 0;
this._total = 0;
this._averageValue = 0;
this._accumValue = 0;
this._accumSamples = 0;
this._accumStart = i;
},
properties: {
value: {
get: function() {
return this._value;
},
set: function(t) {
this._value = t;
}
}
},
_average: function(t, e) {
if (this._opts.average) {
this._accumValue += t;
++this._accumSamples;
var i = e;
if (i - this._accumStart >= this._opts.average) {
this._averageValue = this._accumValue / this._accumSamples;
this._accumValue = 0;
this._accumStart = i;
this._accumSamples = 0;
}
}
},
sample: function(t) {
this._average(this._value, t);
},
human: function() {
var t = this._opts.average ? this._averageValue : this._value;
return Math.round(100 * t) / 100;
},
alarm: function() {
return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
}
});
e.exports = n;
}), {} ],
222: [ (function(t, e, i) {
var n = t("./counter"), r = cc.Class({
name: "cc.PerfCounter",
extends: n,
ctor: function(t, e, i) {
this._time = i;
},
start: function(t) {
this._time = t;
},
end: function(t) {
this._value = t - this._time;
this._average(this._value);
},
tick: function() {
this.end();
this.start();
},
frame: function(t) {
var e = t, i = e - this._time;
this._total++;
if (i > (this._opts.average || 1e3)) {
this._value = 1e3 * this._total / i;
this._total = 0;
this._time = e;
this._average(this._value);
}
}
});
e.exports = r;
}), {
"./counter": 221
} ],
223: [ (function(t, e, i) {
e.exports = {
label_wordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/,
label_symbolRex: /^[!,.:;'}\]%\?>、‘“》？。，！]/,
label_lastWordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+|\S)$/,
label_lastEnglish: /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+$/,
label_firstEnglish: /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]/,
label_firstEmoji: /^[\uD83C\uDF00-\uDFFF\uDC00-\uDE4F]/,
label_lastEmoji: /([\uDF00-\uDFFF\uDC00-\uDE4F]+|\S)$/,
label_wrapinspection: !0,
__CHINESE_REG: /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/,
__JAPANESE_REG: /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g,
__KOREAN_REG: /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/,
isUnicodeCJK: function(t) {
return this.__CHINESE_REG.test(t) || this.__JAPANESE_REG.test(t) || this.__KOREAN_REG.test(t);
},
isUnicodeSpace: function(t) {
return (t = t.charCodeAt(0)) >= 9 && t <= 13 || 32 === t || 133 === t || 160 === t || 5760 === t || t >= 8192 && t <= 8202 || 8232 === t || 8233 === t || 8239 === t || 8287 === t || 12288 === t;
},
safeMeasureText: function(t, e) {
var i = t.measureText(e);
return i && i.width || 0;
},
fragmentText: function(t, e, i, n) {
var r = [];
if (0 === t.length || i < 0) {
r.push("");
return r;
}
for (var s = t; e > i && s.length > 1; ) {
for (var a = s.length * (i / e) | 0, o = s.substr(a), c = e - n(o), h = o, l = 0, u = 0; c > i && u++ < 10; ) {
a *= i / c;
a |= 0;
c = e - n(o = s.substr(a));
}
u = 0;
for (;c <= i && u++ < 10; ) {
if (o) {
var f = this.label_wordRex.exec(o);
l = f ? f[0].length : 1;
h = o;
}
a += l;
c = e - n(o = s.substr(a));
}
if (0 == (a -= l)) {
a = 1;
h = h.substr(1);
}
var _, d = s.substr(0, a);
if (this.label_wrapinspection && this.label_symbolRex.test(h || o)) {
0 == (a -= (_ = this.label_lastWordRex.exec(d)) ? _[0].length : 0) && (a = 1);
h = s.substr(a);
d = s.substr(0, a);
}
if (this.label_firstEmoji.test(h) && (_ = this.label_lastEmoji.exec(d)) && d !== _[0]) {
a -= _[0].length;
h = s.substr(a);
d = s.substr(0, a);
}
if (this.label_firstEnglish.test(h) && (_ = this.label_lastEnglish.exec(d)) && d !== _[0]) {
a -= _[0].length;
h = s.substr(a);
d = s.substr(0, a);
}
0 === r.length ? r.push(d) : (d = d.trim()).length > 0 && r.push(d);
e = n(s = h || o);
}
0 === r.length ? r.push(s) : (s = s.trim()).length > 0 && r.push(s);
return r;
}
};
}), {} ],
224: [ (function(t, e, i) {
var n = t("../assets/CCTexture2D"), r = {
loadImage: function(t, e, i) {
cc.assertID(t, 3103);
var r = cc.loader.getRes(t);
if (r) {
if (r.loaded) {
e && e.call(i, r);
return r;
}
r.once("load", (function() {
e && e.call(i, r);
}), i);
return r;
}
(r = new n()).url = t;
cc.loader.load({
url: t,
texture: r
}, (function(t, n) {
if (t) return e && e.call(i, t || new Error("Unknown error"));
n.handleLoadedTexture();
e && e.call(i, null, n);
}));
return r;
},
cacheImage: function(t, e) {
if (t && e) {
var i = new n();
i.initWithElement(e);
var r = {
id: t,
url: t,
error: null,
content: i,
complete: !1
};
cc.loader.flowOut(r);
return i;
}
},
postLoadTexture: function(t, e) {
t.loaded ? e && e() : t.url ? cc.loader.load({
url: t.url,
skips: [ "Loader" ]
}, (function(i, n) {
if (n) {
0;
t.loaded || (t._nativeAsset = n);
}
e && e(i);
})) : e && e();
}
};
cc.textureUtil = e.exports = r;
}), {
"../assets/CCTexture2D": 49
} ],
225: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = (function() {
function n(i, n, r, s) {
if ("object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.g;
r = i.b;
s = i.a;
i = i.r;
}
i = i || 0;
n = n || 0;
r = r || 0;
s = "number" === ("object" === (e = typeof s) ? t(s) : e) ? s : 255;
this._val = (s << 24 >>> 0) + (r << 16) + (n << 8) + i;
}
a.extend(n, s);
i("../platform/CCClass").fastDefine("cc.Color", n, {
r: 0,
g: 0,
b: 0,
a: 255
});
var r = {
WHITE: [ 255, 255, 255, 255 ],
BLACK: [ 0, 0, 0, 255 ],
TRANSPARENT: [ 0, 0, 0, 0 ],
GRAY: [ 127.5, 127.5, 127.5 ],
RED: [ 255, 0, 0 ],
GREEN: [ 0, 255, 0 ],
BLUE: [ 0, 0, 255 ],
YELLOW: [ 255, 235, 4 ],
ORANGE: [ 255, 127, 0 ],
CYAN: [ 0, 255, 255 ],
MAGENTA: [ 255, 0, 255 ]
};
for (var o in r) a.get(n, o, (function(t) {
return function() {
return new n(t[0], t[1], t[2], t[3]);
};
})(r[o]));
var c = n.prototype;
c.clone = function() {
var t = new n();
t._val = this._val;
return t;
};
c.equals = function(t) {
return t && this._val === t._val;
};
c.lerp = function(t, e, i) {
i = i || new n();
var r = this.r, s = this.g, a = this.b, o = this.a;
i.r = r + (t.r - r) * e;
i.g = s + (t.g - s) * e;
i.b = a + (t.b - a) * e;
i.a = o + (t.a - o) * e;
return i;
};
c.toString = function() {
return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
};
c.getR = function() {
return 255 & this._val;
};
c.setR = function(t) {
t = ~~cc.misc.clampf(t, 0, 255);
this._val = (4294967040 & this._val | t) >>> 0;
return this;
};
c.getG = function() {
return (65280 & this._val) >> 8;
};
c.setG = function(t) {
t = ~~cc.misc.clampf(t, 0, 255);
this._val = (4294902015 & this._val | t << 8) >>> 0;
return this;
};
c.getB = function() {
return (16711680 & this._val) >> 16;
};
c.setB = function(t) {
t = ~~cc.misc.clampf(t, 0, 255);
this._val = (4278255615 & this._val | t << 16) >>> 0;
return this;
};
c.getA = function() {
return (4278190080 & this._val) >>> 24;
};
c.setA = function(t) {
t = ~~cc.misc.clampf(t, 0, 255);
this._val = (16777215 & this._val | t << 24) >>> 0;
return this;
};
c._fastSetA = function(t) {
this._val = (16777215 & this._val | t << 24) >>> 0;
};
a.getset(c, "r", c.getR, c.setR, !0);
a.getset(c, "g", c.getG, c.setG, !0);
a.getset(c, "b", c.getB, c.setB, !0);
a.getset(c, "a", c.getA, c.setA, !0);
c.toCSS = function(t) {
return "rgba" === t ? "rgba(" + (0 | this.r) + "," + (0 | this.g) + "," + (0 | this.b) + "," + (this.a / 255).toFixed(2) + ")" : "rgb" === t ? "rgb(" + (0 | this.r) + "," + (0 | this.g) + "," + (0 | this.b) + ")" : "#" + this.toHEX(t);
};
c.fromHEX = function(t) {
t = 0 === t.indexOf("#") ? t.substring(1) : t;
var e = parseInt(t.substr(0, 2), 16) || 0, i = parseInt(t.substr(2, 2), 16) || 0, n = parseInt(t.substr(4, 2), 16) || 0, r = parseInt(t.substr(6, 2), 16) || 255;
this._val = (r << 24 >>> 0) + (n << 16) + (i << 8) + e;
return this;
};
c.toHEX = function(t) {
var e = [ (this.r < 16 ? "0" : "") + (0 | this.r).toString(16), (this.g < 16 ? "0" : "") + (0 | this.g).toString(16), (this.b < 16 ? "0" : "") + (0 | this.b).toString(16) ], i = -1;
if ("#rgb" === t) for (i = 0; i < e.length; ++i) e[i].length > 1 && (e[i] = e[i][0]); else if ("#rrggbb" === t) for (i = 0; i < e.length; ++i) 1 === e[i].length && (e[i] = "0" + e[i]); else "#rrggbbaa" === t && e.push((this.a < 16 ? "0" : "") + (0 | this.a).toString(16));
return e.join("");
};
c.toRGBValue = function() {
return 16777215 & this._val;
};
c.fromHSV = function(t, e, i) {
var n, r, s;
if (0 === e) n = r = s = i; else if (0 === i) n = r = s = 0; else {
1 === t && (t = 0);
t *= 6;
e = e;
i = i;
var a = Math.floor(t), o = t - a, c = i * (1 - e), h = i * (1 - e * o), l = i * (1 - e * (1 - o));
switch (a) {
case 0:
n = i;
r = l;
s = c;
break;

case 1:
n = h;
r = i;
s = c;
break;

case 2:
n = c;
r = i;
s = l;
break;

case 3:
n = c;
r = h;
s = i;
break;

case 4:
n = l;
r = c;
s = i;
break;

case 5:
n = i;
r = c;
s = h;
}
}
n *= 255;
r *= 255;
s *= 255;
this._val = (this.a << 24 >>> 0) + (s << 16) + (r << 8) + n;
return this;
};
c.toHSV = function() {
var t = this.r / 255, e = this.g / 255, i = this.b / 255, n = {
h: 0,
s: 0,
v: 0
}, r = Math.max(t, e, i), s = Math.min(t, e, i), a = 0;
n.v = r;
n.s = r ? (r - s) / r : 0;
if (n.s) {
a = r - s;
n.h = t === r ? (e - i) / a : e === r ? 2 + (i - t) / a : 4 + (t - e) / a;
n.h /= 6;
n.h < 0 && (n.h += 1);
} else n.h = 0;
return n;
};
c.set = function(t) {
if (t._val) this._val = t._val; else {
this.r = t.r;
this.g = t.g;
this.b = t.b;
this.a = t.a;
}
};
return n;
})();
cc.Color = o;
cc.color = function(i, n, r, s) {
if ("string" === ("object" === (e = typeof i) ? t(i) : e)) {
return new cc.Color().fromHEX(i);
}
return "object" === ("object" === (e = typeof i) ? t(i) : e) ? new cc.Color(i.r, i.g, i.b, i.a) : new cc.Color(i, n, r, s);
};
n.exports = cc.Color;
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"./value-type": 231
} ],
226: [ (function(t, e, i) {
t("./value-type");
t("./vec2");
t("./vec3");
t("./quat");
t("./mat4");
t("./size");
t("./rect");
t("./color");
cc.vmath = t("../renderer/render-engine").math;
}), {
"../renderer/render-engine": 176,
"./color": 225,
"./mat4": 227,
"./quat": 228,
"./rect": 229,
"./size": 230,
"./value-type": 231,
"./vec2": 232,
"./vec3": 233
} ],
227: [ (function(t, e, i) {
var n = t("./value-type"), r = t("../platform/js"), s = t("../platform/CCClass"), a = t("../renderer/render-engine").math.mat4;
function o(t, e, i, n, r, s, a, o, c, h, l, u, f, _, d, p) {
var m = this;
m.m00 = t;
m.m01 = e;
m.m02 = i;
m.m03 = n;
m.m04 = r;
m.m05 = s;
m.m06 = a;
m.m07 = o;
m.m08 = c;
m.m09 = h;
m.m10 = l;
m.m11 = u;
m.m12 = f;
m.m13 = _;
m.m14 = d;
m.m15 = p;
}
r.extend(o, n);
s.fastDefine("cc.Mat4", o, {
m00: 1,
m01: 0,
m02: 0,
m03: 0,
m04: 0,
m05: 1,
m06: 0,
m07: 0,
m08: 0,
m09: 0,
m10: 1,
m11: 0,
m12: 0,
m13: 0,
m14: 0,
m15: 1
});
r.mixin(o.prototype, {
clone: function() {
var t = this;
return new o(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08, t.m09, t.m10, t.m11, t.m12, t.m13, t.m14, t.m15);
},
set: function(t) {
var e = this;
e.m00 = t.m00;
e.m01 = t.m01;
e.m02 = t.m02;
e.m03 = t.m03;
e.m04 = t.m04;
e.m05 = t.m05;
e.m06 = t.m06;
e.m07 = t.m07;
e.m08 = t.m08;
e.m09 = t.m09;
e.m10 = t.m10;
e.m11 = t.m11;
e.m12 = t.m12;
e.m13 = t.m13;
e.m14 = t.m14;
e.m15 = t.m15;
return this;
},
equals: function(t) {
return a.exactEquals(this, t);
},
fuzzyEquals: function(t) {
return a.equals(this, t);
},
toString: function() {
var t = this;
return "[\n" + t.m00 + ", " + t.m01 + ", " + t.m02 + ", " + t.m03 + ",\n" + t.m04 + ", " + t.m05 + ", " + t.m06 + ", " + t.m07 + ",\n" + t.m08 + ", " + t.m09 + ", " + t.m10 + ", " + t.m11 + ",\n" + t.m12 + ", " + t.m13 + ", " + t.m14 + ", " + t.m15 + "\n]";
},
identity: function() {
return a.identity(this);
},
transpose: function(t) {
t = t || new cc.Mat4();
return a.transpose(t, this);
},
invert: function(t) {
t = t || new cc.Mat4();
return a.invert(t, this);
},
adjoint: function(t) {
t = t || new cc.Mat4();
return a.adjoint(t, this);
},
determinant: function() {
return a.determinant(this);
},
add: function(t, e) {
e = e || new cc.Mat4();
return a.add(e, this, t);
},
sub: function(t, e) {
e = e || new cc.Mat4();
return a.subtract(e, this, t);
},
mul: function(t, e) {
e = e || new cc.Mat4();
return a.multiply(e, this, t);
},
mulScalar: function(t, e) {
e = e || new cc.Mat4();
return a.mulScalar(e, this, t);
},
translate: function(t, e) {
e = e || new cc.Mat4();
return a.translate(e, this, t);
},
scale: function(t, e) {
e = e || new cc.Mat4();
return a.scale(e, this, t);
},
rotate: function(t, e, i) {
i = i || new cc.Mat4();
return a.rotate(i, this, t, e);
},
getTranslation: function(t) {
t = t || new cc.Vec3();
return a.getTranslation(t, this);
},
getScale: function(t) {
t = t || new cc.Vec3();
return a.getScaling(t, this);
},
getRotation: function(t) {
t = t || new cc.Quat();
return a.getRotation(t, this);
},
fromRTS: function(t, e, i) {
return a.fromRTS(this, t, e, i);
},
fromQuat: function(t) {
return a.fromQuat(this, t);
}
});
cc.mat4 = function(t, e, i, n, r, s, a, c, h, l, u, f, _, d, p, m) {
return new o(t, e, i, n, r, s, a, c, h, l, u, f, _, d, p, m);
};
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"../renderer/render-engine": 176,
"./value-type": 231
} ],
228: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = i("../platform/CCClass");
function c(i, n, r, s) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
r = i.z;
n = i.y;
s = (i = i.x).w;
}
this.x = i || 0;
this.y = n || 0;
this.z = r || 0;
this.w = s || 1;
}
a.extend(c, s);
o.fastDefine("cc.Quat", c, {
x: 0,
y: 0,
z: 0,
w: 1
});
var h = c.prototype;
h.clone = function() {
return new c(this.x, this.y, this.z, this.w);
};
h.set = function(t) {
this.x = t.x;
this.y = t.y;
this.z = t.z;
this.w = t.w;
return this;
};
h.equals = function(t) {
return t && this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w;
};
h.getRoll = function() {
var t = 2 * (this.w * this.x + this.y * this.z), e = 1 - 2 * (this.x * this.x + this.y * this.y);
return 180 * Math.atan2(t, e) / Math.PI;
};
h.getPitch = function() {
var t = 2 * (this.w * this.y - this.z * this.x), e = t > 1 ? 1 : t;
e = t < -1 ? -1 : t;
return e = 180 * Math.asin(e) / Math.PI;
};
h.getYaw = function() {
var t = 2 * (this.w * this.z + this.x * this.y), e = 1 - 2 * (this.y * this.y + this.z * this.z);
return 180 * Math.atan2(t, e) / Math.PI;
};
cc.quat = function(t, e, i, n) {
return new c(t, e, i, n);
};
n.exports = cc.Quat = c;
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"./value-type": 231
} ],
229: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js");
function o(i, n, r, s) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
r = i.width;
s = i.height;
i = i.x;
}
this.x = i || 0;
this.y = n || 0;
this.width = r || 0;
this.height = s || 0;
}
a.extend(o, s);
i("../platform/CCClass").fastDefine("cc.Rect", o, {
x: 0,
y: 0,
width: 0,
height: 0
});
o.fromMinMax = function(t, e) {
var i = Math.min(t.x, e.x), n = Math.min(t.y, e.y);
return new o(i, n, Math.max(t.x, e.x) - i, Math.max(t.y, e.y) - n);
};
var c = o.prototype;
c.clone = function() {
return new o(this.x, this.y, this.width, this.height);
};
c.equals = function(t) {
return t && this.x === t.x && this.y === t.y && this.width === t.width && this.height === t.height;
};
c.lerp = function(t, e, i) {
i = i || new o();
var n = this.x, r = this.y, s = this.width, a = this.height;
i.x = n + (t.x - n) * e;
i.y = r + (t.y - r) * e;
i.width = s + (t.width - s) * e;
i.height = a + (t.height - a) * e;
return i;
};
c.set = function(t) {
this.x = t.x;
this.y = t.y;
this.width = t.width;
this.height = t.height;
};
c.intersects = function(t) {
var e = this.x + this.width, i = this.y + this.height, n = t.x + t.width, r = t.y + t.height;
return !(e < t.x || n < this.x || i < t.y || r < this.y);
};
c.intersection = function(t, e) {
var i = this.x, n = this.y, r = this.x + this.width, s = this.y + this.height, a = e.x, o = e.y, c = e.x + e.width, h = e.y + e.height;
t.x = Math.max(i, a);
t.y = Math.max(n, o);
t.width = Math.min(r, c) - t.x;
t.height = Math.min(s, h) - t.y;
return t;
};
c.contains = function(t) {
return this.x <= t.x && this.x + this.width >= t.x && this.y <= t.y && this.y + this.height >= t.y;
};
c.containsRect = function(t) {
return this.x <= t.x && this.x + this.width >= t.x + t.width && this.y <= t.y && this.y + this.height >= t.y + t.height;
};
c.union = function(t, e) {
var i = this.x, n = this.y, r = this.width, s = this.height, a = e.x, o = e.y, c = e.width, h = e.height;
t.x = Math.min(i, a);
t.y = Math.min(n, o);
t.width = Math.max(i + r, a + c) - t.x;
t.height = Math.max(n + s, o + h) - t.y;
return t;
};
c.transformMat4 = function(t, e) {
var i = this.x, n = this.y, r = i + this.width, s = n + this.height, a = e.m00 * i + e.m04 * n + e.m12, o = e.m01 * i + e.m05 * n + e.m13, c = e.m00 * r + e.m04 * n + e.m12, h = e.m01 * r + e.m05 * n + e.m13, l = e.m00 * i + e.m04 * s + e.m12, u = e.m01 * i + e.m05 * s + e.m13, f = e.m00 * r + e.m04 * s + e.m12, _ = e.m01 * r + e.m05 * s + e.m13, d = Math.min(a, c, l, f), p = Math.max(a, c, l, f), m = Math.min(o, h, u, _), g = Math.max(o, h, u, _);
t.x = d;
t.y = m;
t.width = p - d;
t.height = g - m;
return t;
};
c.toString = function() {
return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
};
a.getset(c, "xMin", (function() {
return this.x;
}), (function(t) {
this.width += this.x - t;
this.x = t;
}));
a.getset(c, "yMin", (function() {
return this.y;
}), (function(t) {
this.height += this.y - t;
this.y = t;
}));
a.getset(c, "xMax", (function() {
return this.x + this.width;
}), (function(t) {
this.width = t - this.x;
}));
a.getset(c, "yMax", (function() {
return this.y + this.height;
}), (function(t) {
this.height = t - this.y;
}));
a.getset(c, "center", (function() {
return new cc.Vec2(this.x + .5 * this.width, this.y + .5 * this.height);
}), (function(t) {
this.x = t.x - .5 * this.width;
this.y = t.y - .5 * this.height;
}));
a.getset(c, "origin", (function() {
return new cc.Vec2(this.x, this.y);
}), (function(t) {
this.x = t.x;
this.y = t.y;
}));
a.getset(c, "size", (function() {
return new cc.Size(this.width, this.height);
}), (function(t) {
this.width = t.width;
this.height = t.height;
}));
cc.Rect = o;
cc.rect = function(t, e, i, n) {
return new o(t, e, i, n);
};
n.exports = cc.Rect;
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"./value-type": 231
} ],
230: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js");
function o(i, n) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.height;
i = i.width;
}
this.width = i || 0;
this.height = n || 0;
}
a.extend(o, s);
i("../platform/CCClass").fastDefine("cc.Size", o, {
width: 0,
height: 0
});
a.get(o, "ZERO", (function() {
return new o(0, 0);
}));
var c = o.prototype;
c.clone = function() {
return new o(this.width, this.height);
};
c.equals = function(t) {
return t && this.width === t.width && this.height === t.height;
};
c.lerp = function(t, e, i) {
i = i || new o();
var n = this.width, r = this.height;
i.width = n + (t.width - n) * e;
i.height = r + (t.height - r) * e;
return i;
};
c.set = function(t) {
this.width = t.width;
this.height = t.height;
};
c.toString = function() {
return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
};
cc.size = function(t, e) {
return new o(t, e);
};
cc.Size = n.exports = o;
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"./value-type": 231
} ],
231: [ (function(t, e, i) {
var n = t("../platform/js");
function r() {}
n.setClassName("cc.ValueType", r);
var s = r.prototype;
0;
s.toString = function() {
return "" + {};
};
cc.ValueType = e.exports = r;
}), {
"../platform/js": 154
} ],
232: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = i("../platform/CCClass"), c = i("../renderer/render-engine").math, h = i("../utils/misc");
function l(i, n) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
n = i.y;
i = i.x;
}
this.x = i || 0;
this.y = n || 0;
}
a.extend(l, s);
o.fastDefine("cc.Vec2", l, {
x: 0,
y: 0
});
var u = l.prototype;
u.clone = function() {
return new l(this.x, this.y);
};
u.set = function(t) {
this.x = t.x;
this.y = t.y;
return this;
};
u.equals = function(t) {
return t && this.x === t.x && this.y === t.y;
};
u.fuzzyEquals = function(t, e) {
return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e;
};
u.toString = function() {
return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
};
u.lerp = function(t, e, i) {
i = i || new l();
var n = this.x, r = this.y;
i.x = n + (t.x - n) * e;
i.y = r + (t.y - r) * e;
return i;
};
u.clampf = function(t, e) {
this.x = h.clampf(this.x, t.x, e.x);
this.y = h.clampf(this.y, t.y, e.y);
return this;
};
u.addSelf = function(t) {
this.x += t.x;
this.y += t.y;
return this;
};
u.add = function(t, e) {
(e = e || new l()).x = this.x + t.x;
e.y = this.y + t.y;
return e;
};
u.subSelf = function(t) {
this.x -= t.x;
this.y -= t.y;
return this;
};
u.sub = function(t, e) {
(e = e || new l()).x = this.x - t.x;
e.y = this.y - t.y;
return e;
};
u.mulSelf = function(t) {
this.x *= t;
this.y *= t;
return this;
};
u.mul = function(t, e) {
(e = e || new l()).x = this.x * t;
e.y = this.y * t;
return e;
};
u.scaleSelf = function(t) {
this.x *= t.x;
this.y *= t.y;
return this;
};
u.scale = function(t, e) {
(e = e || new l()).x = this.x * t.x;
e.y = this.y * t.y;
return e;
};
u.divSelf = function(t) {
this.x /= t;
this.y /= t;
return this;
};
u.div = function(t, e) {
(e = e || new l()).x = this.x / t;
e.y = this.y / t;
return e;
};
u.negSelf = function() {
this.x = -this.x;
this.y = -this.y;
return this;
};
u.neg = function(t) {
(t = t || new l()).x = -this.x;
t.y = -this.y;
return t;
};
u.dot = function(t) {
return this.x * t.x + this.y * t.y;
};
u.cross = function(t) {
return this.x * t.y - this.y * t.x;
};
u.mag = function() {
return Math.sqrt(this.x * this.x + this.y * this.y);
};
u.magSqr = function() {
return this.x * this.x + this.y * this.y;
};
u.normalizeSelf = function() {
var t = this.x * this.x + this.y * this.y;
if (1 === t) return this;
if (0 === t) return this;
var e = 1 / Math.sqrt(t);
this.x *= e;
this.y *= e;
return this;
};
u.normalize = function(t) {
(t = t || new l()).x = this.x;
t.y = this.y;
t.normalizeSelf();
return t;
};
u.angle = function(t) {
var e = this.magSqr(), i = t.magSqr();
if (0 === e || 0 === i) {
console.warn("Can't get angle between zero vector");
return 0;
}
var n = this.dot(t) / Math.sqrt(e * i);
n = h.clampf(n, -1, 1);
return Math.acos(n);
};
u.signAngle = function(t) {
var e = this.angle(t);
return this.cross(t) < 0 ? -e : e;
};
u.rotate = function(t, e) {
(e = e || new l()).x = this.x;
e.y = this.y;
return e.rotateSelf(t);
};
u.rotateSelf = function(t) {
var e = Math.sin(t), i = Math.cos(t), n = this.x;
this.x = i * n - e * this.y;
this.y = e * n + i * this.y;
return this;
};
u.project = function(t) {
return t.mul(this.dot(t) / t.dot(t));
};
u.transformMat4 = function(t, e) {
e = e || new l();
c.vec2.transformMat4(e, this, t);
};
a.get(l, "ONE", (function() {
return new l(1, 1);
}));
a.get(l, "ZERO", (function() {
return new l(0, 0);
}));
a.get(l, "UP", (function() {
return new l(0, 1);
}));
a.get(l, "RIGHT", (function() {
return new l(1, 0);
}));
cc.Vec2 = l;
cc.v2 = function(t, e) {
return new l(t, e);
};
cc.p = cc.v2;
n.exports = cc.Vec2;
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"../renderer/render-engine": 176,
"../utils/misc": 216,
"./value-type": 231
} ],
233: [ (function(i, n, r) {
var s = i("./value-type"), a = i("../platform/js"), o = i("../platform/CCClass"), c = i("../renderer/render-engine").math, h = i("../utils/misc");
function l(i, n, r) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
r = i.z;
n = i.y;
i = i.x;
}
this.x = i || 0;
this.y = n || 0;
this.z = r || 0;
}
a.extend(l, s);
o.fastDefine("cc.Vec3", l, {
x: 0,
y: 0,
z: 0
});
var u = l.prototype;
u.clone = function() {
return new l(this.x, this.y, this.z);
};
u.set = function(t) {
this.x = t.x;
this.y = t.y;
this.z = t.z;
return this;
};
u.equals = function(t) {
return t && this.x === t.x && this.y === t.y && this.z === t.z;
};
u.fuzzyEquals = function(t, e) {
return this.x - e <= t.x && t.x <= this.x + e && this.y - e <= t.y && t.y <= this.y + e && this.z - e <= t.z && t.z <= this.z + e;
};
u.toString = function() {
return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
};
u.lerp = function(t, e, i) {
i = i || new l();
c.vec3.lerp(i, this, t, e);
return i;
};
u.clampf = function(t, e) {
this.x = h.clampf(this.x, t.x, e.x);
this.y = h.clampf(this.y, t.y, e.y);
this.z = h.clampf(this.z, t.z, e.z);
return this;
};
u.addSelf = function(t) {
this.x += t.x;
this.y += t.y;
this.z += t.z;
return this;
};
u.add = function(t, e) {
(e = e || new l()).x = this.x + t.x;
e.y = this.y + t.y;
e.z = this.z + t.z;
return e;
};
u.subSelf = function(t) {
this.x -= t.x;
this.y -= t.y;
this.z -= t.z;
return this;
};
u.sub = function(t, e) {
(e = e || new l()).x = this.x - t.x;
e.y = this.y - t.y;
e.z = this.z - t.z;
return e;
};
u.mulSelf = function(t) {
this.x *= t;
this.y *= t;
this.z *= t;
return this;
};
u.mul = function(t, e) {
(e = e || new l()).x = this.x * t;
e.y = this.y * t;
e.z = this.z * t;
return e;
};
u.scaleSelf = function(t) {
this.x *= t.x;
this.y *= t.y;
this.z *= t.z;
return this;
};
u.scale = function(t, e) {
(e = e || new l()).x = this.x * t.x;
e.y = this.y * t.y;
e.z = this.z * t.z;
return e;
};
u.divSelf = function(t) {
this.x /= t;
this.y /= t;
this.z /= t;
return this;
};
u.div = function(t, e) {
(e = e || new l()).x = this.x / t;
e.y = this.y / t;
e.z = this.z / t;
return e;
};
u.negSelf = function() {
this.x = -this.x;
this.y = -this.y;
this.z = -this.z;
return this;
};
u.neg = function(t) {
(t = t || new l()).x = -this.x;
t.y = -this.y;
t.z = -this.z;
return t;
};
u.dot = function(t) {
return this.x * t.x + this.y * t.y + this.z * t.z;
};
u.cross = function(t, e) {
e = e || new l();
c.vec3.cross(e, this, t);
return e;
};
u.mag = function() {
return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
};
u.magSqr = function() {
return this.x * this.x + this.y * this.y + this.z * this.z;
};
u.normalizeSelf = function() {
c.vec3.normalize(this, this);
return this;
};
u.normalize = function(t) {
t = t || new l();
c.vec3.normalize(t, this);
return t;
};
u.transformMat4 = function(t, e) {
e = e || new l();
c.vec3.transformMat4(e, this, t);
};
cc.v3 = function(t, e, i) {
return new l(t, e, i);
};
n.exports = cc.Vec3 = l;
}), {
"../platform/CCClass": 134,
"../platform/js": 154,
"../renderer/render-engine": 176,
"../utils/misc": 216,
"./value-type": 231
} ],
234: [ (function(t, e, i) {
cc.js;
}), {} ],
235: [ (function(t, e, i) {
t("./core/CCGame");
t("./actions");
}), {
"./actions": 7,
"./core/CCGame": 28
} ],
236: [ (function(t, e, i) {
var n = t("../compression/zlib.min"), r = t("../core/CCDebug"), s = function(t) {
var e, i, n, s, a, o, c, h, l, u, f, _, d;
this.data = t;
this.pos = 8;
this.palette = [];
this.imgData = [];
this.transparency = {};
this.animation = null;
this.text = {};
a = null;
for (;;) {
e = this.readUInt32();
switch (h = function() {
var t, e;
e = [];
for (t = 0; t < 4; ++t) e.push(String.fromCharCode(this.data[this.pos++]));
return e;
}.call(this).join("")) {
case "IHDR":
this.width = this.readUInt32();
this.height = this.readUInt32();
this.bits = this.data[this.pos++];
this.colorType = this.data[this.pos++];
this.compressionMethod = this.data[this.pos++];
this.filterMethod = this.data[this.pos++];
this.interlaceMethod = this.data[this.pos++];
break;

case "acTL":
this.animation = {
numFrames: this.readUInt32(),
numPlays: this.readUInt32() || Infinity,
frames: []
};
break;

case "PLTE":
this.palette = this.read(e);
break;

case "fcTL":
a && this.animation.frames.push(a);
this.pos += 4;
a = {
width: this.readUInt32(),
height: this.readUInt32(),
xOffset: this.readUInt32(),
yOffset: this.readUInt32()
};
s = this.readUInt16();
n = this.readUInt16() || 100;
a.delay = 1e3 * s / n;
a.disposeOp = this.data[this.pos++];
a.blendOp = this.data[this.pos++];
a.data = [];
break;

case "IDAT":
case "fdAT":
if ("fdAT" === h) {
this.pos += 4;
e -= 4;
}
t = (null != a ? a.data : void 0) || this.imgData;
for (f = 0; 0 <= e ? f < e : f > e; 0 <= e ? ++f : --f) t.push(this.data[this.pos++]);
break;

case "tRNS":
this.transparency = {};
switch (this.colorType) {
case 3:
this.transparency.indexed = this.read(e);
if ((l = 255 - this.transparency.indexed.length) > 0) for (_ = 0; 0 <= l ? _ < l : _ > l; 0 <= l ? ++_ : --_) this.transparency.indexed.push(255);
break;

case 0:
this.transparency.grayscale = this.read(e)[0];
break;

case 2:
this.transparency.rgb = this.read(e);
}
break;

case "tEXt":
o = (u = this.read(e)).indexOf(0);
c = String.fromCharCode.apply(String, u.slice(0, o));
this.text[c] = String.fromCharCode.apply(String, u.slice(o + 1));
break;

case "IEND":
a && this.animation.frames.push(a);
this.colors = function() {
switch (this.colorType) {
case 0:
case 3:
case 4:
return 1;

case 2:
case 6:
return 3;
}
}.call(this);
this.hasAlphaChannel = 4 === (d = this.colorType) || 6 === d;
i = this.colors + (this.hasAlphaChannel ? 1 : 0);
this.pixelBitlength = this.bits * i;
this.colorSpace = function() {
switch (this.colors) {
case 1:
return "DeviceGray";

case 3:
return "DeviceRGB";
}
}.call(this);
Uint8Array != Array && (this.imgData = new Uint8Array(this.imgData));
return;

default:
this.pos += e;
}
this.pos += 4;
if (this.pos > this.data.length) throw new Error(r.getError(6017));
}
};
s.prototype = {
constructor: s,
read: function(t) {
var e, i;
i = [];
for (e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e) i.push(this.data[this.pos++]);
return i;
},
readUInt32: function() {
return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
},
readUInt16: function() {
return this.data[this.pos++] << 8 | this.data[this.pos++];
},
decodePixels: function(t) {
var e, i, s, a, o, c, h, l, u, f, _, d, p, m, g, v, y, T, x, E, C, A, b;
null == t && (t = this.imgData);
if (0 === t.length) return new Uint8Array(0);
t = new n.Inflate(t, {
index: 0,
verify: !1
}).decompress();
v = (d = this.pixelBitlength / 8) * this.width;
p = new Uint8Array(v * this.height);
c = t.length;
g = 0;
m = 0;
i = 0;
for (;m < c; ) {
switch (t[m++]) {
case 0:
for (a = x = 0; x < v; a = x += 1) p[i++] = t[m++];
break;

case 1:
for (a = E = 0; E < v; a = E += 1) {
e = t[m++];
o = a < d ? 0 : p[i - d];
p[i++] = (e + o) % 256;
}
break;

case 2:
for (a = C = 0; C < v; a = C += 1) {
e = t[m++];
s = (a - a % d) / d;
y = g && p[(g - 1) * v + s * d + a % d];
p[i++] = (y + e) % 256;
}
break;

case 3:
for (a = A = 0; A < v; a = A += 1) {
e = t[m++];
s = (a - a % d) / d;
o = a < d ? 0 : p[i - d];
y = g && p[(g - 1) * v + s * d + a % d];
p[i++] = (e + Math.floor((o + y) / 2)) % 256;
}
break;

case 4:
for (a = b = 0; b < v; a = b += 1) {
e = t[m++];
s = (a - a % d) / d;
o = a < d ? 0 : p[i - d];
if (0 === g) y = T = 0; else {
y = p[(g - 1) * v + s * d + a % d];
T = s && p[(g - 1) * v + (s - 1) * d + a % d];
}
h = o + y - T;
l = Math.abs(h - o);
f = Math.abs(h - y);
_ = Math.abs(h - T);
u = l <= f && l <= _ ? o : f <= _ ? y : T;
p[i++] = (e + u) % 256;
}
break;

default:
throw new Error(r.getError(6018, t[m - 1]));
}
g++;
}
return p;
},
copyToImageData: function(t, e) {
var i, n, r, s, a, o, c, h, l, u, f;
n = this.colors;
l = null;
i = this.hasAlphaChannel;
if (this.palette.length) {
l = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette();
n = 4;
i = !0;
}
h = (r = t.data || t).length;
a = l || e;
s = o = 0;
if (1 === n) for (;s < h; ) {
c = l ? 4 * e[s / 4] : o;
u = a[c++];
r[s++] = u;
r[s++] = u;
r[s++] = u;
r[s++] = i ? a[c++] : 255;
o = c;
} else for (;s < h; ) {
c = l ? 4 * e[s / 4] : o;
r[s++] = a[c++];
r[s++] = a[c++];
r[s++] = a[c++];
r[s++] = i ? a[c++] : 255;
o = c;
}
},
decodePalette: function() {
var t, e, i, n, r, s, a, o, c;
i = this.palette;
s = this.transparency.indexed || [];
r = new Uint8Array((s.length || 0) + i.length);
n = 0;
t = 0;
for (e = a = 0, o = i.length; a < o; e = a += 3) {
r[n++] = i[e];
r[n++] = i[e + 1];
r[n++] = i[e + 2];
r[n++] = null != (c = s[t++]) ? c : 255;
}
return r;
},
render: function(t) {
var e, i;
t.width = this.width;
t.height = this.height;
i = (e = t.getContext("2d")).createImageData(this.width, this.height);
this.copyToImageData(i, this.decodePixels());
return e.putImageData(i, 0, 0);
}
};
e.exports = s;
}), {
"../compression/zlib.min": 25,
"../core/CCDebug": 26
} ],
237: [ (function(t, e, i) {
var n = t("../core/assets/CCAsset"), r = t("../core/assets/CCSpriteFrame"), s = cc.Class({
name: "cc.ParticleAsset",
extends: n,
properties: {
spriteFrame: {
default: null,
type: r
}
}
});
cc.ParticleAsset = e.exports = s;
}), {
"../core/assets/CCAsset": 33,
"../core/assets/CCSpriteFrame": 46
} ],
238: [ (function(t, e, i) {
var n = t("../core/platform/CCMacro"), r = t("./CCParticleAsset"), s = t("../core/components/CCRenderComponent"), a = t("../compression/ZipUtils"), o = t("./CCPNGReader"), c = t("./CCTIFFReader"), h = t("../core/utils/texture-util"), l = t("../core/renderer/render-engine"), u = t("../core/renderer/render-flow"), f = t("./particle-simulator");
function _(t) {
return t.length > 8 && 137 === t[0] && 80 === t[1] && 78 === t[2] && 71 === t[3] && 13 === t[4] && 10 === t[5] && 26 === t[6] && 10 === t[7] ? n.ImageFormat.PNG : t.length > 2 && (73 === t[0] && 73 === t[1] || 77 === t[0] && 77 === t[1] || 255 === t[0] && 216 === t[1]) ? n.ImageFormat.TIFF : n.ImageFormat.UNKNOWN;
}
var d = cc.Enum({
GRAVITY: 0,
RADIUS: 1
}), p = cc.Enum({
FREE: 0,
RELATIVE: 1,
GROUPED: 2
}), m = {
preview: {
default: !0,
editorOnly: !0,
notify: !1,
animatable: !1,
tooltip: !1
},
_custom: !1,
custom: {
get: function() {
return this._custom;
},
set: function(t) {
0;
if (this._custom !== t) {
this._custom = t;
this._applyFile();
0;
}
},
animatable: !1,
tooltip: !1
},
_file: {
default: null,
type: r
},
file: {
get: function() {
return this._file;
},
set: function(t, e) {
if (this._file !== t) {
this._file = t;
if (t) {
this._applyFile();
0;
} else this.custom = !0;
}
},
animatable: !1,
type: r,
tooltip: !1
},
_spriteFrame: {
default: null,
type: cc.SpriteFrame
},
spriteFrame: {
get: function() {
return this._spriteFrame;
},
set: function(t, e) {
var i = this._renderSpriteFrame;
if (i !== t) {
this._renderSpriteFrame = t;
t && !t._uuid || (this._spriteFrame = t);
if ((i && i.getTexture()) !== (t && t.getTexture())) {
this._texture = null;
this._applySpriteFrame(i);
}
0;
}
},
type: cc.SpriteFrame,
tooltip: !1
},
_texture: {
default: null,
type: cc.Texture2D,
editorOnly: !0
},
texture: {
get: function() {
return this._texture;
},
set: function(t) {
t && cc.warnID(6017);
},
type: cc.Texture2D,
tooltip: !1,
readonly: !0,
visible: !1,
animatable: !1
},
particleCount: {
visible: !1,
get: function() {
return this._simulator.particles.length;
},
readonly: !0
},
_stopped: !0,
stopped: {
get: function() {
return this._stopped;
},
animatable: !1,
visible: !1
},
playOnLoad: !0,
autoRemoveOnFinish: {
default: !1,
animatable: !1,
tooltip: !1
},
active: {
get: function() {
return this._simulator.active;
},
visible: !1
},
totalParticles: 150,
duration: -1,
emissionRate: 10,
life: 1,
lifeVar: 0,
_startColor: null,
startColor: {
type: cc.Color,
get: function() {
return this._startColor;
},
set: function(t) {
this._startColor.r = t.r;
this._startColor.g = t.g;
this._startColor.b = t.b;
this._startColor.a = t.a;
}
},
_startColorVar: null,
startColorVar: {
type: cc.Color,
get: function() {
return this._startColorVar;
},
set: function(t) {
this._startColorVar.r = t.r;
this._startColorVar.g = t.g;
this._startColorVar.b = t.b;
this._startColorVar.a = t.a;
}
},
_endColor: null,
endColor: {
type: cc.Color,
get: function() {
return this._endColor;
},
set: function(t) {
this._endColor.r = t.r;
this._endColor.g = t.g;
this._endColor.b = t.b;
this._endColor.a = t.a;
}
},
_endColorVar: null,
endColorVar: {
type: cc.Color,
get: function() {
return this._endColorVar;
},
set: function(t) {
this._endColorVar.r = t.r;
this._endColorVar.g = t.g;
this._endColorVar.b = t.b;
this._endColorVar.a = t.a;
}
},
angle: 90,
angleVar: 20,
startSize: 50,
startSizeVar: 0,
endSize: 0,
endSizeVar: 0,
startSpin: 0,
startSpinVar: 0,
endSpin: 0,
endSpinVar: 0,
sourcePos: cc.Vec2.ZERO,
posVar: cc.Vec2.ZERO,
positionType: {
default: p.FREE,
type: p
},
emitterMode: {
default: d.GRAVITY,
type: d
},
gravity: cc.Vec2.ZERO,
speed: 180,
speedVar: 50,
tangentialAccel: 80,
tangentialAccelVar: 0,
radialAccel: 0,
radialAccelVar: 0,
rotationIsDir: !1,
startRadius: 0,
startRadiusVar: 0,
endRadius: 0,
endRadiusVar: 0,
rotatePerS: 0,
rotatePerSVar: 0
}, g = cc.Class({
name: "cc.ParticleSystem",
extends: s,
mixins: [ s.BlendFactorPolyfill ],
editor: !1,
ctor: function() {
this._previewTimer = null;
this._focused = !1;
this._simulator = new f(this);
this._startColor = cc.color(255, 255, 255, 255);
this._startColorVar = cc.color(0, 0, 0, 0);
this._endColor = cc.color(255, 255, 255, 0);
this._endColorVar = cc.color(0, 0, 0, 0);
this._renderSpriteFrame = null;
},
properties: m,
statics: {
DURATION_INFINITY: -1,
START_SIZE_EQUAL_TO_END_SIZE: -1,
START_RADIUS_EQUAL_TO_END_RADIUS: -1,
EmitterMode: d,
PositionType: p,
_PNGReader: o,
_TIFFReader: c
},
onFocusInEditor: !1,
onLostFocusInEditor: !1,
_convertTextureToSpriteFrame: !1,
__preload: function() {
0;
if (this._custom && this.spriteFrame && !this._renderSpriteFrame) this._applySpriteFrame(this.spriteFrame); else if (this._file) if (this._custom) {
!this._texture && this._applyFile();
} else this._applyFile();
this.playOnLoad && this.resetSystem();
0;
},
onEnable: function() {
this._super();
this.node._renderFlag &= ~u.FLAG_RENDER;
this._activateMaterial();
},
onDestroy: function() {
this.autoRemoveOnFinish && (this.autoRemoveOnFinish = !1);
if (this._buffer) {
this._buffer.destroy();
this._buffer = null;
}
this._ia = null;
this._simulator._uvFilled = 0;
this._super();
},
lateUpdate: function(t) {
!this._simulator.finished && this._material && this._simulator.step(t);
},
addParticle: function() {},
stopSystem: function() {
this._stopped = !0;
this._simulator.stop();
},
resetSystem: function() {
this._stopped = !1;
this._simulator.reset();
this._activateMaterial();
},
isFull: function() {
return this.particleCount >= this.totalParticles;
},
setTextureWithRect: function(t, e) {
t instanceof cc.Texture2D && (this.spriteFrame = new cc.SpriteFrame(t, e));
},
_applyFile: function() {
var t = this, e = this._file;
e && (function() {
var i = t;
cc.loader.load(e.nativeUrl, (function(t, n) {
if (!t && n) {
if (i.isValid) {
i._plistFile = e.nativeUrl;
i._custom || i._initWithDictionary(n);
i._spriteFrame ? !i._renderSpriteFrame && i._spriteFrame && i._applySpriteFrame(i.spriteFrame) : e.spriteFrame ? i.spriteFrame = e.spriteFrame : i._custom && i._initTextureWithDictionary(n);
}
} else cc.errorID(6029);
}));
})();
},
_initTextureWithDictionary: function(t) {
var e = cc.path.changeBasename(this._plistFile, t.textureFileName || "");
if (t.textureFileName) h.loadImage(e, (function(e, i) {
if (e) {
t.textureFileName = void 0;
this._initTextureWithDictionary(t);
} else this.spriteFrame = new cc.SpriteFrame(i);
}), this); else if (t.textureImageData) {
var i = t.textureImageData;
if (!(i && i.length > 0)) return !1;
var r = cc.loader.getRes(e);
if (!r) {
var s = a.unzipBase64AsArray(i, 1);
if (!s) {
cc.logID(6030);
return !1;
}
var l = _(s);
if (l !== n.ImageFormat.TIFF && l !== n.ImageFormat.PNG) {
cc.logID(6031);
return !1;
}
var u = document.createElement("canvas");
if (l === n.ImageFormat.PNG) {
new o(s).render(u);
} else c.parseTIFF(s, u);
r = h.cacheImage(e, u);
}
r || cc.logID(6032);
this.spriteFrame = new cc.SpriteFrame(r);
}
return !0;
},
_initWithDictionary: function(t) {
this.totalParticles = parseInt(t.maxParticles || 0);
this.life = parseFloat(t.particleLifespan || 0);
this.lifeVar = parseFloat(t.particleLifespanVariance || 0);
var e = t.emissionRate;
this.emissionRate = e || Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
this.duration = parseFloat(t.duration || 0);
this.srcBlendFactor = parseInt(t.blendFuncSource || n.SRC_ALPHA);
this.dstBlendFactor = parseInt(t.blendFuncDestination || n.ONE_MINUS_SRC_ALPHA);
var i = this._startColor;
i.r = 255 * parseFloat(t.startColorRed || 0);
i.g = 255 * parseFloat(t.startColorGreen || 0);
i.b = 255 * parseFloat(t.startColorBlue || 0);
i.a = 255 * parseFloat(t.startColorAlpha || 0);
var r = this._startColorVar;
r.r = 255 * parseFloat(t.startColorVarianceRed || 0);
r.g = 255 * parseFloat(t.startColorVarianceGreen || 0);
r.b = 255 * parseFloat(t.startColorVarianceBlue || 0);
r.a = 255 * parseFloat(t.startColorVarianceAlpha || 0);
var s = this._endColor;
s.r = 255 * parseFloat(t.finishColorRed || 0);
s.g = 255 * parseFloat(t.finishColorGreen || 0);
s.b = 255 * parseFloat(t.finishColorBlue || 0);
s.a = 255 * parseFloat(t.finishColorAlpha || 0);
var a = this._endColorVar;
a.r = 255 * parseFloat(t.finishColorVarianceRed || 0);
a.g = 255 * parseFloat(t.finishColorVarianceGreen || 0);
a.b = 255 * parseFloat(t.finishColorVarianceBlue || 0);
a.a = 255 * parseFloat(t.finishColorVarianceAlpha || 0);
this.startSize = parseFloat(t.startParticleSize || 0);
this.startSizeVar = parseFloat(t.startParticleSizeVariance || 0);
this.endSize = parseFloat(t.finishParticleSize || 0);
this.endSizeVar = parseFloat(t.finishParticleSizeVariance || 0);
this.sourcePos.x = 0;
this.sourcePos.y = 0;
this.posVar.x = parseFloat(t.sourcePositionVariancex || 0);
this.posVar.y = parseFloat(t.sourcePositionVariancey || 0);
this.angle = parseFloat(t.angle || 0);
this.angleVar = parseFloat(t.angleVariance || 0);
this.startSpin = parseFloat(t.rotationStart || 0);
this.startSpinVar = parseFloat(t.rotationStartVariance || 0);
this.endSpin = parseFloat(t.rotationEnd || 0);
this.endSpinVar = parseFloat(t.rotationEndVariance || 0);
this.emitterMode = parseInt(t.emitterType || d.GRAVITY);
if (this.emitterMode === d.GRAVITY) {
this.gravity.x = parseFloat(t.gravityx || 0);
this.gravity.y = parseFloat(t.gravityy || 0);
this.speed = parseFloat(t.speed || 0);
this.speedVar = parseFloat(t.speedVariance || 0);
this.radialAccel = parseFloat(t.radialAcceleration || 0);
this.radialAccelVar = parseFloat(t.radialAccelVariance || 0);
this.tangentialAccel = parseFloat(t.tangentialAcceleration || 0);
this.tangentialAccelVar = parseFloat(t.tangentialAccelVariance || 0);
var o = t.rotationIsDir || "";
if (null !== o) {
o = o.toString().toLowerCase();
this.rotationIsDir = "true" === o || "1" === o;
} else this.rotationIsDir = !1;
} else {
if (this.emitterMode !== d.RADIUS) {
cc.warnID(6009);
return !1;
}
this.startRadius = parseFloat(t.maxRadius || 0);
this.startRadiusVar = parseFloat(t.maxRadiusVariance || 0);
this.endRadius = parseFloat(t.minRadius || 0);
this.endRadiusVar = parseFloat(t.minRadiusVariance || 0);
this.rotatePerS = parseFloat(t.rotatePerSecond || 0);
this.rotatePerSVar = parseFloat(t.rotatePerSecondVariance || 0);
}
this._initTextureWithDictionary(t);
return !0;
},
_onTextureLoaded: function() {
this._texture = this._renderSpriteFrame.getTexture();
this._simulator.updateUVs(!0);
this._activateMaterial();
},
_applySpriteFrame: function(t) {
t && t.off && t.off("load", this._onTextureLoaded, this);
var e = this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;
if (e) if (e.textureLoaded()) this._onTextureLoaded(null); else {
e.once("load", this._onTextureLoaded, this);
e.ensureLoadTexture();
}
},
_updateMaterial: function(t) {
this._material = t;
this._updateBlendFunc();
t.updateHash();
},
_activateMaterial: function() {
if (!this._material) {
this._material = new l.SpriteMaterial();
this._material.useTexture = !0;
this._material.useModel = !0;
this._material.useColor = !1;
}
this._ia || g._assembler.createIA(this);
if (this._texture && this._texture.loaded) {
this.markForUpdateRenderData(!0);
this.markForCustomIARender(!0);
this._material.texture = this._texture;
this._updateMaterial(this._material);
} else {
this.markForCustomIARender(!1);
this._renderSpriteFrame && this._applySpriteFrame();
}
},
_finishedSimulation: function() {
0;
this.resetSystem();
this.stopSystem();
this.disableRender();
this.autoRemoveOnFinish && this._stopped && this.node.destroy();
}
});
cc.ParticleSystem = e.exports = g;
}), {
"../compression/ZipUtils": 22,
"../core/components/CCRenderComponent": 77,
"../core/platform/CCMacro": 139,
"../core/renderer/render-engine": 176,
"../core/renderer/render-flow": 177,
"../core/utils/texture-util": 224,
"./CCPNGReader": 236,
"./CCParticleAsset": 237,
"./CCTIFFReader": 239,
"./particle-simulator": 241,
"fire-url": void 0
} ],
239: [ (function(t, e, i) {
var n = t("../core/CCDebug"), r = {
_littleEndian: !1,
_tiffData: null,
_fileDirectories: [],
getUint8: function(t) {
return this._tiffData[t];
},
getUint16: function(t) {
return this._littleEndian ? this._tiffData[t + 1] << 8 | this._tiffData[t] : this._tiffData[t] << 8 | this._tiffData[t + 1];
},
getUint32: function(t) {
var e = this._tiffData;
return this._littleEndian ? e[t + 3] << 24 | e[t + 2] << 16 | e[t + 1] << 8 | e[t] : e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3];
},
checkLittleEndian: function() {
var t = this.getUint16(0);
if (18761 === t) this.littleEndian = !0; else {
if (19789 !== t) {
console.log(t);
throw TypeError(n.getError(6019));
}
this.littleEndian = !1;
}
return this.littleEndian;
},
hasTowel: function() {
if (42 !== this.getUint16(2)) throw RangeError(n.getError(6020));
return !0;
},
getFieldTypeName: function(t) {
var e = this.fieldTypeNames;
return t in e ? e[t] : null;
},
getFieldTagName: function(t) {
var e = this.fieldTagNames;
if (t in e) return e[t];
cc.logID(6021, t);
return "Tag" + t;
},
getFieldTypeLength: function(t) {
return -1 !== [ "BYTE", "ASCII", "SBYTE", "UNDEFINED" ].indexOf(t) ? 1 : -1 !== [ "SHORT", "SSHORT" ].indexOf(t) ? 2 : -1 !== [ "LONG", "SLONG", "FLOAT" ].indexOf(t) ? 4 : -1 !== [ "RATIONAL", "SRATIONAL", "DOUBLE" ].indexOf(t) ? 8 : null;
},
getFieldValues: function(t, e, i, n) {
var r = [], s = this.getFieldTypeLength(e);
if (s * i <= 4) !1 === this.littleEndian ? r.push(n >>> 8 * (4 - s)) : r.push(n); else for (var a = 0; a < i; a++) {
var o = s * a;
if (s >= 8) if (-1 !== [ "RATIONAL", "SRATIONAL" ].indexOf(e)) {
r.push(this.getUint32(n + o));
r.push(this.getUint32(n + o + 4));
} else cc.logID(8e3); else r.push(this.getBytes(s, n + o));
}
"ASCII" === e && r.forEach((function(t, e, i) {
i[e] = String.fromCharCode(t);
}));
return r;
},
getBytes: function(t, e) {
if (t <= 0) cc.logID(8001); else {
if (t <= 1) return this.getUint8(e);
if (t <= 2) return this.getUint16(e);
if (t <= 3) return this.getUint32(e) >>> 8;
if (t <= 4) return this.getUint32(e);
cc.logID(8002);
}
},
getBits: function(t, e, i) {
i = i || 0;
var n, r, s = e + Math.floor(i / 8), a = i + t, o = 32 - t;
if (a <= 0) cc.logID(6023); else if (a <= 8) {
n = 24 + i;
r = this.getUint8(s);
} else if (a <= 16) {
n = 16 + i;
r = this.getUint16(s);
} else if (a <= 32) {
n = i;
r = this.getUint32(s);
} else cc.logID(6022);
return {
bits: r << n >>> o,
byteOffset: s + Math.floor(a / 8),
bitOffset: a % 8
};
},
parseFileDirectory: function(t) {
for (var e = this.getUint16(t), i = [], n = t + 2, r = 0; r < e; n += 12, r++) {
var s = this.getUint16(n), a = this.getUint16(n + 2), o = this.getUint32(n + 4), c = this.getUint32(n + 8), h = this.getFieldTagName(s), l = this.getFieldTypeName(a), u = this.getFieldValues(h, l, o, c);
i[h] = {
type: l,
values: u
};
}
this._fileDirectories.push(i);
var f = this.getUint32(n);
0 !== f && this.parseFileDirectory(f);
},
clampColorSample: function(t, e) {
var i = Math.pow(2, 8 - e);
return Math.floor(t * i + (i - 1));
},
parseTIFF: function(t, e) {
e = e || document.createElement("canvas");
this._tiffData = t;
this.canvas = e;
this.checkLittleEndian();
if (this.hasTowel()) {
var i = this.getUint32(4);
this._fileDirectories.length = 0;
this.parseFileDirectory(i);
var r = this._fileDirectories[0], s = r.ImageWidth.values[0], a = r.ImageLength.values[0];
this.canvas.width = s;
this.canvas.height = a;
var o = [], c = r.Compression ? r.Compression.values[0] : 1, h = r.SamplesPerPixel.values[0], l = [], u = 0, f = !1;
r.BitsPerSample.values.forEach((function(t, e, i) {
l[e] = {
bitsPerSample: t,
hasBytesPerSample: !1,
bytesPerSample: void 0
};
if (t % 8 == 0) {
l[e].hasBytesPerSample = !0;
l[e].bytesPerSample = t / 8;
}
u += t;
}), this);
if (u % 8 == 0) {
f = !0;
var _ = u / 8;
}
var d = r.StripOffsets.values, p = d.length;
if (r.StripByteCounts) var m = r.StripByteCounts.values; else {
cc.logID(8003);
if (1 !== p) throw Error(n.getError(6024));
m = [ Math.ceil(s * a * u / 8) ];
}
for (var g = 0; g < p; g++) {
var v = d[g];
o[g] = [];
for (var y = m[g], T = 0, x = 0, E = 1, C = !0, A = [], b = 0, S = 0, w = 0; T < y; T += E) switch (c) {
case 1:
var D = 0;
for (A = []; D < h; D++) {
if (!l[D].hasBytesPerSample) {
var I = this.getBits(l[D].bitsPerSample, v + T, x);
A.push(I.bits);
T = I.byteOffset - v;
x = I.bitOffset;
throw RangeError(n.getError(6025));
}
var R = l[D].bytesPerSample * D;
A.push(this.getBytes(l[D].bytesPerSample, v + T + R));
}
o[g].push(A);
if (!f) {
E = 0;
throw RangeError(n.getError(6026));
}
E = _;
break;

case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
break;

case 32773:
if (C) {
C = !1;
var M = 1, L = 1, O = this.getInt8(v + T);
O >= 0 && O <= 127 ? M = O + 1 : O >= -127 && O <= -1 ? L = 1 - O : C = !0;
} else {
var P = this.getUint8(v + T);
for (D = 0; D < L; D++) {
if (!l[S].hasBytesPerSample) throw RangeError(n.getError(6025));
w = w << 8 * b | P;
if (++b === l[S].bytesPerSample) {
A.push(w);
w = b = 0;
S++;
}
if (S === h) {
o[g].push(A);
A = [];
S = 0;
}
}
0 === --M && (C = !0);
}
E = 1;
}
}
if (e.getContext) {
var F = this.canvas.getContext("2d");
F.fillStyle = "rgba(255, 255, 255, 0)";
var N = r.RowsPerStrip ? r.RowsPerStrip.values[0] : a, B = o.length, k = a % N, z = 0 === k ? N : k, U = N, H = 0, V = r.PhotometricInterpretation.values[0], W = [], G = 0;
r.ExtraSamples && (G = (W = r.ExtraSamples.values).length);
if (r.ColorMap) var j = r.ColorMap.values, X = Math.pow(2, l[0].bitsPerSample);
for (g = 0; g < B; g++) {
g + 1 === B && (U = z);
for (var Y = o[g].length, q = H * g, Z = 0, K = 0; K < Y; Z++) for (var J = 0; J < s; J++, 
K++) {
var Q = o[g][K], $ = 0, tt = 0, et = 0, it = 1;
if (G > 0) for (var nt = 0; nt < G; nt++) if (1 === W[nt] || 2 === W[nt]) {
it = Q[3 + nt] / 256;
break;
}
switch (V) {
case 0:
if (l[0].hasBytesPerSample) var rt = Math.pow(16, 2 * l[0].bytesPerSample);
Q.forEach((function(t, e, i) {
i[e] = rt - t;
}));

case 1:
$ = tt = et = this.clampColorSample(Q[0], l[0].bitsPerSample);
break;

case 2:
$ = this.clampColorSample(Q[0], l[0].bitsPerSample);
tt = this.clampColorSample(Q[1], l[1].bitsPerSample);
et = this.clampColorSample(Q[2], l[2].bitsPerSample);
break;

case 3:
if (void 0 === j) throw Error(n.getError(6027));
var st = Q[0];
$ = this.clampColorSample(j[st], 16);
tt = this.clampColorSample(j[X + st], 16);
et = this.clampColorSample(j[2 * X + st], 16);
break;

default:
throw RangeError(n.getError(6028, V));
}
F.fillStyle = "rgba(" + $ + ", " + tt + ", " + et + ", " + it + ")";
F.fillRect(J, q + Z, 1, 1);
}
H = U;
}
}
return this.canvas;
}
},
fieldTagNames: {
315: "Artist",
258: "BitsPerSample",
265: "CellLength",
264: "CellWidth",
320: "ColorMap",
259: "Compression",
33432: "Copyright",
306: "DateTime",
338: "ExtraSamples",
266: "FillOrder",
289: "FreeByteCounts",
288: "FreeOffsets",
291: "GrayResponseCurve",
290: "GrayResponseUnit",
316: "HostComputer",
270: "ImageDescription",
257: "ImageLength",
256: "ImageWidth",
271: "Make",
281: "MaxSampleValue",
280: "MinSampleValue",
272: "Model",
254: "NewSubfileType",
274: "Orientation",
262: "PhotometricInterpretation",
284: "PlanarConfiguration",
296: "ResolutionUnit",
278: "RowsPerStrip",
277: "SamplesPerPixel",
305: "Software",
279: "StripByteCounts",
273: "StripOffsets",
255: "SubfileType",
263: "Threshholding",
282: "XResolution",
283: "YResolution",
326: "BadFaxLines",
327: "CleanFaxData",
343: "ClipPath",
328: "ConsecutiveBadFaxLines",
433: "Decode",
434: "DefaultImageColor",
269: "DocumentName",
336: "DotRange",
321: "HalftoneHints",
346: "Indexed",
347: "JPEGTables",
285: "PageName",
297: "PageNumber",
317: "Predictor",
319: "PrimaryChromaticities",
532: "ReferenceBlackWhite",
339: "SampleFormat",
559: "StripRowCounts",
330: "SubIFDs",
292: "T4Options",
293: "T6Options",
325: "TileByteCounts",
323: "TileLength",
324: "TileOffsets",
322: "TileWidth",
301: "TransferFunction",
318: "WhitePoint",
344: "XClipPathUnits",
286: "XPosition",
529: "YCbCrCoefficients",
531: "YCbCrPositioning",
530: "YCbCrSubSampling",
345: "YClipPathUnits",
287: "YPosition",
37378: "ApertureValue",
40961: "ColorSpace",
36868: "DateTimeDigitized",
36867: "DateTimeOriginal",
34665: "Exif IFD",
36864: "ExifVersion",
33434: "ExposureTime",
41728: "FileSource",
37385: "Flash",
40960: "FlashpixVersion",
33437: "FNumber",
42016: "ImageUniqueID",
37384: "LightSource",
37500: "MakerNote",
37377: "ShutterSpeedValue",
37510: "UserComment",
33723: "IPTC",
34675: "ICC Profile",
700: "XMP",
42112: "GDAL_METADATA",
42113: "GDAL_NODATA",
34377: "Photoshop"
},
fieldTypeNames: {
1: "BYTE",
2: "ASCII",
3: "SHORT",
4: "LONG",
5: "RATIONAL",
6: "SBYTE",
7: "UNDEFINED",
8: "SSHORT",
9: "SLONG",
10: "SRATIONAL",
11: "FLOAT",
12: "DOUBLE"
}
};
e.exports = r;
}), {
"../core/CCDebug": 26
} ],
240: [ (function(t, e, i) {
t("./CCParticleAsset");
t("./CCParticleSystem");
t("./particle-simulator");
t("./particle-system-assembler");
}), {
"./CCParticleAsset": 237,
"./CCParticleSystem": 238,
"./particle-simulator": 241,
"./particle-system-assembler": 242
} ],
241: [ (function(t, e, i) {
var n = t("../core/utils/affine-transform"), r = t("../core/platform/js"), s = t("../core/utils/misc"), a = cc.v2(0, 0), o = n.create(), c = cc.v2(), h = cc.v2(), l = cc.v2(), u = cc.v2(), f = function() {
this.pos = cc.v2(0, 0);
this.startPos = cc.v2(0, 0);
this.color = cc.color(0, 0, 0, 255);
this.deltaColor = {
r: 0,
g: 0,
b: 0,
a: 255
};
this.size = 0;
this.deltaSize = 0;
this.rotation = 0;
this.deltaRotation = 0;
this.timeToLive = 0;
this.drawPos = cc.v2(0, 0);
this.dir = cc.v2(0, 0);
this.radialAccel = 0;
this.tangentialAccel = 0;
this.angle = 0;
this.degreesPerSecond = 0;
this.radius = 0;
this.deltaRadius = 0;
}, _ = new r.Pool(function(t) {
t.pos.set(a);
t.startPos.set(a);
t.color._val = 4278190080;
t.deltaColor.r = t.deltaColor.g = t.deltaColor.b = 0;
t.deltaColor.a = 255;
t.size = 0;
t.deltaSize = 0;
t.rotation = 0;
t.deltaRotation = 0;
t.timeToLive = 0;
t.drawPos.set(a);
t.dir.set(a);
t.radialAccel = 0;
t.tangentialAccel = 0;
t.angle = 0;
t.degreesPerSecond = 0;
t.radius = 0;
t.deltaRadius = 0;
}, 1024);
_.get = function() {
return this._get() || new f();
};
var d = function(t) {
this.sys = t;
this.particles = [];
this.active = !1;
this.finished = !1;
this.elapsed = 0;
this.emitCounter = 0;
this._uvFilled = 0;
};
d.prototype.stop = function() {
this.active = !1;
this.elapsed = this.sys.duration;
this.emitCounter = 0;
};
d.prototype.reset = function() {
this.active = !0;
this.elapsed = 0;
this.emitCounter = 0;
this.finished = !1;
for (var t = this.particles, e = 0; e < t.length; ++e) _.put(t[e]);
t.length = 0;
};
d.prototype.emitParticle = function(t) {
var e = this.sys, i = s.clampf, n = _.get();
this.particles.push(n);
n.timeToLive = e.life + e.lifeVar * (Math.random() - .5) * 2;
var r = n.timeToLive = Math.max(0, n.timeToLive);
n.pos.x = e.sourcePos.x + e.posVar.x * (Math.random() - .5) * 2;
n.pos.y = e.sourcePos.y + e.posVar.y * (Math.random() - .5) * 2;
var a, o, c, h, l = e._startColor, u = e._startColorVar, f = e._endColor, d = e._endColorVar;
n.color.r = a = i(l.r + u.r * (Math.random() - .5) * 2, 0, 255);
n.color.g = o = i(l.g + u.g * (Math.random() - .5) * 2, 0, 255);
n.color.b = c = i(l.b + u.b * (Math.random() - .5) * 2, 0, 255);
n.color.a = h = i(l.a + u.a * (Math.random() - .5) * 2, 0, 255);
n.deltaColor.r = (i(f.r + d.r * (Math.random() - .5) * 2, 0, 255) - a) / r;
n.deltaColor.g = (i(f.g + d.g * (Math.random() - .5) * 2, 0, 255) - o) / r;
n.deltaColor.b = (i(f.b + d.b * (Math.random() - .5) * 2, 0, 255) - c) / r;
n.deltaColor.a = (i(f.a + d.a * (Math.random() - .5) * 2, 0, 255) - h) / r;
var p = e.startSize + e.startSizeVar * (Math.random() - .5) * 2;
p = Math.max(0, p);
n.size = p;
if (e.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE) n.deltaSize = 0; else {
var m = e.endSize + e.endSizeVar * (Math.random() - .5) * 2;
m = Math.max(0, m);
n.deltaSize = (m - p) / r;
}
var g = e.startSpin + e.startSpinVar * (Math.random() - .5) * 2, v = e.endSpin + e.endSpinVar * (Math.random() - .5) * 2;
n.rotation = g;
n.deltaRotation = (v - g) / r;
n.startPos.x = t.x;
n.startPos.y = t.y;
var y = s.degreesToRadians(e.angle + e.angleVar * (Math.random() - .5) * 2);
if (e.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
var T = e.speed + e.speedVar * (Math.random() - .5) * 2;
n.dir.x = Math.cos(y);
n.dir.y = Math.sin(y);
n.dir.mulSelf(T);
n.radialAccel = e.radialAccel + e.radialAccelVar * (Math.random() - .5) * 2;
n.tangentialAccel = e.tangentialAccel + e.tangentialAccelVar * (Math.random() - .5) * 2;
e.rotationIsDir && (n.rotation = -s.radiansToDegrees(Math.atan2(n.dir.y, n.dir.x)));
} else {
var x = e.startRadius + e.startRadiusVar * (Math.random() - .5) * 2, E = e.endRadius + e.endRadiusVar * (Math.random() - .5) * 2;
n.radius = x;
n.deltaRadius = e.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (E - x) / r;
n.angle = y;
n.degreesPerSecond = s.degreesToRadians(e.rotatePerS + e.rotatePerSVar * (Math.random() - .5) * 2);
}
};
d.prototype.updateUVs = function(t) {
var e = this.particles.length;
if (this.sys._buffer && this.sys._renderSpriteFrame) {
for (var i = 4 * this.sys._vertexFormat._bytes / 4, n = this.sys._buffer._vData, r = this.sys._renderSpriteFrame.uv, s = t ? 0 : this._uvFilled; s < e; s++) {
var a = s * i;
n[a + 2] = r[0];
n[a + 3] = r[1];
n[a + 7] = r[2];
n[a + 8] = r[3];
n[a + 12] = r[4];
n[a + 13] = r[5];
n[a + 17] = r[6];
n[a + 18] = r[7];
}
this._uvFilled = e;
}
};
d.prototype.updateParticleBuffer = function(t, e, i, n) {
var r = i._vData, a = i._uintVData, o = e.x, c = e.y, h = t.size / 2;
if (t.rotation) {
var l = -h, u = -h, f = h, _ = h, d = -s.degreesToRadians(t.rotation), p = Math.cos(d), m = Math.sin(d);
r[n] = l * p - u * m + o;
r[n + 1] = l * m + u * p + c;
r[n + 5] = f * p - u * m + o;
r[n + 6] = f * m + u * p + c;
r[n + 10] = l * p - _ * m + o;
r[n + 11] = l * m + _ * p + c;
r[n + 15] = f * p - _ * m + o;
r[n + 16] = f * m + _ * p + c;
} else {
r[n] = o - h;
r[n + 1] = c - h;
r[n + 5] = o + h;
r[n + 6] = c - h;
r[n + 10] = o - h;
r[n + 11] = c + h;
r[n + 15] = o + h;
r[n + 16] = c + h;
}
a[n + 4] = t.color._val;
a[n + 9] = t.color._val;
a[n + 14] = t.color._val;
a[n + 19] = t.color._val;
};
d.prototype.step = function(t) {
var e = this.sys, i = e.node, r = this.particles, s = 4 * e._vertexFormat._bytes / 4;
i._updateWorldMatrix();
n.fromMat4(o, i._worldMatrix);
if (e.positionType === cc.ParticleSystem.PositionType.FREE) n.transformVec2(c, a, o); else if (e.positionType === cc.ParticleSystem.PositionType.RELATIVE) {
c.x = i._position.x;
c.y = i._position.y;
}
n.invert(o, o);
var f = o;
if (this.active && e.emissionRate) {
var d = 1 / e.emissionRate;
r.length < e.totalParticles && (this.emitCounter += t);
for (;r.length < e.totalParticles && this.emitCounter > d; ) {
this.emitParticle(c);
this.emitCounter -= d;
}
this.elapsed += t;
-1 !== e.duration && e.duration < this.elapsed && e.stopSystem();
}
var p = e._buffer, m = r.length;
p.reset();
p.request(4 * m, 6 * m);
m > this._uvFilled && this.updateUVs();
for (var g = 0; g < r.length; ) {
h.x = h.y = l.x = l.y = u.x = u.y = 0;
var v = r[g];
v.timeToLive -= t;
if (v.timeToLive > 0) {
if (e.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
var y = u, T = h, x = l;
if (v.pos.x || v.pos.y) {
T.set(v.pos);
T.normalizeSelf();
}
x.set(T);
T.mulSelf(v.radialAccel);
var E = x.x;
x.x = -x.y;
x.y = E;
x.mulSelf(v.tangentialAccel);
y.set(T);
y.addSelf(x);
y.addSelf(e.gravity);
y.mulSelf(t);
v.dir.addSelf(y);
y.set(v.dir);
y.mulSelf(t);
v.pos.addSelf(y);
} else {
v.angle += v.degreesPerSecond * t;
v.radius += v.deltaRadius * t;
v.pos.x = -Math.cos(v.angle) * v.radius;
v.pos.y = -Math.sin(v.angle) * v.radius;
}
v.color.r += v.deltaColor.r * t;
v.color.g += v.deltaColor.g * t;
v.color.b += v.deltaColor.b * t;
v.color.a += v.deltaColor.a * t;
v.size += v.deltaSize * t;
v.size < 0 && (v.size = 0);
v.rotation += v.deltaRotation * t;
var C = h;
if (e.positionType === cc.ParticleSystem.PositionType.FREE || e.positionType === cc.ParticleSystem.PositionType.RELATIVE) {
var A = l, b = u;
n.transformVec2(A, c, f);
n.transformVec2(b, v.startPos, f);
A.subSelf(b);
C.set(v.pos);
C.subSelf(A);
} else C.set(v.pos);
var S = s * g;
this.updateParticleBuffer(v, C, p, S);
++g;
} else {
var w = r[g];
g !== r.length - 1 && (r[g] = r[r.length - 1]);
_.put(w);
r.length--;
}
}
if (r.length > 0) {
p.uploadData();
e._ia._count = 6 * r.length;
} else if (!this.active) {
this.finished = !0;
e._finishedSimulation();
}
};
e.exports = d;
}), {
"../core/platform/js": 154,
"../core/utils/affine-transform": 208,
"../core/utils/misc": 216
} ],
242: [ (function(t, e, i) {
var n = t("./CCParticleSystem"), r = t("../core/renderer/"), s = t("../core/renderer/render-engine"), a = t("../core/renderer/webgl/vertex-format").vfmtPosUvColor, o = t("../core/renderer/webgl/quad-buffer"), c = {
useModel: !0,
createIA: function(t) {
r.device;
t._vertexFormat = a;
t._buffer = new o(r._handle, a);
t._ia = new s.InputAssembler();
t._ia._vertexBuffer = t._buffer._vb;
t._ia._indexBuffer = t._buffer._ib;
t._ia._start = 0;
t._ia._count = 0;
},
updateRenderData: function(t) {
t._renderData || (t._renderData = new s.IARenderData());
t._renderData.ia = t._ia;
t._renderData.material = t._material;
},
renderIA: function(t, e) {
e._flushIA(t._renderData);
}
};
n._assembler = c;
e.exports = c;
}), {
"../core/renderer/": 175,
"../core/renderer/render-engine": 176,
"../core/renderer/webgl/quad-buffer": 203,
"../core/renderer/webgl/vertex-format": 206,
"./CCParticleSystem": 238
} ],
243: [ (function(t, e, i) {
"use strict";
var n = t("../compression/ZipUtils"), r = t("../compression/zlib.min"), s = t("../core/platform/js");
t("../core/platform/CCSAXParser");
function a(t) {
if (t.length % 4 != 0) return null;
for (var e = t.length / 4, i = window.Uint32Array ? new Uint32Array(e) : [], n = 0; n < e; n++) {
var r = 4 * n;
i[n] = t[r] + 256 * t[r + 1] + 65536 * t[r + 2] + t[r + 3] * (1 << 24);
}
return i;
}
cc.TMXLayerInfo = function() {
this.properties = {};
this.name = "";
this._layerSize = null;
this._tiles = [];
this.visible = !0;
this._opacity = 0;
this.ownTiles = !0;
this._minGID = 1e5;
this._maxGID = 0;
this.offset = cc.v2(0, 0);
};
cc.TMXLayerInfo.prototype = {
constructor: cc.TMXLayerInfo,
getProperties: function() {
return this.properties;
},
setProperties: function(t) {
this.properties = t;
}
};
cc.TMXObjectGroupInfo = function() {
this.properties = {};
this.name = "";
this._objects = [];
this.visible = !0;
this._opacity = 0;
this._color = new cc.Color(255, 255, 255, 255);
this.offset = cc.v2(0, 0);
this._draworder = "topdown";
};
cc.TMXObjectGroupInfo.prototype = {
constructor: cc.TMXObjectGroupInfo,
getProperties: function() {
return this.properties;
},
setProperties: function(t) {
this.properties = t;
}
};
cc.TMXTilesetInfo = function() {
this.name = "";
this.firstGid = 0;
this.spacing = 0;
this.margin = 0;
this.sourceImage = null;
this.imageSize = cc.size(0, 0);
this.tileOffset = cc.v2(0, 0);
this._tileSize = cc.size(0, 0);
};
cc.TMXTilesetInfo.prototype = {
constructor: cc.TMXTilesetInfo,
rectForGID: function(t, e) {
var i = e || cc.rect(0, 0, 0, 0);
i.width = this._tileSize.width;
i.height = this._tileSize.height;
t &= cc.TiledMap.TileFlag.FLIPPED_MASK;
t -= parseInt(this.firstGid, 10);
var n = parseInt((this.imageSize.width - 2 * this.margin + this.spacing) / (this._tileSize.width + this.spacing), 10);
i.x = parseInt(t % n * (this._tileSize.width + this.spacing) + this.margin, 10);
i.y = parseInt(parseInt(t / n, 10) * (this._tileSize.height + this.spacing) + this.margin, 10);
return i;
}
};
function o(t, e) {
for (var i = [], n = t.getElementsByTagName("properties"), r = 0; r < n.length; ++r) for (var s = n[r].getElementsByTagName("property"), a = 0; a < s.length; ++a) i.push(s[a]);
e = e || {};
for (var o = 0; o < i.length; o++) {
var c = i[o], h = c.getAttribute("name"), l = c.getAttribute("type") || "string", u = c.getAttribute("value");
if ("int" === l) u = parseInt(u); else if ("float" === l) u = parseFloat(u); else if ("bool" === l) u = "true" === u; else if ("color" === l) {
u = 0 === u.indexOf("#") ? u.substring(1) : u;
var f = parseInt(u.substr(0, 2), 16) || 255, _ = parseInt(u.substr(2, 2), 16) || 0, d = parseInt(u.substr(4, 2), 16) || 0, p = parseInt(u.substr(6, 2), 16) || 0;
u = cc.color(_, d, p, f);
}
e[h] = u;
}
return e;
}
cc.TMXMapInfo = function(t, e, i) {
this.properties = [];
this.orientation = null;
this.parentElement = null;
this.parentGID = null;
this.layerAttrs = 0;
this.storingCharacters = !1;
this.currentString = null;
this._parser = new cc.SAXParser();
this._objectGroups = [];
this._allChildren = [];
this._mapSize = cc.size(0, 0);
this._tileSize = cc.size(0, 0);
this._layers = [];
this._tilesets = [];
this._tileProperties = {};
this._tsxMap = null;
this._textures = null;
this._staggerAxis = null;
this._staggerIndex = null;
this._hexSideLength = 0;
this.initWithXML(t, e, i);
};
cc.TMXMapInfo.prototype = {
constructor: cc.TMXMapInfo,
getOrientation: function() {
return this.orientation;
},
setOrientation: function(t) {
this.orientation = t;
},
getStaggerAxis: function() {
return this._staggerAxis;
},
setStaggerAxis: function(t) {
this._staggerAxis = t;
},
getStaggerIndex: function() {
return this._staggerIndex;
},
setStaggerIndex: function(t) {
this._staggerIndex = t;
},
getHexSideLength: function() {
return this._hexSideLength;
},
setHexSideLength: function(t) {
this._hexSideLength = t;
},
getMapSize: function() {
return cc.size(this._mapSize.width, this._mapSize.height);
},
setMapSize: function(t) {
this._mapSize.width = t.width;
this._mapSize.height = t.height;
},
_getMapWidth: function() {
return this._mapSize.width;
},
_setMapWidth: function(t) {
this._mapSize.width = t;
},
_getMapHeight: function() {
return this._mapSize.height;
},
_setMapHeight: function(t) {
this._mapSize.height = t;
},
getTileSize: function() {
return cc.size(this._tileSize.width, this._tileSize.height);
},
setTileSize: function(t) {
this._tileSize.width = t.width;
this._tileSize.height = t.height;
},
_getTileWidth: function() {
return this._tileSize.width;
},
_setTileWidth: function(t) {
this._tileSize.width = t;
},
_getTileHeight: function() {
return this._tileSize.height;
},
_setTileHeight: function(t) {
this._tileSize.height = t;
},
getLayers: function() {
return this._layers;
},
setLayers: function(t) {
this._allChildren.push(t);
this._layers.push(t);
},
getTilesets: function() {
return this._tilesets;
},
setTilesets: function(t) {
this._tilesets.push(t);
},
getObjectGroups: function() {
return this._objectGroups;
},
setObjectGroups: function(t) {
this._allChildren.push(t);
this._objectGroups.push(t);
},
getAllChildren: function() {
return this._allChildren;
},
getParentElement: function() {
return this.parentElement;
},
setParentElement: function(t) {
this.parentElement = t;
},
getParentGID: function() {
return this.parentGID;
},
setParentGID: function(t) {
this.parentGID = t;
},
getLayerAttribs: function() {
return this.layerAttrs;
},
setLayerAttribs: function(t) {
this.layerAttrs = t;
},
getStoringCharacters: function() {
return this.storingCharacters;
},
setStoringCharacters: function(t) {
this.storingCharacters = t;
},
getProperties: function() {
return this.properties;
},
setProperties: function(t) {
this.properties = t;
},
initWithXML: function(t, e, i) {
this._tilesets.length = 0;
this._layers.length = 0;
this._tsxMap = e;
this._textures = i;
this._objectGroups.length = 0;
this._allChildren.length = 0;
this.properties.length = 0;
this._tileProperties.length = 0;
this.currentString = "";
this.storingCharacters = !1;
this.layerAttrs = cc.TMXLayerInfo.ATTRIB_NONE;
this.parentElement = cc.TiledMap.NONE;
return this.parseXMLString(t);
},
parseXMLString: function(t, e) {
var i = void 0, n = this._parser._parseXML(t).documentElement, r = n.getAttribute("version"), s = n.getAttribute("orientation"), a = n.getAttribute("staggeraxis"), c = n.getAttribute("staggerindex"), h = n.getAttribute("hexsidelength");
if ("map" === n.nodeName) {
"1.0" !== r && null !== r && cc.logID(7216, r);
"orthogonal" === s ? this.orientation = cc.TiledMap.Orientation.ORTHO : "isometric" === s ? this.orientation = cc.TiledMap.Orientation.ISO : "hexagonal" === s ? this.orientation = cc.TiledMap.Orientation.HEX : null !== s && cc.logID(7217, s);
"x" === a ? this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_X) : "y" === a && this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_Y);
"odd" === c ? this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD) : "even" === c && this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN);
h && this.setHexSideLength(parseFloat(h));
var l = cc.size(0, 0);
l.width = parseFloat(n.getAttribute("width"));
l.height = parseFloat(n.getAttribute("height"));
this.setMapSize(l);
(l = cc.size(0, 0)).width = parseFloat(n.getAttribute("tilewidth"));
l.height = parseFloat(n.getAttribute("tileheight"));
this.setTileSize(l);
this.properties = o(n);
}
var u = n.getElementsByTagName("tileset");
"map" !== n.nodeName && (u = []).push(n);
for (i = 0; i < u.length; i++) {
var f = u[i], _ = f.getAttribute("source");
if (_) {
var d = parseInt(f.getAttribute("firstgid")), p = this._tsxMap[_];
p && this.parseXMLString(p, d);
} else {
var m = new cc.TMXTilesetInfo();
m.name = f.getAttribute("name") || "";
m.firstGid = e || (parseInt(f.getAttribute("firstgid")) || 0);
m.spacing = parseInt(f.getAttribute("spacing")) || 0;
m.margin = parseInt(f.getAttribute("margin")) || 0;
var g = cc.size(0, 0);
g.width = parseFloat(f.getAttribute("tilewidth"));
g.height = parseFloat(f.getAttribute("tileheight"));
m._tileSize = g;
var v = f.getElementsByTagName("image")[0].getAttribute("source");
v.replace(/\\/g, "/");
m.sourceImage = this._textures[v];
m.sourceImage || cc.errorID(7221, v);
this.setTilesets(m);
var y = f.getElementsByTagName("tileoffset")[0];
if (y) {
var T = parseFloat(y.getAttribute("x")), x = parseFloat(y.getAttribute("y"));
m.tileOffset = cc.v2(T, x);
}
var E = f.getElementsByTagName("tile");
if (E) for (var C = 0; C < E.length; C++) {
var A = E[C];
this.parentGID = parseInt(m.firstGid) + parseInt(A.getAttribute("id") || 0);
this._tileProperties[this.parentGID] = o(A);
}
}
}
var b = n.childNodes;
for (i = 0; i < b.length; i++) {
var S = b[i];
if (!this._shouldIgnoreNode(S)) {
if ("layer" === S.nodeName) {
var w = this._parseLayer(S);
this.setLayers(w);
}
if ("objectgroup" === S.nodeName) {
var D = this._parseObjectGroup(S);
this.setObjectGroups(D);
}
}
}
return n;
},
_shouldIgnoreNode: function(t) {
return 3 === t.nodeType || 8 === t.nodeType || 4 === t.nodeType;
},
_parseLayer: function(t) {
var e = t.getElementsByTagName("data")[0], i = new cc.TMXLayerInfo();
i.name = t.getAttribute("name");
var s = cc.size(0, 0);
s.width = parseFloat(t.getAttribute("width"));
s.height = parseFloat(t.getAttribute("height"));
i._layerSize = s;
var c = t.getAttribute("visible");
i.visible = !("0" === c);
var h = t.getAttribute("opacity") || 1;
i._opacity = h ? parseInt(255 * parseFloat(h)) : 255;
i.offset = cc.v2(parseFloat(t.getAttribute("x")) || 0, parseFloat(t.getAttribute("y")) || 0);
for (var l = "", u = 0; u < e.childNodes.length; u++) l += e.childNodes[u].nodeValue;
l = l.trim();
var f = e.getAttribute("compression"), _ = e.getAttribute("encoding");
if (f && "gzip" !== f && "zlib" !== f) {
cc.logID(7218);
return null;
}
var d = void 0;
switch (f) {
case "gzip":
d = n.unzipBase64AsArray(l, 4);
break;

case "zlib":
d = a(new r.Inflate(n.Base64.decodeAsArray(l, 1)).decompress());
break;

case null:
case "":
if ("base64" === _) d = n.Base64.decodeAsArray(l, 4); else if ("csv" === _) {
d = [];
for (var p = l.split(","), m = 0; m < p.length; m++) d.push(parseInt(p[m]));
} else {
var g = e.getElementsByTagName("tile");
d = [];
for (var v = 0; v < g.length; v++) d.push(parseInt(g[v].getAttribute("gid")));
}
break;

default:
this.layerAttrs === cc.TMXLayerInfo.ATTRIB_NONE && cc.logID(7219);
}
d && (i._tiles = new Uint32Array(d));
i.properties = o(t);
return i;
},
_parseObjectGroup: function(t) {
var e = new cc.TMXObjectGroupInfo();
e.name = t.getAttribute("name") || "";
e.offset = cc.v2(parseFloat(t.getAttribute("offsetx")), parseFloat(t.getAttribute("offsety")));
var i = t.getAttribute("opacity") || 1;
e._opacity = i ? parseInt(255 * parseFloat(i)) : 255;
var n = t.getAttribute("visible");
n && 0 === parseInt(n) && (e.visible = !1);
var r = t.getAttribute("color");
r && e._color.fromHEX(r);
var s = t.getAttribute("draworder");
s && (e._draworder = s);
e.setProperties(o(t));
var a = t.getElementsByTagName("object");
if (a) for (var c = 0; c < a.length; c++) {
var h = a[c], l = {};
l.id = h.getAttribute("id") || 0;
l.name = h.getAttribute("name") || "";
l.width = parseFloat(h.getAttribute("width")) || 0;
l.height = parseFloat(h.getAttribute("height")) || 0;
l.x = parseFloat(h.getAttribute("x")) || 0;
l.y = parseFloat(h.getAttribute("y")) || 0;
l.rotation = parseFloat(h.getAttribute("rotation")) || 0;
o(h, l);
var u = h.getAttribute("visible");
l.visible = !(u && 0 === parseInt(u));
var f = h.getAttribute("gid");
if (f) {
l.gid = parseInt(f);
l.type = cc.TiledMap.TMXObjectType.IMAGE;
}
var _ = h.getElementsByTagName("ellipse");
_ && _.length > 0 && (l.type = cc.TiledMap.TMXObjectType.ELLIPSE);
var d = h.getElementsByTagName("polygon");
if (d && d.length > 0) {
l.type = cc.TiledMap.TMXObjectType.POLYGON;
var p = d[0].getAttribute("points");
p && (l.points = this._parsePointsString(p));
}
var m = h.getElementsByTagName("polyline");
if (m && m.length > 0) {
l.type = cc.TiledMap.TMXObjectType.POLYLINE;
var g = m[0].getAttribute("points");
g && (l.polylinePoints = this._parsePointsString(g));
}
l.type || (l.type = cc.TiledMap.TMXObjectType.RECT);
e._objects.push(l);
}
return e;
},
_parsePointsString: function(t) {
if (!t) return null;
for (var e = [], i = t.split(" "), n = 0; n < i.length; n++) {
var r = i[n].split(",");
e.push({
x: parseFloat(r[0]),
y: parseFloat(r[1])
});
}
return e;
},
getTileProperties: function() {
return this._tileProperties;
},
setTileProperties: function(t) {
this._tileProperties.push(t);
},
getCurrentString: function() {
return this.currentString;
},
setCurrentString: function(t) {
this.currentString = t;
}
};
var c = cc.TMXMapInfo.prototype;
s.getset(c, "mapWidth", c._getMapWidth, c._setMapWidth);
s.getset(c, "mapHeight", c._getMapHeight, c._setMapHeight);
s.getset(c, "tileWidth", c._getTileWidth, c._setTileWidth);
s.getset(c, "tileHeight", c._getTileHeight, c._setTileHeight);
cc.TMXLayerInfo.ATTRIB_NONE = 1;
cc.TMXLayerInfo.ATTRIB_BASE64 = 2;
cc.TMXLayerInfo.ATTRIB_GZIP = 4;
cc.TMXLayerInfo.ATTRIB_ZLIB = 8;
}), {
"../compression/ZipUtils": 22,
"../compression/zlib.min": 25,
"../core/platform/CCSAXParser": 141,
"../core/platform/js": 154
} ],
244: [ (function(i, n, r) {
var s = i("../core/components/CCRenderComponent"), a = i("../core/renderer/render-engine").SpriteMaterial, o = cc.Class({
name: "cc.TiledLayer",
extends: s,
ctor: function() {
this._tiles = [];
this._texGrids = [];
this._textures = [];
this._spriteTiles = {};
this._tiledTiles = [];
this._layerName = "";
this._layerOrientation = null;
},
getLayerName: function() {
return this._layerName;
},
setLayerName: function(t) {
this._layerName = t;
},
getProperty: function(t) {
return this._properties[t];
},
getPositionAt: function(t, e) {
var i = void 0;
if (void 0 !== e) {
i = Math.floor(t);
e = Math.floor(e);
} else {
i = Math.floor(t.x);
e = Math.floor(t.y);
}
var n = void 0;
switch (this._layerOrientation) {
case cc.TiledMap.Orientation.ORTHO:
n = this._positionForOrthoAt(i, e);
break;

case cc.TiledMap.Orientation.ISO:
n = this._positionForIsoAt(i, e);
break;

case cc.TiledMap.Orientation.HEX:
n = this._positionForHexAt(i, e);
}
return n;
},
_isInvalidPosition: function(i, n) {
if (i && "object" === ("object" === (e = typeof i) ? t(i) : e)) {
var r = i;
n = r.y;
i = r.x;
}
return i >= this._layerSize.width || n >= this._layerSize.height || i < 0 || n < 0;
},
_positionForIsoAt: function(t, e) {
return cc.v2(this._mapTileSize.width / 2 * (this._layerSize.width + t - e - 1), this._mapTileSize.height / 2 * (2 * this._layerSize.height - t - e - 2));
},
_positionForOrthoAt: function(t, e) {
return cc.v2(t * this._mapTileSize.width, (this._layerSize.height - e - 1) * this._mapTileSize.height);
},
_positionForHexAt: function(t, e) {
var i = this._mapTileSize.width, n = this._mapTileSize.height, r = this._layerSize.height, s = this._tileset.tileOffset, a = this.node.width / 2, o = this.node.height / 2, c = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1, h = 0, l = 0;
switch (this._staggerAxis) {
case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
var u = 0, f = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 0 : i / 2;
e % 2 == 1 && (u = i / 2 * c);
h = t * i + u + f + s.x - a;
l = (r - e - 1) * (n - (n - this._hexSideLength) / 2) - s.y - o;
break;

case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
var _ = 0, d = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? n / 2 : 0;
t % 2 == 1 && (_ = n / 2 * -c);
h = t * (i - (i - this._hexSideLength) / 2) + s.x - a;
l = (r - e - 1) * n + _ + d - s.y - o;
}
return cc.v2(h, l);
},
setTileGIDAt: function(t, e, i, n) {
if (void 0 === e) throw new Error("cc.TiledLayer.setTileGIDAt(): pos should be non-null");
var r = void 0;
if (void 0 === n && e instanceof cc.Vec2) {
r = e;
n = i;
} else r = cc.v2(e, i);
r.x = Math.floor(r.x);
r.y = Math.floor(r.y);
if (this._isInvalidPosition(r)) throw new Error("cc.TiledLayer.setTileGIDAt(): invalid position");
if (this._tiles) if (0 !== t && t < this._tileset.firstGid) cc.logID(7239, t); else {
n = n || 0;
var s = this.getTileFlagsAt(r);
if (this.getTileGIDAt(r) !== t || s !== n) {
var a = (t | n) >>> 0;
this._updateTileForGID(a, r);
}
} else cc.logID(7238);
},
_updateTileForGID: function(t, e) {
if (0 === t || this._texGrids[t]) {
var i = 0 | e.x + e.y * this._layerSize.width;
i < this._tiles.length && (this._tiles[i] = t);
}
},
getTileGIDAt: function(t, e) {
if (void 0 === t) throw new Error("cc.TiledLayer.getTileGIDAt(): pos should be non-null");
var i = t;
if (void 0 === e) {
i = t.x;
e = t.y;
}
if (this._isInvalidPosition(i, e)) throw new Error("cc.TiledLayer.getTileGIDAt(): invalid position");
if (!this._tiles) {
cc.logID(7237);
return null;
}
var n = Math.floor(i) + Math.floor(e) * this._layerSize.width;
return (this._tiles[n] & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
},
getTileFlagsAt: function(t, e) {
if (!t) throw new Error("TiledLayer.getTileFlagsAt: pos should be non-null");
void 0 !== e && (t = cc.v2(t, e));
if (this._isInvalidPosition(t)) throw new Error("TiledLayer.getTileFlagsAt: invalid position");
if (!this._tiles) {
cc.logID(7240);
return null;
}
var i = Math.floor(t.x) + Math.floor(t.y) * this._layerSize.width;
return (this._tiles[i] & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
},
getTiledTileAt: function(t, e, i) {
if (this._isInvalidPosition(t, e)) throw new Error("TiledLayer.getTiledTileAt: invalid position");
if (!this._tiles) {
cc.logID(7236);
return null;
}
var n = Math.floor(t) + Math.floor(e) * this._layerSize.width, r = this._tiledTiles[n];
if (!r && i) {
var s = new cc.Node();
(r = s.addComponent(cc.TiledTile))._x = t;
r._y = e;
r._layer = this;
r._updateInfo();
s.parent = this.node;
return r;
}
return r;
},
setTiledTileAt: function(t, e, i) {
if (this._isInvalidPosition(t, e)) throw new Error("TiledLayer.setTiledTileAt: invalid position");
if (!this._tiles) {
cc.logID(7236);
return null;
}
var n = Math.floor(t) + Math.floor(e) * this._layerSize.width;
return this._tiledTiles[n] = i;
},
getTexture: function() {
return this._texture;
},
setTexture: function(t) {
this._texture = t;
this._activateMaterial();
},
getLayerSize: function() {
return this._layerSize;
},
getMapTileSize: function() {
return this._mapTileSize;
},
getTileSet: function() {
return this._tileset;
},
setTileSet: function(t) {
this._tileset = t;
},
getLayerOrientation: function() {
return this._layerOrientation;
},
getProperties: function() {
return this._properties;
},
_init: function(t, e, i) {
var n = e._layerSize;
this._layerName = e.name;
this._tiles = e._tiles;
this._properties = e.properties;
this._layerSize = n;
this._minGID = e._minGID;
this._maxGID = e._maxGID;
this._opacity = e._opacity;
this._staggerAxis = i.getStaggerAxis();
this._staggerIndex = i.getStaggerIndex();
this._hexSideLength = i.getHexSideLength();
this._tileset = t;
this._layerOrientation = i.orientation;
this._mapTileSize = i.getTileSize();
var r = i._tilesets;
if (r) {
this._textures.length = r.length;
this._texGrids.length = 0;
for (var s = 0, a = r.length; s < a; ++s) {
var o = r[s], c = o.sourceImage;
this._textures[s] = c;
this._fillTextureGrids(o, s);
t === o && (this._texture = c);
}
}
this._offset = this._calculateLayerOffset(e.offset);
if (this._layerOrientation === cc.TiledMap.Orientation.HEX) {
var h = 0, l = 0;
if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
l = i._tileSize.height * (this._layerSize.height + .5);
h = (i._tileSize.width + this._hexSideLength) * Math.floor(this._layerSize.width / 2) + i._tileSize.width * (this._layerSize.width % 2);
} else {
h = i._tileSize.width * (this._layerSize.width + .5);
l = (i._tileSize.height + this._hexSideLength) * Math.floor(this._layerSize.height / 2) + i._tileSize.height * (this._layerSize.height % 2);
}
this.node.setContentSize(h, l);
} else this.node.setContentSize(this._layerSize.width * this._mapTileSize.width, this._layerSize.height * this._mapTileSize.height);
this._useAutomaticVertexZ = !1;
this._vertexZvalue = 0;
this._activateMaterial();
},
_calculateLayerOffset: function(t) {
var e = cc.v2(0, 0);
switch (this._layerOrientation) {
case cc.TiledMap.Orientation.ORTHO:
e = cc.v2(t.x * this._mapTileSize.width, -t.y * this._mapTileSize.height);
break;

case cc.TiledMap.Orientation.ISO:
e = cc.v2(this._mapTileSize.width / 2 * (t.x - t.y), this._mapTileSize.height / 2 * (-t.x - t.y));
break;

case cc.TiledMap.Orientation.HEX:
if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_Y) {
var i = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN ? this._mapTileSize.width / 2 : 0;
e = cc.v2(t.x * this._mapTileSize.width + i, -t.y * (this._mapTileSize.height - (this._mapTileSize.width - this._hexSideLength) / 2));
} else if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
var n = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? this._mapTileSize.height / 2 : 0;
e = cc.v2(t.x * (this._mapTileSize.width - (this._mapTileSize.width - this._hexSideLength) / 2), -t.y * this._mapTileSize.height + n);
}
}
return e;
},
_fillTextureGrids: function(t, e) {
var i = this._textures[e];
if (i) if (i.loaded) {
if (!t.imageSize.width || !t.imageSize.height) {
t.imageSize.width = i.width;
t.imageSize.height = i.height;
}
for (var n = t._tileSize.width, r = t._tileSize.height, s = i.width, a = i.height, o = t.spacing, c = t.margin, h = Math.floor((s - 2 * c + o) / (n + o)), l = Math.floor((a - 2 * c + o) / (r + o)) * h, u = t.firstGid, f = t.firstGid + l, _ = this._texGrids, d = null, p = !!_[u], m = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? .5 : 0; u < f; ++u) {
p && !_[u] && (p = !1);
if (!p && _[u]) break;
d = {
texId: e,
x: 0,
y: 0,
width: n,
height: r,
t: 0,
l: 0,
r: 0,
b: 0
};
t.rectForGID(u, d);
d.x += m;
d.y += m;
d.width -= 2 * m;
d.height -= 2 * m;
d.t = d.y / a;
d.l = d.x / s;
d.r = (d.x + d.width) / s;
d.b = (d.y + d.height) / a;
_[u] = d;
}
} else i.once("load", (function() {
this._fillTextureGrids(t, e);
}), this);
},
onEnable: function() {
this._super();
this._activateMaterial();
},
_activateMaterial: function() {
var t = this._material;
t || ((t = this._material = new a()).useColor = !1);
if (this._texture) {
t.texture = this._texture;
this.markForUpdateRenderData(!0);
this.markForRender(!0);
} else this.disableRender();
this._updateMaterial(t);
}
});
cc.TiledLayer = n.exports = o;
}), {
"../core/components/CCRenderComponent": 77,
"../core/renderer/render-engine": 176
} ],
245: [ (function(t, e, i) {
t("./CCTMXXMLParser");
t("./CCTiledMapAsset");
t("./CCTiledLayer");
t("./CCTiledTile");
t("./CCTiledObjectGroup");
var n = cc.Enum({
ORTHO: 0,
HEX: 1,
ISO: 2
}), r = cc.Enum({
NONE: 0,
MAP: 1,
LAYER: 2,
OBJECTGROUP: 3,
OBJECT: 4,
TILE: 5
}), s = cc.Enum({
HORIZONTAL: 2147483648,
VERTICAL: 1073741824,
DIAGONAL: 536870912,
FLIPPED_ALL: 3758096384,
FLIPPED_MASK: 536870911
}), a = cc.Enum({
STAGGERAXIS_X: 0,
STAGGERAXIS_Y: 1
}), o = cc.Enum({
STAGGERINDEX_ODD: 0,
STAGGERINDEX_EVEN: 1
}), c = cc.Enum({
RECT: 0,
ELLIPSE: 1,
POLYGON: 2,
POLYLINE: 3,
IMAGE: 4
}), h = cc.Class({
name: "cc.TiledMap",
extends: cc.Component,
editor: !1,
ctor: function() {
this._layers = [];
this._groups = [];
this._properties = [];
this._tileProperties = [];
this._mapSize = cc.size(0, 0);
this._tileSize = cc.size(0, 0);
},
statics: {
Orientation: n,
Property: r,
TileFlag: s,
StaggerAxis: a,
StaggerIndex: o,
TMXObjectType: c
},
properties: {
_tmxFile: {
default: null,
type: cc.TiledMapAsset
},
tmxAsset: {
get: function() {
return this._tmxFile;
},
set: function(t, e) {
if (this._tmxFile !== t) {
this._tmxFile = t;
this._applyFile();
}
},
type: cc.TiledMapAsset
}
},
getMapSize: function() {
return this._mapSize;
},
getTileSize: function() {
return this._tileSize;
},
getMapOrientation: function() {
return this._mapOrientation;
},
getObjectGroups: function() {
return this._groups;
},
getObjectGroup: function(t) {
for (var e = this._groups, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r && r.getGroupName() === t) return r;
}
return null;
},
getProperties: function() {
return this._properties;
},
getLayers: function() {
return this._layers;
},
getLayer: function(t) {
for (var e = this._layers, i = 0, n = e.length; i < n; i++) {
var r = e[i];
if (r && r.getLayerName() === t) return r;
}
return null;
},
getProperty: function(t) {
return this._properties[t.toString()];
},
getPropertiesForGID: function(t) {
return this._tileProperties[t];
},
__preload: function() {
this._tmxFile && this._applyFile();
},
onEnable: function() {
this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
},
onDisable: function() {
this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
},
_applyFile: function() {
var t = this._tmxFile;
if (t) {
for (var e = t.textures, i = t.textureNames, n = {}, r = 0; r < e.length; ++r) n[i[r]] = e[r];
for (var s = t.tsxFileNames, a = t.tsxFiles, o = {}, c = 0; c < s.length; ++c) s[c].length > 0 && (o[s[c]] = a[c].text);
var h = new cc.TMXMapInfo(t.tmxXmlStr, o, n), l = h.getTilesets();
l && 0 !== l.length || cc.logID(7241);
this._buildWithMapInfo(h);
} else this._relseasMapInfo();
},
_relseasMapInfo: function() {
for (var t = this._layers, e = 0, i = t.length; e < i; e++) t[e].node.removeFromParent();
t.length = 0;
for (var n = this._groups, r = 0, s = n.length; r < s; r++) n[r].node.removeFromParent();
n.length = 0;
},
_syncAnchorPoint: function() {
for (var t = this.node.getAnchorPoint(), e = 0, i = this._layers.length; e < i; e++) this._layers[e].node.setAnchorPoint(t);
},
_buildWithMapInfo: function(t) {
this._mapSize = t.getMapSize();
this._tileSize = t.getTileSize();
this._mapOrientation = t.orientation;
this._properties = t.properties;
this._tileProperties = t.getTileProperties();
this._relseasMapInfo();
var e = this._layers, i = this._groups, n = this.node, r = t.getAllChildren();
if (r && r.length > 0) for (var s = 0, a = r.length; s < a; s++) {
var o = r[s], c = o.name, h = this.node.getChildByName(c);
if (!h) {
(h = new cc.Node()).name = c;
n.addChild(h);
}
if (o instanceof cc.TMXLayerInfo && o.visible) {
var l = h.getComponent(cc.TiledLayer);
l || (l = h.addComponent(cc.TiledLayer));
var u = this._tilesetForLayer(o, t);
l._init(u, o, t);
o.ownTiles = !1;
this.node.width = Math.max(this.node.width, h.width);
this.node.height = Math.max(this.node.height, h.height);
e.push(l);
} else if (o instanceof cc.TMXObjectGroupInfo) {
var f = h.getComponent(cc.TiledObjectGroup);
f || (f = h.addComponent(cc.TiledObjectGroup));
f._init(o, t);
i.push(f);
}
}
this._syncAnchorPoint();
},
_tilesetForLayer: function(t, e) {
var i = t._layerSize, n = e.getTilesets();
if (n) for (var r = n.length - 1; r >= 0; r--) {
var s = n[r];
if (s) for (var a = 0; a < i.height; a++) for (var o = 0; o < i.width; o++) {
var c = o + i.width * a, h = t._tiles[c];
if (0 !== h && (h & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0 >= s.firstGid) return s;
}
}
cc.logID(7215, t.name);
return null;
}
});
cc.TiledMap = e.exports = h;
cc.js.obsolete(cc.TiledMap.prototype, "cc.TiledMap.tmxFile", "tmxAsset", !0);
cc.js.get(cc.TiledMap.prototype, "mapLoaded", (function() {
cc.errorID(7203);
return [];
}), !1);
}), {
"./CCTMXXMLParser": 243,
"./CCTiledLayer": 244,
"./CCTiledMapAsset": 246,
"./CCTiledObjectGroup": 247,
"./CCTiledTile": 248
} ],
246: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TiledMapAsset",
extends: cc.Asset,
properties: {
tmxXmlStr: "",
textures: {
default: [],
type: [ cc.Texture2D ]
},
textureNames: [ cc.String ],
tsxFiles: [ cc.TextAsset ],
tsxFileNames: [ cc.String ]
},
statics: {
preventDeferredLoadDependents: !0
},
createNode: !1
});
cc.TiledMapAsset = n;
e.exports = n;
}), {} ],
247: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TiledObjectGroup",
extends: cc.Component,
getPositionOffset: function() {
return this._positionOffset;
},
getProperties: function() {
this._properties;
},
getGroupName: function() {
return this._groupName;
},
getProperty: function(t) {
return this._properties[t.toString()];
},
getObject: function(t) {
for (var e = 0, i = this._objects.length; e < i; e++) {
var n = this._objects[e];
if (n && n.name === t) return n;
}
return null;
},
getObjects: function() {
return this._objects;
},
_init: function(t, e) {
this._groupName = t.name;
this._positionOffset = t.offset;
this._mapInfo = e;
this._properties = t.getProperties();
var i = e._mapSize, n = e._tileSize, r = 0, s = 0;
if (e.orientation === cc.TiledMap.Orientation.HEX) if (e.getStaggerAxis() === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
s = n.height * (i.height + .5);
r = (n.width + e.getHexSideLength()) * Math.floor(i.width / 2) + n.width * (i.width % 2);
} else {
r = n.width * (i.width + .5);
s = (n.height + e.getHexSideLength()) * Math.floor(i.height / 2) + n.height * (i.height % 2);
} else {
r = i.width * n.width;
s = i.height * n.height;
}
this.node.setContentSize(r, s);
for (var a = t._objects, o = 0, c = a.length; o < c; o++) {
var h = a[o];
h.offset = cc.v2(h.x, h.y);
if (cc.TiledMap.Orientation.ISO !== this._mapOrientation) h.y = s - h.y; else {
var l = h.offset.x / n.width * 2, u = h.offset.y / n.height;
h.x = n.width / 2 * (i.width + l - u);
h.y = n.height / 2 * (2 * i.height - l - u);
}
}
this._objects = a;
}
});
cc.TiledObjectGroup = e.exports = n;
}), {} ],
248: [ (function(t, e, i) {
var n = cc.Class({
name: "cc.TiledTile",
extends: cc.Component,
editor: !1,
ctor: function() {
this._layer = null;
},
properties: {
_x: 0,
_y: 0,
x: {
get: function() {
return this._x;
},
set: function(t) {
if (t !== this._x) if (this._layer && this._layer._isInvalidPosition(t, this._y)) cc.warn("Invalid x, the valid value is between [%s] ~ [%s]", 0, this._layer._layerSize.width); else {
this._resetTile();
this._x = t;
this._updateInfo();
}
},
type: cc.Integer
},
y: {
get: function() {
return this._y;
},
set: function(t) {
if (t !== this._y) if (this._layer && this._layer._isInvalidPosition(this._x, t)) cc.warn("Invalid y, the valid value is between [%s] ~ [%s]", 0, this._layer._layerSize.height); else {
this._resetTile();
this._y = t;
this._updateInfo();
}
},
type: cc.Integer
},
gid: {
get: function() {
return this._layer ? this._layer.getTileGIDAt(this._x, this._y) : 0;
},
set: function(t) {
this._layer && this._layer.setTileGIDAt(t, this._x, this._y);
},
type: cc.Integer
}
},
onEnable: function() {
var t = this.node.parent;
this._layer = t.getComponent(cc.TiledLayer);
this._resetTile();
this._updateInfo();
},
onDisable: function() {
this._resetTile();
},
_resetTile: function() {
this._layer && this._layer.getTiledTileAt(this._x, this._y) === this && this._layer.setTiledTileAt(this._x, this._y, null);
},
_updateInfo: function() {
if (this._layer) {
var t = this._x, e = this._y;
if (this._layer.getTiledTileAt(t, e)) cc.warn("There is already a TiledTile at [%s, %s]", t, e); else {
this.node.setPosition(this._layer.getPositionAt(t, e));
this._layer.setTiledTileAt(t, e, this);
}
}
}
});
cc.TiledTile = e.exports = n;
}), {} ],
249: [ (function(t, e, i) {
t("./CCTiledMap");
t("./tmx-layer-assembler");
}), {
"./CCTiledMap": 245,
"./tmx-layer-assembler": 250
} ],
250: [ (function(t, e, i) {
var n = t("./CCTiledLayer"), r = t("./CCTiledMap"), s = t("../core/renderer/render-engine"), a = t("../core/renderer/render-flow"), o = r.Orientation, c = r.TileFlag, h = c.FLIPPED_MASK, l = r.StaggerAxis, u = r.StaggerIndex, f = s.math, _ = f.mat4, d = f.vec3, p = _.create(), m = _.create(), g = d.create(), v = {
updateRenderData: function(t) {
var e = t._renderData;
e || (e = t._renderData = t.requestRenderData());
var i = t.node._contentSize, n = t.node._anchorPoint;
e.updateSizeNPivot(i.width, i.height, n.x, n.y);
e.material = t.getMaterial();
this.updateVertices(t);
},
fillBuffers: function(t, e) {
for (var i = t._renderData, n = i._data, r = e._meshBuffer, s = i.vertexCount, o = r.request(s, i.indiceCount), c = o.indiceOffset, h = o.byteOffset >> 2, l = o.vertexOffset, u = r._vData, f = r._iData, _ = r._uintVData, d = 0, p = i.vertexCount; d < p; d++) {
var m = n[d];
u[h++] = m.x;
u[h++] = m.y;
u[h++] = m.u;
u[h++] = m.v;
_[h++] = m.color;
}
for (var g = 0, v = i.indiceCount; g < v; g += 6) {
f[c++] = l;
f[c++] = l + 1;
f[c++] = l + 2;
f[c++] = l + 1;
f[c++] = l + 3;
f[c++] = l + 2;
l += 4;
}
t.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
},
updateVertices: function(t) {
var e = t.node, i = t._renderData, n = i._data, r = e._color._val, s = e._color.a;
i.dataLength = i.vertexCount = i.indiceCount = 0;
var a = t._layerOrientation;
if (t._tiles && t._tileset) {
var f = e._anchorPoint.x * e._contentSize.width, v = e._anchorPoint.y * e._contentSize.height;
_.copy(p, e._worldMatrix);
d.set(g, -f, -v, 0);
_.translate(p, p, g);
var y = p.m00, T = p.m01, x = p.m04, E = p.m05, C = p.m12, A = p.m13, b = t._mapTileSize.width, S = t._mapTileSize.height, w = t._tileset._tileSize.width, D = t._tileset._tileSize.height, I = w - b, R = D - S, M = cc.winSize.width, L = cc.winSize.height, O = t._layerSize.height, P = t._layerSize.width, F = t._texGrids, N = t._tiledTiles, B = t._offset.x, k = t._offset.y, z = 0, U = 0, H = P, V = O, W = y, G = E, j = C += B * y + k * x, X = A += B * T + k * E, Y = w * y, q = D * E, Z = cc.macro.ENABLE_TILEDMAP_CULLING;
if (Z) {
var K = cc.Camera.findCamera(t.node);
if (K) {
K.getWorldToCameraMatrix(m);
_.mul(p, m, p);
W = p.m00;
G = p.m05;
j = B * W + k * p.m04 + p.m12;
X = B * p.m01 + k * G + p.m13;
Y = w * W;
q = D * G;
}
if (a === o.ORTHO) {
_.invert(p, p);
var J = cc.visibleRect, Q = p.m00, $ = p.m01, tt = p.m04, et = p.m05, it = p.m12, nt = p.m13, rt = J.topLeft.x * Q + J.topLeft.y * tt + it, st = J.topLeft.x * $ + J.topLeft.y * et + nt, at = J.bottomLeft.x * Q + J.bottomLeft.y * tt + it, ot = J.bottomLeft.x * $ + J.bottomLeft.y * et + nt, ct = J.topRight.x * Q + J.topRight.y * tt + it, ht = J.topRight.x * $ + J.topRight.y * et + nt, lt = J.bottomRight.x * Q + J.bottomRight.y * tt + it, ut = J.bottomRight.x * $ + J.bottomRight.y * et + nt, ft = Math.min(rt, at, ct, lt), _t = Math.max(rt, at, ct, lt), dt = Math.min(st, ot, ht, ut), pt = Math.max(st, ot, ht, ut);
z = Math.floor(ft / b);
U = O - Math.ceil(pt / S);
H = Math.ceil((_t + I) / b);
V = O - Math.floor((dt - R) / S);
z < 0 && (z = 0);
U < 0 && (U = 0);
H > P && (H = P);
V > O && (V = O);
}
}
var mt = U * P, gt = void 0, vt = void 0, yt = void 0, Tt = void 0, xt = void 0, Et = void 0, Ct = void 0, At = void 0, bt = void 0, St = void 0, wt = void 0, Dt = void 0, It = void 0;
if (a === o.HEX) {
var Rt = t._hexSideLength;
bt = t._staggerAxis;
St = t._tileset.tileOffset;
It = t._staggerIndex === u.STAGGERINDEX_ODD ? 1 : -1;
wt = bt === l.STAGGERAXIS_X ? (b - Rt) / 2 : 0;
Dt = bt === l.STAGGERAXIS_Y ? (S - Rt) / 2 : 0;
}
for (var Mt = 0, Lt = void 0, Ot = void 0, Pt = void 0, Ft = void 0, Nt = void 0, Bt = void 0, kt = void 0, zt = U; zt < V; ++zt) {
for (var Ut = z; Ut < H; ++Ut) {
var Ht = mt + Ut, Vt = !1, Wt = !1, Gt = N[Ht];
if (vt = F[((gt = Gt ? Gt.gid : t._tiles[Ht]) & h) >>> 0]) {
switch (a) {
case o.ORTHO:
Tt = Ut * b;
xt = (O - zt - 1) * S;
break;

case o.ISO:
Tt = b / 2 * (P + Ut - zt - 1);
xt = S / 2 * (2 * O - Ut - zt - 2);
break;

case o.HEX:
Tt = Ut * (b - wt) + (bt === l.STAGGERAXIS_Y && zt % 2 == 1 ? b / 2 * It : 0) + St.x;
xt = (O - zt - 1) * (S - Dt) + (bt === l.STAGGERAXIS_X && Ut % 2 == 1 ? S / 2 * -It : 0) - St.y;
}
if (Gt) {
var jt = Gt.node;
kt = r;
var Xt = jt.opacity * s / 255;
r = jt.color.setA(Xt)._val;
Lt = y;
Ot = T;
Pt = x;
Ft = E;
Nt = C;
Bt = A;
jt._updateLocalMatrix();
_.copy(p, jt._matrix);
d.set(g, -Tt, -xt, 0);
_.translate(p, p, g);
_.multiply(p, e._worldMatrix, p);
y = p.m00;
T = p.m01;
x = p.m04;
E = p.m05;
C = p.m12;
A = p.m13;
}
Et = Tt + w;
yt = xt + D;
if (Z && a === o.ISO) {
if ((Ct = X + xt * G) > L + q) {
Ut += Math.floor(2 * (Ct - L) / q) - 1;
continue;
}
if ((At = j + Et * W) < -Y) {
Ut += Math.floor(2 * -At / Y) - 1;
continue;
}
if (j + Tt * W > M || X + yt * G < 0) {
Ut = H;
continue;
}
}
if (gt > c.DIAGONAL) {
Vt = (gt & c.HORIZONTAL) >>> 0;
Wt = (gt & c.VERTICAL) >>> 0;
}
i.vertexCount += 4;
i.indiceCount += 6;
i.dataLength = i.vertexCount;
n[Mt].x = Tt * y + yt * x + C;
n[Mt].y = Tt * T + yt * E + A;
n[Mt].u = Vt ? vt.r : vt.l;
n[Mt].v = Wt ? vt.b : vt.t;
n[Mt].color = r;
n[++Mt].x = Tt * y + xt * x + C;
n[Mt].y = Tt * T + xt * E + A;
n[Mt].u = Vt ? vt.r : vt.l;
n[Mt].v = Wt ? vt.t : vt.b;
n[Mt].color = r;
n[++Mt].x = Et * y + yt * x + C;
n[Mt].y = Et * T + yt * E + A;
n[Mt].u = Vt ? vt.l : vt.r;
n[Mt].v = Wt ? vt.b : vt.t;
n[Mt].color = r;
n[++Mt].x = Et * y + xt * x + C;
n[Mt].y = Et * T + xt * E + A;
n[Mt].u = Vt ? vt.l : vt.r;
n[Mt].v = Wt ? vt.t : vt.b;
n[Mt].color = r;
Mt++;
if (Gt) {
r = kt;
y = Lt;
T = Ot;
x = Pt;
E = Ft;
C = Nt;
A = Bt;
}
}
}
mt += P;
}
}
}
};
e.exports = n._assembler = v;
}), {
"../core/renderer/render-engine": 176,
"../core/renderer/render-flow": 177,
"./CCTiledLayer": 244,
"./CCTiledMap": 245
} ],
251: [ (function(t, e, i) {
var n = t("./video-player-impl"), r = n.EventType, s = cc.Enum({
REMOTE: 0,
LOCAL: 1
}), a = cc.Class({
name: "cc.VideoPlayer",
extends: cc.Component,
editor: !1,
properties: {
_resourceType: s.REMOTE,
resourceType: {
tooltip: !1,
type: s,
set: function(t) {
this._resourceType = t;
this._updateVideoSource();
},
get: function() {
return this._resourceType;
}
},
_remoteURL: "",
remoteURL: {
tooltip: !1,
type: cc.String,
set: function(t) {
this._remoteURL = t;
this._updateVideoSource();
},
get: function() {
return this._remoteURL;
}
},
_clip: {
default: null,
type: cc.Asset
},
clip: {
tooltip: !1,
get: function() {
return this._clip;
},
set: function(t) {
this._clip = t;
this._updateVideoSource();
},
type: cc.Asset
},
currentTime: {
tooltip: !1,
type: cc.Float,
set: function(t) {
this._impl && this._impl.seekTo(t);
},
get: function() {
return this._impl ? this._impl.currentTime() : -1;
}
},
_volume: 1,
volume: {
get: function() {
return this._volume;
},
set: function(t) {
this._volume = t;
this.isPlaying() && !this._mute && this._syncVolume();
},
range: [ 0, 1 ],
type: cc.Float,
tooltip: !1
},
_mute: !1,
mute: {
get: function() {
return this._mute;
},
set: function(t) {
this._mute = t;
this._syncVolume();
},
tooltip: !1
},
keepAspectRatio: {
tooltip: !1,
default: !0,
type: cc.Boolean,
notify: function() {
this._impl.setKeepAspectRatioEnabled(this.keepAspectRatio);
}
},
isFullscreen: {
tooltip: !1,
default: !1,
type: cc.Boolean,
notify: function() {
this._impl.setFullScreenEnabled(this.isFullscreen);
}
},
videoPlayerEvent: {
default: [],
type: cc.Component.EventHandler
}
},
statics: {
EventType: r,
ResourceType: s,
Impl: n
},
ctor: function() {
this._impl = new n();
},
_syncVolume: function() {
var t = this._impl;
if (t) {
var e = this._mute ? 0 : this._volume;
t.setVolume(e);
}
},
_updateVideoSource: function() {
var t = "";
this.resourceType === s.REMOTE ? t = this.remoteURL : this._clip && (t = this._clip.nativeUrl || "");
t && cc.loader.md5Pipe && (t = cc.loader.md5Pipe.transformURL(t));
this._impl.setURL(t, this._mute || 0 === this._volume);
},
onLoad: function() {
var t = this._impl;
if (t) {
t.createDomElementIfNeeded(this._mute || 0 === this._volume);
this._updateVideoSource();
t.seekTo(this.currentTime);
t.setKeepAspectRatioEnabled(this.keepAspectRatio);
t.setFullScreenEnabled(this.isFullscreen);
this.pause();
t.setEventListener(r.PLAYING, this.onPlaying.bind(this));
t.setEventListener(r.PAUSED, this.onPasued.bind(this));
t.setEventListener(r.STOPPED, this.onStopped.bind(this));
t.setEventListener(r.COMPLETED, this.onCompleted.bind(this));
t.setEventListener(r.META_LOADED, this.onMetaLoaded.bind(this));
t.setEventListener(r.CLICKED, this.onClicked.bind(this));
t.setEventListener(r.READY_TO_PLAY, this.onReadyToPlay.bind(this));
}
},
onRestore: function() {
this._impl || (this._impl = new n());
},
onEnable: function() {
this._impl && this._impl.enable();
},
onDisable: function() {
this._impl && this._impl.disable();
},
onDestroy: function() {
if (this._impl) {
this._impl.destroy();
this._impl = null;
}
},
update: function(t) {
this._impl && this._impl.updateMatrix(this.node);
},
onReadyToPlay: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.READY_TO_PLAY);
this.node.emit("ready-to-play", this);
},
onMetaLoaded: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.META_LOADED);
this.node.emit("meta-loaded", this);
},
onClicked: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.CLICKED);
this.node.emit("clicked", this);
},
onPlaying: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.PLAYING);
this.node.emit("playing", this);
},
onPasued: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.PAUSED);
this.node.emit("paused", this);
},
onStopped: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.STOPPED);
this.node.emit("stopped", this);
},
onCompleted: function() {
cc.Component.EventHandler.emitEvents(this.videoPlayerEvent, this, r.COMPLETED);
this.node.emit("completed", this);
},
play: function() {
if (this._impl) {
this._syncVolume();
this._impl.play();
}
},
resume: function() {
if (this._impl) {
this._syncVolume();
this._impl.resume();
}
},
pause: function() {
this._impl && this._impl.pause();
},
stop: function() {
this._impl && this._impl.stop();
},
getDuration: function() {
return this._impl ? this._impl.duration() : -1;
},
isPlaying: function() {
return !!this._impl && this._impl.isPlaying();
}
});
cc.VideoPlayer = e.exports = a;
}), {
"./video-player-impl": 252
} ],
252: [ (function(t, e, i) {
var n = t("../core/platform/utils"), r = t("../core/platform/CCSys"), s = {
HAVE_NOTHING: 0,
HAVE_METADATA: 1,
HAVE_CURRENT_DATA: 2,
HAVE_FUTURE_DATA: 3,
HAVE_ENOUGH_DATA: 4
}, a = t("../core/renderer/render-engine").math.mat4.create(), o = cc.Class({
name: "VideoPlayerImpl",
ctor: function() {
this._EventList = {};
this._video = null;
this._url = "";
this._fullScreenEnabled = !1;
this._loadedmeta = !1;
this._loaded = !1;
this._visible = !1;
this._playing = !1;
this._ignorePause = !1;
this._forceUpdate = !0;
this._m00 = 0;
this._m01 = 0;
this._m04 = 0;
this._m05 = 0;
this._m12 = 0;
this._m13 = 0;
this._w = 0;
this._h = 0;
this.__eventListeners = {};
},
_bindEvent: function() {
var t = this._video, e = this, i = this.__eventListeners;
i.loadedmetadata = function() {
e._loadedmeta = !0;
e._fullScreenEnabled ? cc.screen.requestFullScreen(t) : cc.screen.fullScreen() && cc.screen.exitFullScreen(t);
e._dispatchEvent(o.EventType.META_LOADED);
};
i.ended = function() {
if (e._video === t) {
e._playing = !1;
e._dispatchEvent(o.EventType.COMPLETED);
}
};
i.play = function() {
if (e._video === t) {
e._playing = !0;
e._updateVisibility();
e._dispatchEvent(o.EventType.PLAYING);
}
};
i.pause = function() {
if (e._video === t) {
e._playing = !1;
e._ignorePause || e._dispatchEvent(o.EventType.PAUSED);
}
};
i.click = function() {
e._dispatchEvent(o.EventType.CLICKED);
};
t.addEventListener("loadedmetadata", i.loadedmetadata);
t.addEventListener("ended", i.ended);
t.addEventListener("play", i.play);
t.addEventListener("pause", i.pause);
t.addEventListener("click", i.click);
i.onCanPlay = function() {
if (!e._loaded && !e._playing) {
var t = e._video;
if (t.readyState === s.HAVE_ENOUGH_DATA || t.readyState === s.HAVE_METADATA) {
t.currentTime = 0;
e._loaded = !0;
e._dispatchEvent(o.EventType.READY_TO_PLAY);
e._updateVisibility();
}
}
};
t.addEventListener("canplay", i.onCanPlay);
t.addEventListener("canplaythrough", i.onCanPlay);
t.addEventListener("suspend", i.onCanPlay);
},
_updateVisibility: function() {
var t = this._video;
if (t) if (this._visible) {
t.style.visibility = "visible";
this._forceUpdate = !0;
} else {
t.style.visibility = "hidden";
t.pause();
this._playing = !1;
this._forceUpdate = !1;
}
},
_updateSize: function(t, e) {
var i = this._video;
if (i) {
i.style.width = t + "px";
i.style.height = e + "px";
}
},
_createDom: function(t) {
var e = document.createElement("video");
e.style.position = "absolute";
e.style.bottom = "0px";
e.style.left = "0px";
e.className = "cocosVideo";
e.setAttribute("preload", "auto");
e.setAttribute("webkit-playsinline", "");
e.setAttribute("x5-playsinline", "");
e.setAttribute("playsinline", "");
t && e.setAttribute("muted", "");
this._video = e;
cc.game.container.appendChild(e);
},
createDomElementIfNeeded: function(t) {
this._video || this._createDom(t);
},
removeDom: function() {
var t = this._video;
if (t) {
n.contains(cc.game.container, t) && cc.game.container.removeChild(t);
var e = this.__eventListeners;
t.removeEventListener("loadedmetadata", e.loadedmetadata);
t.removeEventListener("ended", e.ended);
t.removeEventListener("play", e.play);
t.removeEventListener("pause", e.pause);
t.removeEventListener("click", e.click);
t.removeEventListener("canplay", e.onCanPlay);
t.removeEventListener("canplaythrough", e.onCanPlay);
t.removeEventListener("suspend", e.onCanPlay);
e.loadedmetadata = null;
e.ended = null;
e.play = null;
e.pause = null;
e.click = null;
e.onCanPlay = null;
}
this._video = null;
this._url = "";
},
setURL: function(t, e) {
var i, n = void 0;
if (this._url !== t) {
this._url = t;
this.removeDom();
this.createDomElementIfNeeded(e);
this._bindEvent();
var r = this._video;
r.style.visibility = "hidden";
this._loaded = !1;
this._playing = !1;
this._loadedmeta = !1;
(n = document.createElement("source")).src = t;
r.appendChild(n);
i = cc.path.extname(t);
for (var s = o._polyfill, a = 0; a < s.canPlayType.length; a++) if (i !== s.canPlayType[a]) {
(n = document.createElement("source")).src = t.replace(i, s.canPlayType[a]);
r.appendChild(n);
}
}
},
getURL: function() {
return this._url;
},
play: function() {
var t = this._video;
if (t && this._visible && !this._playing) if (o._polyfill.autoplayAfterOperation) {
setTimeout((function() {
t.play();
}), 20);
} else t.play();
},
pause: function() {
var t = this._video;
this._playing && t && t.pause();
},
resume: function() {
this.play();
},
stop: function() {
var t = this._video;
if (t && this._visible) {
this._ignorePause = !0;
t.currentTime = 0;
t.pause();
setTimeout(function() {
this._dispatchEvent(o.EventType.STOPPED);
this._ignorePause = !1;
}.bind(this), 0);
}
},
setVolume: function(t) {
var e = this._video;
e && (e.volume = t);
},
seekTo: function(t) {
var e = this._video;
if (e) {
this._loaded ? e.currentTime = t : (function() {
var i = function() {
e.currentTime = t;
e.removeEventListener(o._polyfill.event, i);
};
e.addEventListener(o._polyfill.event, i);
})();
o._polyfill.autoplayAfterOperation && this.isPlaying() && setTimeout((function() {
e.play();
}), 20);
}
},
isPlaying: function() {
var t = this._video;
o._polyfill.autoplayAfterOperation && this._playing && setTimeout((function() {
t.play();
}), 20);
return this._playing;
},
duration: function() {
var t = this._video, e = -1;
if (!t) return e;
(e = t.duration) <= 0 && cc.logID(7702);
return e;
},
currentTime: function() {
var t = this._video;
return t ? t.currentTime : -1;
},
setKeepAspectRatioEnabled: function() {
0;
cc.logID(7700);
},
isKeepAspectRatioEnabled: function() {
return !0;
},
setFullScreenEnabled: function(t) {
var e = this._video;
if (e) {
this._fullScreenEnabled = t;
t ? cc.screen.requestFullScreen(e) : cc.screen.fullScreen() && cc.screen.exitFullScreen(e);
}
},
isFullScreenEnabled: function() {
return this._fullScreenEnabled;
},
setEventListener: function(t, e) {
this._EventList[t] = e;
},
removeEventListener: function(t) {
this._EventList[t] = null;
},
_dispatchEvent: function(t) {
var e = this._EventList[t];
e && e.call(this, this, this._video.src);
},
onPlayEvent: function() {
this._EventList[o.EventType.PLAYING].call(this, this, this._video.src);
},
enable: function() {
var t = o.elements;
-1 === t.indexOf(this) && t.push(this);
this.setVisible(!0);
},
disable: function() {
var t = o.elements, e = t.indexOf(this);
-1 !== e && t.splice(e, 1);
this.setVisible(!1);
},
destroy: function() {
this.disable();
this.removeDom();
},
setVisible: function(t) {
if (this._visible !== t) {
this._visible = !!t;
this._updateVisibility();
}
},
updateMatrix: function(t) {
if (this._video && this._visible) {
t.getWorldMatrix(a);
if (this._forceUpdate || this._m00 !== a.m00 || this._m01 !== a.m01 || this._m04 !== a.m04 || this._m05 !== a.m05 || this._m12 !== a.m12 || this._m13 !== a.m13 || this._w !== t._contentSize.width || this._h !== t._contentSize.height) {
this._m00 = a.m00;
this._m01 = a.m01;
this._m04 = a.m04;
this._m05 = a.m05;
this._m12 = a.m12;
this._m13 = a.m13;
this._w = t._contentSize.width;
this._h = t._contentSize.height;
var e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._devicePixelRatio;
e /= n;
i /= n;
var r = cc.game.container, s = a.m00 * e, c = a.m01, h = a.m04, l = a.m05 * i, u = r && r.style.paddingLeft ? parseInt(r.style.paddingLeft) : 0, f = r && r.style.paddingBottom ? parseInt(r.style.paddingBottom) : 0, _ = void 0, d = void 0;
if (o._polyfill.zoomInvalid) {
this._updateSize(this._w * s, this._h * l);
s = 1;
l = 1;
_ = this._w * e;
d = this._h * i;
} else {
_ = this._w * e;
d = this._h * i;
this._updateSize(this._w, this._h);
}
var p = _ * a.m00 * t._anchorPoint.x, m = d * a.m05 * t._anchorPoint.y, g = cc.view._viewportRect;
u += g.x / n;
f += g.y / n;
var v = "matrix(" + s + "," + -c + "," + -h + "," + l + "," + (a.m12 * e - p + u) + "," + -(a.m13 * i - m + f) + ")";
this._video.style.transform = v;
this._video.style["-webkit-transform"] = v;
this._video.style["transform-origin"] = "0px 100% 0px";
this._video.style["-webkit-transform-origin"] = "0px 100% 0px";
}
}
}
});
o.EventType = {
PLAYING: 0,
PAUSED: 1,
STOPPED: 2,
COMPLETED: 3,
META_LOADED: 4,
CLICKED: 5,
READY_TO_PLAY: 6
};
o.elements = [];
o.pauseElements = [];
cc.game.on(cc.game.EVENT_HIDE, (function() {
for (var t, e = o.elements, i = 0; i < e.length; i++) if ((t = e[i]).isPlaying()) {
t.pause();
o.pauseElements.push(t);
}
}));
cc.game.on(cc.game.EVENT_SHOW, (function() {
for (var t = o.pauseElements, e = t.pop(); e; ) {
e.play();
e = t.pop();
}
}));
o._polyfill = {
devicePixelRatio: !1,
event: "canplay",
canPlayType: []
};
var c = cc.sys.platform === cc.sys.XIAOMI_GAME, h = cc.sys.platform === cc.sys.BAIDU_GAME, l = document.createElement("video");
if (!h && !c) {
if (l.canPlayType("video/ogg")) {
o._polyfill.canPlayType.push(".ogg");
o._polyfill.canPlayType.push(".ogv");
}
l.canPlayType("video/mp4") && o._polyfill.canPlayType.push(".mp4");
l.canPlayType("video/webm") && o._polyfill.canPlayType.push(".webm");
}
r.browserType === r.BROWSER_TYPE_FIREFOX && (o._polyfill.autoplayAfterOperation = !0);
r.OS_ANDROID !== r.os || r.browserType !== r.BROWSER_TYPE_SOUGOU && r.browserType !== r.BROWSER_TYPE_360 || (o._polyfill.zoomInvalid = !0);
var u = document.createElement("style");
u.innerHTML = ".cocosVideo:-moz-full-screen{transform:matrix(1,0,0,1,0,0) !important;}.cocosVideo:full-screen{transform:matrix(1,0,0,1,0,0) !important;}.cocosVideo:-webkit-full-screen{transform:matrix(1,0,0,1,0,0) !important;}";
document.head.appendChild(u);
e.exports = o;
}), {
"../core/platform/CCSys": 143,
"../core/platform/utils": 158,
"../core/renderer/render-engine": 176
} ],
253: [ (function(t, e, i) {
var n = t("./webview-impl"), r = n.EventType;
function s() {}
var a = cc.Class({
name: "cc.WebView",
extends: cc.Component,
editor: !1,
properties: {
_useOriginalSize: !0,
_url: "",
url: {
type: String,
tooltip: !1,
get: function() {
return this._url;
},
set: function(t) {
this._url = t;
var e = this._impl;
e && e.loadURL(t);
}
},
webviewEvents: {
default: [],
type: cc.Component.EventHandler
}
},
statics: {
EventType: r,
Impl: n
},
ctor: function() {
this._impl = new a.Impl();
},
onRestore: function() {
this._impl || (this._impl = new a.Impl());
},
onEnable: function() {
var t = this._impl;
t.createDomElementIfNeeded(this.node.width, this.node.height);
t.setEventListener(r.LOADED, this._onWebViewLoaded.bind(this));
t.setEventListener(r.LOADING, this._onWebViewLoading.bind(this));
t.setEventListener(r.ERROR, this._onWebViewLoadError.bind(this));
t.loadURL(this._url);
t.setVisible(!0);
},
onDisable: function() {
var t = this._impl;
t.setVisible(!1);
t.setEventListener(r.LOADED, s);
t.setEventListener(r.LOADING, s);
t.setEventListener(r.ERROR, s);
},
onDestroy: function() {
if (this._impl) {
this._impl.destroy();
this._impl = null;
}
},
update: function(t) {
this._impl && this._impl.updateMatrix(this.node);
},
_onWebViewLoaded: function() {
cc.Component.EventHandler.emitEvents(this.webviewEvents, this, r.LOADED);
this.node.emit("loaded", this);
},
_onWebViewLoading: function() {
cc.Component.EventHandler.emitEvents(this.webviewEvents, this, r.LOADING);
this.node.emit("loading", this);
return !0;
},
_onWebViewLoadError: function() {
cc.Component.EventHandler.emitEvents(this.webviewEvents, this, r.ERROR);
this.node.emit("error", this);
},
setJavascriptInterfaceScheme: function(t) {
this._impl && this._impl.setJavascriptInterfaceScheme(t);
},
setOnJSCallback: function(t) {
this._impl && this._impl.setOnJSCallback(t);
},
evaluateJS: function(t) {
this._impl && this._impl.evaluateJS(t);
}
});
cc.WebView = e.exports = a;
}), {
"./webview-impl": 254
} ],
254: [ (function(t, e, i) {
var n = t("../core/platform/utils"), r = t("../core/platform/CCSys"), s = t("../core/renderer/render-engine").math.mat4.create(), a = cc.Class({
name: "WebViewImpl",
ctor: function() {
this._EventList = {};
this._visible = !1;
this._parent = null;
this._div = null;
this._iframe = null;
this._listener = null;
this._forceUpdate = !0;
this._m00 = 0;
this._m01 = 0;
this._m04 = 0;
this._m05 = 0;
this._m12 = 0;
this._m13 = 0;
this._w = 0;
this._h = 0;
this.__eventListeners = {};
},
_updateVisibility: function() {
if (this._div) {
var t = this._div;
this._visible ? t.style.visibility = "visible" : t.style.visibility = "hidden";
this._forceUpdate = !0;
}
},
_updateSize: function(t, e) {
var i = this._div;
if (i) {
i.style.width = t + "px";
i.style.height = e + "px";
}
},
_initEvent: function() {
var t = this, e = this._iframe;
e && (function() {
var i = t.__eventListeners, n = t;
i.load = function() {
n._dispatchEvent(a.EventType.LOADED);
};
i.error = function() {
n._dispatchEvent(a.EventType.ERROR);
};
e.addEventListener("load", i.load);
e.addEventListener("error", i.error);
})();
},
_initStyle: function() {
if (this._div) {
var t = this._div;
t.style.position = "absolute";
t.style.bottom = "0px";
t.style.left = "0px";
}
},
_setOpacity: function(t) {
var e = this._iframe;
e && e.style && (e.style.opacity = t / 255);
},
_createDom: function(t, e) {
if (a._polyfill.enableDiv) {
this._div = document.createElement("div");
this._div.style["-webkit-overflow"] = "auto";
this._div.style["-webkit-overflow-scrolling"] = "touch";
this._iframe = document.createElement("iframe");
this._div.appendChild(this._iframe);
this._iframe.style.width = "100%";
this._iframe.style.height = "100%";
} else this._div = this._iframe = document.createElement("iframe");
a._polyfill.enableBG && (this._div.style.background = "#FFF");
this._div.style.background = "#FFF";
this._div.style.height = e + "px";
this._div.style.width = t + "px";
this._div.style.overflow = "scroll";
this._iframe.style.border = "none";
cc.game.container.appendChild(this._div);
this._updateVisibility();
},
_createNativeControl: function(t, e) {
this._createDom(t, e);
this._initStyle();
this._initEvent();
},
createDomElementIfNeeded: function(t, e) {
this._div ? this._updateSize(t, e) : this._createNativeControl(t, e);
},
removeDom: function() {
var t = this._div;
if (t) {
n.contains(cc.game.container, t) && cc.game.container.removeChild(t);
this._div = null;
}
var e = this._iframe;
if (e) {
var i = this.__eventListeners;
e.removeEventListener("load", i.load);
e.removeEventListener("error", i.error);
i.load = null;
i.error = null;
this._iframe = null;
}
},
setOnJSCallback: function(t) {},
setJavascriptInterfaceScheme: function(t) {},
loadData: function(t, e, i, n) {},
loadHTMLString: function(t, e) {},
loadURL: function(t) {
var e = this, i = this._iframe;
i && (function() {
i.src = t;
var n = e, r = function() {
n._loaded = !0;
n._updateVisibility();
i.removeEventListener("load", r);
};
i.addEventListener("load", r);
e._dispatchEvent(a.EventType.LOADING);
})();
},
stopLoading: function() {
cc.logID(7800);
},
reload: function() {
var t = this._iframe;
if (t) {
var e = t.contentWindow;
e && e.location && e.location.reload();
}
},
canGoBack: function() {
cc.logID(7801);
return !0;
},
canGoForward: function() {
cc.logID(7802);
return !0;
},
goBack: function() {
try {
if (a._polyfill.closeHistory) return cc.logID(7803);
var t = this._iframe;
if (t) {
var e = t.contentWindow;
e && e.location && e.history.back.call(e);
}
} catch (t) {
cc.log(t);
}
},
goForward: function() {
try {
if (a._polyfill.closeHistory) return cc.logID(7804);
var t = this._iframe;
if (t) {
var e = t.contentWindow;
e && e.location && e.history.forward.call(e);
}
} catch (t) {
cc.log(t);
}
},
evaluateJS: function(t) {
var e = this._iframe;
if (e) {
var i = e.contentWindow;
try {
i.eval(t);
this._dispatchEvent(a.EventType.JS_EVALUATED);
} catch (t) {
console.error(t);
}
}
},
setScalesPageToFit: function() {
cc.logID(7805);
},
setEventListener: function(t, e) {
this._EventList[t] = e;
},
removeEventListener: function(t) {
this._EventList[t] = null;
},
_dispatchEvent: function(t) {
var e = this._EventList[t];
e && e.call(this, this, this._iframe.src);
},
_createRenderCmd: function() {
return new a.RenderCmd(this);
},
destroy: function() {
this.removeDom();
},
setVisible: function(t) {
if (this._visible !== t) {
this._visible = !!t;
this._updateVisibility();
}
},
updateMatrix: function(t) {
if (this._div && this._visible) {
t.getWorldMatrix(s);
if (this._forceUpdate || this._m00 !== s.m00 || this._m01 !== s.m01 || this._m04 !== s.m04 || this._m05 !== s.m05 || this._m12 !== s.m12 || this._m13 !== s.m13 || this._w !== t._contentSize.width || this._h !== t._contentSize.height) {
this._m00 = s.m00;
this._m01 = s.m01;
this._m04 = s.m04;
this._m05 = s.m05;
this._m12 = s.m12;
this._m13 = s.m13;
this._w = t._contentSize.width;
this._h = t._contentSize.height;
var e = cc.view._scaleX, i = cc.view._scaleY, n = cc.view._devicePixelRatio;
e /= n;
i /= n;
var r = cc.game.container, a = s.m00 * e, o = s.m01, c = s.m04, h = s.m05 * i, l = r && r.style.paddingLeft ? parseInt(r.style.paddingLeft) : 0, u = r && r.style.paddingBottom ? parseInt(r.style.paddingBottom) : 0;
this._updateSize(this._w, this._h);
var f = this._div.clientWidth * e, _ = this._div.clientHeight * i, d = f * s.m00 * t._anchorPoint.x, p = _ * s.m05 * t._anchorPoint.y, m = cc.view._viewportRect;
l += m.x / n;
u += m.y / n;
var g = "matrix(" + a + "," + -o + "," + -c + "," + h + "," + (s.m12 * e - d + l) + "," + -(s.m13 * i - p + u) + ")";
this._div.style.transform = g;
this._div.style["-webkit-transform"] = g;
this._div.style["transform-origin"] = "0px 100% 0px";
this._div.style["-webkit-transform-origin"] = "0px 100% 0px";
this._setOpacity(t.opacity);
}
}
}
});
a.EventType = {
LOADING: 0,
LOADED: 1,
ERROR: 2,
JS_EVALUATED: 3
};
var o = a._polyfill = {
devicePixelRatio: !1,
enableDiv: !1
};
r.os === r.OS_IOS && (o.enableDiv = !0);
r.isMobile ? r.browserType === r.BROWSER_TYPE_FIREFOX && (o.enableBG = !0) : r.browserType === r.BROWSER_TYPE_IE && (o.closeHistory = !0);
e.exports = a;
}), {
"../core/platform/CCSys": 143,
"../core/platform/utils": 158,
"../core/renderer/render-engine": 176
} ],
255: [ (function(t, e, i) {
t("./cocos2d/core");
t("./cocos2d/animation");
t("./cocos2d/particle");
t("./cocos2d/tilemap");
t("./cocos2d/videoplayer/CCVideoPlayer");
t("./cocos2d/webview/CCWebView");
t("./cocos2d/core/components/CCStudioComponent");
t("./extensions/ccpool/CCNodePool");
t("./cocos2d/actions");
t("./extensions/spine");
t("./extensions/dragonbones");
t("./cocos2d/deprecated");
}), {
"./cocos2d/actions": 7,
"./cocos2d/animation": 16,
"./cocos2d/core": 110,
"./cocos2d/core/components/CCStudioComponent": 83,
"./cocos2d/deprecated": 234,
"./cocos2d/particle": 240,
"./cocos2d/particle/CCParticleAsset": 237,
"./cocos2d/tilemap": 249,
"./cocos2d/tilemap/CCTiledMapAsset": 246,
"./cocos2d/videoplayer/CCVideoPlayer": 251,
"./cocos2d/webview/CCWebView": 253,
"./extensions/ccpool/CCNodePool": 256,
"./extensions/dragonbones": 260,
"./extensions/spine": 263
} ],
256: [ (function(t, e, i) {
cc.NodePool = function(t) {
this.poolHandlerComp = t;
this._pool = [];
};
cc.NodePool.prototype = {
constructor: cc.NodePool,
size: function() {
return this._pool.length;
},
clear: function() {
for (var t = this._pool.length, e = 0; e < t; ++e) this._pool[e].destroy();
this._pool.length = 0;
},
put: function(t) {
if (t && -1 === this._pool.indexOf(t)) {
t.removeFromParent(!1);
var e = this.poolHandlerComp ? t.getComponent(this.poolHandlerComp) : null;
e && e.unuse && e.unuse();
this._pool.push(t);
}
},
get: function() {
var t = this._pool.length - 1;
if (t < 0) return null;
var e = this._pool[t];
this._pool.length = t;
var i = this.poolHandlerComp ? e.getComponent(this.poolHandlerComp) : null;
i && i.reuse && i.reuse.apply(i, arguments);
return e;
}
};
e.exports = cc.NodePool;
}), {} ],
257: [ (function(t, e, i) {
var n = t("../../cocos2d/core/components/CCRenderComponent"), r = t("../../cocos2d/core/renderer/render-engine").SpriteMaterial, s = t("../../cocos2d/core/event/event-target"), a = (t("../../cocos2d/core/CCNode"), 
t("../../cocos2d/core/graphics/graphics")), o = t("./ArmatureCache"), c = cc.Enum({
default: -1
}), h = cc.Enum({
"<None>": 0
}), l = (cc.Enum({
REALTIME: 0
}), cc.Enum({
REALTIME: 0,
SHARED_CACHE: 1,
PRIVATE_CACHE: 2
}));
var u = cc.Class({
name: "dragonBones.ArmatureDisplay",
extends: n,
editor: !1,
statics: {
AnimationCacheMode: l
},
properties: {
_factory: {
default: null,
type: dragonBones.CCFactory,
serializable: !1
},
dragonAsset: {
default: null,
type: dragonBones.DragonBonesAsset,
notify: function() {
this._refresh();
0;
},
tooltip: !1
},
dragonAtlasAsset: {
default: null,
type: dragonBones.DragonBonesAtlasAsset,
notify: function() {
this._parseDragonAtlasAsset();
this._refresh();
},
tooltip: !1
},
_armatureName: "",
armatureName: {
get: function() {
return this._armatureName;
},
set: function(t) {
this._armatureName = t;
var e = this.getAnimationNames(this._armatureName);
(!this.animationName || e.indexOf(this.animationName) < 0) && (this.animationName = "");
this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.remove(this._armature);
this._refresh();
this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.add(this._armature);
},
visible: !1
},
_animationName: "",
animationName: {
get: function() {
return this._animationName;
},
set: function(t) {
this._animationName = t;
},
visible: !1
},
_defaultArmatureIndex: {
default: 0,
notify: function() {
var t = "";
if (this.dragonAsset) {
var e = void 0;
this.dragonAsset && (e = this.dragonAsset.getArmatureEnum());
if (!e) return cc.errorID(7400, this.name);
t = e[this._defaultArmatureIndex];
}
void 0 !== t ? this.armatureName = t : cc.errorID(7401, this.name);
},
type: c,
visible: !0,
editorOnly: !0,
animatable: !1,
displayName: "Armature",
tooltip: !1
},
_animationIndex: {
default: 0,
notify: function() {
if (0 !== this._animationIndex) {
var t = void 0;
this.dragonAsset && (t = this.dragonAsset.getAnimsEnum(this.armatureName));
if (t) {
var e = t[this._animationIndex];
void 0 !== e ? this.playAnimation(e, this.playTimes) : cc.errorID(7402, this.name);
}
} else this.animationName = "";
},
type: h,
visible: !0,
editorOnly: !0,
displayName: "Animation",
tooltip: !1
},
_preCacheMode: -1,
_cacheMode: l.REALTIME,
_defaultCacheMode: {
default: 0,
type: l,
notify: function() {
this.setAnimationCacheMode(this._defaultCacheMode);
},
editorOnly: !0,
visible: !0,
animatable: !1,
displayName: "Animation Cache Mode",
tooltip: !1
},
timeScale: {
default: 1,
notify: function() {
this._armature && (this._armature.animation.timeScale = this.timeScale);
},
tooltip: !1
},
playTimes: {
default: -1,
tooltip: !1
},
premultipliedAlpha: {
default: !1,
tooltip: !1
},
debugBones: {
default: !1,
notify: function() {
this._updateDebugDraw();
},
tooltip: !1
},
enableBatch: {
default: !1,
notify: function() {
this._updateBatch();
},
tooltip: !1
},
_armatureKey: "",
_accTime: 0,
_playCount: 0,
_frameCache: null,
_curFrame: null,
_playing: !1,
_armatureCache: null
},
ctor: function() {
this._material = new r();
this._eventTarget = new s();
this._materialCache = {};
this._inited = !1;
this._factory = dragonBones.CCFactory.getInstance();
},
onLoad: function() {
for (var t = this.node.children, e = 0, i = t.length; e < i; e++) {
var n = t[e];
0 === (n._name && n._name.search("CHILD_ARMATURE-")) && n.destroy();
}
},
_updateBatch: function() {
var t = this._materialCache;
for (var e in t) {
var i = t[e];
i && (i.useModel = !this.enableBatch);
}
},
_updateMaterial: function(t) {
this._super(t);
this._materialCache = {};
},
__preload: function() {
this._init();
},
_init: function() {
if (!this._inited) {
this._inited = !0;
this._cacheMode = l.REALTIME;
this._parseDragonAtlasAsset();
this._refresh();
for (var t = this.node.children, e = 0, i = t.length; e < i; e++) {
var n = t[e];
n && "DEBUG_DRAW_NODE" === n._name && n.destroy();
}
this._updateDebugDraw();
}
},
getArmatureKey: function() {
return this._armatureKey;
},
onRestore: function() {
if (!this._material) {
this._material = new r();
this._materialCache = {};
}
},
setAnimationCacheMode: function(t) {},
isAnimationCached: function() {
0;
return this._cacheMode !== l.REALTIME;
},
onEnable: function() {
this._super();
this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.add(this._armature);
},
onDisable: function() {
this._super();
this._armature && !this.isAnimationCached() && this._factory._dragonBones.clock.remove(this._armature);
},
update: function(t) {
if (this.isAnimationCached() && this._playing) {
var e = this._frameCache, i = e.frames, n = o.FrameTime;
0 == this._accTime && 0 == this._playCount && this._eventTarget && this._eventTarget.emit(dragonBones.EventObject.START);
var r = dragonBones.timeScale;
this._accTime += t * this.timeScale * r;
var s = Math.floor(this._accTime / n);
e.isCompleted || e.updateToFrame(s);
if (e.isCompleted && s >= i.length) {
this._eventTarget && this._eventTarget.emit(dragonBones.EventObject.LOOP_COMPLETE);
this._eventTarget && this._eventTarget.emit(dragonBones.EventObject.COMPLETE);
this._playCount++;
if (this.playTimes > 0 && this._playCount >= this.playTimes) {
this._curFrame = i[i.length - 1];
this._accTime = 0;
this._playing = !1;
this._playCount = 0;
return;
}
this._accTime = 0;
s = 0;
}
this._curFrame = i[s];
}
},
onDestroy: function() {
this._super();
this._inited = !1;
if (this._cacheMode === l.PRIVATE_CACHE) {
this._armatureCache.dispose();
this._armatureCache = null;
this._armature = null;
} else if (this._cacheMode === l.SHARED_CACHE) {
this._armatureCache = null;
this._armature = null;
} else if (this._armature) {
this._armature.dispose();
this._armature = null;
}
},
_updateDebugDraw: function() {
if (this.debugBones) {
if (!this._debugDraw) {
var t = new cc.PrivateNode();
t.name = "DEBUG_DRAW_NODE";
var e = t.addComponent(a);
e.lineWidth = 1;
e.strokeColor = cc.color(255, 0, 0, 255);
this._debugDraw = e;
}
this._debugDraw.node.parent = this.node;
} else this._debugDraw && (this._debugDraw.node.parent = null);
},
_buildArmature: function() {
if (this.dragonAsset && this.dragonAtlasAsset && this.armatureName) {
if (this._armature) {
this._preCacheMode === l.PRIVATE_CACHE ? this._armatureCache.dispose() : this._preCacheMode === l.REALTIME && this._armature.dispose();
this._armatureCache = null;
this._armature = null;
this._displayProxy = null;
this._frameCache = null;
this._curFrame = null;
this._playing = !1;
this._preCacheMode = null;
}
this._cacheMode === l.SHARED_CACHE ? this._armatureCache = o.sharedCache : this._cacheMode === l.PRIVATE_CACHE && (this._armatureCache = new o());
var t = this.dragonAtlasAsset._uuid;
this._armatureKey = this.dragonAsset.init(this._factory, t);
if (this.isAnimationCached()) {
this._armature = this._armatureCache.getArmatureCache(this.armatureName, this._armatureKey, t);
this._armature || (this._cacheMode = l.REALTIME);
}
this._preCacheMode = this._cacheMode;
if (this._cacheMode === l.REALTIME) {
this._displayProxy = this._factory.buildArmatureDisplay(this.armatureName, this._armatureKey, "", t);
if (!this._displayProxy) return;
this._displayProxy._ccNode = this.node;
this._displayProxy.setEventTarget(this._eventTarget);
this._armature = this._displayProxy._armature;
this._armature.animation.timeScale = this.timeScale;
}
this._cacheMode !== l.REALTIME && this.debugBones && cc.warn("Debug bones is invalid in cached mode");
this._updateBatch();
this.animationName && this.playAnimation(this.animationName, this.playTimes);
}
},
_parseDragonAtlasAsset: function() {
this.dragonAtlasAsset && this.dragonAtlasAsset.init(this._factory);
},
_refresh: function() {
this._buildArmature();
0;
},
_updateCacheModeEnum: !1,
_updateAnimEnum: !1,
_updateArmatureEnum: !1,
playAnimation: function(t, e) {
this.playTimes = void 0 === e ? -1 : e;
this.animationName = t;
if (this.isAnimationCached()) {
var i = this._armatureCache.getAnimationCache(this._armatureKey, t);
i || (i = this._armatureCache.initAnimationCache(this._armatureKey, t)).begin();
if (i) {
this._accTime = 0;
this._playCount = 0;
this._frameCache = i;
this._playing = !0;
this._curFrame = this._frameCache.frames[0];
}
} else if (this._armature) return this._armature.animation.play(t, this.playTimes);
},
updateAnimationCache: function(t) {
if (this.isAnimationCached()) {
var e = this._armatureCache.updateAnimationCache(this._armatureKey, t);
this._frameCache = e || this._frameCache;
}
},
getArmatureNames: function() {
var t = this._factory.getDragonBonesData(this._armatureKey);
return t && t.armatureNames || [];
},
getAnimationNames: function(t) {
var e = [], i = this._factory.getDragonBonesData(this._armatureKey);
if (i) {
var n = i.getArmature(t);
if (n) for (var r in n.animations) n.animations.hasOwnProperty(r) && e.push(r);
}
return e;
},
on: function(t, e, i) {
this.addEventListener(t, e, i);
},
off: function(t, e, i) {
this.removeEventListener(t, e, i);
},
once: function(t, e, i) {
this._eventTarget.once(t, e, i);
},
addEventListener: function(t, e, i) {
this._eventTarget.on(t, e, i);
},
removeEventListener: function(t, e, i) {
this._eventTarget.off(t, e, i);
},
buildArmature: function(t, e) {
return this._factory.createArmatureNode(this, t, e);
},
armature: function() {
return this._armature;
}
});
e.exports = dragonBones.ArmatureDisplay = u;
}), {
"../../cocos2d/core/CCNode": 29,
"../../cocos2d/core/components/CCRenderComponent": 77,
"../../cocos2d/core/event/event-target": 102,
"../../cocos2d/core/graphics/graphics": 106,
"../../cocos2d/core/renderer/render-engine": 176,
"./ArmatureCache": void 0
} ],
258: [ (function(t, e, i) {
var n = cc.Class({
name: "dragonBones.DragonBonesAsset",
extends: cc.Asset,
ctor: function() {
this.reset();
},
properties: {
_dragonBonesJson: "",
dragonBonesJson: {
get: function() {
return this._dragonBonesJson;
},
set: function(t) {
this._dragonBonesJson = t;
this.reset();
}
},
_nativeAsset: {
get: function() {
return this._buffer;
},
set: function(t) {
this._buffer = t.buffer || t;
this.reset();
},
override: !0
}
},
statics: {
preventDeferredLoadDependents: !0
},
createNode: !1,
reset: function() {
this._clear();
0;
},
init: function(t, e) {
this._factory = t;
var i = null;
i = this.dragonBonesJson ? JSON.parse(this.dragonBonesJson) : this._nativeAsset;
if (!this._uuid) {
var n = this._factory.getDragonBonesDataByRawData(i);
n ? this._uuid = n.name : cc.warn("dragonbones name is empty");
}
var r = this._uuid + "#" + e;
if (this._factory.getDragonBonesData(r)) return r;
this._factory.parseDragonBonesData(i, r);
return r;
},
getArmatureEnum: !1,
getAnimsEnum: !1,
_clear: function() {},
destroy: function() {
this._clear();
this._super();
}
});
dragonBones.DragonBonesAsset = e.exports = n;
}), {
"./ArmatureCache": void 0
} ],
259: [ (function(t, e, i) {
var n = cc.Class({
name: "dragonBones.DragonBonesAtlasAsset",
extends: cc.Asset,
ctor: function() {
this._clear();
},
properties: {
_atlasJson: "",
atlasJson: {
get: function() {
return this._atlasJson;
},
set: function(t) {
this._atlasJson = t;
this._clear();
}
},
_texture: {
default: null,
type: cc.Texture2D,
formerlySerializedAs: "texture"
},
texture: {
get: function() {
return this._texture;
},
set: function(t) {
this._texture = t;
this._clear();
}
},
_textureAtlasData: null
},
statics: {
preventDeferredLoadDependents: !0
},
createNode: !1,
init: function(t) {
this._factory = t;
var e = JSON.parse(this.atlasJson);
this._uuid = this._uuid || e.name;
this._textureAtlasData ? t.addTextureAtlasData(this._textureAtlasData, this._uuid) : this._textureAtlasData = t.parseTextureAtlasData(e, this.texture, this._uuid);
},
_clear: function() {},
destroy: function() {
this._clear();
this._super();
}
});
dragonBones.DragonBonesAtlasAsset = e.exports = n;
}), {
"./ArmatureCache": void 0
} ],
260: [ (function(i, n, r) {
var s = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window;
0;
if (void 0 !== s.dragonBones) {
dragonBones._timeScale = 1;
Object.defineProperty(dragonBones, "timeScale", {
get: function() {
return this._timeScale;
},
set: function(t) {
this._timeScale = t;
this.CCFactory.getInstance()._dragonBones.clock.timeScale = t;
},
configurable: !0
});
dragonBones.DisplayType = {
Image: 0,
Armature: 1,
Mesh: 2
};
dragonBones.ArmatureType = {
Armature: 0,
MovieClip: 1,
Stage: 2
};
dragonBones.ExtensionType = {
FFD: 0,
AdjustColor: 10,
BevelFilter: 11,
BlurFilter: 12,
DropShadowFilter: 13,
GlowFilter: 14,
GradientBevelFilter: 15,
GradientGlowFilter: 16
};
dragonBones.EventType = {
Frame: 0,
Sound: 1
};
dragonBones.ActionType = {
Play: 0,
Stop: 1,
GotoAndPlay: 2,
GotoAndStop: 3,
FadeIn: 4,
FadeOut: 5
};
dragonBones.AnimationFadeOutMode = {
None: 0,
SameLayer: 1,
SameGroup: 2,
SameLayerAndGroup: 3,
All: 4
};
dragonBones.BinaryOffset = {
WeigthBoneCount: 0,
WeigthFloatOffset: 1,
WeigthBoneIndices: 2,
MeshVertexCount: 0,
MeshTriangleCount: 1,
MeshFloatOffset: 2,
MeshWeightOffset: 3,
MeshVertexIndices: 4,
TimelineScale: 0,
TimelineOffset: 1,
TimelineKeyFrameCount: 2,
TimelineFrameValueCount: 3,
TimelineFrameValueOffset: 4,
TimelineFrameOffset: 5,
FramePosition: 0,
FrameTweenType: 1,
FrameTweenEasingOrCurveSampleCount: 2,
FrameCurveSamples: 3,
DeformMeshOffset: 0,
DeformCount: 1,
DeformValueCount: 2,
DeformValueOffset: 3,
DeformFloatOffset: 4
};
dragonBones.BoneType = {
Bone: 0,
Surface: 1
};
0;
i("./DragonBonesAsset");
i("./DragonBonesAtlasAsset");
i("./ArmatureDisplay");
i("./webgl-assembler");
}
}), {
"./ArmatureCache": void 0,
"./ArmatureDisplay": 257,
"./CCArmatureDisplay": void 0,
"./CCFactory": void 0,
"./CCSlot": void 0,
"./CCTextureData": void 0,
"./DragonBonesAsset": 258,
"./DragonBonesAtlasAsset": 259,
"./lib/dragonBones": void 0,
"./webgl-assembler": 261
} ],
261: [ (function(t, e, i) {
var n = t("./ArmatureDisplay"), r = t("../../cocos2d/core/renderer/render-engine"), s = t("../../cocos2d/core/renderer/render-flow"), a = r.gfx, o = t("../../cocos2d/core/renderer/render-engine").math, c = cc.color(255, 0, 0, 255), h = cc.color(0, 0, 255, 255), l = void 0, u = void 0, f = void 0, _ = void 0, d = void 0, p = void 0, m = void 0, g = void 0, v = void 0, y = void 0, T = void 0, x = void 0, E = void 0, C = void 0, A = void 0, b = void 0, S = void 0, w = void 0, D = void 0, I = void 0, R = void 0, M = void 0, L = void 0, O = void 0, P = void 0, F = void 0, N = void 0, B = void 0, k = void 0, z = void 0;
function U(t, e) {
if (!t) return null;
var i = void 0, n = void 0;
switch (e) {
case 1:
i = d ? cc.macro.ONE : cc.macro.SRC_ALPHA;
n = cc.macro.ONE;
break;

case 10:
i = cc.macro.DST_COLOR;
n = cc.macro.ONE_MINUS_SRC_ALPHA;
break;

case 12:
i = cc.macro.ONE;
n = cc.macro.ONE_MINUS_SRC_COLOR;
break;

case 0:
default:
i = d ? cc.macro.ONE : cc.macro.SRC_ALPHA;
n = cc.macro.ONE_MINUS_SRC_ALPHA;
}
var r = !T.enableBatch, s = t.url + i + n + r, o = T._material;
if (!o) return null;
var c = T._materialCache, h = c[s];
if (h) {
if (h.texture !== t) {
h.texture = t;
h.updateHash(s);
}
} else {
(h = c[o._hash] ? o.clone() : o).useModel = r;
h.texture = t;
h.useColor = !1;
h._mainTech.passes[0].setBlend(a.BLEND_FUNC_ADD, i, n, a.BLEND_FUNC_ADD, i, n);
c[s] = h;
h.updateHash(s);
}
return h;
}
function H(t, e) {
L = t.a * e * _;
p = d ? L / 255 : 1;
I = t.r * l * p;
R = t.g * u * p;
M = t.b * f * p;
D = (L << 24 >>> 0) + (M << 16) + (R << 8) + I;
}
var V = {
updateRenderData: function(t, e) {},
realTimeTraverse: function(t, e, i) {
for (var n = t._slots, r = void 0, s = void 0, a = void 0, c = void 0, h = void 0, l = void 0, u = void 0, f = void 0, _ = void 0, d = void 0, p = 0, T = n.length; p < T; p++) {
u = (f = n[p])._color;
if (f._visible && f._displayData) {
e ? f._mulMat(f._worldMatrix, e, f._matrix) : o.mat4.copy(f._worldMatrix, f._matrix);
if (f.childArmature) this.realTimeTraverse(f.childArmature, f._worldMatrix, i * u.a / 255); else if (c = U(f.getTexture(), f._blendMode)) {
if (m || c._hash !== y.material._hash) {
m = !1;
y._flush();
y.node = v;
y.material = c;
}
H(u, i);
_ = f._worldMatrix;
h = f._localVertices;
A = h.length >> 2;
l = f._indices;
b = l.length;
d = g.request(A, b);
E = d.indiceOffset;
x = d.byteOffset >> 2;
C = d.vertexOffset;
r = g._vData;
s = g._iData;
a = g._uintVData;
P = _.m00;
F = _.m04;
N = _.m12;
B = _.m01;
k = _.m05;
z = _.m13;
for (var I = 0, R = h.length; I < R; ) {
S = h[I++];
w = h[I++];
r[x++] = S * P + w * F + N;
r[x++] = S * B + w * k + z;
r[x++] = h[I++];
r[x++] = h[I++];
a[x++] = D;
}
for (var M = 0, L = l.length; M < L; M++) s[E++] = C + l[M];
}
}
}
},
cacheTraverse: function(t, e) {
if (t) {
var i = t.segments;
if (0 != i.length) {
var n = void 0, r = void 0, s = void 0, a = void 0, o = void 0, c = t.vertices, h = t.indices, l = t.uintVert, u = 0, f = 0, _ = 0;
if (e) {
P = e.m00;
F = e.m04;
N = e.m12;
B = e.m01;
k = e.m05;
z = e.m13;
}
var d = 0, p = t.colors, T = p[d++], I = T.vfOffset;
H(T, 1);
for (var R = 0, M = i.length; R < M; R++) {
var L = i[R];
a = U(L.tex, L.blendMode);
if (m || a._hash !== y.material._hash) {
m = !1;
y._flush();
y.node = v;
y.material = a;
}
A = L.vertexCount;
b = L.indexCount;
o = g.request(A, b);
E = o.indiceOffset;
C = o.vertexOffset;
x = o.byteOffset >> 2;
n = g._vData;
r = g._iData;
s = g._uintVData;
for (var V = E, W = E + b; V < W; V++) r[V] = C + h[f++];
_ = L.vfCount;
switch (O) {
case 1:
case 0:
n.set(c.subarray(u, u + _), x);
u += _;
break;

case 16:
case 17:
for (var G = x, j = x + _; G < j; ) {
S = c[u++];
w = c[u++];
n[G++] = S * P + w * F + N;
n[G++] = S * B + w * k + z;
n[G++] = c[u++];
n[G++] = c[u++];
s[G++] = l[u++];
}
}
if (1 & O) for (var X = u - _, Y = x + 4, q = x + 4 + _; Y < q; Y += 5, X += 5) {
if (X >= I) {
H(T = p[d++], 1);
I = T.vfOffset;
}
s[Y] = D;
}
}
}
}
},
fillBuffers: function(t, e) {
t.node._renderFlag |= s.FLAG_UPDATE_RENDER_DATA;
m = !0;
d = t.premultipliedAlpha;
v = t.node;
g = e._meshBuffer;
y = e;
T = t;
O = 0;
var i = v._color;
l = i.r / 255;
u = i.g / 255;
f = i.b / 255;
_ = i.a / 255;
4294967295 !== i._val && (O |= 1);
var n = void 0;
if (T.enableBatch) {
n = v._worldMatrix;
m = !1;
O |= 16;
}
if (t.isAnimationCached()) this.cacheTraverse(t._curFrame, n); else {
var r = t._armature;
if (!r) return;
this.realTimeTraverse(r, n, 1);
var a = t._debugDraw;
if (t.debugBones && a) {
a.clear();
a.lineWidth = 5;
a.strokeColor = c;
a.fillColor = h;
for (var o = r.getBones(), p = 0, x = o.length; p < x; p++) {
var E = o[p], C = Math.max(E.boneData.length, 5), A = E.globalTransformMatrix.tx, b = -E.globalTransformMatrix.ty, S = A + E.globalTransformMatrix.a * C, w = b - E.globalTransformMatrix.b * C;
a.moveTo(A, b);
a.lineTo(S, w);
a.stroke();
}
}
}
v = void 0;
g = void 0;
y = void 0;
T = void 0;
}
};
e.exports = n._assembler = V;
}), {
"../../cocos2d/core/renderer/render-engine": 176,
"../../cocos2d/core/renderer/render-flow": 177,
"./ArmatureDisplay": 257
} ],
262: [ (function(t, e, i) {
var n = t("./track-entry-listeners"), r = t("../../cocos2d/core/components/CCRenderComponent"), s = t("./lib/spine"), a = t("../../cocos2d/core/renderer/render-engine").SpineMaterial, o = t("../../cocos2d/core/graphics/graphics"), c = t("./skeleton-cache"), h = cc.Enum({
default: -1
}), l = cc.Enum({
"<None>": 0
}), u = cc.Enum({
REALTIME: 0,
SHARED_CACHE: 1,
PRIVATE_CACHE: 2
});
sp.Skeleton = cc.Class({
name: "sp.Skeleton",
extends: r,
editor: !1,
statics: {
AnimationCacheMode: u
},
properties: {
paused: {
default: !1,
visible: !1
},
skeletonData: {
default: null,
type: sp.SkeletonData,
notify: function() {
this.defaultSkin = "";
this.defaultAnimation = "";
0;
this._updateSkeletonData();
},
tooltip: !1
},
defaultSkin: {
default: "",
visible: !1
},
defaultAnimation: {
default: "",
visible: !1
},
animation: {
get: function() {
if (this.isAnimationCached()) return this._animationName;
var t = this.getCurrent(0);
return t && t.animation.name || "";
},
set: function(t) {
this.defaultAnimation = t;
if (t) this.setAnimation(0, t, this.loop); else if (!this.isAnimationCached()) {
this.clearTrack(0);
this.setToSetupPose();
}
},
visible: !1
},
_defaultSkinIndex: {
get: function() {
if (this.skeletonData && this.defaultSkin) {
var t = this.skeletonData.getSkinsEnum();
if (t) {
var e = t[this.defaultSkin];
if (void 0 !== e) return e;
}
}
return 0;
},
set: function(t) {
var e;
this.skeletonData && (e = this.skeletonData.getSkinsEnum());
if (!e) return cc.errorID("", this.name);
var i = e[t];
if (void 0 !== i) {
this.defaultSkin = i;
this.setSkin(this.defaultSkin);
0;
} else cc.errorID(7501, this.name);
},
type: h,
visible: !0,
displayName: "Default Skin",
tooltip: !1
},
_animationIndex: {
get: function() {
var t = this.animation;
if (this.skeletonData && t) {
var e = this.skeletonData.getAnimsEnum();
if (e) {
var i = e[t];
if (void 0 !== i) return i;
}
}
return 0;
},
set: function(t) {
if (0 !== t) {
var e;
this.skeletonData && (e = this.skeletonData.getAnimsEnum());
if (!e) return cc.errorID(7502, this.name);
var i = e[t];
void 0 !== i ? this.animation = i : cc.errorID(7503, this.name);
} else this.animation = "";
},
type: l,
visible: !0,
displayName: "Animation",
tooltip: !1
},
_preCacheMode: -1,
_cacheMode: u.REALTIME,
_defaultCacheMode: {
default: 0,
type: u,
notify: function() {
this.setAnimationCacheMode(this._defaultCacheMode);
},
editorOnly: !0,
visible: !0,
animatable: !1,
displayName: "Animation Cache Mode",
tooltip: !1
},
loop: {
default: !0,
tooltip: !1
},
premultipliedAlpha: {
default: !0,
tooltip: !1
},
timeScale: {
default: 1,
tooltip: !1
},
debugSlots: {
default: !1,
editorOnly: !0,
tooltip: !1,
notify: function() {
this._updateDebugDraw();
}
},
debugBones: {
default: !1,
editorOnly: !0,
tooltip: !1,
notify: function() {
this._updateDebugDraw();
}
},
useTint: {
default: !1,
tooltip: !1,
notify: function() {
this._updateUseTint();
}
},
enableBatch: {
default: !1,
notify: function() {
this._updateBatch();
},
tooltip: !1
},
_accTime: 0,
_playCount: 0,
_frameCache: null,
_curFrame: null,
_skeletonCache: null,
_animationName: "",
_animationQueue: [],
_headAniInfo: null,
_playTimes: 0,
_isAniComplete: !0
},
ctor: function() {
this._skeleton = null;
this._rootBone = null;
this._listener = null;
this._boundingBox = cc.rect();
this._material = new a();
this._materialCache = {};
this._debugRenderer = null;
this._startSlotIndex = -1;
this._endSlotIndex = -1;
this._startEntry = {
animation: {
name: ""
},
trackIndex: 0
};
this._endEntry = {
animation: {
name: ""
},
trackIndex: 0
};
},
_updateMaterial: function(t) {
this._super(t);
this._materialCache = {};
},
_updateUseTint: function() {
var t = this._materialCache;
for (var e in t) {
var i = t[e];
i && (i.useTint = this.useTint);
}
},
_updateBatch: function() {
var t = this._materialCache;
for (var e in t) {
var i = t[e];
i && (i.useModel = !this.enableBatch);
}
},
setSkeletonData: function(t) {
null != t.width && null != t.height && this.node.setContentSize(t.width, t.height);
this._cacheMode === u.SHARED_CACHE ? this._skeletonCache = c.sharedCache : this._cacheMode === u.PRIVATE_CACHE && (this._skeletonCache = new c());
if (this.isAnimationCached()) {
(this.debugBones || this.debugSlots) && cc.warn("Debug bones or slots is invalid in cached mode");
var e = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, t);
this._skeleton = e.skeleton;
this._clipper = e.clipper;
this._rootBone = this._skeleton.getRootBone();
} else {
this._skeleton = new s.Skeleton(t);
this._clipper = new s.SkeletonClipping();
this._rootBone = this._skeleton.getRootBone();
}
},
setSlotsRange: function(t, e) {
if (this.isAnimationCached()) console.warn("Slots visible range can not be modified in cached mode."); else {
this._startSlotIndex = t;
this._endSlotIndex = e;
}
},
setAnimationStateData: function(t) {
if (this.isAnimationCached()) console.warn("'setAnimationStateData' interface can not be invoked in cached mode."); else {
var e = new s.AnimationState(t);
if (this._listener) {
this._state && this._state.removeListener(this._listener);
e.addListener(this._listener);
}
this._state = e;
}
},
__preload: function() {
for (var t = this.node.children, e = 0, i = t.length; e < i; e++) {
var n = t[e];
n && "DEBUG_DRAW_NODE" === n._name && n.destroy();
}
this._cacheMode = u.REALTIME;
this._updateSkeletonData();
this._updateDebugDraw();
this._updateUseTint();
this._updateBatch();
},
setAnimationCacheMode: function(t) {},
isAnimationCached: function() {
0;
return this._cacheMode !== u.REALTIME;
},
update: function(t) {
0;
if (!this.paused) {
t *= this.timeScale * sp.timeScale;
if (this.isAnimationCached()) {
if (this._isAniComplete) {
if (0 === this._animationQueue.length && !this._headAniInfo) return;
this._headAniInfo || (this._headAniInfo = this._animationQueue.shift());
this._accTime += t;
if (this._accTime > this._headAniInfo.delay) {
var e = this._headAniInfo;
this._headAniInfo = null;
this.setAnimation(0, e.animationName, e.loop);
}
return;
}
this._updateCache(t);
} else this._updateRealtime(t);
}
},
_updateCache: function(t) {
var e = this._frameCache, i = e.frames, n = c.FrameTime;
if (0 == this._accTime && 0 == this._playCount) {
this._startEntry.animation.name = this._animationName;
this._listener && this._listener.start && this._listener.start(this._startEntry);
}
this._accTime += t;
var r = Math.floor(this._accTime / n);
e.isCompleted || e.updateToFrame(r);
if (e.isCompleted && r >= i.length) {
this._endEntry.animation.name = this._animationName;
this._listener && this._listener.complete && this._listener.complete(this._endEntry);
this._listener && this._listener.end && this._listener.end(this._endEntry);
this._playCount++;
if (this._playTimes > 0 && this._playCount >= this._playTimes) {
this._curFrame = i[i.length - 1];
this._accTime = 0;
this._playCount = 0;
this._isAniComplete = !0;
return;
}
this._accTime = 0;
r = 0;
}
this._curFrame = i[r];
},
_updateRealtime: function(t) {
var e = this._skeleton, i = this._state;
if (e) {
e.update(t);
if (i) {
i.update(t);
i.apply(e);
}
}
},
onRestore: function() {
if (!this._material) {
this._boundingBox = cc.rect();
this._material = new a();
this._materialCache = {};
}
},
updateWorldTransform: function() {
this.isAnimationCached() && this._skeleton && this._skeleton.updateWorldTransform();
},
setToSetupPose: function() {
this.isAnimationCached() ? cc.warn("'SetToSetupPose' interface can not be invoked in cached mode.") : this._skeleton && this._skeleton.setToSetupPose();
},
setBonesToSetupPose: function() {
this.isAnimationCached() ? cc.warn("'setBonesToSetupPose' interface can not be invoked in cached mode.") : this._skeleton && this._skeleton.setBonesToSetupPose();
},
setSlotsToSetupPose: function() {
this.isAnimationCached() ? cc.warn("'setSlotsToSetupPose' interface can not be invoked in cached mode.") : this._skeleton && this._skeleton.setSlotsToSetupPose();
},
updateAnimationCache: function(t) {
if (this.isAnimationCached()) {
var e = this._skeletonCache.updateAnimationCache(this.skeletonData._uuid, t);
this._frameCache = e || this._frameCache;
}
},
findBone: function(t) {
return this._skeleton ? this._skeleton.findBone(t) : null;
},
findSlot: function(t) {
return this._skeleton ? this._skeleton.findSlot(t) : null;
},
setSkin: function(t) {
if (this.isAnimationCached()) this._skeletonCache.updateSkeletonSkin(this.skeletonData._uuid, t); else if (this._skeleton) {
this._skeleton.setSkinByName(t);
this._skeleton.setSlotsToSetupPose();
}
},
getAttachment: function(t, e) {
return this._skeleton ? this._skeleton.getAttachmentByName(t, e) : null;
},
setAttachment: function(t, e) {
this._skeleton && this._skeleton.setAttachment(t, e);
},
getTextureAtlas: function(t) {
return t.region;
},
setMix: function(t, e, i) {
this._state && this._state.data.setMix(t, e, i);
},
setAnimation: function(t, e, i) {
this._playTimes = i ? 0 : 1;
this._animationName = e;
if (this.isAnimationCached()) {
0 !== t && cc.warn("Track index can not greater than 0 in cached mode.");
var n = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, e);
n || (n = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, e)).begin();
if (n) {
this._isAniComplete = !1;
this._accTime = 0;
this._playCount = 0;
this._frameCache = n;
this._curFrame = this._frameCache.frames[0];
}
} else if (this._skeleton) {
var r = this._skeleton.data.findAnimation(e);
if (!r) {
cc.logID(7509, e);
return null;
}
var s = this._state.setAnimationWith(t, r, i);
this._state.apply(this._skeleton);
return s;
}
return null;
},
addAnimation: function(t, e, i, n) {
n = n || 0;
if (this.isAnimationCached()) {
0 !== t && cc.warn("Track index can not greater than 0 in cached mode.");
this._animationQueue.push({
animationName: e,
loop: i,
delay: n
});
} else if (this._skeleton) {
var r = this._skeleton.data.findAnimation(e);
if (!r) {
cc.logID(7510, e);
return null;
}
return this._state.addAnimationWith(t, r, i, n);
}
return null;
},
findAnimation: function(t) {
return this._skeleton ? this._skeleton.data.findAnimation(t) : null;
},
getCurrent: function(t) {
if (this.isAnimationCached()) console.warn("'getCurrent' interface can not be invoked in cached mode."); else if (this._state) return this._state.getCurrent(t);
return null;
},
clearTracks: function() {
this.isAnimationCached() ? console.warn("'clearTracks' interface can not be invoked in cached mode.") : this._state && this._state.clearTracks();
},
clearTrack: function(t) {
if (this.isAnimationCached()) console.warn("'clearTrack' interface can not be invoked in cached mode."); else if (this._state) {
this._state.clearTrack(t);
0;
}
},
setStartListener: function(t) {
this._ensureListener();
this._listener.start = t;
},
setInterruptListener: function(t) {
this._ensureListener();
this._listener.interrupt = t;
},
setEndListener: function(t) {
this._ensureListener();
this._listener.end = t;
},
setDisposeListener: function(t) {
this._ensureListener();
this._listener.dispose = t;
},
setCompleteListener: function(t) {
this._ensureListener();
this._listener.complete = t;
},
setEventListener: function(t) {
this._ensureListener();
this._listener.event = t;
},
setTrackStartListener: function(t, e) {
n.getListeners(t).start = e;
},
setTrackInterruptListener: function(t, e) {
n.getListeners(t).interrupt = e;
},
setTrackEndListener: function(t, e) {
n.getListeners(t).end = e;
},
setTrackDisposeListener: function(t, e) {
n.getListeners(t).dispose = e;
},
setTrackCompleteListener: function(t, e) {
n.getListeners(t).complete = function(t) {
var i = Math.floor(t.trackTime / t.animationEnd);
e(t, i);
};
},
setTrackEventListener: function(t, e) {
n.getListeners(t).event = e;
},
getState: function() {
return this._state;
},
_updateAnimEnum: !1,
_updateSkinEnum: !1,
_ensureListener: function() {
if (!this._listener) {
this._listener = new n();
this._state && this._state.addListener(this._listener);
}
},
_updateSkeletonData: function() {
if (this.skeletonData) {
var t = this.skeletonData.getRuntimeData();
if (t) {
try {
this.setSkeletonData(t);
this.isAnimationCached() || this.setAnimationStateData(new s.AnimationStateData(this._skeleton.data));
this.defaultSkin && this.setSkin(this.defaultSkin);
} catch (t) {
cc.warn(t);
}
this._preCacheMode = this._cacheMode;
this.animation = this.defaultAnimation;
}
}
},
_refreshInspector: function() {
this._updateAnimEnum();
this._updateSkinEnum();
Editor.Utils.refreshSelectedInspector("node", this.node.uuid);
},
_updateDebugDraw: function() {
if (this.debugBones || this.debugSlots) {
if (!this._debugRenderer) {
var t = new cc.PrivateNode();
t.name = "DEBUG_DRAW_NODE";
var e = t.addComponent(o);
e.lineWidth = 1;
e.strokeColor = cc.color(255, 0, 0, 255);
this._debugRenderer = e;
}
this._debugRenderer.node.parent = this.node;
this.isAnimationCached() && cc.warn("Debug bones or slots is invalid in cached mode");
} else this._debugRenderer && (this._debugRenderer.node.parent = null);
}
});
e.exports = sp.Skeleton;
}), {
"../../cocos2d/core/components/CCRenderComponent": 77,
"../../cocos2d/core/graphics/graphics": 106,
"../../cocos2d/core/renderer/render-engine": 176,
"./lib/spine": void 0,
"./skeleton-cache": void 0,
"./track-entry-listeners": 267
} ],
263: [ (function(i, n, r) {
var s = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window, a = !0;
void 0 === s.spine && (a = !1);
if (a) {
s.sp = {};
sp._timeScale = 1;
Object.defineProperty(sp, "timeScale", {
get: function() {
return this._timeScale;
},
set: function(t) {
this._timeScale = t;
},
configurable: !0
});
sp.ATTACHMENT_TYPE = {
REGION: 0,
BOUNDING_BOX: 1,
MESH: 2,
SKINNED_MESH: 3
};
sp.AnimationEventType = cc.Enum({
START: 0,
INTERRUPT: 1,
END: 2,
DISPOSE: 3,
COMPLETE: 4,
EVENT: 5
});
sp.spine = s.spine;
i("./skeleton-texture");
i("./skeleton-data");
i("./Skeleton");
i("./spine-assembler");
}
}), {
"./Skeleton": 262,
"./lib/spine": void 0,
"./skeleton-data": 264,
"./skeleton-texture": 265,
"./spine-assembler": 266
} ],
264: [ (function(t, e, i) {
var n = cc.Class({
name: "sp.SkeletonData",
extends: cc.Asset,
ctor: function() {
this.reset();
},
properties: {
skeletonJsonStr: "",
_skeletonJson: null,
skeletonJson: {
get: function() {
return this._skeletonJson;
},
set: function(t) {
this._skeletonJson = t;
this.skeletonJsonStr = JSON.stringify(t);
!this._uuid && t.skeleton && (this._uuid = t.skeleton.hash);
this.reset();
}
},
_atlasText: "",
atlasText: {
get: function() {
return this._atlasText;
},
set: function(t) {
this._atlasText = t;
this.reset();
}
},
textures: {
default: [],
type: [ cc.Texture2D ]
},
textureNames: {
default: [],
type: [ cc.String ]
},
scale: 1
},
statics: {
preventDeferredLoadDependents: !0,
preventPreloadNativeObject: !0
},
createNode: !1,
reset: function() {
this._skeletonCache = null;
this._atlasCache = null;
0;
},
getRuntimeData: function(t) {
if (this._skeletonCache) return this._skeletonCache;
if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {
t || cc.errorID(7507, this.name);
return null;
}
var e = this._getAtlas(t);
if (!e) return null;
var i = new sp.spine.AtlasAttachmentLoader(e), n = new sp.spine.SkeletonJson(i);
n.scale = this.scale;
var r = this.skeletonJson;
this._skeletonCache = n.readSkeletonData(r);
e.dispose(n);
return this._skeletonCache;
},
getSkinsEnum: !1,
getAnimsEnum: !1,
_getTexture: function(t) {
for (var e = this.textureNames, i = 0; i < e.length; i++) if (e[i] === t) {
var n = this.textures[i], r = new sp.SkeletonTexture({
width: n.width,
height: n.height
});
r.setRealTexture(n);
return r;
}
cc.errorID(7506, t);
return null;
},
_getAtlas: function(t) {
if (this._atlasCache) return this._atlasCache;
if (!this.atlasText) {
t || cc.errorID(7508, this.name);
return null;
}
return this._atlasCache = new sp.spine.TextureAtlas(this.atlasText, this._getTexture.bind(this));
},
destroy: function() {
0;
this._super();
}
});
sp.SkeletonData = e.exports = n;
}), {
"./skeleton-cache": void 0
} ],
265: [ (function(t, e, i) {
sp.SkeletonTexture = cc.Class({
name: "sp.SkeletonTexture",
extends: sp.spine.Texture,
_texture: null,
_material: null,
setRealTexture: function(t) {
this._texture = t;
},
getRealTexture: function() {
return this._texture;
},
setFilters: function(t, e) {
this._texture && this._texture.setFilters(t, e);
},
setWraps: function(t, e) {
this._texture && this._texture.setWrapMode(t, e);
},
dispose: function() {}
});
}), {} ],
266: [ (function(t, e, i) {
var n = t("./Skeleton"), r = t("./lib/spine"), s = t("../../cocos2d/core/renderer"), a = t("../../cocos2d/core/renderer/render-flow"), o = s.renderEngine.gfx, c = t("../../cocos2d/core/renderer/webgl/vertex-format"), h = c.vfmtPosUvColor, l = c.vfmtPosUvTwoColor, u = 0, f = [ 0, 1, 2, 2, 3, 0 ], _ = cc.color(0, 0, 255, 255), d = cc.color(255, 0, 0, 255), p = cc.color(0, 255, 0, 255), m = void 0, g = void 0;
0;
var v = void 0, y = void 0, T = void 0, x = void 0, E = void 0, C = void 0, A = void 0, b = void 0, S = void 0, w = void 0, D = void 0, I = void 0, R = void 0, M = void 0, L = void 0, O = void 0, P = 0, F = 0, N = 0, B = 0, k = 0, z = 0, U = 0, H = void 0, V = void 0, W = void 0, G = void 0, j = void 0, X = void 0, Y = void 0, q = void 0, Z = void 0, K = void 0, J = void 0, Q = void 0, $ = void 0, tt = void 0, et = void 0, it = void 0, nt = void 0, rt = void 0, st = void 0, at = void 0, ot = void 0, ct = void 0, ht = void 0, lt = void 0, ut = void 0, ft = void 0, _t = void 0, dt = void 0;
function pt(t, e) {
var i = void 0, n = void 0;
switch (e) {
case r.BlendMode.Additive:
i = v ? cc.macro.ONE : cc.macro.SRC_ALPHA;
n = cc.macro.ONE;
break;

case r.BlendMode.Multiply:
i = cc.macro.DST_COLOR;
n = cc.macro.ONE_MINUS_SRC_ALPHA;
break;

case r.BlendMode.Screen:
i = cc.macro.ONE;
n = cc.macro.ONE_MINUS_SRC_COLOR;
break;

case r.BlendMode.Normal:
default:
i = v ? cc.macro.ONE : cc.macro.SRC_ALPHA;
n = cc.macro.ONE_MINUS_SRC_ALPHA;
}
var s = !lt.enableBatch, a = t.url + i + n + E + s, c = lt._material;
if (!c) return null;
var h = lt._materialCache, l = h[a];
if (l) {
if (l.texture !== t) {
l.texture = t;
l.updateHash(a);
}
} else {
(l = h[c._hash] ? c.clone() : c).useModel = s;
l.texture = t;
l.useTint = E;
l._mainTech.passes[0].setBlend(o.BLEND_FUNC_ADD, i, n, o.BLEND_FUNC_ADD, i, n);
l.updateHash(a);
h[a] = l;
}
return l;
}
function mt(t) {
at = t.fa * D;
tt = b * (y = v ? at / 255 : 1);
et = S * y;
it = w * y;
nt = t.fr * tt;
rt = t.fg * et;
st = t.fb * it;
I = (at << 24 >>> 0) + (st << 16) + (rt << 8) + nt;
ot = t.dr * tt;
ct = t.dg * et;
ht = t.db * it;
R = ((v ? 255 : 0) << 24 >>> 0) + (ht << 16) + (ct << 8) + ot;
}
var gt = {
updateRenderData: function(t, e) {
var i = t._skeleton;
i && i.updateWorldTransform();
},
fillVertices: function(t, e, i, n, r) {
var s = ut._vData, a = ut._iData, o = ut._uintVData, c = void 0;
m.a = i.a * e.a * t.a * D * 255;
y = v ? m.a : 255;
H = b * e.r * t.r * y;
V = S * e.g * t.g * y;
W = w * e.b * t.b * y;
m.r = H * i.r;
m.g = V * i.g;
m.b = W * i.b;
if (null == r.darkColor) g.set(0, 0, 0, 1); else {
g.r = r.darkColor.r * H;
g.g = r.darkColor.g * V;
g.b = r.darkColor.b * W;
}
g.a = v ? 255 : 0;
if (n.isClipping()) {
var h = s.subarray(N + 2);
n.clipTriangles(s.subarray(N), P, a.subarray(z), k, h, m, g, E, L);
var l = new Float32Array(n.clippedVertices), u = n.clippedTriangles;
k = u.length;
P = l.length / O * L;
c = ut.request(P / L, k);
z = c.indiceOffset, B = c.vertexOffset, N = c.byteOffset >> 2;
s = ut._vData, a = ut._iData;
o = ut._uintVData;
a.set(u, z);
if (E) for (var f = 0, _ = l.length, d = N; f < _; f += 12, d += L) {
s[d] = l[f];
s[d + 1] = l[f + 1];
s[d + 2] = l[f + 6];
s[d + 3] = l[f + 7];
I = (l[f + 5] << 24 >>> 0) + (l[f + 4] << 16) + (l[f + 3] << 8) + l[f + 2];
o[d + 4] = I;
R = (l[f + 11] << 24 >>> 0) + (l[f + 10] << 16) + (l[f + 9] << 8) + l[f + 8];
o[d + 5] = R;
} else for (var p = 0, T = l.length, x = N; p < T; p += 8, x += L) {
s[x] = l[p];
s[x + 1] = l[p + 1];
s[x + 2] = l[p + 6];
s[x + 3] = l[p + 7];
I = (l[p + 5] << 24 >>> 0) + (l[p + 4] << 16) + (l[p + 3] << 8) + l[p + 2];
o[x + 4] = I;
}
} else {
I = (m.a << 24 >>> 0) + (m.b << 16) + (m.g << 8) + m.r;
R = (g.a << 24 >>> 0) + (g.b << 16) + (g.g << 8) + g.r;
if (E) for (var C = N, A = N + P; C < A; C += L) {
o[C + 4] = I;
o[C + 5] = R;
} else for (var M = N, F = N + P; M < F; M += L) o[M + 4] = I;
}
},
realTimeTraverse: function(t) {
var e = void 0, i = void 0, n = lt._skeleton, s = n.color, a = lt._debugRenderer, o = lt._clipper, c = null, h = void 0, l = void 0, u = void 0, m = void 0, g = void 0, v = void 0, y = void 0, b = void 0, S = void 0;
T = lt._startSlotIndex;
x = lt._endSlotIndex;
G = !1;
-1 == T && (G = !0);
C = lt.debugSlots;
A = lt.debugBones;
if (a && (A || C)) {
a.clear();
a.strokeColor = _;
a.lineWidth = 5;
}
O = E ? 12 : 8;
P = 0;
N = 0;
B = 0;
k = 0;
z = 0;
for (var w = 0, D = n.drawOrder.length; w < D; w++) {
S = n.drawOrder[w];
T >= 0 && T == S.data.index && (G = !0);
if (G) {
x >= 0 && x == S.data.index && (G = !1);
P = 0;
k = 0;
if (h = S.getAttachment()) {
v = h instanceof r.RegionAttachment;
y = h instanceof r.MeshAttachment;
if (h instanceof r.ClippingAttachment) o.clipStart(S, h); else if ((v || y) && (c = pt(h.region.texture._texture, S.data.blendMode))) {
if (j || c._hash !== ft.material._hash) {
j = !1;
ft._flush();
ft.node = _t;
ft.material = c;
}
if (v) {
g = f;
P = 4 * L;
k = 6;
b = ut.request(4, 6);
z = b.indiceOffset, B = b.vertexOffset, N = b.byteOffset >> 2;
e = ut._vData, i = ut._iData;
h.computeWorldVertices(S.bone, e, N, L);
if (a && C) {
a.moveTo(e[N], e[N + 1]);
for (var I = N + L, R = N + P; I < R; I += L) a.lineTo(e[I], e[I + 1]);
a.close();
a.stroke();
}
} else if (y) {
g = h.triangles;
P = (h.worldVerticesLength >> 1) * L;
k = g.length;
b = ut.request(P / L, k);
z = b.indiceOffset, B = b.vertexOffset, N = b.byteOffset >> 2;
e = ut._vData, i = ut._iData;
h.computeWorldVertices(S, 0, h.worldVerticesLength, e, N, L);
}
if (0 != P && 0 != k) {
i.set(g, z);
m = h.uvs;
for (var M = N, F = N + P, U = 0; M < F; M += L, U += 2) {
e[M + 2] = m[U];
e[M + 3] = m[U + 1];
}
l = h.color, u = S.color;
this.fillVertices(s, l, u, o, S);
if (k > 0) {
for (var H = z, V = z + k; H < V; H++) i[H] += B;
if (t) {
q = t.m00;
Z = t.m04;
K = t.m12;
J = t.m01;
Q = t.m05;
$ = t.m13;
for (var W = N, tt = N + P; W < tt; W += L) {
X = e[W];
Y = e[W + 1];
e[W] = X * q + Y * Z + K;
e[W + 1] = X * J + Y * Q + $;
}
}
ut.adjust(P / L, k);
}
o.clipEndWithSlot(S);
}
}
}
} else o.clipEndWithSlot(S);
}
o.clipEnd();
if (a && A) {
var et = void 0;
a.strokeColor = d;
a.fillColor = _;
for (var it = 0, nt = n.bones.length; it < nt; it++) {
var rt = (et = n.bones[it]).data.length * et.a + et.worldX, st = et.data.length * et.c + et.worldY;
a.moveTo(et.worldX, et.worldY);
a.lineTo(rt, st);
a.stroke();
a.circle(et.worldX, et.worldY, 2 * Math.PI);
a.fill();
0 === it && (a.fillColor = p);
}
}
},
cacheTraverse: function(t) {
var e = lt._curFrame;
if (e) {
var i = e.segments;
if (0 != i.length) {
var n = void 0, r = void 0, s = void 0, a = void 0, o = void 0, c = e.vertices, h = e.indices, l = e.uintVert, f = 0, _ = 0, d = 0;
if (t) {
q = t.m00;
Z = t.m04;
K = t.m12;
J = t.m01;
Q = t.m05;
$ = t.m13;
}
var p = 0, m = e.colors, g = m[p++], v = g.vfOffset;
mt(g);
for (var y = 0, T = i.length; y < T; y++) {
var x = i[y];
if (a = pt(x.tex, x.blendMode)) {
if (j || a._hash !== ft.material._hash) {
j = !1;
ft._flush();
ft.node = _t;
ft.material = a;
}
F = x.vertexCount;
k = x.indexCount;
P = F * L;
o = ut.request(F, k);
z = o.indiceOffset;
B = o.vertexOffset;
U = o.byteOffset >> 2;
n = ut._vData;
r = ut._iData;
s = ut._uintVData;
for (var C = z, A = z + k; C < A; C++) r[C] = B + h[_++];
d = x.vfCount;
switch (u) {
case 0:
for (var b = U, S = U + P; b < S; ) {
n[b++] = c[f++];
n[b++] = c[f++];
n[b++] = c[f++];
n[b++] = c[f++];
s[b++] = l[f++];
f++;
}
break;

case 1:
n.set(c.subarray(f, f + P), U);
f += P;
break;

case 16:
for (var w = U, D = U + P; w < D; ) {
X = c[f++];
Y = c[f++];
n[w++] = X * q + Y * Z + K;
n[w++] = X * J + Y * Q + $;
n[w++] = c[f++];
n[w++] = c[f++];
s[w++] = l[f++];
f++;
}
break;

case 17:
for (var M = U, O = U + P; M < O; ) {
X = c[f++];
Y = c[f++];
n[M++] = X * q + Y * Z + K;
n[M++] = X * J + Y * Q + $;
n[M++] = c[f++];
n[M++] = c[f++];
s[M++] = l[f++];
s[M++] = l[f++];
}
}
ut.adjust(F, k);
if (dt) for (var N = f - d, H = U + 4, V = U + 4 + P; H < V; H += L, N += 6) {
if (N >= v) {
mt(g = m[p++]);
v = g.vfOffset;
}
s[H] = I;
E && (s[H + 1] = R);
}
}
}
}
}
},
fillBuffers: function(t, e) {
var i = t.node;
i._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
if (t._skeleton) {
var n = i._color;
b = n.r / 255;
S = n.g / 255;
w = n.b / 255;
D = n.a / 255;
E = t.useTint;
M = E ? l : h;
L = E ? 6 : 5;
_t = t.node;
ut = e.getBuffer("spine", M);
ft = e;
lt = t;
j = !0;
v = t.premultipliedAlpha;
y = 1;
u = 0;
dt = !1;
(4294967295 !== n._val || v) && (dt = !0);
E && (u |= 1);
var r = void 0;
if (lt.enableBatch) {
r = _t._worldMatrix;
j = !1;
u |= 16;
}
t.isAnimationCached() ? this.cacheTraverse(r) : this.realTimeTraverse(r);
_t = void 0;
ut = void 0;
ft = void 0;
lt = void 0;
}
}
};
n._assembler = gt;
e.exports = gt;
}), {
"../../cocos2d/core/renderer": 175,
"../../cocos2d/core/renderer/render-flow": 177,
"../../cocos2d/core/renderer/webgl/vertex-format": 206,
"./Skeleton": 262,
"./lib/spine": void 0
} ],
267: [ (function(t, e, i) {
var n = function() {
this.start = null;
this.end = null;
this.complete = null;
this.event = null;
this.interrupt = null;
this.dispose = null;
};
n.getListeners = function(t) {
t.listener || (t.listener = new n());
return t.listener;
};
e.exports = n;
}), {} ],
268: [ (function(i, n, r) {
var s = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window;
s.cc = s.cc || {};
s._cc = s._cc || {};
i("./predefine");
i("./polyfill/string");
i("./polyfill/misc");
i("./polyfill/array");
i("./polyfill/object");
i("./polyfill/array-buffer");
i("./polyfill/number");
i("./polyfill/typescript");
i("./cocos2d/core/predefine");
i("./cocos2d");
i("./extends");
0;
n.exports = s.cc;
}), {
"./cocos2d": 235,
"./cocos2d/core/predefine": 159,
"./extends": 255,
"./package": void 0,
"./polyfill/array": 270,
"./polyfill/array-buffer": 269,
"./polyfill/misc": 271,
"./polyfill/number": 272,
"./polyfill/object": 273,
"./polyfill/string": 274,
"./polyfill/typescript": 275,
"./predefine": 276
} ],
269: [ (function(t, e, i) {
ArrayBuffer.isView || (function() {
var t = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;
ArrayBuffer.isView = function(e) {
return e instanceof t;
};
})();
}), {} ],
270: [ (function(t, e, i) {
Array.isArray || (Array.isArray = function(t) {
return "[object Array]" === Object.prototype.toString.call(t);
});
Array.prototype.find || (Array.prototype.find = function(t) {
for (var e = this.length, i = 0; i < e; i++) {
var n = this[i];
if (t.call(this, n, i, this)) return n;
}
});
}), {} ],
271: [ (function(i, n, r) {
Math.sign || (Math.sign = function(t) {
return 0 === (t = +t) || isNaN(t) ? t : t > 0 ? 1 : -1;
});
Number.isInteger || (Number.isInteger = function(i) {
return "number" === ("object" === (e = typeof i) ? t(i) : e) && isFinite(i) && Math.floor(i) === i;
});
var s = window.performance || Date, a = Object.create(null);
console.time = function(t) {
a[t] = s.now();
};
console.timeEnd = function(t) {
var e = a[t], i = s.now() - e;
console.log(t + ": " + i + "ms");
};
}), {} ],
272: [ (function(t, e, i) {
Number.parseFloat = Number.parseFloat || parseFloat;
Number.parseInt = Number.parseInt || parseInt;
}), {} ],
273: [ (function(t, e, i) {
Object.assign || (Object.assign = function(t, e) {
return cc.js.mixin(t, e);
});
Object.getOwnPropertyDescriptors || (Object.getOwnPropertyDescriptors = function(t) {
for (var e = {}, i = Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t)), n = 0; n < i.length; ++n) {
var r = i[n];
e[r] = Object.getOwnPropertyDescriptor(t, r);
}
return e;
});
}), {} ],
274: [ (function(i, n, r) {
String.prototype.startsWith || (String.prototype.startsWith = function(t, e) {
e = e || 0;
return this.lastIndexOf(t, e) === e;
});
String.prototype.endsWith || (String.prototype.endsWith = function(i, n) {
("undefined" === ("object" === (e = typeof n) ? t(n) : e) || n > this.length) && (n = this.length);
n -= i.length;
var r = this.indexOf(i, n);
return -1 !== r && r === n;
});
}), {} ],
275: [ (function(i, n, r) {
var s = Object.setPrototypeOf || {
__proto__: []
} instanceof Array && function(t, e) {
t.__proto__ = e;
} || function(t, e) {
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
};
window.__extends = function(t, e) {
s(t, e);
function i() {
this.constructor = t;
}
t.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i());
};
window.__assign = Object.assign || function(t) {
for (var e, i = 1, n = arguments.length; i < n; i++) {
e = arguments[i];
for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);
}
return t;
};
window.__rest = function(i, n) {
var r = {};
for (var s in i) Object.prototype.hasOwnProperty.call(i, s) && n.indexOf(s) < 0 && (r[s] = i[s]);
if (null != i && "function" === ("object" === (e = typeof Object.getOwnPropertySymbols) ? t(Object.getOwnPropertySymbols) : e)) {
var a = 0;
for (s = Object.getOwnPropertySymbols(i); a < s.length; a++) n.indexOf(s[a]) < 0 && (r[s[a]] = i[s[a]]);
}
return r;
};
window.__decorate = function(i, n, r, s) {
var a, o = arguments.length, c = o < 3 ? n : null === s ? s = Object.getOwnPropertyDescriptor(n, r) : s;
if ("object" === ("object" === (e = typeof Reflect) ? t(Reflect) : e) && "function" === ("object" === (e = typeof Reflect.decorate) ? t(Reflect.decorate) : e)) c = Reflect.decorate(i, n, r, s); else for (var h = i.length - 1; h >= 0; h--) (a = i[h]) && (c = (o < 3 ? a(c) : o > 3 ? a(n, r, c) : a(n, r)) || c);
return o > 3 && c && Object.defineProperty(n, r, c), c;
};
window.__param = function(t, e) {
return function(i, n) {
e(i, n, t);
};
};
window.__metadata = function(i, n) {
if ("object" === ("object" === (e = typeof Reflect) ? t(Reflect) : e) && "function" === ("object" === (e = typeof Reflect.metadata) ? t(Reflect.metadata) : e)) return Reflect.metadata(i, n);
};
window.__awaiter = function(t, e, i, n) {
return new (i || (i = Promise))(function(r, s) {
function a(t) {
try {
c(n.next(t));
} catch (t) {
s(t);
}
}
function o(t) {
try {
c(n.throw(t));
} catch (t) {
s(t);
}
}
function c(t) {
t.done ? r(t.value) : new i(function(e) {
e(t.value);
}).then(a, o);
}
c((n = n.apply(t, e || [])).next());
});
};
window.__generator = function(i, n) {
var r, s, a, o, c = {
label: 0,
sent: function() {
if (1 & a[0]) throw a[1];
return a[1];
},
trys: [],
ops: []
};
return o = {
next: h(0),
throw: h(1),
return: h(2)
}, "function" === ("object" === (e = typeof Symbol) ? t(Symbol) : e) && (o[Symbol.iterator] = function() {
return this;
}), o;
function h(t) {
return function(e) {
return l([ t, e ]);
};
}
function l(t) {
if (r) throw new TypeError("Generator is already executing.");
for (;c; ) try {
if (r = 1, s && (a = s[2 & t[0] ? "return" : t[0] ? "throw" : "next"]) && !(a = a.call(s, t[1])).done) return a;
(s = 0, a) && (t = [ 0, a.value ]);
switch (t[0]) {
case 0:
case 1:
a = t;
break;

case 4:
c.label++;
return {
value: t[1],
done: !1
};

case 5:
c.label++;
s = t[1];
t = [ 0 ];
continue;

case 7:
t = c.ops.pop();
c.trys.pop();
continue;

default:
if (!(a = c.trys, a = a.length > 0 && a[a.length - 1]) && (6 === t[0] || 2 === t[0])) {
c = 0;
continue;
}
if (3 === t[0] && (!a || t[1] > a[0] && t[1] < a[3])) {
c.label = t[1];
break;
}
if (6 === t[0] && c.label < a[1]) {
c.label = a[1];
a = t;
break;
}
if (a && c.label < a[2]) {
c.label = a[2];
c.ops.push(t);
break;
}
a[2] && c.ops.pop();
c.trys.pop();
continue;
}
t = n.call(i, c);
} catch (e) {
t = [ 6, e ];
s = 0;
} finally {
r = a = 0;
}
if (5 & t[0]) throw t[1];
return {
value: t[0] ? t[1] : void 0,
done: !0
};
}
};
window.__exportStar = function(t, e) {
for (var i in t) e.hasOwnProperty(i) || (e[i] = t[i]);
};
window.__values = function(i) {
var n = "function" === ("object" === (e = typeof Symbol) ? t(Symbol) : e) && i[Symbol.iterator], r = 0;
return n ? n.call(i) : {
next: function() {
i && r >= i.length && (i = void 0);
return {
value: i && i[r++],
done: !i
};
}
};
};
window.__read = function(i, n) {
var r = "function" === ("object" === (e = typeof Symbol) ? t(Symbol) : e) && i[Symbol.iterator];
if (!r) return i;
var s, a, o = r.call(i), c = [];
try {
for (;(void 0 === n || n-- > 0) && !(s = o.next()).done; ) c.push(s.value);
} catch (t) {
a = {
error: t
};
} finally {
try {
s && !s.done && (r = o.return) && r.call(o);
} finally {
if (a) throw a.error;
}
}
return c;
};
window.__spread = function() {
for (var t = [], e = 0; e < arguments.length; e++) t = t.concat(__read(arguments[e]));
return t;
};
window.__await = function(t) {
return this instanceof __await ? (this.v = t, this) : new __await(t);
};
window.__asyncGenerator = function(t, e, i) {
if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
var n, r = i.apply(t, e || []), s = [];
return n = {}, a("next"), a("throw"), a("return"), n[Symbol.asyncIterator] = function() {
return this;
}, n;
function a(t) {
r[t] && (n[t] = function(e) {
return new Promise(function(i, n) {
s.push([ t, e, i, n ]) > 1 || o(t, e);
});
});
}
function o(t, e) {
try {
c(r[t](e));
} catch (t) {
u(s[0][3], t);
}
}
function c(t) {
t.value instanceof __await ? Promise.resolve(t.value.v).then(h, l) : u(s[0][2], t);
}
function h(t) {
o("next", t);
}
function l(t) {
o("throw", t);
}
function u(t, e) {
(t(e), s.shift(), s.length) && o(s[0][0], s[0][1]);
}
};
window.__asyncDelegator = function(t) {
var e, i;
return e = {}, n("next"), n("throw", (function(t) {
throw t;
})), n("return"), e[Symbol.iterator] = function() {
return this;
}, e;
function n(n, r) {
t[n] && (e[n] = function(e) {
return (i = !i) ? {
value: __await(t[n](e)),
done: "return" === n
} : r ? r(e) : e;
});
}
};
window.__asyncValues = function(i) {
if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
var n = i[Symbol.asyncIterator];
return n ? n.call(i) : "function" === ("object" === (e = typeof __values) ? t(__values) : e) ? __values(i) : i[Symbol.iterator]();
};
}), {} ],
276: [ (function(i, n, r) {
var s = "undefined" === ("object" === (e = typeof window) ? t(window) : e) ? global : window;
function a(i, n) {
"undefined" === ("object" === (e = typeof s[i]) ? t(s[i]) : e) && (s[i] = n);
}
a("CC_BUILD", !1);
s.CC_BUILD = !0;
s.CC_TEST = !1;
s.CC_EDITOR = !1;
s.CC_PREVIEW = !1;
s.CC_DEV = !1;
s.CC_DEBUG = !1;
s.CC_JSB = !0;
s.CC_WECHATGAMESUB = !1;
s.CC_WECHATGAME = !1;
s.CC_QQPLAY = !1;
s.CC_RUNTIME = !1;
s.CC_SUPPORT_JIT = !0;
0;
s.CocosEngine = cc.ENGINE_VERSION = "2.0.10";
}), {} ]
}, {}, [ 268 ]);
function t(t) {
return t && t.toString && "[object CallbackConstructor]" === t.toString() ? "function" : "object";
}
var e = "";
})();